[
    {
        "title": "Two Sum",
        "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[2,7,11,15], 9",
                "[3,2,4], 6",
                "[3,3], 6",
                "[-1,-2,-3,-4,-5], -8",
                "[0,0,0,0,0], 0",
                "[1,2,3,4,5], 10",
                "[10,20,30,40,50], 60",
                "[-10,-20,-30,-40,-50], -60",
                "[100,200,300,400,500], 1000",
                "[-100,-200,-300,-400,-500], -1000"
            ],
            "outputs": [
                "[0,1]",
                "[1,2]",
                "[0,1]",
                "[2,4]",
                "[0,1]",
                "[1,4]",
                "[1,3]",
                "[0,2]",
                "[0,4]",
                "[0,2]"
            ]
        }
    },
    null,
    {
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
        "example": "Example 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "\"abcabcbb\"",
                "\"bbbbb\"",
                "\"pwwkew\"",
                "\"\"",
                "\"a\"",
                "\"abcdefg\"",
                "\"aab\"",
                "\"abbac\"",
                "\"abcdeff\"",
                "\"abcabcabc\""
            ],
            "outputs": [
                "3",
                "1",
                "3",
                "0",
                "1",
                "7",
                "2",
                "3",
                "5",
                "3"
            ]
        }
    },
    null,
    {
        "title": "Longest Palindromic Substring",
        "description": "Given a string `s`, find and return the longest palindromic substring in `s`.",
        "example": "Example 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"babad\"",
                "\"cbbd\"",
                "\"a\"",
                "\"ac\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcbafg\"",
                "\"abcdefghijkllkjihgfedcba\""
            ],
            "outputs": [
                "\"bab\"",
                "\"bb\"",
                "\"a\"",
                "\"a\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcba\"",
                "\"abcdefghijkllkjihgfedcba\""
            ]
        }
    },
    {
        "title": "Zigzag Conversion",
        "description": "The string `PAYPALISHIRING` is written in a zigzag pattern on a given number of rows. Write a function `convert` that takes a string and the number of rows as input and returns the string in the zigzag pattern.",
        "example": "Example 1:\n\nInput: s = `PAYPALISHIRING`, numRows = 3\nOutput: `PAHNAPLSIIGYIR`\n\nExample 2:\n\nInput: s = `PAYPALISHIRING`, numRows = 4\nOutput: `PINALSIGYAHRPI`\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\nExample 3:\n\nInput: s = `A`, numRows = 1\nOutput: `A`",
        "level": "Medium",
        "tags": [
            "string",
            "pattern"
        ],
        "test_cases": {
            "inputs": [
                "`PAYPALISHIRING`, 3",
                "`PAYPALISHIRING`, 4",
                "`A`, 1",
                "`HELLO WORLD`, 2",
                "`ABCD`, 2",
                "`ABCD`, 3",
                "`ABCD`, 4",
                "`ABCD`, 5",
                "`ABCD`, 6",
                "`ABCD`, 7"
            ],
            "outputs": [
                "`PAHNAPLSIIGYIR`",
                "`PINALSIGYAHRPI`",
                "`A`",
                "`HLOWRDLOLE`",
                "`ACBD`",
                "`ABDC`",
                "`ABCD`",
                "`ABCD`",
                "`ABCD`",
                "`ABCD`"
            ]
        }
    },
    {
        "title": "Reverse Integer",
        "description": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "example": "Example 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21",
        "level": "Easy",
        "tags": [
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "123",
                "-123",
                "120",
                "0",
                "1",
                "-1",
                "100",
                "-100",
                "2147483647",
                "-2147483648"
            ],
            "outputs": [
                "321",
                "-321",
                "21",
                "0",
                "1",
                "-1",
                "1",
                "-1",
                "0",
                "0"
            ]
        }
    }
]