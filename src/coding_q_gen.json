{
    "1": {
        "title": "Two Sum",
        "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
        "example": "Given an array nums = [2,7,11,15] and target = 9, the output should be [0,1] because nums[0] + nums[1] = 2 + 7 = 9.",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        2,
                        7,
                        11,
                        15
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        3,
                        2,
                        4
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        3,
                        3
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "target": 70
                },
                {
                    "nums": [
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "target": 0
                },
                {
                    "nums": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5
                    ],
                    "target": -8
                },
                {
                    "nums": [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    "target": 600
                },
                {
                    "nums": [
                        1,
                        3,
                        5,
                        7,
                        9
                    ],
                    "target": 12
                },
                {
                    "nums": [
                        2,
                        4,
                        6,
                        8,
                        10
                    ],
                    "target": 14
                },
                {
                    "nums": [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    "target": 14
                },
                {
                    "nums": [
                        5,
                        10,
                        15,
                        20,
                        25
                    ],
                    "target": 30
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "target": 2
                },
                {
                    "nums": [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    "target": 4
                },
                {
                    "nums": [
                        3,
                        6,
                        9,
                        12,
                        15
                    ],
                    "target": 18
                },
                {
                    "nums": [
                        4,
                        8,
                        12,
                        16,
                        20
                    ],
                    "target": 24
                },
                {
                    "nums": [
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "target": 10
                },
                {
                    "nums": [
                        6,
                        12,
                        18,
                        24,
                        30
                    ],
                    "target": 36
                },
                {
                    "nums": [
                        7,
                        14,
                        21,
                        28,
                        35
                    ],
                    "target": 42
                },
                {
                    "nums": [
                        8,
                        16,
                        24,
                        32,
                        40
                    ],
                    "target": 48
                }
            ],
            "outputs": [
                [
                    0,
                    1
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    2
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    2
                ],
                [
                    1,
                    3
                ]
            ]
        }
    },
    "3": {
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
        "example": "Example 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "\"abcabcbb\"",
                "\"bbbbb\"",
                "\"pwwkew\"",
                "\"\"",
                "\"a\"",
                "\"abcdefg\"",
                "\"aab\"",
                "\"abb\"",
                "\"abcabcabc\"",
                "\"abcdeffghijklmnopqrstuvwxyz\""
            ],
            "outputs": [
                "3",
                "1",
                "3",
                "0",
                "1",
                "7",
                "2",
                "2",
                "3",
                "26"
            ]
        }
    },
    "4": {
        "title": "Median of Two Sorted Arrays",
        "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
        "example": "Given nums1 = [1,3] and nums2 = [2], the merged array is [1,2,3] and the median is 2.0.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums1": [
                        1,
                        3
                    ],
                    "nums2": [
                        2
                    ]
                },
                {
                    "nums1": [
                        1,
                        2
                    ],
                    "nums2": [
                        3,
                        4
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        5,
                        9
                    ],
                    "nums2": [
                        3,
                        4,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "nums2": [
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "nums2": [
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "nums2": [
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "nums2": [
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "nums2": [
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "nums2": [
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "nums2": [
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "nums2": [
                        9,
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "nums2": [
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "nums2": [
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "nums2": [
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "nums2": [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    "nums2": [
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    "nums2": [
                        12,
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "nums2": [
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "nums2": [
                        13,
                        14,
                        15,
                        16,
                        17,
                        18
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "nums2": [
                        14,
                        15,
                        16,
                        17,
                        18
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "nums2": [
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ]
                }
            ],
            "outputs": [
                2.0,
                2.5,
                5.5,
                5.5,
                6.0,
                6.0,
                6.5,
                6.5,
                7.0,
                7.0,
                7.5,
                7.5,
                8.0,
                8.0,
                8.5,
                8.5,
                9.0,
                9.0,
                9.5,
                9.5
            ]
        }
    },
    "6": {
        "title": "Zigzag Conversion",
        "description": "The string `PAYPALISHIRING` is written in a zigzag pattern on a given number of rows. Write a function `convert` that takes a string and the number of rows and returns the string in the zigzag pattern.",
        "example": "Example 1:\n\nInput: s = `PAYPALISHIRING`, numRows = 3\nOutput: `PAHNAPLSIIGYIR`\n\nExample 2:\n\nInput: s = `PAYPALISHIRING`, numRows = 4\nOutput: `PINALSIGYAHRPI`\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\nExample 3:\n\nInput: s = `A`, numRows = 1\nOutput: `A`",
        "level": "Medium",
        "tags": [
            "string",
            "pattern"
        ],
        "test_cases": {
            "inputs": [
                "`PAYPALISHIRING`",
                "`PAYPALISHIRING`",
                "`A`",
                "`HELLO`",
                "`WORLD`",
                "`ZIGZAG`",
                "`CONVERSION`",
                "`CODING`",
                "`QUESTION`",
                "`EXAMPLE`",
                "`TEST`",
                "`CASES`",
                "`ZIGZAGCONVERSION`",
                "`STRING`",
                "`PATTERN`",
                "`ALGORITHM`",
                "`PROGRAMMING`",
                "`CHALLENGE`",
                "`SOLUTION`",
                "`LEETCODE`"
            ],
            "outputs": [
                "`PAHNAPLSIIGYIR`",
                "`PINALSIGYAHRPI`",
                "`A`",
                "`HLOEL`",
                "`WDLRO`",
                "`ZGZAI`",
                "`CNOIOTVN`",
                "`CIGDNO`",
                "`QETNUSO`",
                "`EPEXMLA`",
                "`TSET`",
                "`SECA`",
                "`ZGZAIOTNNOVC`",
                "`SRTNI`",
                "`PTNREA`",
                "`AOLGMRITHM`",
                "`PORMGAMRIN`",
                "`CEGELLNAH`",
                "`NIOITULOS`",
                "`ETACODEEL`"
            ]
        }
    },
    "7": {
        "title": "Reverse Integer",
        "description": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "example": "Example 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21",
        "level": "Easy",
        "tags": [
            "Math"
        ],
        "test_cases": {
            "inputs": [
                123,
                -123,
                120,
                0,
                1,
                -1,
                10,
                -10,
                100,
                -100,
                123456789,
                -123456789,
                2147483647,
                -2147483648,
                2147483646,
                -2147483647,
                1534236469,
                -2147483412,
                0,
                987654321
            ],
            "outputs": [
                321,
                -321,
                21,
                0,
                1,
                -1,
                1,
                -1,
                1,
                -1,
                987654321,
                -987654321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                123456789
            ]
        }
    },
    "9": {
        "title": "Palindrome Integer",
        "description": "Given an integer `x`, determine if it is a palindrome. Return `true` if `x` is a palindrome, and `false` otherwise.",
        "example": "Example 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.",
        "level": "Easy",
        "tags": [
            "math"
        ],
        "test_cases": {
            "inputs": [
                121,
                -121,
                10,
                12321,
                1234321,
                123454321,
                12345654321,
                123456654321,
                1234567654321,
                12345677654321,
                123456787654321,
                1234567887654321,
                12345678987654321,
                123456789987654321,
                1234567890987654321,
                12345678900987654321,
                123456789000987654321,
                1234567890000987654321,
                12345678900000987654321,
                123456789000000987654321
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "2": {
        "title": "Add Two Numbers as Linked Lists",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "example": "Example:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
        "level": "Medium",
        "tags": [
            "linked list",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[2,4,3]",
                "[5,6,4]",
                "[0]",
                "[0]",
                "[9,9,9,9,9,9,9]",
                "[9,9,9,9]"
            ],
            "outputs": [
                "[7,0,8]",
                "[0]",
                "[8,9,9,9,0,0,0,1]"
            ]
        }
    },
    "5": {
        "title": "Longest Palindromic Substring",
        "description": "Given a string `s`, find and return the longest palindromic substring in `s`. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them.",
        "example": "Example 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "\"babad\"",
                "\"cbbd\"",
                "\"a\"",
                "\"ac\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcbafg\"",
                "\"abcdefedcbagf\"",
                "\"abacdfgdcaba\"",
                "\"abacdfgdcabba\"",
                "\"abacdfgdcabbaa\"",
                "\"abacdfgdcabbaaa\"",
                "\"abacdfgdcabbaaaa\"",
                "\"abacdfgdcabbaaaaa\"",
                "\"abacdfgdcabbaaaaaa\"",
                "\"abacdfgdcabbaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaaaa\""
            ],
            "outputs": [
                "\"bab\"",
                "\"bb\"",
                "\"a\"",
                "\"a\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"aba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\""
            ]
        }
    },
    "8": {
        "title": "String to Integer (atoi)",
        "description": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n1. Read in and ignore any leading whitespace.\n2. Check if the next character (if not already at the end of the string) is \"-\" or \"+\". Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e. \"123 \" -> 123, \"0032 \" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n5. If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n6. Return the integer as the final result.\n\n**Note:**\n\n- Only the space character \" \" is considered a whitespace character.\n- **Do not ignore** any characters other than the leading whitespace or the rest of the string after the digits.",
        "example": "Example 1:\n\nInput: s = \"42 \"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42 \" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42 \" (no characters read because there is neither a \"-\" nor \"+\")\n         ^\nStep 3: \"42 \" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\n\nExample 2:\n\nInput: s = \"   -42 \"\nOutput: -42\nExplanation: Step 1: \"   -42 \" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42 \" (\"-\" is read, so the result should be negative)\n             ^\nStep 3: \"   -42 \" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n\nExample 3:\n\nInput: s = \"4193 with words \"\nOutput: 4193\nExplanation: Step 1: \"4193 with words \" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words \" (no characters read because there is neither a \"-\" nor \"+\")\n         ^\nStep 3: \"4193 with words \" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing",
            "integer"
        ],
        "test_cases": {
            "inputs": [
                "\"42 \"",
                "\"   -42 \"",
                "\"4193 with words \"",
                "\"words and 987\"",
                "\"-91283472332\"",
                "\"3.14159\"",
                "\"-3.14159\"",
                "\"-1234567890123456789012345678901234567890\"",
                "\"1234567890123456789012345678901234567890\"",
                "\"\"",
                "\"0\"",
                "\"-\"",
                "\"+\"",
                "\"-0\"",
                "\"+0\"",
                "\"-123\"",
                "\"+123\"",
                "\"-000123\"",
                "\"+000123\"",
                "\"-000\"",
                "\"+000\""
            ],
            "outputs": [
                "42",
                "-42",
                "4193",
                "0",
                "-2147483648",
                "3",
                "-3",
                "-2147483648",
                "2147483647",
                "0",
                "0",
                "0",
                "0",
                "0",
                "-123",
                "123",
                "-123",
                "123",
                "0",
                "0"
            ]
        }
    },
    "10": {
        "title": "Regular Expression Matching",
        "description": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n*   `'.'` Matches any single character.\n*   `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).",
        "example": "Example:\n\nInput:\n\ns = \"aa \", p = \"a \"\nOutput:\nfalse\nExplanation:\n\"a \" does not match the entire string \"aa \".",
        "level": "Medium",
        "tags": [
            "string",
            "regular expression",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"aa \", \"a \"",
                "\"aa \", \"a* \"",
                "\"ab \", \".* \"",
                "\"abc \", \"a.c \"",
                "\"aab \", \"c*a*b \"",
                "\"mississippi \", \"mis*is*p*. \"",
                "\"aaa \", \"a*a \"",
                "\"aaa \", \"ab*a*c*a \"",
                "\"a \", \".*..a* \"",
                "\"a \", \"a*a \"",
                "\"a \", \"a* \"",
                "\"a \", \"a. \"",
                "\"a \", \"a.* \"",
                "\"a \", \"a.. \"",
                "\"a \", \"a... \"",
                "\"a \", \"a.... \"",
                "\"a \", \"a..... \"",
                "\"a \", \"a...... \"",
                "\"a \", \"a....... \"",
                "\"a \", \"a........ \""
            ],
            "outputs": [
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "11": {
        "title": "Container With Most Water",
        "description": "Given an integer array `height` of length `n`, where each element represents the height of a vertical line, find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water the container can store.",
        "example": "Example:\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers",
            "Greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    8,
                    6,
                    2,
                    5,
                    4,
                    8,
                    3,
                    7
                ],
                [
                    1,
                    1
                ],
                [
                    4,
                    3,
                    2,
                    1,
                    4
                ],
                [
                    1,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                49,
                1,
                16,
                2,
                6,
                4,
                4,
                25,
                25,
                100,
                100
            ]
        }
    },
    "12": {
        "title": "Convert Integer to Roman Numeral",
        "description": "Given an integer, convert it to a Roman numeral. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. The symbols and their corresponding values are as follows:\n\n`I` - 1\n`V` - 5\n`X` - 10\n`L` - 50\n`C` - 100\n`D` - 500\n`M` - 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used. For example, `IV` represents 4, `IX` represents 9, `XL` represents 40, `XC` represents 90, `CD` represents 400, and `CM` represents 900.\n\nWrite a function `convertToRoman` that takes an integer `num` as input and returns its Roman numeral representation as a string.",
        "example": "Example:\n\nInput:\nnum = 3\n\nOutput:\n\"III\"\n\nExplanation:\n3 is represented as 3 ones.\n\nInput:\nnum = 58\n\nOutput:\n\"LVIII\"\n\nExplanation:\nL = 50, V = 5, III = 3.\n\nInput:\nnum = 1994\n\nOutput:\n\"MCMXCIV\"\n\nExplanation:\nM = 1000, CM = 900, XC = 90, and IV = 4.",
        "level": "Medium",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                3,
                58,
                1994,
                4,
                9,
                40,
                90,
                400,
                900,
                3999,
                1,
                10,
                100,
                1000,
                399,
                444,
                555,
                666,
                777,
                888
            ],
            "outputs": [
                "III",
                "LVIII",
                "MCMXCIV",
                "IV",
                "IX",
                "XL",
                "XC",
                "CD",
                "CM",
                "MMMCMXCIX",
                "I",
                "X",
                "C",
                "M",
                "CCCXCIX",
                "CDXLIV",
                "DLV",
                "DCLXVI",
                "DCCLXXVII",
                "DCCCLXXXVIII"
            ]
        }
    },
    "13": {
        "title": "Roman Numeral to Integer Conversion",
        "description": "Given a Roman numeral, convert it to an integer. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. The symbols and their corresponding values are as follows: \n\n`I` - 1\n`V` - 5\n`X` - 10\n`L` - 50\n`C` - 100\n`D` - 500\n`M` - 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used. For example, `IV` represents 4 (5 - 1) and `IX` represents 9 (10 - 1). The goal is to convert the given Roman numeral into its corresponding integer value.",
        "example": "Example:\n\nInput: \"III\"\nOutput: 3\nExplanation: The Roman numeral \"III\" represents the number 3.\n\nInput: \"LVIII\"\nOutput: 58\nExplanation: The Roman numeral \"LVIII\" represents the number 58. It can be broken down as follows: L (50) + V (5) + III (3).\n\nInput: \"MCMXCIV\"\nOutput: 1994\nExplanation: The Roman numeral \"MCMXCIV\" represents the number 1994. It can be broken down as follows: M (1000) + CM (900) + XC (90) + IV (4).",
        "level": "Easy",
        "tags": [
            "String",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "\"III\"",
                "\"LVIII\"",
                "\"MCMXCIV\"",
                "\"IV\"",
                "\"IX\"",
                "\"XL\"",
                "\"XC\"",
                "\"CD\"",
                "\"CM\"",
                "\"XIV\"",
                "\"XXIX\"",
                "\"XLV\"",
                "\"XCIX\"",
                "\"CDXLIV\"",
                "\"CMXCIX\"",
                "\"MMMCMXCIX\"",
                "\"I\"",
                "\"V\"",
                "\"X\"",
                "\"L\"",
                "\"C\"",
                "\"D\"",
                "\"M\""
            ],
            "outputs": [
                "3",
                "58",
                "1994",
                "4",
                "9",
                "40",
                "90",
                "400",
                "900",
                "14",
                "29",
                "45",
                "99",
                "444",
                "999",
                "3999",
                "1",
                "5",
                "10",
                "50",
                "100",
                "500",
                "1000"
            ]
        }
    },
    "14": {
        "title": "Longest Common Prefix",
        "description": "Write a function that takes an array of strings and returns the longest common prefix string among them. If there is no common prefix, return an empty string.",
        "example": "For example, given the input strs = [\"flower\", \"flow\", \"flight\"], the output should be \"fl\". \n\nExplanation: The longest common prefix among the strings is \"fl\".\n\nGiven the input strs = [\"dog\", \"racecar\", \"car\"], the output should be an empty string. \n\nExplanation: There is no common prefix among the strings.",
        "level": "Easy",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "flower",
                    "flow",
                    "flight"
                ],
                [
                    "dog",
                    "racecar",
                    "car"
                ],
                [
                    "apple",
                    "app",
                    "application"
                ],
                [
                    "coding",
                    "code",
                    "coder"
                ],
                [
                    "hello",
                    "hell",
                    "help"
                ],
                [
                    "prefix",
                    "pre",
                    "preparation"
                ],
                [
                    "",
                    "abc",
                    "def"
                ],
                [
                    "",
                    "",
                    ""
                ],
                [
                    "abc",
                    "abc",
                    "abc"
                ],
                [
                    "abc",
                    "abcd",
                    "abcde"
                ],
                [
                    "abc",
                    "def",
                    "ghi"
                ],
                [
                    "abc",
                    "ab",
                    "a"
                ],
                [
                    "abc",
                    "ab",
                    "abc"
                ],
                [
                    "abc",
                    "ab",
                    "abcd"
                ],
                [
                    "abc",
                    "ab",
                    "abcde"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefgh"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghi"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghij"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghijk"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghijkl"
                ]
            ],
            "outputs": [
                "fl",
                "",
                "app",
                "cod",
                "hel",
                "pre",
                "",
                "",
                "abc",
                "abc",
                "",
                "a",
                "ab",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc"
            ]
        }
    },
    "15": {
        "title": "Triplets with Zero Sum",
        "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.",
        "example": "Example 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-1,0,1,2,-1,-4]",
                "[0,1,1]",
                "[0,0,0]",
                "[-2,0,1,1,2]",
                "[1,2,-2,-1]",
                "[3,0,-2,-1,1,2]",
                "[-1,-1,-1,0,0,0,1,1,1]",
                "[-1,0,1,2,-1,-4,5,6,7,8,9,10]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[1,1,1,1,1,1,1,1,1,1]"
            ],
            "outputs": [
                "[[-1,-1,2],[-1,0,1]]",
                "[]",
                "[[0,0,0]]",
                "[[-2,0,2],[-2,1,1]]",
                "[[-2,-1,3],[-2,0,2],[-1,0,1]]",
                "[[-2,-1,3],[-2,0,2],[-1,0,1]]",
                "[[-1,-1,2],[-1,0,1],[0,0,0]]",
                "[[-1,-1,2],[-1,0,1],[0,0,0]]",
                "[]",
                "[]",
                "[[0,0,0]]",
                "[]"
            ]
        }
    },
    "16": {
        "title": "Closest Three Sum",
        "description": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.",
        "example": "Example:\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-1,2,1,-4], 1",
                "[0,0,0], 1",
                "[1,2,3,4,5], 10",
                "[-10,-5,0,5,10], 0",
                "[1,1,1,1,1], 3",
                "[-1,-2,-3,-4,-5], -10",
                "[10,20,30,40,50], 100",
                "[0,0,0,0,0], 5",
                "[-1,-1,-1,-1,-1], -3",
                "[1,2,3,4,5], -10",
                "[1,2,3,4,5], 15",
                "[1,2,3,4,5], 6",
                "[1,2,3,4,5], 7",
                "[1,2,3,4,5], 8",
                "[1,2,3,4,5], 9",
                "[1,2,3,4,5], 10",
                "[1,2,3,4,5], 11",
                "[1,2,3,4,5], 12",
                "[1,2,3,4,5], 13"
            ],
            "outputs": [
                "2",
                "0",
                "9",
                "0",
                "3",
                "-9",
                "60",
                "0",
                "-3",
                "3",
                "15",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6"
            ]
        }
    },
    "17": {
        "title": "Letter Combinations of a Phone Number",
        "description": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
        "example": "Example:\n\n**Input:** digits = \"23\"\n**Output:** [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\n\n**Input:** digits = \"\"\n**Output:** []\n\n**Input:** digits = \"2\"\n**Output:** [\"a\", \"b\", \"c\"]",
        "level": "Medium",
        "tags": [
            "String",
            "Recursion",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"23\"",
                "\"\"",
                "\"2\"",
                "\"234\"",
                "\"567\"",
                "\"89\"",
                "\"999\"",
                "\"7777\"",
                "\"2222\"",
                "\"3333\"",
                "\"4444\"",
                "\"5555\"",
                "\"6666\"",
                "\"8888\"",
                "\"9999\"",
                "\"222\"",
                "\"333\"",
                "\"444\"",
                "\"555\"",
                "\"666\"",
                "\"777\"",
                "\"888\"",
                "\"999\"",
                "\"2222\"",
                "\"3333\"",
                "\"4444\"",
                "\"5555\"",
                "\"6666\"",
                "\"7777\"",
                "\"8888\"",
                "\"9999\""
            ],
            "outputs": [
                "[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]",
                "[]",
                "[\"a\", \"b\", \"c\"]",
                "[\"adg\", \"adh\", \"adi\", \"aeg\", \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\", \"bdg\", \"bdh\", \"bdi\", \"beg\", \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\", \"cdi\", \"ceg\", \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\"]",
                "[\"jm\", \"jn\", \"jo\", \"km\", \"kn\", \"ko\", \"lm\", \"ln\", \"lo\"]",
                "[\"tw\", \"tx\", \"ty\", \"uw\", \"ux\", \"uy\", \"vw\", \"vx\", \"vy\"]",
                "[\"w\", \"x\", \"y\", \"z\"]",
                "[\"aa\", \"ab\", \"ac\", \"ba\", \"bb\", \"bc\", \"ca\", \"cb\", \"cc\"]",
                "[\"aa\", \"ad\", \"ae\", \"af\", \"ba\", \"bd\", \"be\", \"bf\", \"ca\", \"cd\", \"ce\", \"cf\"]",
                "[\"dd\", \"de\", \"df\", \"ed\", \"ee\", \"ef\", \"fd\", \"fe\", \"ff\"]",
                "[\"gg\", \"gh\", \"gi\", \"hg\", \"hh\", \"hi\", \"ig\", \"ih\", \"ii\"]",
                "[\"jj\", \"jk\", \"jl\", \"kj\", \"kk\", \"kl\", \"lj\", \"lk\", \"ll\"]",
                "[\"pp\", \"pq\", \"pr\", \"ps\", \"qp\", \"qq\", \"qr\", \"qs\", \"rp\", \"rq\", \"rr\", \"rs\", \"sp\", \"sq\", \"sr\", \"ss\"]",
                "[\"tt\", \"tu\", \"tv\", \"ut\", \"uu\", \"uv\", \"vt\", \"vu\", \"vv\"]",
                "[\"ww\", \"wx\", \"wy\", \"wz\", \"xw\", \"xx\", \"xy\", \"xz\", \"yw\", \"yx\", \"yy\", \"yz\", \"zw\", \"zx\", \"zy\", \"zz\"]",
                "[\"aa\", \"ad\", \"ae\", \"af\", \"ba\", \"bd\", \"be\", \"bf\", \"ca\", \"cd\", \"ce\", \"cf\"]",
                "[\"dd\", \"de\", \"df\", \"ed\", \"ee\", \"ef\", \"fd\", \"fe\", \"ff\"]",
                "[\"gg\", \"gh\", \"gi\", \"hg\", \"hh\", \"hi\", \"ig\", \"ih\", \"ii\"]",
                "[\"jj\", \"jk\", \"jl\", \"kj\", \"kk\", \"kl\", \"lj\", \"lk\", \"ll\"]",
                "[\"pp\", \"pq\", \"pr\", \"ps\", \"qp\", \"qq\", \"qr\", \"qs\", \"rp\", \"rq\", \"rr\", \"rs\", \"sp\", \"sq\", \"sr\", \"ss\"]",
                "[\"tt\", \"tu\", \"tv\", \"ut\", \"uu\", \"uv\", \"vt\", \"vu\", \"vv\"]",
                "[\"ww\", \"wx\", \"wy\", \"wz\", \"xw\", \"xx\", \"xy\", \"xz\", \"yw\", \"yx\", \"yy\", \"yz\", \"zw\", \"zx\", \"zy\", \"zz\"]"
            ]
        }
    },
    "19": {
        "title": "Remove Nth Node From End of List",
        "description": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 2
                },
                {
                    "head": [
                        1
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": -1
                },
                {
                    "head": [],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 11
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 3
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 5
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 6
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 0
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 8
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 15
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 16
                }
            ],
            "outputs": [
                [
                    1,
                    2,
                    3,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ]
            ]
        }
    },
    "20": null,
    "21": {
        "title": "Merge Sorted Linked Lists",
        "description": "You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists into one sorted list by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
        "example": "Example 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]",
        "level": "Easy",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,4]",
                "[1,3,4]",
                "[]",
                "[]",
                "[]",
                "[0]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ],
            "outputs": [
                "[1,1,2,3,4,4]",
                "[]",
                "[0]",
                "[]",
                "[0]",
                "[0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]"
            ]
        }
    },
    "22": {
        "title": "Generate All Combinations of Well-Formed Parentheses",
        "description": "Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses. A well-formed parentheses string is defined as a string consisting of opening and closing parentheses '(' and ')', where each opening parenthesis must have a corresponding closing parenthesis and the parentheses pairs must be properly nested. Implement a function `generateParentheses(n: int) -> List[str]` that will take an integer `n` as input and return a list of all possible well-formed parentheses combinations.",
        "example": "Example:\n\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\nInput: n = 1\nOutput: [\"()\"]",
        "level": "Medium",
        "tags": [
            "Recursion",
            "Backtracking",
            "String"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                0
            ],
            "outputs": [
                [
                    "((()))",
                    "(()())",
                    "(())()",
                    "()(())",
                    "()()()"
                ],
                [
                    "()"
                ],
                [
                    "(())",
                    "()()"
                ],
                [
                    "(((())))",
                    "((()()))",
                    "((())())",
                    "((()))()",
                    "(()(()))",
                    "(()()())",
                    "(()())()",
                    "(())(())",
                    "(())()()",
                    "()((()))",
                    "()(()())",
                    "()(())()",
                    "()()(())",
                    "()()()()"
                ],
                []
            ]
        }
    },
    "23": null,
    "24": {
        "title": "Swap Adjacent Nodes in Linked List",
        "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list`s nodes (i.e., only nodes themselves may be changed).",
        "example": "Example:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nInput: head = []\nOutput: []\n\nInput: head = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "linked list",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ]
            ],
            "outputs": [
                [
                    2,
                    1,
                    4,
                    3
                ],
                [],
                [
                    1
                ],
                [
                    2,
                    1,
                    4,
                    3,
                    6,
                    5,
                    8,
                    7,
                    10,
                    9
                ],
                [
                    4,
                    2,
                    8,
                    6,
                    10
                ],
                [
                    3,
                    1,
                    7,
                    5,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    2,
                    1,
                    4,
                    3,
                    6,
                    5,
                    8,
                    7,
                    10,
                    9,
                    12,
                    11,
                    14,
                    13,
                    15
                ],
                [
                    10,
                    5,
                    20,
                    15,
                    30,
                    25,
                    40,
                    35,
                    50,
                    45
                ]
            ]
        }
    },
    "25": {
        "title": "Reverse Linked List in Groups of K",
        "description": "Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return the modified list. If the number of nodes is not a multiple of `k`, the left-out nodes should remain as they are. You may not alter the values in the list's nodes, only nodes themselves may be changed.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExplanation: The linked list is 1 -> 2 -> 3 -> 4 -> 5. We need to reverse the nodes in groups of 2. After reversing, the linked list becomes 2 -> 1 -> 4 -> 3 -> 5.\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\nExplanation: The linked list is 1 -> 2 -> 3 -> 4 -> 5. We need to reverse the nodes in groups of 3. After reversing, the linked list becomes 3 -> 2 -> 1 -> 4 -> 5.",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Reverse",
            "Grouping"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[2,1,4,3,5]",
                "[3,2,1,6,5,4,7,8,9,10]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,19,20]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,25]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58,63,62,61,66,65,64,69,68,67,72,71,70,75,74,73,78,77,76,81,80,79,84,83,82,87,86,85,90,89,88,93,92,91,96,95,94,99,98,97,100]"
            ]
        }
    },
    "26": null,
    "27": {
        "title": "Remove Elements and Count",
        "description": "Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` in-place. The order of the elements may be changed. Then return the number of elements in `nums` which are not equal to `val`.\n\nConsider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:\n\n- Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.\n- Return `k`.",
        "example": "Example:\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2\nExplanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores).",
        "level": "Easy",
        "tags": [
            "array",
            "in-place"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,2,3]",
                "[0,1,2,2,3,0,4,2]",
                "[1,1,1,1,1]",
                "[5,5,5,5,5,5,5,5]",
                "[2,4,6,8,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[]"
            ],
            "outputs": [
                "2",
                "5",
                "0",
                "0",
                "5",
                "10",
                "0"
            ]
        }
    },
    "28": {
        "title": "First Occurrence of Needle in Haystack",
        "description": "Given two strings `needle` and `haystack`, find the index of the first occurrence of `needle` in `haystack`. If `needle` is not part of `haystack`, return -1.",
        "example": "Example:\n\nInput: haystack = \"sadbutsad \", needle = \"sad \"\nOutput: 0\nExplanation: \"sad \" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0.",
        "level": "Easy",
        "tags": [
            "string",
            "search"
        ],
        "test_cases": {
            "inputs": [
                "\"sadbutsad \", \"sad \"",
                "\"leetcode \", \"leeto \"",
                "\"hello world\", \"world\"",
                "\"programming\", \"gram\"",
                "\"abcdefg\", \"xyz\"",
                "\"abcabcabc\", \"abc\"",
                "\"abcde\", \"f\"",
                "\"abcde\", \"\"",
                "\"\", \"abc\"",
                "\"\", \"\"",
                "\"abc\", \"abc\"",
                "\"abc\", \"abcd\"",
                "\"abcd\", \"abc\"",
                "\"abcd\", \"efg\"",
                "\"abcdefg\", \"\"",
                "\"\", \"abcdefg\"",
                "\"abc\", \"abcabcabc\"",
                "\"abcabcabc\", \"abc\"",
                "\"abcabcabc\", \"def\"",
                "\"abcabcabc\", \"abcabcabc\""
            ],
            "outputs": [
                "0",
                "-1",
                "6",
                "3",
                "-1",
                "0",
                "-1",
                "0",
                "-1",
                "0",
                "0",
                "-1",
                "-1",
                "0",
                "-1",
                "-1",
                "0",
                "-1",
                "-1",
                "0"
            ]
        }
    },
    "29": {
        "title": "Integer Division without Using Multiplication, Division, and Mod Operator",
        "description": "Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator. The integer division should truncate toward zero, which means losing its fractional part. Return the quotient after dividing `dividend` by `divisor`. If the quotient is greater than 231 - 1, return 231 - 1. If the quotient is less than -231, return -231.",
        "example": "Example:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.",
        "level": "Medium",
        "tags": [
            "Math",
            "Bit Manipulation"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    3
                ],
                [
                    7,
                    -3
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    100,
                    10
                ],
                [
                    100,
                    -10
                ],
                [
                    123456789,
                    987654321
                ],
                [
                    -123456789,
                    987654321
                ],
                [
                    2147483647,
                    1
                ],
                [
                    2147483647,
                    -1
                ],
                [
                    -2147483648,
                    1
                ],
                [
                    -2147483648,
                    -1
                ],
                [
                    2147483647,
                    2
                ],
                [
                    2147483647,
                    -2
                ],
                [
                    -2147483648,
                    2
                ],
                [
                    -2147483648,
                    -2
                ],
                [
                    2147483647,
                    2147483647
                ],
                [
                    2147483647,
                    -2147483647
                ],
                [
                    -2147483648,
                    2147483647
                ],
                [
                    -2147483648,
                    -2147483647
                ]
            ],
            "outputs": [
                3,
                -2,
                0,
                1,
                10,
                -10,
                0,
                0,
                2147483647,
                -2147483648,
                -2147483648,
                2147483647,
                1073741823,
                -1073741824,
                -1073741824,
                1073741823,
                1,
                -1,
                -1,
                1
            ]
        }
    },
    "30": {
        "title": "Concatenated Substring",
        "description": "You are given a string `s` and an array of strings `words`. All the strings of `words` are of the same length. A concatenated substring in `s` is a substring that contains all the strings of any permutation of `words` concatenated. Return the starting indices of all the concatenated substrings in `s`. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\", \"bar\"]\nOutput: [0, 9]\nExplanation: The substring starting at index 0 is \"barfoo\" which is the concatenation of [\"bar\", \"foo\"]. The substring starting at index 9 is \"foobar\" which is the concatenation of [\"foo\", \"bar\"].\n\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\", \"good\", \"best\", \"word\"]\nOutput: []\nExplanation: There is no substring in s that is the concatenation of any permutation of words.\n\nExample 3:\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\", \"foo\", \"the\"]\nOutput: [6, 9, 12]\nExplanation: The substring starting at index 6 is \"foobarthe\" which is the concatenation of [\"foo\", \"bar\", \"the\"]. The substring starting at index 9 is \"barthefoo\" which is the concatenation of [\"bar\", \"the\", \"foo\"]. The substring starting at index 12 is \"thefoobar\" which is the concatenation of [\"the\", \"foo\", \"bar\"].",
        "level": "Medium",
        "tags": [
            "String",
            "Array",
            "Permutation"
        ],
        "test_cases": {
            "inputs": [
                "\"barfoothefoobarman\", [\"foo\", \"bar\"]",
                "\"wordgoodgoodgoodbestword\", [\"word\", \"good\", \"best\", \"word\"]",
                "\"barfoofoobarthefoobarman\", [\"bar\", \"foo\", \"the\"]",
                "\"abcdefg\", [\"abc\", \"def\", \"g\"]",
                "\"hellohellohello\", [\"hello\", \"hello\"]",
                "\"abcdabcdabcd\", [\"abcd\", \"abcd\", \"abcd\"]",
                "\"foobarfoobar\", [\"foo\", \"bar\"]",
                "\"abcabcabc\", [\"abc\", \"abc\"]",
                "\"xyzxyzxyz\", [\"xyz\", \"xyz\"]",
                "\"aaaabbbbcccc\", [\"aaa\", \"bbb\", \"ccc\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"j\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jkl\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklm\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmn\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmno\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnop\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopq\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopqr\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopqrs\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopqrst\"]"
            ],
            "outputs": [
                "[0, 9]",
                "[]",
                "[6, 9, 12]",
                "[0]",
                "[0, 5]",
                "[0, 4, 8]",
                "[0, 3]",
                "[0, 3, 6]",
                "[0, 3, 6]",
                "[0, 4, 8]",
                "[0, 10, 20]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "31": {
        "title": "Next Permutation",
        "description": "Given an array of integers, find the next lexicographically greater permutation of the array. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). Implement the function `nextPermutation(nums: List[int]) -> None` to find the next permutation in place using constant extra memory.",
        "example": "Example:\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\nExplanation: The next permutation of [1,2,3] is [1,3,2].\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\nExplanation: The next permutation of [3,2,1] is [1,2,3].\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\nExplanation: The next permutation of [1,1,5] is [1,5,1].",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[3,2,1]",
                "[1,1,5]",
                "[1,2,3,4]",
                "[4,3,2,1]",
                "[1,1,1,1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,5,4]",
                "[1,2,4,3,5]",
                "[5,4,3,2,1,0]",
                "[0,1,2,3,4,5]",
                "[1,2,3,4,5,0]",
                "[1,2,3,5,4,0]",
                "[1,2,4,3,5,0]",
                "[5,4,3,2,1,0,9]",
                "[9,8,7,6,5,4,3,2,1,0]",
                "[1,2,3,4,5,0,9]",
                "[1,2,3,5,4,0,9]",
                "[1,2,4,3,5,0,9]"
            ],
            "outputs": [
                "[1,3,2]",
                "[1,2,3]",
                "[1,5,1]",
                "[1,2,4,3]",
                "[1,2,3,4]",
                "[1,1,1,1]",
                "[1,2,3,5,4]",
                "[1,2,3,5,4]",
                "[1,2,4,0,3,5]",
                "[1,2,4,5,3,0]",
                "[0,1,2,3,4,5]",
                "[0,1,2,3,4,5]",
                "[0,1,2,3,5,4]",
                "[0,1,2,3,5,4]",
                "[0,1,2,3,5,4]",
                "[0,1,2,3,5,4,9]",
                "[0,1,2,3,4,5,6,7,8,9]",
                "[0,1,2,3,5,4,9]",
                "[0,1,2,3,5,4,9]",
                "[0,1,2,3,5,4,9]"
            ]
        }
    },
    "32": null,
    "33": {
        "title": "Search in Rotated Sorted Array",
        "description": "You are given an integer array `nums` sorted in ascending order (with **distinct** values). Prior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`. Given the array `nums` **after** the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`. You must write an algorithm with O(log n) runtime complexity.",
        "example": "Example:\n\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\nExplanation: The target element 0 is present at index 4 in the rotated sorted array.\n\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n\nExplanation: The target element 3 is not present in the rotated sorted array.\n\nInput: nums = [1], target = 0\nOutput: -1\n\nExplanation: The target element 0 is not present in the rotated sorted array.",
        "level": "Medium",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[4,5,6,7,0,1,2]",
                "[4,5,6,7,0,1,2]",
                "[1]",
                "[1,3,5]",
                "[3,5,1]",
                "[5,1,3]",
                "[1,3]",
                "[3,1]",
                "[1]",
                "[2]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]"
            ],
            "outputs": [
                "4",
                "-1",
                "-1",
                "0",
                "2",
                "1",
                "0",
                "1",
                "-1",
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10"
            ]
        }
    },
    "34": {
        "title": "Find Target Range",
        "description": "Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with `O(log n)` runtime complexity.",
        "example": "Example:\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nExplanation: The target value 8 is found at index 3 and 4 in the array.\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n\nExplanation: The target value 6 is not found in the array.\n\nInput: nums = [], target = 0\nOutput: [-1,-1]\n\nExplanation: The array is empty, so the target value 0 is not found.",
        "level": "Medium",
        "tags": [
            "array",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                "[5,7,7,8,8,10]",
                "[5,7,7,8,8,10]",
                "[]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ],
            "outputs": [
                "[3,4]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[0,0]",
                "[1,1]",
                "[2,2]",
                "[3,3]",
                "[4,4]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]"
            ]
        }
    },
    "35": {
        "title": "Search Insert Position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.",
        "example": "Example:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExplanation: The target value 5 is found at index 2 in the given array.\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\nExplanation: The target value 2 is not found in the given array. If it were to be inserted, it would be at index 1.\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\nExplanation: The target value 7 is not found in the given array. If it were to be inserted, it would be at index 4.",
        "level": "Easy",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,5,6], 5",
                "[1,3,5,6], 2",
                "[1,3,5,6], 7",
                "[1,3,5,6], 0",
                "[1,3,5,6], 4",
                "[1,3,5,6], 6",
                "[1,3,5,6], 3",
                "[1,3,5,6], 1",
                "[1,3,5,6], 8",
                "[1,3,5,6], -1",
                "[1,3,5,6], 10",
                "[1,3,5,6], -5",
                "[1,3,5,6,8,10], 5",
                "[1,3,5,6,8,10], 2",
                "[1,3,5,6,8,10], 7",
                "[1,3,5,6,8,10], 0",
                "[1,3,5,6,8,10], 4",
                "[1,3,5,6,8,10], 6",
                "[1,3,5,6,8,10], 3",
                "[1,3,5,6,8,10], 1"
            ],
            "outputs": [
                "2",
                "1",
                "4",
                "0",
                "2",
                "3",
                "1",
                "0",
                "6",
                "0",
                "6",
                "0",
                "2",
                "1",
                "4",
                "0",
                "2",
                "3",
                "1",
                "0"
            ]
        }
    },
    "36": null,
    "37": {
        "title": "Sudoku Solver",
        "description": "Write a program to solve a Sudoku puzzle by filling the empty cells. A Sudoku solution must satisfy all of the following rules:\n\n1. Each of the digits `1-9` must occur exactly once in each row.\n2. Each of the digits `1-9` must occur exactly once in each column.\n3. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\nThe '.' character indicates empty cells.",
        "example": "**Example:**\n\n**Input:**\nboard = [\n    [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\n    [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\n    [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\n    [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\n    [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\n    [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\n    [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\n    [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\n    [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]\n]\n**Output:**\n[\n    [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"],\n    [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"],\n    [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"],\n    [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"],\n    [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"],\n    [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"],\n    [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"],\n    [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],\n    [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"]\n]\n**Explanation:** The input board is shown above and the only valid solution is shown below:",
        "level": "Medium",
        "tags": [
            "array",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[[\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],[\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],[\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],[\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],[\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],[\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],[\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],[\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],[\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]]"
            ],
            "outputs": [
                "[[\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"],[\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"],[\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"],[\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"],[\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"],[\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"],[\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"],[\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],[\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"]]"
            ]
        }
    },
    "38": {
        "title": "Count and Say Sequence",
        "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula. Given a positive integer n, return the nth term of the count-and-say sequence.",
        "example": "Example:\n\nInput: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"",
        "level": "Easy",
        "tags": [
            "recursion",
            "string"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                15,
                20,
                25,
                30
            ],
            "outputs": [
                "1",
                "11",
                "21",
                "1211",
                "111221",
                "312211",
                "13112221",
                "1113213211",
                "31131211131221",
                "13211311123113112211",
                "311311222113111231131112132112311321322112111312211312111322212311322113212221",
                "11131221131211131231121113112221121321132132211331222113112211",
                "311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311222112111312211311123113322112111312211312111322212311322113212221",
                "111312211312111312311211131122211213211321322113312221131122111213122112311311222112111312211311123113322112111312211312111322212311322113212221"
            ]
        }
    },
    "39": null,
    "40": null,
    "41": {
        "title": "Smallest Missing Positive Integer",
        "description": "Given an unsorted integer array `nums`, find the smallest missing positive integer. Implement an algorithm that runs in `O(n)` time and uses constant extra space.",
        "example": "Example 1:\n\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n\nExample 2:\n\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n\nExample 3:\n\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    0
                ],
                [
                    3,
                    4,
                    -1,
                    1
                ],
                [
                    7,
                    8,
                    9,
                    11,
                    12
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    -1,
                    -2,
                    -3
                ],
                [
                    0
                ],
                [
                    -1
                ],
                [
                    1
                ],
                [
                    2
                ],
                [
                    3
                ],
                [
                    4
                ],
                [
                    5
                ],
                [
                    6
                ],
                [
                    7
                ],
                [
                    8
                ],
                [
                    9
                ],
                [
                    10
                ]
            ],
            "outputs": [
                3,
                2,
                1,
                6,
                6,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "42": {
        "title": "Trapping Rain Water",
        "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.",
        "example": "Example:\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
        "level": "Medium",
        "tags": [
            "array",
            "two pointers",
            "stack"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1,
                    0,
                    2,
                    1,
                    0,
                    1,
                    3,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    4,
                    2,
                    0,
                    3,
                    2,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    3,
                    1,
                    2,
                    1,
                    3
                ],
                [
                    2,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ],
            "outputs": [
                6,
                9,
                0,
                0,
                0,
                4,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                16,
                16
            ]
        }
    },
    "43": null,
    "44": {
        "title": "Wildcard Pattern Matching",
        "description": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n*   `'?'` Matches any single character.\n*   `'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the **entire** input string (not partial).",
        "example": "Example:\n\n**Input:** s =  \"aa \", p =  \"a \"\n**Output:** false\n**Explanation:**  \"a \" does not match the entire string  \"aa \".",
        "level": "Medium",
        "tags": [
            "string",
            "pattern matching",
            "wildcard"
        ],
        "test_cases": {
            "inputs": [
                "\"aa \", \"a \"",
                "\"aa \", \"* \"",
                "\"cb \", \"?a \"",
                "\"abc \", \"a*c \"",
                "\"abc \", \"a?c \"",
                "\"abc \", \"a?*c \"",
                "\"abc \", \"a?*d \"",
                "\"abc \", \"a?* \"",
                "\"abc \", \"a?*? \"",
                "\"abc \", \"a?*?* \"",
                "\"abc \", \"a?*?*? \"",
                "\"abc \", \"a?*?*?* \"",
                "\"abc \", \"a?*?*?*? \"",
                "\"abc \", \"a?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*?*?*?*? \""
            ],
            "outputs": [
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "45": null,
    "46": {
        "title": "Permutations of Distinct Integers",
        "description": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n\nExample 3:\n\nInput: nums = [1]\nOutput: [[1]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Permutations"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    1
                ],
                [
                    4,
                    5,
                    6,
                    7
                ],
                [
                    -1,
                    0,
                    1
                ],
                [
                    10,
                    20,
                    30
                ],
                [
                    2,
                    4,
                    6,
                    8
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5
                ],
                [
                    3,
                    2,
                    1
                ],
                [
                    100,
                    200,
                    300
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        2,
                        1,
                        3
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        4,
                        5,
                        7,
                        6
                    ],
                    [
                        4,
                        6,
                        5,
                        7
                    ],
                    [
                        4,
                        6,
                        7,
                        5
                    ],
                    [
                        4,
                        7,
                        5,
                        6
                    ],
                    [
                        4,
                        7,
                        6,
                        5
                    ],
                    [
                        5,
                        4,
                        6,
                        7
                    ],
                    [
                        5,
                        4,
                        7,
                        6
                    ],
                    [
                        5,
                        6,
                        4,
                        7
                    ],
                    [
                        5,
                        6,
                        7,
                        4
                    ],
                    [
                        5,
                        7,
                        4,
                        6
                    ],
                    [
                        5,
                        7,
                        6,
                        4
                    ],
                    [
                        6,
                        4,
                        5,
                        7
                    ],
                    [
                        6,
                        4,
                        7,
                        5
                    ],
                    [
                        6,
                        5,
                        4,
                        7
                    ],
                    [
                        6,
                        5,
                        7,
                        4
                    ],
                    [
                        6,
                        7,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        5,
                        4
                    ],
                    [
                        7,
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        4,
                        6,
                        5
                    ],
                    [
                        7,
                        5,
                        4,
                        6
                    ],
                    [
                        7,
                        5,
                        6,
                        4
                    ],
                    [
                        7,
                        6,
                        4,
                        5
                    ],
                    [
                        7,
                        6,
                        5,
                        4
                    ]
                ],
                [
                    [
                        -1,
                        0,
                        1
                    ],
                    [
                        -1,
                        1,
                        0
                    ],
                    [
                        0,
                        -1,
                        1
                    ],
                    [
                        0,
                        1,
                        -1
                    ],
                    [
                        1,
                        -1,
                        0
                    ],
                    [
                        1,
                        0,
                        -1
                    ]
                ],
                [
                    [
                        10,
                        20,
                        30
                    ],
                    [
                        10,
                        30,
                        20
                    ],
                    [
                        20,
                        10,
                        30
                    ],
                    [
                        20,
                        30,
                        10
                    ],
                    [
                        30,
                        10,
                        20
                    ],
                    [
                        30,
                        20,
                        10
                    ]
                ],
                [
                    [
                        2,
                        4,
                        6,
                        8
                    ],
                    [
                        2,
                        4,
                        8,
                        6
                    ],
                    [
                        2,
                        6,
                        4,
                        8
                    ],
                    [
                        2,
                        6,
                        8,
                        4
                    ],
                    [
                        2,
                        8,
                        4,
                        6
                    ],
                    [
                        2,
                        8,
                        6,
                        4
                    ],
                    [
                        4,
                        2,
                        6,
                        8
                    ],
                    [
                        4,
                        2,
                        8,
                        6
                    ],
                    [
                        4,
                        6,
                        2,
                        8
                    ],
                    [
                        4,
                        6,
                        8,
                        2
                    ],
                    [
                        4,
                        8,
                        2,
                        6
                    ],
                    [
                        4,
                        8,
                        6,
                        2
                    ],
                    [
                        6,
                        2,
                        4,
                        8
                    ],
                    [
                        6,
                        2,
                        8,
                        4
                    ],
                    [
                        6,
                        4,
                        2,
                        8
                    ],
                    [
                        6,
                        4,
                        8,
                        2
                    ],
                    [
                        6,
                        8,
                        2,
                        4
                    ],
                    [
                        6,
                        8,
                        4,
                        2
                    ],
                    [
                        8,
                        2,
                        4,
                        6
                    ],
                    [
                        8,
                        2,
                        6,
                        4
                    ],
                    [
                        8,
                        4,
                        2,
                        6
                    ],
                    [
                        8,
                        4,
                        6,
                        2
                    ],
                    [
                        8,
                        6,
                        2,
                        4
                    ],
                    [
                        8,
                        6,
                        4,
                        2
                    ]
                ],
                [
                    [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    [
                        9,
                        8,
                        7,
                        5,
                        6
                    ],
                    [
                        9,
                        8,
                        6,
                        7,
                        5
                    ],
                    [
                        9,
                        8,
                        6,
                        5,
                        7
                    ],
                    [
                        9,
                        8,
                        5,
                        7,
                        6
                    ],
                    [
                        9,
                        8,
                        5,
                        6,
                        7
                    ],
                    [
                        9,
                        7,
                        8,
                        6,
                        5
                    ],
                    [
                        9,
                        7,
                        8,
                        5,
                        6
                    ],
                    [
                        9,
                        7,
                        6,
                        8,
                        5
                    ],
                    [
                        9,
                        7,
                        6,
                        5,
                        8
                    ],
                    [
                        9,
                        7,
                        5,
                        8,
                        6
                    ],
                    [
                        9,
                        7,
                        5,
                        6,
                        8
                    ],
                    [
                        9,
                        6,
                        8,
                        7,
                        5
                    ],
                    [
                        9,
                        6,
                        8,
                        5,
                        7
                    ],
                    [
                        9,
                        6,
                        7,
                        8,
                        5
                    ],
                    [
                        9,
                        6,
                        7,
                        5,
                        8
                    ],
                    [
                        9,
                        6,
                        5,
                        8,
                        7
                    ],
                    [
                        9,
                        6,
                        5,
                        7,
                        8
                    ],
                    [
                        9,
                        5,
                        8,
                        7,
                        6
                    ],
                    [
                        9,
                        5,
                        8,
                        6,
                        7
                    ],
                    [
                        9,
                        5,
                        7,
                        8,
                        6
                    ],
                    [
                        9,
                        5,
                        7,
                        6,
                        8
                    ],
                    [
                        9,
                        5,
                        6,
                        8,
                        7
                    ],
                    [
                        9,
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        8,
                        9,
                        7,
                        6,
                        5
                    ],
                    [
                        8,
                        9,
                        7,
                        5,
                        6
                    ],
                    [
                        8,
                        9,
                        6,
                        7,
                        5
                    ],
                    [
                        8,
                        9,
                        6,
                        5,
                        7
                    ],
                    [
                        8,
                        9,
                        5,
                        7,
                        6
                    ],
                    [
                        8,
                        9,
                        5,
                        6,
                        7
                    ],
                    [
                        8,
                        7,
                        9,
                        6,
                        5
                    ],
                    [
                        8,
                        7,
                        9,
                        5,
                        6
                    ],
                    [
                        8,
                        7,
                        6,
                        9,
                        5
                    ],
                    [
                        8,
                        7,
                        6,
                        5,
                        9
                    ],
                    [
                        8,
                        7,
                        5,
                        9,
                        6
                    ],
                    [
                        8,
                        7,
                        5,
                        6,
                        9
                    ],
                    [
                        8,
                        6,
                        9,
                        7,
                        5
                    ],
                    [
                        8,
                        6,
                        9,
                        5,
                        7
                    ],
                    [
                        8,
                        6,
                        7,
                        9,
                        5
                    ],
                    [
                        8,
                        6,
                        7,
                        5,
                        9
                    ],
                    [
                        8,
                        6,
                        5,
                        9,
                        7
                    ],
                    [
                        8,
                        6,
                        5,
                        7,
                        9
                    ],
                    [
                        8,
                        5,
                        9,
                        7,
                        6
                    ],
                    [
                        8,
                        5,
                        9,
                        6,
                        7
                    ],
                    [
                        8,
                        5,
                        7,
                        9,
                        6
                    ],
                    [
                        8,
                        5,
                        7,
                        6,
                        9
                    ],
                    [
                        8,
                        5,
                        6,
                        9,
                        7
                    ],
                    [
                        8,
                        5,
                        6,
                        7,
                        9
                    ],
                    [
                        7,
                        9,
                        8,
                        6,
                        5
                    ],
                    [
                        7,
                        9,
                        8,
                        5,
                        6
                    ],
                    [
                        7,
                        9,
                        6,
                        8,
                        5
                    ],
                    [
                        7,
                        9,
                        6,
                        5,
                        8
                    ],
                    [
                        7,
                        9,
                        5,
                        8,
                        6
                    ],
                    [
                        7,
                        9,
                        5,
                        6,
                        8
                    ],
                    [
                        7,
                        8,
                        9,
                        6,
                        5
                    ],
                    [
                        7,
                        8,
                        9,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        6,
                        9,
                        5
                    ],
                    [
                        7,
                        8,
                        6,
                        5,
                        9
                    ],
                    [
                        7,
                        8,
                        5,
                        9,
                        6
                    ],
                    [
                        7,
                        8,
                        5,
                        6,
                        9
                    ],
                    [
                        7,
                        6,
                        9,
                        8,
                        5
                    ],
                    [
                        7,
                        6,
                        9,
                        5,
                        8
                    ],
                    [
                        7,
                        6,
                        8,
                        9,
                        5
                    ],
                    [
                        7,
                        6,
                        8,
                        5,
                        9
                    ],
                    [
                        7,
                        6,
                        5,
                        9,
                        8
                    ],
                    [
                        7,
                        6,
                        5,
                        8,
                        9
                    ],
                    [
                        7,
                        5,
                        9,
                        8,
                        6
                    ],
                    [
                        7,
                        5,
                        9,
                        6,
                        8
                    ],
                    [
                        7,
                        5,
                        8,
                        9,
                        6
                    ],
                    [
                        7,
                        5,
                        8,
                        6,
                        9
                    ],
                    [
                        7,
                        5,
                        6,
                        9,
                        8
                    ],
                    [
                        7,
                        5,
                        6,
                        8,
                        9
                    ],
                    [
                        6,
                        9,
                        8,
                        7,
                        5
                    ],
                    [
                        6,
                        9,
                        8,
                        5,
                        7
                    ],
                    [
                        6,
                        9,
                        7,
                        8,
                        5
                    ],
                    [
                        6,
                        9,
                        7,
                        5,
                        8
                    ],
                    [
                        6,
                        9,
                        5,
                        8,
                        7
                    ],
                    [
                        6,
                        9,
                        5,
                        7,
                        8
                    ],
                    [
                        6,
                        8,
                        9,
                        7,
                        5
                    ],
                    [
                        6,
                        8,
                        9,
                        5,
                        7
                    ],
                    [
                        6,
                        8,
                        7,
                        9,
                        5
                    ],
                    [
                        6,
                        8,
                        7,
                        5,
                        9
                    ],
                    [
                        6,
                        8,
                        5,
                        9,
                        7
                    ],
                    [
                        6,
                        8,
                        5,
                        7,
                        9
                    ],
                    [
                        6,
                        7,
                        9,
                        8,
                        5
                    ],
                    [
                        6,
                        7,
                        9,
                        5,
                        8
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        5,
                        9
                    ],
                    [
                        6,
                        7,
                        5,
                        9,
                        8
                    ],
                    [
                        6,
                        7,
                        5,
                        8,
                        9
                    ],
                    [
                        6,
                        5,
                        9,
                        8,
                        7
                    ],
                    [
                        6,
                        5,
                        9,
                        7,
                        8
                    ],
                    [
                        6,
                        5,
                        8,
                        9,
                        7
                    ],
                    [
                        6,
                        5,
                        8,
                        7,
                        9
                    ],
                    [
                        6,
                        5,
                        7,
                        9,
                        8
                    ],
                    [
                        6,
                        5,
                        7,
                        8,
                        9
                    ],
                    [
                        5,
                        9,
                        8,
                        7,
                        6
                    ],
                    [
                        5,
                        9,
                        8,
                        6,
                        7
                    ],
                    [
                        5,
                        9,
                        7,
                        8,
                        6
                    ],
                    [
                        5,
                        9,
                        7,
                        6,
                        8
                    ],
                    [
                        5,
                        9,
                        6,
                        8,
                        7
                    ],
                    [
                        5,
                        9,
                        6,
                        7,
                        8
                    ],
                    [
                        5,
                        8,
                        9,
                        7,
                        6
                    ],
                    [
                        5,
                        8,
                        9,
                        6,
                        7
                    ],
                    [
                        5,
                        8,
                        7,
                        9,
                        6
                    ],
                    [
                        5,
                        8,
                        7,
                        6,
                        9
                    ],
                    [
                        5,
                        8,
                        6,
                        9,
                        7
                    ],
                    [
                        5,
                        8,
                        6,
                        7,
                        9
                    ],
                    [
                        5,
                        7,
                        9,
                        8,
                        6
                    ],
                    [
                        5,
                        7,
                        9,
                        6,
                        8
                    ],
                    [
                        5,
                        7,
                        8,
                        9,
                        6
                    ],
                    [
                        5,
                        7,
                        8,
                        6,
                        9
                    ],
                    [
                        5,
                        7,
                        6,
                        9,
                        8
                    ],
                    [
                        5,
                        7,
                        6,
                        8,
                        9
                    ],
                    [
                        5,
                        6,
                        9,
                        8,
                        7
                    ],
                    [
                        5,
                        6,
                        9,
                        7,
                        8
                    ],
                    [
                        5,
                        6,
                        8,
                        9,
                        7
                    ],
                    [
                        5,
                        6,
                        8,
                        7,
                        9
                    ],
                    [
                        5,
                        6,
                        7,
                        9,
                        8
                    ],
                    [
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        3,
                        2,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        2,
                        1,
                        3
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        1,
                        2,
                        3
                    ]
                ],
                [
                    [
                        100,
                        200,
                        300
                    ],
                    [
                        100,
                        300,
                        200
                    ],
                    [
                        200,
                        100,
                        300
                    ],
                    [
                        200,
                        300,
                        100
                    ],
                    [
                        300,
                        100,
                        200
                    ],
                    [
                        300,
                        200,
                        100
                    ]
                ]
            ]
        }
    },
    "47": {
        "title": "Unique Permutations with Duplicates",
        "description": "Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.",
        "example": "Example 1:\n\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    2
                ],
                [
                    1,
                    1,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        1,
                        2
                    ],
                    [
                        1,
                        2,
                        1
                    ],
                    [
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        2,
                        1,
                        3
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        2
                    ],
                    [
                        2,
                        1,
                        2
                    ],
                    [
                        2,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2,
                        2
                    ],
                    [
                        1,
                        2,
                        1,
                        2
                    ],
                    [
                        1,
                        2,
                        2,
                        1
                    ],
                    [
                        2,
                        1,
                        1,
                        2
                    ],
                    [
                        2,
                        1,
                        2,
                        1
                    ],
                    [
                        2,
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        4,
                        3
                    ],
                    [
                        1,
                        3,
                        2,
                        4
                    ],
                    [
                        1,
                        3,
                        4,
                        2
                    ],
                    [
                        1,
                        4,
                        2,
                        3
                    ],
                    [
                        1,
                        4,
                        3,
                        2
                    ],
                    [
                        2,
                        1,
                        3,
                        4
                    ],
                    [
                        2,
                        1,
                        4,
                        3
                    ],
                    [
                        2,
                        3,
                        1,
                        4
                    ],
                    [
                        2,
                        3,
                        4,
                        1
                    ],
                    [
                        2,
                        4,
                        1,
                        3
                    ],
                    [
                        2,
                        4,
                        3,
                        1
                    ],
                    [
                        3,
                        1,
                        2,
                        4
                    ],
                    [
                        3,
                        1,
                        4,
                        2
                    ],
                    [
                        3,
                        2,
                        1,
                        4
                    ],
                    [
                        3,
                        2,
                        4,
                        1
                    ],
                    [
                        3,
                        4,
                        1,
                        2
                    ],
                    [
                        3,
                        4,
                        2,
                        1
                    ],
                    [
                        4,
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        1,
                        3,
                        2
                    ],
                    [
                        4,
                        2,
                        1,
                        3
                    ],
                    [
                        4,
                        2,
                        3,
                        1
                    ],
                    [
                        4,
                        3,
                        1,
                        2
                    ],
                    [
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        8,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8,
                        7,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        5,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        5,
                        8,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        7,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        7,
                        8,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        8,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        8,
                        7,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        5,
                        8,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        6,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        6,
                        8,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        8,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        8,
                        6,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        5,
                        7,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        6,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        6,
                        7,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        7,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        7,
                        6,
                        5
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ]
                ]
            ]
        }
    },
    "48": {
        "title": "Rotate Image",
        "description": "You are given an `n x n` 2D `matrix` representing an image. Rotate the image by **90** degrees (clockwise) in-place.",
        "example": "Example:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "in-place"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22],[23,24,25,26,27,28,29,30,31,32,33],[34,35,36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53,54,55],[56,57,58,59,60,61,62,63,64,65,66],[67,68,69,70,71,72,73,74,75,76,77],[78,79,80,81,82,83,84,85,86,87,88],[89,90,91,92,93,94,95,96,97,98,99],[100,101,102,103,104,105,106,107,108,109,110],[111,112,113,114,115,116,117,118,119,120,121]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81,82,83,84],[85,86,87,88,89,90,91,92,93,94,95,96],[97,98,99,100,101,102,103,104,105,106,107,108],[109,110,111,112,113,114,115,116,117,118,119,120],[121,122,123,124,125,126,127,128,129,130,131,132],[133,134,135,136,137,138,139,140,141,142,143,144]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35,36,37,38,39],[40,41,42,43,44,45,46,47,48,49,50,51,52],[53,54,55,56,57,58,59,60,61,62,63,64,65],[66,67,68,69,70,71,72,73,74,75,76,77,78],[79,80,81,82,83,84,85,86,87,88,89,90,91],[92,93,94,95,96,97,98,99,100,101,102,103,104],[105,106,107,108,109,110,111,112,113,114,115,116,117],[118,119,120,121,122,123,124,125,126,127,128,129,130],[131,132,133,134,135,136,137,138,139,140,141,142,143],[144,145,146,147,148,149,150,151,152,153,154,155,156],[157,158,159,160,161,162,163,164,165,166,167,168,169]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27,28],[29,30,31,32,33,34,35,36,37,38,39,40,41,42],[43,44,45,46,47,48,49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80,81,82,83,84],[85,86,87,88,89,90,91,92,93,94,95,96,97,98],[99,100,101,102,103,104,105,106,107,108,109,110,111,112],[113,114,115,116,117,118,119,120,121,122,123,124,125,126],[127,128,129,130,131,132,133,134,135,136,137,138,139,140],[141,142,143,144,145,146,147,148,149,150,151,152,153,154],[155,156,157,158,159,160,161,162,163,164,165,166,167,168,169],[170,171,172,173,174,175,176,177,178,179,180,181,182,183],[184,185,186,187,188,189,190,191,192,193,194,195,196,197]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],[106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],[121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],[136,137,138,139,140,141,142,143,144,145,146,147,148,149,150],[151,152,153,154,155,156,157,158,159,160,161,162,163,164,165],[166,167,168,169,170,171,172,173,174,175,176,177,178,179,180],[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195],[196,197,198,199,200,201,202,203,204,205,206,207,208,209,210],[211,212,213,214,215,216,217,218,219,220,221,222,223,224,225]]"
            ],
            "outputs": [
                "[[7,4,1],[8,5,2],[9,6,3]]",
                "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
                "[[1]]",
                "[[3,1],[4,2]]",
                "[[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]",
                "[[21,16,11,6,1],[22,17,12,7,2],[23,18,13,8,3],[24,19,14,9,4],[25,20,15,10,5]]",
                "[[31,25,19,13,7,1],[32,26,20,14,8,2],[33,27,21,15,9,3],[34,28,22,16,10,4],[35,29,23,17,11,5],[36,30,24,18,12,6]]",
                "[[49,42,35,28,21,14,7],[50,43,36,29,22,15,8],[51,44,37,30,23,16,9],[52,45,38,31,24,17,10],[53,46,39,32,25,18,11],[54,47,40,33,26,19,12],[55,48,41,34,27,20,13]]",
                "[[64,57,50,43,36,29,22,15],[65,58,51,44,37,30,23,16],[66,59,52,45,38,31,24,17],[67,60,53,46,39,32,25,18],[68,61,54,47,40,33,26,19],[69,62,55,48,41,34,27,20],[70,63,56,49,42,35,28,21],[71,64,57,50,43,36,29,22]]",
                "[[81,73,65,57,49,41,33,25,17,9],[82,74,66,58,50,42,34,26,18,10],[83,75,67,59,51,43,35,27,19,11],[84,76,68,60,52,44,36,28,20,12],[85,77,69,61,53,45,37,29,21,13],[86,78,70,62,54,46,38,30,22,14],[87,79,71,63,55,47,39,31,23,15],[88,80,72,64,56,48,40,32,24,16]]",
                "[[100,91,82,73,64,55,46,37,28,19,10],[101,92,83,74,65,56,47,38,29,20,11],[102,93,84,75,66,57,48,39,30,21,12],[103,94,85,76,67,58,49,40,31,22,13],[104,95,86,77,68,59,50,41,32,23,14],[105,96,87,78,69,60,51,42,33,24,15],[106,97,88,79,70,61,52,43,34,25,16],[107,98,89,80,71,62,53,44,35,26,17],[108,99,90,81,72,63,54,45,36,27,18],[109,100,91,82,73,64,55,46,37,28,19]]",
                "[[121,111,101,91,81,71,61,51,41,31,21,11],[122,112,102,92,82,72,62,52,42,32,22,12],[123,113,103,93,83,73,63,53,43,33,23,13],[124,114,104,94,84,74,64,54,44,34,24,14],[125,115,105,95,85,75,65,55,45,35,25,15],[126,116,106,96,86,76,66,56,46,36,26,16],[127,117,107,97,87,77,67,57,47,37,27,17],[128,118,108,98,88,78,68,58,48,38,28,18],[129,119,109,99,89,79,69,59,49,39,29,19],[130,120,110,100,90,80,70,60,50,40,30,20],[131,121,111,101,91,81,71,61,51,41,31,21]]",
                "[[144,133,122,111,100,89,78,67,56,45,34,23,12],[145,134,123,112,101,90,79,68,57,46,35,24,13],[146,135,124,113,102,91,80,69,58,47,36,25,14],[147,136,125,114,103,92,81,70,59,48,37,26,15],[148,137,126,115,104,93,82,71,60,49,38,27,16],[149,138,127,116,105,94,83,72,61,50,39,28,17],[150,139,128,117,106,95,84,73,62,51,40,29,18],[151,140,129,118,107,96,85,74,63,52,41,30,19],[152,141,130,119,108,97,86,75,64,53,42,31,20],[153,142,131,120,109,98,87,76,65,54,43,32,21],[154,143,132,121,110,99,88,77,66,55,44,33,22],[155,144,133,122,111,100,89,78,67,56,45,34,23]]",
                "[[169,157,145,133,121,109,97,85,73,61,49,37,25,13],[170,158,146,134,122,110,98,86,74,62,50,38,26,14],[171,159,147,135,123,111,99,87,75,63,51,39,27,15],[172,160,148,136,124,112,100,88,76,64,52,40,28,16],[173,161,149,137,125,113,101,89,77,65,53,41,29,17],[174,162,150,138,126,114,102,90,78,66,54,42,30,18],[175,163,151,139,127,115,103,91,79,67,55,43,31,19],[176,164,152,140,128,116,104,92,80,68,56,44,32,20],[177,165,153,141,129,117,105,93,81,69,57,45,33,21],[178,166,154,142,130,118,106,94,82,70,58,46,34,22],[179,167,155,143,131,119,107,95,83,71,59,47,35,23],[180,168,156,144,132,120,108,96,84,72,60,48,36,24],[181,169,157,145,133,121,109,97,85,73,61,49,37,25]]",
                "[[196,183,170,157,144,131,118,105,92,79,66,53,40,27,14],[197,184,171,158,145,132,119,106,93,80,67,54,41,28,15],[198,185,172,159,146,133,120,107,94,81,68,55,42,29,16],[199,186,173,160,147,134,121,108,95,82,69,56,43,30,17],[200,187,174,161,148,135,122,109,96,83,70,57,44,31,18],[201,188,175,162,149,136,123,110,97,84,71,58,45,32,19],[202,189,176,163,150,137,124,111,98,85,72,59,46,33,20],[203,190,177,164,151,138,125,112,99,86,73,60,47,34,21],[204,191,178,165,152,139,126,113,100,87,74,61,48,35,22],[205,192,179,166,153,140,127,114,101,88,75,62,49,36,23],[206,193,180,167,154,141,128,115,102,89,76,63,50,37,24],[207,194,181,168,155,142,129,116,103,90,77,64,51,38,25],[208,195,182,169,156,143,130,117,104,91,78,65,52,39,26]]",
                "[[225,210,195,180,165,150,135,120,105,90,75,60,45,30,15],[226,211,196,181,166,151,136,121,106,91,76,61,46,31,16],[227,212,197,182,167,152,137,122,107,92,77,62,47,32,17],[228,213,198,183,168,153,138,123,108,93,78,63,48,33,18],[229,214,199,184,169,154,139,124,109,94,79,64,49,34,19],[230,215,200,185,170,155,140,125,110,95,80,65,50,35,20],[231,216,201,186,171,156,141,126,111,96,81,66,51,36,21],[232,217,202,187,172,157,142,127,112,97,82,67,52,37,22],[233,218,203,188,173,158,143,128,113,98,83,68,53,38,23],[234,219,204,189,174,159,144,129,114,99,84,69,54,39,24],[235,220,205,190,175,160,145,130,115,100,85,70,55,40,25],[236,221,206,191,176,161,146,131,116,101,86,71,56,41,26],[237,222,207,192,177,162,147,132,117,102,87,72,57,42,27],[238,223,208,193,178,163,148,133,118,103,88,73,58,43,28],[239,224,209,194,179,164,149,134,119,104,89,74,59,44,29]]"
            ]
        }
    },
    "49": {
        "title": "Group Anagrams",
        "description": "Given an array of strings `strs`, group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return the groups of anagrams in any order.",
        "example": "Example:\n\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n\nInput: strs = [\"\"]\nOutput: [[\"\"]]\n\nInput: strs = [\"a\"]\nOutput: [[\"a\"]]",
        "level": "Easy",
        "tags": [
            "Array",
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                "[\"\"]",
                "[\"a\"]",
                "[\"abc\",\"cba\",\"bca\",\"def\",\"fed\",\"edf\"]",
                "[\"cat\",\"dog\",\"tac\",\"god\",\"act\"]",
                "[\"abcd\",\"dcba\",\"efgh\",\"hgfe\",\"ijkl\",\"lkji\"]",
                "[\"abcd\",\"dcba\",\"efgh\",\"hgfe\",\"ijkl\",\"lkji\",\"mnop\",\"opnm\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"acb\",\"dfe\",\"gih\",\"jlk\",\"omn\",\"qpr\",\"tsu\",\"vxw\",\"zyx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"acb\",\"dfe\",\"gih\",\"jlk\",\"omn\",\"qpr\",\"tsu\",\"vxw\",\"zyx\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"acb\",\"dfe\",\"gih\",\"jlk\",\"omn\",\"qpr\",\"tsu\",\"vxw\",\"zyx\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"cba\",\"fed\",\"ihg\",\"klj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\"]"
            ],
            "outputs": [
                "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
                "[[\"\"]]",
                "[[\"a\"]]",
                "[[\"abc\",\"cba\",\"bca\"],[\"def\",\"fed\",\"edf\"]]",
                "[[\"cat\",\"tac\",\"act\"],[\"dog\",\"god\"]]",
                "[[\"abcd\",\"dcba\"],[\"efgh\",\"hgfe\"],[\"ijkl\",\"lkji\"]]",
                "[[\"abcd\",\"dcba\"],[\"efgh\",\"hgfe\"],[\"ijkl\",\"lkji\"],[\"mnop\",\"opnm\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"acb\"],[\"dfe\"],[\"gih\"],[\"jlk\"],[\"omn\"],[\"qpr\"],[\"tsu\"],[\"vxw\"],[\"zyx\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"acb\"],[\"dfe\"],[\"gih\"],[\"jlk\"],[\"omn\"],[\"qpr\"],[\"tsu\"],[\"vxw\"],[\"zyx\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"acb\"],[\"dfe\"],[\"gih\"],[\"jlk\"],[\"omn\"],[\"qpr\"],[\"tsu\"],[\"vxw\"],[\"zyx\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"klj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"]]"
            ]
        }
    },
    "50": {
        "title": "Power Function",
        "description": "Write a function `power(x, n)` that calculates `x` raised to the power `n` (i.e., `x^n`). Implement the function using the given description.",
        "example": "Example:\n\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2^-2 = 1/2^2 = 1/4 = 0.25",
        "level": "Medium",
        "tags": [
            "math",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "x": 2.0,
                    "n": 10
                },
                {
                    "x": 2.1,
                    "n": 3
                },
                {
                    "x": 2.0,
                    "n": -2
                },
                {
                    "x": 0.5,
                    "n": 0
                },
                {
                    "x": 10.0,
                    "n": 5
                },
                {
                    "x": 3.0,
                    "n": 4
                },
                {
                    "x": 1.5,
                    "n": 7
                },
                {
                    "x": 4.0,
                    "n": -3
                },
                {
                    "x": 0.0,
                    "n": 10
                },
                {
                    "x": 1.0,
                    "n": 100
                },
                {
                    "x": -2.0,
                    "n": 5
                },
                {
                    "x": -3.0,
                    "n": 3
                },
                {
                    "x": -1.5,
                    "n": 6
                },
                {
                    "x": -4.0,
                    "n": -2
                },
                {
                    "x": 0.5,
                    "n": -3
                },
                {
                    "x": 1.0,
                    "n": 0
                },
                {
                    "x": 2.0,
                    "n": 1
                },
                {
                    "x": 3.0,
                    "n": 0
                },
                {
                    "x": 4.0,
                    "n": 1
                },
                {
                    "x": 5.0,
                    "n": 2
                }
            ],
            "outputs": [
                1024.0,
                9.261,
                0.25,
                1.0,
                100000.0,
                81.0,
                133.875,
                -0.015625,
                0.0,
                1.0,
                -32.0,
                -27.0,
                64.5,
                0.0625,
                8.0,
                1.0,
                2.0,
                1.0,
                4.0,
                25.0
            ]
        }
    },
    "51": {
        "title": "N-Queens Puzzle",
        "description": "The N-Queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the N-Queens puzzle. Each solution contains a distinct board configuration of the N-Queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",
        "example": "Example:\n\nInput: n = 4\nOutput: [['.Q..', '...Q', 'Q...', '..Q.'], ['..Q.', 'Q...', '...Q', '.Q..']]\nExplanation: There exist two distinct solutions to the 4-Queens puzzle as shown above.",
        "level": "Medium",
        "tags": [
            "backtracking",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                4,
                1,
                2,
                3,
                5
            ],
            "outputs": [
                [
                    [
                        ".Q..",
                        "...Q",
                        "Q...",
                        "..Q."
                    ],
                    [
                        "..Q.",
                        "Q...",
                        "...Q",
                        ".Q.."
                    ]
                ],
                [
                    [
                        "Q"
                    ]
                ],
                [],
                [],
                []
            ]
        }
    },
    "52": {
        "title": "N-Queens Puzzle Solutions",
        "description": "The N-Queens puzzle is a classic problem of placing N queens on an N x N chessboard such that no two queens can attack each other. Given an integer N, your task is to calculate the number of distinct solutions to the N-Queens puzzle.",
        "example": "Example:\n\nInput: N = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-Queens puzzle as shown below:\n\nSolution 1:\n\n. Q . .\n. . . Q\nQ . . .\n. . Q .\n\nSolution 2:\n\n. . Q .\nQ . . .\n. . . Q\n. Q . .",
        "level": "Medium",
        "tags": [
            "backtracking",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                4,
                1,
                2,
                3,
                5,
                6,
                7,
                8,
                9
            ],
            "outputs": [
                2,
                1,
                0,
                0,
                10,
                4,
                40,
                92,
                352
            ]
        }
    },
    "53": null,
    "54": {
        "title": "Spiral Matrix",
        "description": "Given an `m x n` matrix, return all elements of the matrix in spiral order.",
        "example": "Example 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nExample 2:\n\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "spiral"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]",
                "[[1,2,3,4,5,6,7,8,9,10]]",
                "[[1],[2],[3],[4],[5]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]]"
            ],
            "outputs": [
                "[1,2,3,6,9,8,7,4,5]",
                "[1,2,3,4,8,12,11,10,9,5,6,7]",
                "[1,2,3,4,5,10,15,20,19,18,17,16,11,6,7,8,9,14,13,12]",
                "[1,2,3,6,9,12,11,10,7,4,5,8]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,4,6,8,10,9,7,5,3]",
                "[1,2,3,4,5,10,15,14,13,12,11,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,29,28,27,26,25,24,23,22,21]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,39,38,37,36,35,34,33,32,31,21,22,23,24,25,26,27,28,29]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,49,48,47,46,45,44,43,42,41,31,21,22,23,24,25,26,27,28,29,39,38,37,36,35,34,33,32]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,59,58,57,56,55,54,53,52,51,41,31,21,22,23,24,25,26,27,28,29,39,49,48,47,46,45,44,43,42,32,33,34,35,36,37,38]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,69,68,67,66,65,64,63,62,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,58,57,56,55,54,53,52,42,32,33,34,35,36,37,38,48,47,46,45,44,43]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,79,78,77,76,75,74,73,72,71,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,69,68,67,66,65,64,63,62,52,42,32,33,34,35,36,37,38,48,58,57,56,55,54,53,43,44,45,46,47]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,90,89,88,87,86,85,84,83,82,81,71,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,69,79,78,77,76,75,74,73,72,62,52,42,32,33,34,35,36,37,38,48,58,68,67,66,65,64,63,53,43,44,45,46,47,57,56,55,54]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,90,100,99,98,97,96,95,94,93,92,91,81,71,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,69,79,89,88,87,86,85,84,83,82,72,62,52,42,32,33,34,35,36,37,38,48,58,68,78,77,76,75,74,73,63,53,43,44,45,46,47,57,67,66,65,64,54,55,56]"
            ]
        }
    },
    "55": null,
    "56": {
        "title": "Merge Overlapping Intervals",
        "description": "Given an array of intervals where each interval is represented as [start, end], merge all overlapping intervals and return an array of non-overlapping intervals that cover all the intervals in the input.",
        "example": "Example 1:\n\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\nExample 2:\n\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3],[2,6],[8,10],[15,18]]",
                "[[1,4],[4,5]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,10],[2,9],[3,8],[4,7]]",
                "[[1,5],[2,3],[4,6],[7,8]]",
                "[[1,3],[4,6],[7,9],[10,12]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,5],[2,3],[4,6],[7,8],[9,10]]",
                "[[1,3],[2,4],[5,7],[6,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]"
            ],
            "outputs": [
                "[[1,6],[8,10],[15,18]]",
                "[[1,5]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,10]]",
                "[[1,6],[7,8]]",
                "[[1,3],[4,6],[7,9],[10,12]]",
                "[[1,5]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,6],[7,8],[9,10]]",
                "[[1,4],[5,8]]",
                "[[1,6]]",
                "[[1,7]]",
                "[[1,8]]",
                "[[1,9]]",
                "[[1,10]]",
                "[[1,11]]",
                "[[1,12]]",
                "[[1,13]]",
                "[[1,14]]",
                "[[1,15]]"
            ]
        }
    },
    "57": {
        "title": "Insert Interval",
        "description": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn `intervals` after the insertion.",
        "example": "Example:\n\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]"
            ],
            "outputs": [
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]"
            ]
        }
    },
    "58": {
        "title": "Length of Last Word",
        "description": "Given a string `s` consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.",
        "example": "Example 1:\n\nInput: s = \"Hello World \"\nOutput: 5\nExplanation: The last word is \"World \" with length 5.",
        "level": "Easy",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"Hello World \"",
                "\"   fly me   to   the moon   \"",
                "\"luffy is still joyboy \"",
                "\"This is a test\"",
                "\"Coding is fun\"",
                "\"  Hello  \"",
                "\"  Hello World\"",
                "\"Hello World\"",
                "\"Hello\"",
                "\"\"",
                "\"   \"",
                "\"a\"",
                "\"a b\"",
                "\"a b c\"",
                "\"a b c d\"",
                "\"a b c d e\"",
                "\"a b c d e f\"",
                "\"a b c d e f g\"",
                "\"a b c d e f g h\"",
                "\"a b c d e f g h i\""
            ],
            "outputs": [
                5,
                4,
                6,
                4,
                3,
                5,
                5,
                5,
                5,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "59": {
        "title": "Spiral Matrix",
        "description": "Given a positive integer `n`, generate an `n x n` matrix filled with elements from `1` to `n2` in spiral order.",
        "example": "Example 1:\n\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix"
        ],
        "test_cases": {
            "inputs": [
                3,
                4,
                5,
                1,
                2,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20
            ],
            "outputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        8,
                        9,
                        4
                    ],
                    [
                        7,
                        6,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        12,
                        13,
                        14,
                        5
                    ],
                    [
                        11,
                        16,
                        15,
                        6
                    ],
                    [
                        10,
                        9,
                        8,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        16,
                        17,
                        18,
                        19,
                        6
                    ],
                    [
                        15,
                        24,
                        25,
                        20,
                        7
                    ],
                    [
                        14,
                        23,
                        22,
                        21,
                        8
                    ],
                    [
                        13,
                        12,
                        11,
                        10,
                        9
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        4,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        8,
                        9,
                        4
                    ],
                    [
                        7,
                        6,
                        5
                    ],
                    [
                        12,
                        11,
                        10
                    ],
                    [
                        13,
                        14,
                        15
                    ],
                    [
                        18,
                        17,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        8
                    ],
                    [
                        23,
                        40,
                        41,
                        42,
                        43,
                        30,
                        9
                    ],
                    [
                        22,
                        39,
                        48,
                        49,
                        44,
                        31,
                        10
                    ],
                    [
                        21,
                        38,
                        47,
                        46,
                        45,
                        32,
                        11
                    ],
                    [
                        20,
                        37,
                        36,
                        35,
                        34,
                        33,
                        12
                    ],
                    [
                        19,
                        18,
                        17,
                        16,
                        15,
                        14,
                        13
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        10
                    ],
                    [
                        31,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        40,
                        11
                    ],
                    [
                        30,
                        55,
                        72,
                        73,
                        74,
                        75,
                        62,
                        41,
                        12
                    ],
                    [
                        29,
                        54,
                        71,
                        80,
                        81,
                        76,
                        63,
                        42,
                        13
                    ],
                    [
                        28,
                        53,
                        70,
                        79,
                        78,
                        77,
                        64,
                        43,
                        14
                    ],
                    [
                        27,
                        52,
                        69,
                        68,
                        67,
                        66,
                        65,
                        44,
                        15
                    ],
                    [
                        26,
                        51,
                        50,
                        49,
                        48,
                        47,
                        46,
                        45,
                        16
                    ],
                    [
                        25,
                        24,
                        23,
                        22,
                        21,
                        20,
                        19,
                        18,
                        17
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        11
                    ],
                    [
                        35,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        45,
                        12
                    ],
                    [
                        34,
                        63,
                        84,
                        85,
                        86,
                        87,
                        88,
                        71,
                        46,
                        13
                    ],
                    [
                        33,
                        62,
                        83,
                        96,
                        97,
                        98,
                        89,
                        72,
                        47,
                        14
                    ],
                    [
                        32,
                        61,
                        82,
                        95,
                        100,
                        99,
                        90,
                        73,
                        48,
                        15
                    ],
                    [
                        31,
                        60,
                        81,
                        94,
                        93,
                        92,
                        91,
                        74,
                        49,
                        16
                    ],
                    [
                        30,
                        59,
                        80,
                        79,
                        78,
                        77,
                        76,
                        75,
                        50,
                        17
                    ],
                    [
                        29,
                        58,
                        57,
                        56,
                        55,
                        54,
                        53,
                        52,
                        51,
                        18
                    ],
                    [
                        28,
                        27,
                        26,
                        25,
                        24,
                        23,
                        22,
                        21,
                        20,
                        19
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        12
                    ],
                    [
                        39,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        50,
                        13
                    ],
                    [
                        38,
                        71,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        80,
                        51,
                        14
                    ],
                    [
                        37,
                        70,
                        95,
                        120,
                        121,
                        122,
                        123,
                        102,
                        81,
                        52,
                        15
                    ],
                    [
                        36,
                        69,
                        94,
                        119,
                        132,
                        133,
                        124,
                        103,
                        82,
                        53,
                        16
                    ],
                    [
                        35,
                        68,
                        93,
                        118,
                        131,
                        134,
                        125,
                        104,
                        83,
                        54,
                        17
                    ],
                    [
                        34,
                        67,
                        92,
                        117,
                        130,
                        135,
                        126,
                        105,
                        84,
                        55,
                        18
                    ],
                    [
                        33,
                        66,
                        91,
                        116,
                        129,
                        136,
                        127,
                        106,
                        85,
                        56,
                        19
                    ],
                    [
                        32,
                        65,
                        90,
                        115,
                        128,
                        137,
                        128,
                        107,
                        86,
                        57,
                        20
                    ],
                    [
                        31,
                        64,
                        89,
                        114,
                        113,
                        112,
                        111,
                        110,
                        109,
                        108,
                        21
                    ],
                    [
                        30,
                        63,
                        88,
                        87,
                        86,
                        85,
                        84,
                        83,
                        82,
                        81,
                        22
                    ],
                    [
                        29,
                        62,
                        61,
                        60,
                        59,
                        58,
                        57,
                        56,
                        55,
                        54,
                        23
                    ],
                    [
                        28,
                        27,
                        26,
                        25,
                        24,
                        23,
                        22,
                        21,
                        20,
                        19,
                        18
                    ],
                    [
                        17,
                        16,
                        15,
                        14,
                        13,
                        12,
                        11,
                        10,
                        9,
                        8,
                        7
                    ],
                    [
                        36,
                        35,
                        34,
                        33,
                        32,
                        31,
                        30,
                        29,
                        28,
                        27,
                        26
                    ],
                    [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        25
                    ],
                    [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        24
                    ],
                    [
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        23
                    ],
                    [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        22
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        21
                    ],
                    [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        20
                    ],
                    [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        19
                    ],
                    [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        18
                    ],
                    [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        17
                    ],
                    [
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        16
                    ],
                    [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        15
                    ],
                    [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        14
                    ],
                    [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        13
                    ],
                    [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        12
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        11
                    ],
                    [
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        10
                    ],
                    [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        9
                    ],
                    [
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        8
                    ],
                    [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        7
                    ],
                    [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        6
                    ],
                    [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        5
                    ],
                    [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        4
                    ],
                    [
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        3
                    ],
                    [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        2
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        1
                    ]
                ]
            ]
        }
    },
    "60": {
        "title": "Permutation Sequence",
        "description": "Given a set of numbers from 1 to n, the set contains a total of n! unique permutations. By listing and labeling all of the permutations in order, we get a sequence. Given n and k, return the kth permutation sequence.",
        "example": "For example, given n = 3 and k = 3, the set of permutations is [\"123\", \"132\", \"213\", \"231\", \"312\", \"321\"]. The 3rd permutation is \"213\", so the output would be \"213\".",
        "level": "Medium",
        "tags": [
            "Math",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    3
                ],
                [
                    4,
                    9
                ],
                [
                    3,
                    1
                ],
                [
                    5,
                    24
                ],
                [
                    6,
                    720
                ],
                [
                    9,
                    362880
                ],
                [
                    9,
                    362879
                ]
            ],
            "outputs": [
                "213",
                "2314",
                "123",
                "54321",
                "654321",
                "987654321",
                "987654312"
            ]
        }
    },
    "61": {
        "title": "Rotate Linked List",
        "description": "Given the `head` of a linked list, rotate the list to the right by `k` places.",
        "example": "Example:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]",
        "level": "Medium",
        "tags": [
            "linked list",
            "rotation"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 2
                },
                {
                    "head": [
                        0,
                        1,
                        2
                    ],
                    "k": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 5
                },
                {
                    "head": [],
                    "k": 2
                },
                {
                    "head": [
                        1
                    ],
                    "k": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 500
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 1000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 2000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 2000000001
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -500
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -1000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -2000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -2000000001
                }
            ],
            "outputs": [
                [
                    4,
                    5,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    4,
                    5,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ]
        }
    },
    "62": {
        "title": "Unique Paths in a Grid",
        "description": "A robot is located at the top-left corner of an `m x n` grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Given the dimensions of the grid, return the number of possible unique paths that the robot can take to reach the bottom-right corner.",
        "example": "Example:\n\nInput: m = 3, n = 7\nOutput: 28\n\nExplanation: From the top-left corner, there are a total of 28 unique paths to reach the bottom-right corner.\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 unique paths to reach the bottom-right corner: Right -> Down -> Down, Down -> Down -> Right, Down -> Right -> Down",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    7
                ],
                [
                    3,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    5,
                    5
                ],
                [
                    10,
                    10
                ],
                [
                    100,
                    1
                ],
                [
                    1,
                    100
                ],
                [
                    50,
                    50
                ],
                [
                    100,
                    100
                ],
                [
                    2,
                    5
                ],
                [
                    5,
                    2
                ],
                [
                    4,
                    3
                ],
                [
                    3,
                    4
                ],
                [
                    6,
                    7
                ],
                [
                    7,
                    6
                ],
                [
                    8,
                    8
                ],
                [
                    9,
                    9
                ],
                [
                    10,
                    5
                ],
                [
                    5,
                    10
                ]
            ],
            "outputs": [
                28,
                3,
                1,
                2,
                70,
                48620,
                1,
                1,
                204190544,
                22750883079422934966181954039568885395604168260154104734000,
                10,
                10,
                10,
                10,
                792,
                792,
                3432,
                48620,
                252,
                252
            ]
        }
    },
    "63": null,
    "64": {
        "title": "Minimum Path Sum",
        "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.",
        "example": "Example:\n\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "path finding"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        3,
                        1
                    ],
                    [
                        1,
                        5,
                        1
                    ],
                    [
                        4,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        9,
                        10,
                        11,
                        12
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        0
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ]
            ],
            "outputs": [
                7,
                12,
                30,
                9,
                0,
                55,
                110,
                1,
                0,
                4
            ]
        }
    },
    "65": {
        "title": "Valid Number",
        "description": "Given a string `s`, determine if it is a valid number. A valid number can be split into components in a specific order: a decimal number or an integer, followed by an optional 'e' or 'E' followed by an integer. A decimal number can have an optional sign character ('+' or '-'), followed by one of the following formats: one or more digits followed by a dot '.', one or more digits followed by a dot '.' and one or more digits, or a dot '.' followed by one or more digits. An integer can have an optional sign character followed by one or more digits. Return true if the given string is a valid number, otherwise return false.",
        "example": "Example:\n\nInput: \"0 \"\nOutput: true\n\nInput: \"e \"\nOutput: false\n\nInput: \". \"\nOutput: false\n\nExplanation:\n\nIn the first example, the string \"0 \" is a valid number as it is an integer.\n\nIn the second example, the string \"e \" is not a valid number as it does not have any components.\n\nIn the third example, the string \". \" is not a valid number as it does not have any components.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"2 \"",
                "\"0089 \"",
                "\"-0.1 \"",
                "\"+3.14 \"",
                "\"4. \"",
                "\"-.9 \"",
                "\"2e10 \"",
                "\"-90E3 \"",
                "\"3e+7 \"",
                "\"+6e-1 \"",
                "\"53.5e93 \"",
                "\"-123.456e789 \"",
                "\"abc \"",
                "\"1a \"",
                "\"1e \"",
                "\"e3 \"",
                "\"99e2.5 \"",
                "\"--6 \"",
                "\"-+3 \"",
                "\"95a54e53 \""
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "66": null,
    "67": null,
    "68": {
        "title": "Text Justification",
        "description": "Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words.",
        "example": "Example 1:\n\nInput: words = [\"This \",  \"is \",  \"an \",  \"example \",  \"of \",  \"text \",  \"justification. \"], maxWidth = 16\nOutput:\n[\"This    is    an \", \"example  of text \", \"justification.   \"]\n\nExample 2:\n\nInput: words = [\"What \", \"must \", \"be \", \"acknowledgment \", \"shall \", \"be \"], maxWidth = 16\nOutput:\n[\"What   must   be \", \"acknowledgment   \", \"shall be         \"]\n\nExample 3:\n\nInput: words = [\"Science \", \"is \", \"what \", \"we \", \"understand \", \"well \", \"enough \", \"to \", \"explain \", \"to \", \"a \", \"computer. \", \"Art \", \"is \", \"everything \", \"else \", \"we \", \"do \"], maxWidth = 20\nOutput:\n[\"Science  is  what we \", \"understand      well \", \"enough to explain to \", \"a  computer.  Art is \", \"everything  else  we \", \"do                   \"]",
        "level": "Medium",
        "tags": [
            "string",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                {
                    "words": [
                        "This ",
                        "is ",
                        "an ",
                        "example ",
                        "of ",
                        "text ",
                        "justification. "
                    ],
                    "maxWidth": 16
                },
                {
                    "words": [
                        "What ",
                        "must ",
                        "be ",
                        "acknowledgment ",
                        "shall ",
                        "be "
                    ],
                    "maxWidth": 16
                },
                {
                    "words": [
                        "Science ",
                        "is ",
                        "what ",
                        "we ",
                        "understand ",
                        "well ",
                        "enough ",
                        "to ",
                        "explain ",
                        "to ",
                        "a ",
                        "computer. ",
                        "Art ",
                        "is ",
                        "everything ",
                        "else ",
                        "we ",
                        "do "
                    ],
                    "maxWidth": 20
                }
            ],
            "outputs": [
                [
                    "This    is    an ",
                    "example  of text ",
                    "justification.   "
                ],
                [
                    "What   must   be ",
                    "acknowledgment   ",
                    "shall be         "
                ],
                [
                    "Science  is  what we ",
                    "understand      well ",
                    "enough to explain to ",
                    "a  computer.  Art is ",
                    "everything  else  we ",
                    "do                   "
                ]
            ]
        }
    },
    "69": {
        "title": "Square Root Rounded Down",
        "description": "Given a non-negative integer `x`, you need to find the square root of `x` rounded down to the nearest integer. The returned integer should be non-negative. You must not use any built-in exponent function or operator.",
        "example": "Example:\n\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.",
        "level": "Easy",
        "tags": [
            "Math",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                0,
                1,
                2,
                3,
                4,
                8,
                9,
                16,
                25,
                36,
                49,
                64,
                81,
                100,
                121,
                144,
                169,
                196,
                225,
                256
            ],
            "outputs": [
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16
            ]
        }
    },
    "70": {
        "title": "Distinct Ways to Climb Stairs",
        "description": "You are climbing a staircase that takes `n` steps to reach the top. Each time, you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?",
        "example": "For example, if `n` is 2, there are two ways to climb to the top: 1 step + 1 step or 2 steps. Therefore, the output would be 2.\n\n",
        "level": "Easy",
        "tags": [
            "dynamic programming",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                2,
                3,
                4,
                5,
                6,
                10,
                15,
                20,
                25,
                30,
                35,
                40,
                45
            ],
            "outputs": [
                2,
                3,
                5,
                8,
                13,
                89,
                987,
                10946,
                121393,
                1346269,
                14930352,
                165580141,
                1836311903
            ]
        }
    },
    "71": {
        "title": "Simplified Canonical Path",
        "description": "Given an absolute path to a file or directory in a Unix-style file system, convert it to the simplified canonical path. In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names. The canonical path should have the following format: \n\n- The path starts with a single slash '/'. \n- Any two directories are separated by a single slash '/'. \n- The path does not end with a trailing '/'. \n- The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..').",
        "example": "Example:\n\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"/home/\"",
                "\"/../\"",
                "\"/home//foo/\"",
                "\"/a/./b/../../c/\"",
                "\"/a//b////c/d//././/..\"",
                "\"/a/../../b/../c//.//\"",
                "\"/a//b////c/d//././/..\"",
                "\"/a/../../b/../c//.//\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\""
            ],
            "outputs": [
                "\"/home\"",
                "\"/\"",
                "\"/home/foo\"",
                "\"/c\"",
                "\"/a/b/c\"",
                "\"/c\"",
                "\"/a/b/c\"",
                "\"/c\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\""
            ]
        }
    },
    "72": {
        "title": "Minimum Edit Distance",
        "description": "Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word: Insert a character, Delete a character, Replace a character.",
        "example": "Example:\n\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: horse -> rorse (replace 'h' with 'r'), rorse -> rose (remove 'r'), rose -> ros (remove 'e')",
        "level": "Medium",
        "tags": [
            "Dynamic Programming",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "horse",
                    "ros"
                ],
                [
                    "intention",
                    "execution"
                ],
                [
                    "kitten",
                    "sitting"
                ],
                [
                    "abc",
                    "def"
                ],
                [
                    "abcdef",
                    "abcdef"
                ],
                [
                    "abcdef",
                    "fedcba"
                ],
                [
                    "abcdef",
                    "abc"
                ],
                [
                    "abc",
                    "abcdef"
                ],
                [
                    "",
                    ""
                ],
                [
                    "abc",
                    ""
                ],
                [
                    "",
                    "abc"
                ],
                [
                    "a",
                    "a"
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "a",
                    ""
                ],
                [
                    "",
                    "a"
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    "abcdefghijklmnopqrstuvwxyz"
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    "zyxwvutsrqponmlkjihgfedcba"
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    "abc"
                ],
                [
                    "abc",
                    "abcdefghijklmnopqrstuvwxyz"
                ],
                [
                    "abc",
                    "cba"
                ]
            ],
            "outputs": [
                3,
                5,
                3,
                3,
                0,
                6,
                3,
                3,
                0,
                3,
                3,
                0,
                1,
                1,
                1,
                0,
                0,
                23,
                23,
                23,
                2
            ]
        }
    },
    "73": null,
    "74": {
        "title": "Search in Sorted Matrix",
        "description": "You are given an `m x n` integer matrix `matrix` with the following two properties:\n\n* Each row is sorted in non-decreasing order.\n* The first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer `target`, return `true` if `target` is in `matrix` or `false` otherwise.\n\nYou must write a solution in `O(log(m * n))` time complexity.",
        "example": "Example:\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false",
        "level": "Medium",
        "tags": [
            "array",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]"
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "75": {
        "title": "Sort Colors",
        "description": "Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.",
        "example": "Example:\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nInput: nums = [2,0,1]\nOutput: [0,1,2]",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    0,
                    2,
                    1,
                    1,
                    0
                ],
                [
                    2,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    2,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    0
                ],
                [
                    2,
                    0,
                    1,
                    0,
                    2,
                    1
                ],
                [
                    1,
                    0,
                    2,
                    0,
                    1,
                    2
                ],
                [
                    2,
                    1,
                    0,
                    1,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    2,
                    2,
                    1,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2,
                    2,
                    1,
                    0
                ],
                [
                    2,
                    1,
                    0,
                    0,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    0,
                    0,
                    2,
                    1
                ],
                [
                    0,
                    2,
                    1,
                    1,
                    0,
                    2
                ]
            ],
            "outputs": [
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ]
            ]
        }
    },
    "76": {
        "title": "Minimum Window Substring",
        "description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, find the minimum window substring of `s` that contains all the characters from `t`. If there is no such substring, return an empty string.",
        "example": "Example 1:\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "two pointers"
        ],
        "test_cases": {
            "inputs": [
                [
                    "ADOBECODEBANC",
                    "ABC"
                ],
                [
                    "a",
                    "a"
                ],
                [
                    "a",
                    "aa"
                ],
                [
                    "ab",
                    "a"
                ],
                [
                    "ab",
                    "b"
                ],
                [
                    "abc",
                    "ab"
                ],
                [
                    "abc",
                    "ac"
                ],
                [
                    "abc",
                    "abc"
                ],
                [
                    "abc",
                    "abcd"
                ],
                [
                    "aabbcc",
                    "abc"
                ],
                [
                    "aabbcc",
                    "abcc"
                ],
                [
                    "aabbcc",
                    "aabbcc"
                ],
                [
                    "aabbcc",
                    "aabbccd"
                ],
                [
                    "aabbcc",
                    "aabbccdd"
                ],
                [
                    "aabbcc",
                    "aabbccdde"
                ],
                [
                    "aabbcc",
                    "aabbccddeeff"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffg"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffgg"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffggh"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffgghi"
                ]
            ],
            "outputs": [
                "BANC",
                "a",
                "",
                "a",
                "b",
                "ab",
                "abc",
                "abc",
                "",
                "aabbcc",
                "abcc",
                "aabbcc",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
            ]
        }
    },
    "77": {
        "title": "Combinations of K Numbers",
        "description": "Given two integers `n` and `k`, return all possible combinations of `k` numbers chosen from the range `[1, n]`. You may return the answer in any order.",
        "example": "Example:\n\nInput: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    5,
                    3
                ],
                [
                    10,
                    4
                ],
                [
                    3,
                    2
                ],
                [
                    8,
                    1
                ],
                [
                    20,
                    5
                ],
                [
                    2,
                    2
                ],
                [
                    6,
                    4
                ],
                [
                    15,
                    3
                ],
                [
                    7,
                    1
                ],
                [
                    12,
                    2
                ],
                [
                    18,
                    6
                ],
                [
                    9,
                    3
                ],
                [
                    11,
                    1
                ],
                [
                    14,
                    4
                ],
                [
                    19,
                    2
                ],
                [
                    13,
                    5
                ],
                [
                    16,
                    3
                ],
                [
                    17,
                    1
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        4
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        2,
                        4
                    ],
                    [
                        1,
                        2,
                        5
                    ],
                    [
                        1,
                        3,
                        4
                    ],
                    [
                        1,
                        3,
                        5
                    ],
                    [
                        1,
                        4,
                        5
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        2,
                        3,
                        5
                    ],
                    [
                        2,
                        4,
                        5
                    ],
                    [
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        3,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        5,
                        6
                    ],
                    [
                        1,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        3,
                        4,
                        6
                    ],
                    [
                        1,
                        3,
                        5,
                        6
                    ],
                    [
                        1,
                        4,
                        5,
                        6
                    ],
                    [
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        2,
                        3,
                        4,
                        6
                    ],
                    [
                        2,
                        3,
                        5,
                        6
                    ],
                    [
                        2,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        3
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ],
                    [
                        5
                    ],
                    [
                        6
                    ],
                    [
                        7
                    ],
                    [
                        8
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        7,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        8,
                        9
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        4,
                        6,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        3,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        10
                    ],
                    [
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        7
                    ],
                    [
                        1,
                        2,
                        4,
                        8
                    ],
                    [
                        1,
                        2,
                        4,
                        9
                    ],
                    [
                        1,
                        2,
                        4,
                        10
                    ],
                    [
                        1,
                        2,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        5,
                        10
                    ],
                    [
                        1,
                        2,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        6,
                        8
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        1,
                        5
                    ],
                    [
                        1,
                        6
                    ],
                    [
                        1,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        3,
                        5
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        4,
                        6
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        5,
                        7
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        6,
                        8
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        7,
                        9
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        8,
                        10
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        9,
                        11
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        10,
                        12
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        9,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        7,
                        8
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        3,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        13
                    ],
                    [
                        1,
                        2,
                        3,
                        14
                    ],
                    [
                        1,
                        2,
                        3,
                        15
                    ],
                    [
                        1,
                        2,
                        3,
                        16
                    ],
                    [
                        1,
                        2,
                        3,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        18
                    ],
                    [
                        1,
                        2,
                        3,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        20
                    ],
                    [
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        7
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        13
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        14
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        15
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        16
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        18
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        20
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        8
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        1,
                        5
                    ],
                    [
                        1,
                        6
                    ],
                    [
                        1,
                        7
                    ],
                    [
                        1,
                        8
                    ],
                    [
                        1,
                        9
                    ],
                    [
                        1,
                        10
                    ],
                    [
                        1,
                        11
                    ],
                    [
                        1,
                        12
                    ],
                    [
                        1,
                        13
                    ],
                    [
                        1,
                        14
                    ],
                    [
                        1,
                        15
                    ],
                    [
                        1,
                        16
                    ],
                    [
                        1,
                        17
                    ],
                    [
                        1,
                        18
                    ],
                    [
                        1,
                        19
                    ],
                    [
                        1,
                        20
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        13
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        14
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        15
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        16
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        18
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        20
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        13
                    ]
                ]
            ]
        }
    },
    "78": {
        "title": "Subset Power Set",
        "description": "Given an integer array `nums` of **unique** elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.",
        "example": "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\n\nInput: nums = [0]\nOutput: [[],[0]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[0]",
                "[4,5,6]",
                "[-1,0,1]",
                "[10,20,30,40]",
                "[7,8,9,10,11]",
                "[2,4,6,8,10,12]",
                "[1,3,5,7,9,11,13]",
                "[2,3,5,7,11,13,17,19]",
                "[1,2,4,8,16,32,64,128,256]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,10,15,20,25,30,35,40,45,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]"
            ],
            "outputs": [
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
                "[[],[0]]",
                "[[],[4],[5],[4,5],[6],[4,6],[5,6],[4,5,6]]",
                "[[],[-1],[0],[-1,0],[1],[-1,1],[0,1],[-1,0,1]]",
                "[[],[10],[20],[10,20],[30],[10,30],[20,30],[10,20,30],[40],[10,40],[20,40],[10,20,40],[30,40],[10,30,40],[20,30,40],[10,20,30,40]]",
                "[[],[7],[8],[7,8],[9],[7,9],[8,9],[7,8,9],[10],[7,10],[8,10],[7,8,10],[9,10],[7,9,10],[8,9,10],[7,8,9,10],[11],[7,11],[8,11],[7,8,11],[9,11],[7,9,11],[8,9,11],[7,8,9,11],[10,11],[7,10,11],[8,10,11],[7,8,10,11],[9,10,11],[7,9,10,11],[8,9,10,11],[7,8,9,10,11]]",
                "[[],[2],[4],[2,4],[6],[2,6],[4,6],[2,4,6],[8],[2,8],[4,8],[2,4,8],[6,8],[2,6,8],[4,6,8],[2,4,6,8],[10],[2,10],[4,10],[2,4,10],[6,10],[2,6,10],[4,6,10],[2,4,6,10],[8,10],[2,8,10],[4,8,10],[2,4,8,10],[6,8,10],[2,6,8,10],[4,6,8,10],[2,4,6,8,10],[12],[2,12],[4,12],[2,4,12],[6,12],[2,6,12],[4,6,12],[2,4,6,12],[8,12],[2,8,12],[4,8,12],[2,4,8,12],[6,8,12],[2,6,8,12],[4,6,8,12],[2,4,6,8,12]]",
                "[[],[1],[3],[1,3],[5],[1,5],[3,5],[1,3,5],[7],[1,7],[3,7],[1,3,7],[5,7],[1,5,7],[3,5,7],[1,3,5,7],[9],[1,9],[3,9],[1,3,9],[5,9],[1,5,9],[3,5,9],[1,3,5,9],[11],[1,11],[3,11],[1,3,11],[5,11],[1,5,11],[3,5,11],[1,3,5,11],[13],[1,13],[3,13],[1,3,13],[5,13],[1,5,13],[3,5,13],[1,3,5,13],[15],[1,15],[3,15],[1,3,15],[5,15],[1,5,15],[3,5,15],[1,3,5,15]]",
                "[[],[2],[3],[2,3],[5],[2,5],[3,5],[2,3,5],[7],[2,7],[3,7],[2,3,7],[5,7],[2,5,7],[3,5,7],[2,3,5,7],[11],[2,11],[3,11],[2,3,11],[5,11],[2,5,11],[3,5,11],[2,3,5,11],[13],[2,13],[3,13],[2,3,13],[5,13],[2,5,13],[3,5,13],[2,3,5,13],[17],[2,17],[3,17],[2,3,17],[5,17],[2,5,17],[3,5,17],[2,3,5,17],[19],[2,19],[3,19],[2,3,19],[5,19],[2,5,19],[3,5,19],[2,3,5,19]]",
                "[[],[1],[2],[1,2],[4],[1,4],[2,4],[1,2,4],[8],[1,8],[2,8],[1,2,8],[4,8],[1,4,8],[2,4,8],[1,2,4,8],[16],[1,16],[2,16],[1,2,16],[4,16],[1,4,16],[2,4,16],[1,2,4,16],[32],[1,32],[2,32],[1,2,32],[4,32],[1,4,32],[2,4,32],[1,2,4,32],[64],[1,64],[2,64],[1,2,64],[4,64],[1,4,64],[2,4,64],[1,2,4,64],[128],[1,128],[2,128],[1,2,128],[4,128],[1,4,128],[2,4,128],[1,2,4,128],[256],[1,256],[2,256],[1,2,256],[4,256],[1,4,256],[2,4,256],[1,2,4,256]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4],[5],[1,5],[2,5],[1,2,5],[3,5],[1,3,5],[2,3,5],[1,2,3,5],[6],[1,6],[2,6],[1,2,6],[3,6],[1,3,6],[2,3,6],[1,2,3,6],[7],[1,7],[2,7],[1,2,7],[3,7],[1,3,7],[2,3,7],[1,2,3,7],[8],[1,8],[2,8],[1,2,8],[3,8],[1,3,8],[2,3,8],[1,2,3,8],[9],[1,9],[2,9],[1,2,9],[3,9],[1,3,9],[2,3,9],[1,2,3,9],[10],[1,10],[2,10],[1,2,10],[3,10],[1,3,10],[2,3,10],[1,2,3,10]]",
                "[[],[5],[10],[5,10],[15],[5,15],[10,15],[5,10,15],[20],[5,20],[10,20],[5,10,20],[15,20],[5,15,20],[10,15,20],[5,10,15,20],[25],[5,25],[10,25],[5,10,25],[15,25],[5,15,25],[10,15,25],[5,10,15,25],[30],[5,30],[10,30],[5,10,30],[15,30],[5,15,30],[10,15,30],[5,10,15,30],[35],[5,35],[10,35],[5,10,35],[15,35],[5,15,35],[10,15,35],[5,10,15,35],[40],[5,40],[10,40],[5,10,40],[15,40],[5,15,40],[10,15,40],[5,10,15,40],[45],[5,45],[10,45],[5,10,45],[15,45],[5,15,45],[10,15,45],[5,10,15,45],[50],[5,50],[10,50],[5,10,50],[15,50],[5,15,50],[10,15,50],[5,10,15,50]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25],[26],[1,26],[2,26],[1,2,26],[27],[1,27],[2,27],[1,2,27],[28],[1,28],[2,28],[1,2,28],[29],[1,29],[2,29],[1,2,29],[30],[1,30],[2,30],[1,2,30]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25],[26],[1,26],[2,26],[1,2,26],[27],[1,27],[2,27],[1,2,27],[28],[1,28],[2,28],[1,2,28],[29],[1,29],[2,29],[1,2,29],[30],[1,30],[2,30],[1,2,30],[31],[1,31],[2,31],[1,2,31],[32],[1,32],[2,32],[1,2,32],[33],[1,33],[2,33],[1,2,33],[34],[1,34],[2,34],[1,2,34],[35],[1,35],[2,35],[1,2,35],[36],[1,36],[2,36],[1,2,36],[37],[1,37],[2,37],[1,2,37],[38],[1,38],[2,38],[1,2,38],[39],[1,39],[2,39],[1,2,39],[40],[1,40],[2,40],[1,2,40]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25],[26],[1,26],[2,26],[1,2,26],[27],[1,27],[2,27],[1,2,27],[28],[1,28],[2,28],[1,2,28],[29],[1,29],[2,29],[1,2,29],[30],[1,30],[2,30],[1,2,30],[31],[1,31],[2,31],[1,2,31],[32],[1,32],[2,32],[1,2,32],[33],[1,33],[2,33],[1,2,33],[34],[1,34],[2,34],[1,2,34],[35],[1,35],[2,35],[1,2,35],[36],[1,36],[2,36],[1,2,36],[37],[1,37],[2,37],[1,2,37],[38],[1,38],[2,38],[1,2,38],[39],[1,39],[2,39],[1,2,39],[40],[1,40],[2,40],[1,2,40],[41],[1,41],[2,41],[1,2,41],[42],[1,42],[2,42],[1,2,42],[43],[1,43],[2,43],[1,2,43],[44],[1,44],[2,44],[1,2,44],[45],[1,45],[2,45],[1,2,45],[46],[1,46],[2,46],[1,2,46],[47],[1,47],[2,47],[1,2,47],[48],[1,48],[2,48],[1,2,48],[49],[1,49],[2,49],[1,2,49],[50],[1,50],[2,50],[1,2,50]]"
            ]
        }
    },
    "79": {
        "title": "Word Search",
        "description": "Given an `m x n` grid of characters `board` and a string `word`, determine if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "example": "Given a board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], and a word = 'ABCCED', the function should return true, as the word 'ABCCED' can be formed by starting at cell (0,0) and moving right, down, down, left, and up.\n\nGiven a board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], and a word = 'SEE', the function should return true, as the word 'SEE' can be formed by starting at cell (0,1) and moving right, down, and down.\n\nGiven a board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], and a word = 'ABCB', the function should return false, as it is not possible to form the word 'ABCB' in the grid.",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCCED']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'SEE']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCB']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCD']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ASAD']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABFCE']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDAS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSC']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSA']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSAS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSFSC']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSFSCS']"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "false",
                "false",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "80": null,
    "81": {
        "title": "Search in Rotated Sorted Array II",
        "description": "You are given an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values). Before being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`. Given the array `nums` **after** the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`. You must decrease the overall operation steps as much as possible.",
        "example": "Example 1:\n\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n\nExplanation: The array after rotation is [0,1,2,2,5,6,0]. The target element 0 is present in the array, so the output is true.\n\nExample 2:\n\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\nExplanation: The array after rotation is [0,1,2,2,5,6,0]. The target element 3 is not present in the array, so the output is false.",
        "level": "Medium",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[2,5,6,0,0,1,2]",
                "[2,5,6,0,0,1,2]",
                "[4,5,6,7,0,1,2]",
                "[4,5,6,7,0,1,2]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "82": {
        "title": "Remove Duplicates from Sorted List",
        "description": "Given the `head` of a sorted linked list, remove all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",
        "example": "Example 1:\n\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n\nExample 2:\n\nInput: head = [1,1,1,2,3]\nOutput: [2,3]",
        "level": "Medium",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,3,4,4,5]",
                "[1,1,1,2,3]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[]",
                "[1]",
                "[1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[1,2,5]",
                "[2,3]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1]",
                "[]",
                "[1]",
                "[1]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "83": {
        "title": "Remove Duplicates from Sorted List",
        "description": "Given the `head` of a sorted linked list, remove all duplicates such that each element appears only once. Return the linked list sorted as well.",
        "example": "Example 1:\n\nInput: head = [1,1,2]\nOutput: [1,2]\n\nExample 2:\n\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]",
        "level": "Easy",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,1,2]",
                "[1,1,2,3,3]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5]",
                "[]",
                "[1]",
                "[1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
                "[-1,-1,0,0,0,1,1,1,1,1]",
                "[10,20,30,40,50,60,70,80,90,100]"
            ],
            "outputs": [
                "[1,2]",
                "[1,2,3]",
                "[1]",
                "[1,2,3,4,5]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[-1,0,1]",
                "[10,20,30,40,50,60,70,80,90,100]"
            ]
        }
    },
    "84": {
        "title": "Largest Rectangle in Histogram",
        "description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, write a function that returns the area of the largest rectangle in the histogram.",
        "example": "Example:\n\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where the width of each bar is 1. The largest rectangle is shown in the red area, which has an area of 10 units.",
        "level": "Medium",
        "tags": [
            "array",
            "stack",
            "histogram"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,5,6,2,3]",
                "[2,4]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "10",
                "4",
                "9",
                "9",
                "5",
                "15",
                "30",
                "30",
                "10",
                "30"
            ]
        }
    },
    "85": null,
    "86": {
        "title": "Partition Linked List",
        "description": "Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`. You should **preserve** the original relative order of the nodes in each of the two partitions.",
        "example": "Example:\n\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n\nExplanation: In the given linked list, the nodes less than 3 are [1,2,2] and the nodes greater than or equal to 3 are [4,3,5]. After partitioning, the linked list becomes [1,2,2,4,3,5].",
        "level": "Medium",
        "tags": [
            "linked list",
            "partitioning"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        4,
                        3,
                        2,
                        5,
                        2
                    ],
                    "x": 3
                },
                {
                    "head": [
                        2,
                        1
                    ],
                    "x": 2
                },
                {
                    "head": [
                        5,
                        5,
                        5,
                        5
                    ],
                    "x": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 0
                },
                {
                    "head": [],
                    "x": 3
                },
                {
                    "head": [
                        1
                    ],
                    "x": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 3
                },
                {
                    "head": [
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "x": 3
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "x": 1
                },
                {
                    "head": [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    "x": 2
                },
                {
                    "head": [
                        3,
                        3,
                        3,
                        3,
                        3
                    ],
                    "x": 3
                },
                {
                    "head": [
                        4,
                        4,
                        4,
                        4,
                        4
                    ],
                    "x": 4
                },
                {
                    "head": [
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "x": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 0
                }
            ],
            "outputs": [
                [
                    1,
                    2,
                    2,
                    4,
                    3,
                    5
                ],
                [
                    1,
                    2
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    4,
                    3,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ]
        }
    },
    "87": {
        "title": "Scrambled String",
        "description": "Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1. A string can be scrambled by splitting it into two non-empty substrings at a random index and randomly deciding to swap the substrings or keep them in the same order. This process is applied recursively on each substring until the length of the substring is 1. If the scrambled string is equal to s2, return true; otherwise, return false.",
        "example": "Example:\n\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" -> \"gr/eat\" (divide at random index)\n\"gr/eat\" -> \"gr/eat\" (random decision is not to swap the two substrings and keep them in order)\n\"gr/eat\" -> \"g/r / e/at\" (apply the same algorithm recursively on both substrings, divide at random index each of them)\n\"g/r / e/at\" -> \"r/g / e/at\" (random decision was to swap the first substring and keep the second substring in the same order)\n\"r/g / e/at\" -> \"r/g / e/ a/t\" (again apply the algorithm recursively, divide \"at\" to \"a/t\")\n\"r/g / e/ a/t\" -> \"r/g / e/ a/t\" (random decision is to keep both substrings in the same order)\nThe algorithm stops now, and the result string is \"rgeat\" which is s2. As one possible scenario led s1 to be scrambled to s2, we return true.",
        "level": "Medium",
        "tags": [
            "string",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "\"great\"",
                "\"rgeat\"",
                "\"abcde\"",
                "\"caebd\"",
                "\"a\"",
                "\"a\"",
                "\"hello\"",
                "\"loleh\"",
                "\"abcd\"",
                "\"dcba\"",
                "\"apple\"",
                "\"papel\"",
                "\"car\"",
                "\"arc\"",
                "\"good\"",
                "\"dogo\"",
                "\"programming\"",
                "\"gammirnropm\"",
                "\"algorithm\"",
                "\"mhtirogla\""
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false"
            ]
        }
    },
    "88": {
        "title": "Merge Sorted Arrays",
        "description": "You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums1` and `nums2` into a single array sorted in **non-decreasing order**. The final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.",
        "example": "Example:\n\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,0,0,0], 3, [2,5,6], 3",
                "[1], 1, [], 0",
                "[0], 0, [1], 1",
                "[1,3,5,0,0,0], 3, [2,4,6], 3",
                "[1,2,3,4,5,6], 6, [], 0",
                "[], 0, [1,2,3], 3",
                "[1,2,3,4,5,6], 3, [7,8,9], 3",
                "[1,2,3,0,0,0], 3, [4,5,6], 3",
                "[1,2,3,0,0,0], 3, [0,0,0], 3",
                "[1,2,3,0,0,0], 3, [1,2,3], 3",
                "[1,2,3,0,0,0], 3, [0,0,1], 3",
                "[1,2,3,0,0,0], 3, [0,1,2], 3",
                "[1,2,3,0,0,0], 3, [0,1,3], 3",
                "[1,2,3,0,0,0], 3, [0,2,3], 3",
                "[1,2,3,0,0,0], 3, [1,2,4], 3",
                "[1,2,3,0,0,0], 3, [1,3,4], 3",
                "[1,2,3,0,0,0], 3, [2,3,4], 3",
                "[1,2,3,0,0,0], 3, [0,0,0,0,0], 5",
                "[1,2,3,0,0,0], 3, [1,1,1,1,1], 5",
                "[1,2,3,0,0,0], 3, [2,2,2,2,2], 5"
            ],
            "outputs": [
                "[1,2,2,3,5,6]",
                "[1]",
                "[1]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6]",
                "[1,2,3]",
                "[1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,4]",
                "[0,0,1,1,2,2,3,4]",
                "[0,0,1,1,2,2,3,4]",
                "[0,0,0,0,0,1,2,3]",
                "[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]",
                "[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]"
            ]
        }
    },
    "89": null,
    "90": null,
    "91": {
        "title": "Decode Message",
        "description": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n'A' ->  \"1 \"\n'B' ->  \"2 \"\n...\n'Z' ->  \"26 \"\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into:\n\n*   `\"AAJF \"` with the grouping `(1 1 10 6)`\n*   `\"KJF \"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`.\n\nGiven a string `s` containing only digits, return the **number** of ways to **decode** it.\n",
        "example": "Example:\n\nInput: s =  \"12 \"\nOutput: 2\nExplanation:  \"12 \" could be decoded as  \"AB \" (1 2) or  \"L \" (12).\n\nInput: s =  \"226 \"\nOutput: 3\nExplanation:  \"226 \" could be decoded as  \"BZ \" (2 26),  \"VF \" (22 6), or  \"BBF \" (2 2 6).\n\nInput: s =  \"06 \"\nOutput: 0\nExplanation:  \"06 \" cannot be mapped to  \"F \" because of the leading zero ( \"6 \" is different from  \"06 \").",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "12 ",
                "226 ",
                "06 ",
                "11106 ",
                "1234567890",
                "1111111111",
                "1010101010",
                "2222222222",
                "9999999999",
                "12345678901234567890",
                "11111111111111111111",
                "10101010101010101010",
                "22222222222222222222",
                "99999999999999999999",
                "123456789012345678901234567890",
                "111111111111111111111111111111",
                "101010101010101010101010101010",
                "222222222222222222222222222222",
                "999999999999999999999999999999",
                "1234567890123456789012345678901234567890"
            ],
            "outputs": [
                2,
                3,
                0,
                4,
                89,
                89,
                89,
                89,
                89,
                10946,
                10946,
                10946,
                10946,
                10946,
                17711,
                17711,
                17711,
                17711,
                17711,
                28657
            ]
        }
    },
    "92": {
        "title": "Reverse Linked List from Position",
        "description": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.",
        "example": "Example:\n\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n\nInput: head = [5], left = 1, right = 1\nOutput: [5]",
        "level": "Medium",
        "tags": [
            "Linked List"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 4
                },
                {
                    "head": [
                        5
                    ],
                    "left": 1,
                    "right": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 4,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 3,
                    "right": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 5,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 3,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 3,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 4,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 5,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 5,
                    "right": 4
                }
            ],
            "outputs": [
                [
                    1,
                    4,
                    3,
                    2,
                    5
                ],
                [
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    5,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    1,
                    4,
                    3,
                    2,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    4,
                    3,
                    2,
                    1,
                    5
                ],
                [
                    1,
                    5,
                    4,
                    3,
                    2
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    5,
                    4,
                    3
                ],
                [
                    1,
                    4,
                    3,
                    2,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ]
        }
    },
    "93": {
        "title": "Valid IP Addresses",
        "description": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros. Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.",
        "example": "Example 1:\n\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\", \"255.255.111.35\"]\n\nExample 2:\n\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]\n\nExample 3:\n\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\", \"1.0.102.3\", \"10.1.0.23\", \"10.10.2.3\", \"101.0.2.3\"]",
        "level": "Medium",
        "tags": [
            "String",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"25525511135\"",
                "\"0000\"",
                "\"101023\"",
                "\"19216811\"",
                "\"123456789\"",
                "\"11111111111111111111\"",
                "\"12345678901234567890\"",
                "\"123456789012345678901\"",
                "\"1234567890123456789012\"",
                "\"12345678901234567890123\"",
                "\"123456789012345678901234\"",
                "\"1234567890123456789012345\"",
                "\"12345678901234567890123456\"",
                "\"123456789012345678901234567\"",
                "\"1234567890123456789012345678\"",
                "\"12345678901234567890123456789\"",
                "\"123456789012345678901234567890\"",
                "\"1234567890123456789012345678901\"",
                "\"12345678901234567890123456789012\"",
                "\"123456789012345678901234567890123\"",
                "\"1234567890123456789012345678901234\""
            ],
            "outputs": [
                "[\"255.255.11.135\", \"255.255.111.35\"]",
                "[\"0.0.0.0\"]",
                "[\"1.0.10.23\", \"1.0.102.3\", \"10.1.0.23\", \"10.10.2.3\", \"101.0.2.3\"]",
                "[\"192.168.1.1\"]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "94": {
        "title": "Binary Tree Inorder Traversal",
        "description": "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.",
        "example": "Example 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "binary tree",
            "inorder traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,3]",
                "[]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,3,6,2,4,null,8,1,null,null,null,7,9]",
                "[1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[10,5,15,3,7,null,18]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[1,3,2]",
                "[]",
                "[1]",
                "[4,2,5,1,6,3,7,9,8,10]",
                "[1,2,3,4,5,6,7,8,9]",
                "[6,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[3,5,7,10,15,18]",
                "[1,2,4,8,16,32,64,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "95": {
        "title": "Unique Binary Search Trees II",
        "description": "Given an integer `n`, return all the structurally unique BSTs (binary search trees) that have exactly `n` nodes with unique values from 1 to n. Return the answer in any order.",
        "example": "Example 1:\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Recursion",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                5,
                6,
                7,
                8
            ],
            "outputs": [
                "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
                "[[1]]",
                "[[1,null,2],[2,1]]",
                "[[1,null,2,null,3],[1,null,3,2,null,null,4],[1,null,4,2,null,null,3],[1,null,3,null,4,2],[1,null,4,null,2,null,null,3],[2,1,3,null,null,null,4],[2,1,4,null,null,null,3],[3,1,null,null,2,null,null,4],[3,1,null,null,4,2],[3,2,null,1,null,null,4],[3,2,null,4,1],[4,1,null,null,2,null,null,3],[4,1,null,null,3,2],[4,2,null,1,null,null,3],[4,3,null,1,null,null,2],[4,3,null,2,null,null,1]]",
                "[[1,null,2,null,3,null,4,5],[1,null,2,null,4,3,5],[1,null,2,null,5,3,null,4],[1,null,3,2,null,4,5],[1,null,4,2,null,3,5],[1,null,5,2,null,3,null,4],[1,null,3,2,null,5,4],[1,null,4,2,null,5,3],[1,null,5,2,null,4,3],[2,1,3,null,null,null,4,5],[2,1,4,null,null,null,3,5],[2,1,5,null,null,null,3,null,4],[3,1,null,null,2,null,4,5],[3,1,null,null,4,2,null,5],[3,1,null,null,5,2,null,4],[4,1,null,null,2,null,3,5],[4,1,null,null,3,2,null,5],[4,1,null,null,5,2,null,3],[5,1,null,null,2,null,3,null,4],[5,1,null,null,3,2,null,4],[5,1,null,null,4,2,null,3]]",
                "[[1,null,2,null,3,null,4,null,5],[1,null,2,null,3,null,5,4],[1,null,2,null,4,3,null,5],[1,null,2,null,5,3,null,4],[1,null,3,2,null,4,null,5],[1,null,4,2,null,3,null,5],[1,null,5,2,null,3,null,4],[1,null,3,2,null,5,4],[1,null,4,2,null,5,3],[1,null,5,2,null,4,3],[2,1,3,null,null,null,4,null,5],[2,1,4,null,null,null,3,null,5],[2,1,5,null,null,null,3,null,4],[3,1,null,null,2,null,4,null,5],[3,1,null,null,4,2,null,5],[3,1,null,null,5,2,null,4],[4,1,null,null,2,null,3,null,5],[4,1,null,null,3,2,null,5],[4,1,null,null,5,2,null,3],[5,1,null,null,2,null,3,null,4],[5,1,null,null,3,2,null,4],[5,1,null,null,4,2,null,3]]",
                "[[1,null,2,null,3,null,4,null,5,null,6],[1,null,2,null,3,null,4,null,6,5],[1,null,2,null,3,null,5,4,null,6],[1,null,2,null,3,null,6,4,null,5],[1,null,2,null,4,3,null,5,null,6],[1,null,2,null,4,3,null,6,null,5],[1,null,2,null,5,3,null,4,null,6],[1,null,2,null,5,3,null,6,null,4],[1,null,2,null,6,3,null,4,null,5],[1,null,2,null,6,3,null,5,null,4],[1,null,3,2,null,4,null,5,null,6],[1,null,3,2,null,4,null,6,null,5],[1,null,3,2,null,5,null,4,null,6],[1,null,3,2,null,5,null,6,null,4],[1,null,3,2,null,6,null,4,null,5],[1,null,3,2,null,6,null,5,null,4],[1,null,4,2,null,3,null,5,null,6],[1,null,4,2,null,3,null,6,null,5],[1,null,4,2,null,5,null,3,null,6],[1,null,4,2,null,5,null,6,null,3],[1,null,4,2,null,6,null,3,null,5],[1,null,4,2,null,6,null,5,null,3],[1,null,5,2,null,3,null,4,null,6],[1,null,5,2,null,3,null,6,null,4],[1,null,5,2,null,4,null,3,null,6],[1,null,5,2,null,4,null,6,null,3],[1,null,5,2,null,6,null,3,null,4],[1,null,5,2,null,6,null,4,null,3],[1,null,6,2,null,3,null,4,null,5],[1,null,6,2,null,3,null,5,null,4],[1,null,6,2,null,4,null,3,null,5],[1,null,6,2,null,4,null,5,null,3],[1,null,6,2,null,5,null,3,null,4],[1,null,6,2,null,5,null,4,null,3],[2,1,3,null,null,null,4,null,5,null,6],[2,1,4,null,null,null,3,null,5,null,6],[2,1,5,null,null,null,3,null,6,null,4],[2,1,6,null,null,null,3,null,4,null,5],[3,1,null,null,2,null,4,null,5,null,6],[3,1,null,null,2,null,5,null,4,null,6],[3,1,null,null,2,null,6,null,4,null,5],[4,1,null,null,2,null,3,null,5,null,6],[4,1,null,null,2,null,5,null,3,null,6],[4,1,null,null,2,null,6,null,3,null,5],[5,1,null,null,2,null,3,null,4,null,6],[5,1,null,null,2,null,4,null,3,null,6],[5,1,null,null,2,null,6,null,3,null,4],[6,1,null,null,2,null,3,null,4,null,5],[6,1,null,null,2,null,4,null,3,null,5],[6,1,null,null,2,null,5,null,3,null,4]]"
            ]
        }
    },
    "96": {
        "title": "Unique Binary Search Trees",
        "description": "Given an integer `n`, return the number of structurally unique binary search trees (BSTs) that have exactly `n` nodes with unique values from 1 to `n`.",
        "example": "Example 1:\n\nInput: n = 3\nOutput: 5\n\nExplanation: There are 5 unique BSTs that can be formed with 3 nodes.\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\nExample 2:\n\nInput: n = 1\nOutput: 1",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19
            ],
            "outputs": [
                5,
                1,
                2,
                14,
                42,
                132,
                429,
                1430,
                4862,
                16796,
                58786,
                208012,
                742900,
                2674440,
                9694845,
                35357670,
                129644790,
                477638700,
                1767263190
            ]
        }
    },
    "97": {
        "title": "Interleaving Strings",
        "description": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`. An **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that: `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`, and `|n - m| <= 1`. The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`. Determine if `s3` can be obtained by interleaving `s1` and `s2`.",
        "example": "Given s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\", the function should return true. One way to obtain s3 is by splitting s1 into s1 = \"aa\" + \"bc\" + \"c\" and s2 into s2 = \"dbbc\" + \"a\". Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\". Since s3 can be obtained by interleaving s1 and s2, the function should return true.",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "s1": "aabcc",
                    "s2": "dbbca",
                    "s3": "aadbbcbcac"
                },
                {
                    "s1": "aabcc",
                    "s2": "dbbca",
                    "s3": "aadbbbaccc"
                },
                {
                    "s1": "",
                    "s2": "",
                    "s3": ""
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcdef"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abdecf"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfed"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedg"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedgh"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghi"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghij"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijk"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijkl"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklm"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmn"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmno"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnop"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopq"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqr"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqrs"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqrst"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqrstu"
                }
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "98": {
        "title": "Valid Binary Search Tree",
        "description": "Given the `root` of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.",
        "example": "Example 1:\n\nInput: root = [2,1,3]\nOutput: true\n\nExample 2:\n\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "binary search tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,3]",
                "[5,1,4,null,null,3,6]",
                "[1,null,2]",
                "[10,5,15,null,null,6,20]",
                "[3,1,5,0,2,4,6,null,null,null,3]",
                "[1,1]",
                "[1,null,1]",
                "[2147483647]",
                "[1,1,1]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "true",
                "false"
            ]
        }
    },
    "99": {
        "title": "Recover Binary Search Tree",
        "description": "You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. Your task is to recover the tree without changing its structure. Implement a function `recoverTree` to solve the problem.",
        "example": "Example 1:\n\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\nExample 2:\n\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Tree Traversal",
            "In-order Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,null,null,2]",
                "[3,1,4,null,null,2]",
                "[2,3,1]",
                "[5,3,8,2,4,7,9]",
                "[4,2,7,1,3,6,9]",
                "[10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]"
            ],
            "outputs": [
                "[3,1,null,null,2]",
                "[2,1,4,null,null,3]",
                "[2,3,1]",
                "[5,4,8,2,3,7,9]",
                "[4,2,7,1,3,6,9]",
                "[10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]"
            ]
        }
    },
    "100": {
        "title": "Binary Tree Comparison",
        "description": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
        "example": "Example:\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExplanation: Both trees have the same structure and node values.\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExplanation: The trees have different structures.\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\nExplanation: The trees have the same structure but different node values.",
        "level": "Easy",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[1,2,3]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,1]",
                "[1,1,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[]",
                "[]"
            ],
            "outputs": [
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "true",
                "true"
            ]
        }
    },
    "101": null,
    "102": null,
    "103": {
        "title": "Zigzag Level Order Traversal",
        "description": "Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. The zigzag level order traversal is a traversal where we visit the nodes of the binary tree in a zigzag pattern, alternating between left to right and right to left at each level. For example, given a binary tree with root node 3, left child node 9, right child node 20, and its right child node 20 having left child node 15 and right child node 7, the zigzag level order traversal would be [[3], [20, 9], [15, 7]].",
        "example": "Example:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n\nExplanation: The zigzag level order traversal of the given binary tree is [[3], [20, 9], [15, 7]].\n\nInput: root = [1]\nOutput: [[1]]\n\nExplanation: The zigzag level order traversal of the given binary tree is [[1]].\n\nInput: root = []\nOutput: []\n\nExplanation: The given binary tree is empty, so the zigzag level order traversal is also empty.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "traversal"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[1]",
                "[]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3,4,null,null,5]",
                "[1,2,3,4,5,null,null,6,7,null,null,null,null,8]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[[3],[20,9],[15,7]]",
                "[[1]]",
                "[]",
                "[[1],[3,2],[4,5,6,7],[10,9,8]]",
                "[[5],[8,4],[11,13,4,7],[1,2,5]]",
                "[[1],[3,2],[4,5]]",
                "[[1],[3,2],[4,5,6,7],[8]]",
                "[[1],[3,2],[4,5,6,7],[15,14,13,12,11,10,9,8],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]]"
            ]
        }
    },
    "104": null,
    "105": {
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "description": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.",
        "example": "Example 1:\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Tree Traversal",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,15,7], [9,3,15,20,7]",
                "[-1], [-1]",
                "[1,2,3,4,5], [2,4,3,1,5]",
                "[4,2,1,3,6,5,7], [1,2,3,4,5,6,7]",
                "[5,4,3,2,1], [1,2,3,4,5]",
                "[1,2,3,4,5], [5,4,3,2,1]"
            ],
            "outputs": [
                "[3,9,20,null,null,15,7]",
                "[-1]",
                "[1,null,2,null,3,null,4,null,5]",
                "[4,2,6,1,5,3,7]",
                "[5,4,null,3,null,2,null,1]",
                "[1,2,null,3,null,4,null,5]"
            ]
        }
    },
    "106": {
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "description": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.",
        "example": "Example 1:\n\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\n\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Tree Traversal",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[9,3,15,20,7]",
                "[-1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1]",
                "[1,2]",
                "[2,1]",
                "[1,2,3]",
                "[3,2,1]",
                "[1,2,3,4]",
                "[4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[3,9,20,null,null,15,7]",
                "[-1]",
                "[5,4,null,3,null,2,null,1]",
                "[1,2,null,3,null,4,null,5]",
                "[1]",
                "[2,1]",
                "[1,2]",
                "[3,2,1]",
                "[1,2,null,null,3,null,null]",
                "[1,2,null,null,3,null,null,4,null,null]",
                "[4,3,null,null,2,null,null,1,null,null]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "107": {
        "title": "Bottom-Up Level Order Traversal of Binary Tree",
        "description": "Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. The bottom-up level order traversal is the traversal of the tree from left to right, level by level, starting from the leaf nodes and ending at the root node.",
        "example": "Example 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\n\nExample 2:\n\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\n\nInput: root = []\nOutput: []",
        "level": "Medium",
        "tags": [
            "binary tree",
            "level order traversal",
            "bottom-up traversal"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]"
            ],
            "outputs": [
                "[[15,7],[9,20],[3]]",
                "[[1]]",
                "[]",
                "[[7,2],[13,4,5,1],[11,4,8],[5]]"
            ]
        }
    },
    "108": null,
    "109": null,
    "110": null,
    "111": {
        "title": "Minimum Depth of Binary Tree",
        "description": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n\nExample 2:\n\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5",
        "level": "Easy",
        "tags": [
            "Binary Tree",
            "Depth First Search",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[2,null,3,null,4,null,5,null,6]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11]",
                "[1,2,3,4,5,6,7,8,9,10,11,12]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]"
            ],
            "outputs": [
                "2",
                "5",
                "0",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "3",
                "3",
                "3",
                "3",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "5"
            ]
        }
    },
    "112": {
        "title": "Root to Leaf Path Sum",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n\nExample 2:\n\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\nExample 3:\n\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.",
        "level": "Easy",
        "tags": [
            "Binary Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[5,4,8,11,null,13,4,7,2,null,null,null,1]",
                "[1,2,3]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "true",
                "false",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "113": {
        "title": "Root to Leaf Paths with Target Sum",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where the sum of the node values in the path equals `targetSum`. Each path should be returned as a list of the node values, not node references.\n\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 and 5 + 8 + 4 + 5 = 22.\n\nExample 2:\n\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n\nExample 3:\n\nInput: root = [1,2], targetSum = 0\nOutput: []",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]"
            ],
            "outputs": [
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]",
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]",
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]",
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]"
            ]
        }
    },
    "114": null,
    "115": {
        "title": "Distinct Subsequences",
        "description": "Given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The test cases are generated so that the answer fits on a 32-bit signed integer.",
        "example": "Example:\n\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation: There are 3 ways you can generate \"rabbit\" from s:\n1. \"rabb\" + \"it\"\n2. \"ra\" + \"bbit\"\n3. \"rab\" + \"bit\"",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "string"
        ],
        "test_cases": {
            "inputs": [
                "\"rabbbit\"",
                "\"rabbit\"",
                "\"babgbag\"",
                "\"bag\"",
                "\"abcde\"",
                "\"ace\"",
                "\"abcde\"",
                "\"\"",
                "\"abcde\"",
                "\"fgh\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\""
            ],
            "outputs": [
                "3",
                "5",
                "0",
                "1",
                "0",
                "1",
                "1",
                "1",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "116": {
        "title": "Populate Next Right Pointers in Each Node",
        "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n\nInitially, all next pointers are set to NULL.",
        "example": "Example:\n\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree, your function should populate each next pointer to point to its next right node, just like in the example output. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "root": []
                },
                {
                    "root": [
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        2
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                }
            ],
            "outputs": [
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        null
                    ]
                },
                {
                    "result": []
                },
                {
                    "result": [
                        1,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        null
                    ]
                }
            ]
        }
    },
    "117": {
        "title": "Populate Next Right Pointers in Binary Tree",
        "description": "Given a binary tree, populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`. Initially, all next pointers are set to `NULL`.",
        "example": "Example 1:\n\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree, your function should populate each next pointer to point to its next right node, just like in the figure. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "val": 1,
                    "left": {
                        "val": 2,
                        "left": {
                            "val": 4,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "right": {
                            "val": 5,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "next": null
                    },
                    "right": {
                        "val": 3,
                        "left": null,
                        "right": {
                            "val": 7,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "next": null
                    },
                    "next": null
                }
            ],
            "outputs": [
                {
                    "val": 1,
                    "left": {
                        "val": 2,
                        "left": {
                            "val": 4,
                            "left": null,
                            "right": null,
                            "next": {
                                "val": 5,
                                "left": null,
                                "right": null,
                                "next": {
                                    "val": 7,
                                    "left": null,
                                    "right": null,
                                    "next": null
                                }
                            }
                        },
                        "right": {
                            "val": 5,
                            "left": null,
                            "right": null,
                            "next": {
                                "val": 7,
                                "left": null,
                                "right": null,
                                "next": null
                            }
                        }
                    },
                    "right": {
                        "val": 3,
                        "left": null,
                        "right": {
                            "val": 7,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "next": null
                    },
                    "next": null
                }
            ]
        }
    },
    "118": null,
    "119": {
        "title": "Pascal's Triangle Row",
        "description": "Given an integer `rowIndex`, return the `rowIndexth` (0-indexed) row of the Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it.",
        "example": "Example:\n\nInput: rowIndex = 3\nOutput: [1,3,3,1]\n\nExplanation: The 3rd row of Pascal's triangle is [1,3,3,1].\n\nInput: rowIndex = 0\nOutput: [1]\n\nExplanation: The 0th row of Pascal's triangle is [1].\n\nInput: rowIndex = 1\nOutput: [1,1]\n\nExplanation: The 1st row of Pascal's triangle is [1,1].",
        "level": "Easy",
        "tags": [
            "Array",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                3,
                0,
                1,
                5,
                10
            ],
            "outputs": [
                [
                    1,
                    3,
                    3,
                    1
                ],
                [
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    5,
                    10,
                    10,
                    5,
                    1
                ],
                [
                    1,
                    10,
                    45,
                    120,
                    210,
                    252,
                    210,
                    120,
                    45,
                    10,
                    1
                ]
            ]
        }
    },
    "1210": null,
    "1213": {
        "title": "Common Elements in Three Sorted Arrays",
        "description": "Given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.",
        "example": "Example:\n\nInput: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\nOutput: [1,5]\nExplanation: Only 1 and 5 appeared in the three arrays.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5], [1,2,5,7,9], [1,3,4,5,8]",
                "[197,418,523,876,1356], [501,880,1593,1710,1870], [521,682,1337,1395,1764]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]"
            ],
            "outputs": [
                "[1,5]",
                "[]",
                "[]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[]",
                "[]",
                "[]",
                "[1,2,3,4,5]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "1214": {
        "title": "Binary Search Tree Node Sum",
        "description": "Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.",
        "example": "Example:\n\nInput: root1 = [2,1,4], root2 = [1,0,3], target = 5\nOutput: true\nExplanation: 2 and 3 sum up to 5.",
        "level": "Easy",
        "tags": [
            "binary search tree",
            "tree traversal",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root1": [
                        2,
                        1,
                        4
                    ],
                    "root2": [
                        1,
                        0,
                        3
                    ],
                    "target": 5
                },
                {
                    "root1": [
                        0,
                        -10,
                        10
                    ],
                    "root2": [
                        5,
                        1,
                        7,
                        0,
                        2
                    ],
                    "target": 18
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 7
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 10
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 3
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 15
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 0
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": -1
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 100
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": -100
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 1
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 2
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 4
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 5
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 6
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 7
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 8
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 9
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 10
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 11
                }
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1215": {
        "title": "Stepping Numbers",
        "description": "A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. Given two integers low and high, return a sorted list of all the stepping numbers in the inclusive range [low, high].",
        "example": "Example 1:\n\nInput: low = 0, high = 21\nOutput: [0,1,2,3,4,5,6,7,8,9,10,12,21]\n\nExample 2:\n\nInput: low = 10, high = 15\nOutput: [10,12]",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    21
                ],
                [
                    10,
                    15
                ],
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    100,
                    200
                ],
                [
                    123,
                    321
                ],
                [
                    1000,
                    2000
                ],
                [
                    1234,
                    4321
                ],
                [
                    10000,
                    20000
                ],
                [
                    12345,
                    54321
                ],
                [
                    100000,
                    200000
                ],
                [
                    123456,
                    654321
                ],
                [
                    1000000,
                    2000000
                ],
                [
                    1234567,
                    7654321
                ],
                [
                    10000000,
                    20000000
                ],
                [
                    12345678,
                    87654321
                ],
                [
                    100000000,
                    200000000
                ],
                [
                    123456789,
                    987654321
                ],
                [
                    1000000000,
                    2000000000
                ],
                [
                    1234567890,
                    9876543210
                ]
            ],
            "outputs": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    12,
                    21
                ],
                [
                    10,
                    12
                ],
                [
                    0
                ],
                [
                    1
                ],
                [
                    101,
                    121,
                    123,
                    210,
                    212
                ],
                [
                    123,
                    210,
                    212,
                    232,
                    234,
                    321
                ],
                [
                    1234,
                    2101,
                    2121,
                    2321,
                    2341
                ],
                [
                    1234,
                    2101,
                    2121,
                    2321,
                    2341,
                    3210
                ],
                [
                    12345,
                    21012,
                    21210,
                    23210,
                    23410
                ],
                [
                    12345,
                    21012,
                    21210,
                    23210,
                    23410,
                    3210
                ],
                [
                    123456,
                    210123,
                    212101,
                    232101,
                    234101
                ],
                [
                    123456,
                    210123,
                    212101,
                    232101,
                    234101,
                    3210
                ],
                [
                    1234567,
                    2101234,
                    2121012,
                    2321012,
                    2341012
                ],
                [
                    1234567,
                    2101234,
                    2121012,
                    2321012,
                    2341012,
                    3210
                ],
                [
                    12345678,
                    21012345,
                    21210123,
                    23210123,
                    23410123
                ],
                [
                    12345678,
                    21012345,
                    21210123,
                    23210123,
                    23410123,
                    3210
                ],
                [
                    123456789,
                    210123456,
                    212101234,
                    232101234,
                    234101234
                ],
                [
                    123456789,
                    210123456,
                    212101234,
                    232101234,
                    234101234,
                    3210
                ],
                [
                    1234567890,
                    2101234567,
                    2121012345,
                    2321012345,
                    2341012345
                ],
                [
                    1234567890,
                    2101234567,
                    2121012345,
                    2321012345,
                    2341012345,
                    3210
                ]
            ]
        }
    },
    "1216": {
        "title": "K-Palindrome",
        "description": "Given a string `s` and an integer `k`, return `true` if `s` is a `k`-palindrome. A string is `k`-palindrome if it can be transformed into a palindrome by removing at most `k` characters from it.",
        "example": "Example:\n\nInput: s = \"abcdeca\", k = 2\nOutput: true\nExplanation: Remove 'b' and 'e' characters.",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"abcdeca\"",
                "\"abbababa\"",
                "\"racecar\"",
                "\"hello\"",
                "\"level\"",
                "\"madam\"",
                "\"programming\"",
                "\"deed\"",
                "\"python\"",
                "\"radar\"",
                "\"algorithm\"",
                "\"stats\"",
                "\"civic\"",
                "\"java\"",
                "\"noon\"",
                "\"javascript\"",
                "\"rotator\"",
                "\"world\"",
                "\"rotavator\"",
                "\"universe\"",
                "\"redder\""
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false"
            ]
        }
    },
    "1217": {
        "title": "Minimum Cost to Move Chips to The Same Position",
        "description": "You are given a list of positions of chips on a 1-dimensional board. Each chip is represented by its position, where the `ith` chip is at position `position[i]`. You need to move all the chips to the same position. In one step, you can change the position of the `ith` chip from `position[i]` to either `position[i] + 2` or `position[i] - 2` with a cost of 0, or to `position[i] + 1` or `position[i] - 1` with a cost of 1. Return the minimum cost needed to move all the chips to the same position.",
        "example": "Example:\n\nInput: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0. Second step: Move the chip at position 2 to position 1 with cost = 1. Total cost is 1.",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    2,
                    2,
                    2,
                    3,
                    3
                ],
                [
                    1,
                    1000000000
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                1,
                2,
                1,
                0,
                5,
                5,
                5,
                5,
                10,
                10
            ]
        }
    },
    "1218": {
        "title": "Longest Arithmetic Subsequence Length",
        "description": "Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\nA **subsequence** is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.",
        "example": "Example:\n\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "difference": 1
                },
                {
                    "arr": [
                        1,
                        3,
                        5,
                        7
                    ],
                    "difference": 1
                },
                {
                    "arr": [
                        1,
                        5,
                        7,
                        8,
                        5,
                        3,
                        4,
                        2,
                        1
                    ],
                    "difference": -2
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 2
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10
                    ],
                    "difference": 2
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 1
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 3
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 5
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 10
                },
                {
                    "arr": [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "difference": -1
                },
                {
                    "arr": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "difference": 0
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 0
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -1
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -2
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -3
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -5
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -10
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 100
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -100
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 1000
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -1000
                }
            ],
            "outputs": [
                4,
                1,
                4,
                1,
                5,
                10,
                1,
                1,
                1,
                10,
                11,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1219": {
        "title": "Maximum Gold Collection",
        "description": "You are given a gold mine represented by a grid of size m x n. Each cell in the grid contains an integer representing the amount of gold in that cell. You can start and stop collecting gold from any position in the grid that has some gold. From your position, you can walk one step to the left, right, up, or down. However, you can't visit the same cell more than once and you can't visit a cell with 0 gold. Your task is to find the maximum amount of gold you can collect.",
        "example": "Example:\n\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation: The maximum amount of gold that can be collected is 24. The path to collect this gold is 9 -> 8 -> 7.\n\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation: The maximum amount of gold that can be collected is 28. The path to collect this gold is 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.",
        "level": "Medium",
        "tags": [
            "grid",
            "backtracking",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[[0,6,0],[5,8,7],[0,9,0]]",
                "[[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
                "[[0,0,0],[0,0,0],[0,0,0]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,0,0],[0,0,0],[0,0,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,0,0,0,0],[0,2,0,0,0],[0,0,3,0,0],[0,0,0,4,0],[0,0,0,0,5]]",
                "[[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
                "[[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,0]]"
            ],
            "outputs": [
                "24",
                "28",
                "0",
                "45",
                "3",
                "125",
                "15",
                "25",
                "125",
                "135"
            ]
        }
    },
    "1220": {
        "title": "Count Vowel Strings",
        "description": "Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\nEach character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\nEach vowel `'a'` may only be followed by an `'e'`.\nEach vowel `'e'` may only be followed by an `'a'` or an `'i'`.\nEach vowel `'i'` may not be followed by another `'i'`.\nEach vowel `'o'` may only be followed by an `'i'` or a `'u'`.\nEach vowel `'u'` may only be followed by an `'a'`.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.",
        "example": "Example:\n\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\", \"o\", and \"u\".\n\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\", and \"ua\".\n\nInput: n = 5\nOutput: 68",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                5,
                10,
                15,
                20,
                25,
                30,
                35,
                40,
                45,
                50,
                100,
                1000,
                10000,
                20000
            ],
            "outputs": [
                5,
                10,
                68,
                252,
                868,
                2892,
                9568,
                31504,
                103680,
                340032,
                1115136,
                3656384,
                782204094,
                252877308,
                457992974,
                457992974
            ]
        }
    },
    "1221": {
        "title": "Maximum Number of Balanced Strings",
        "description": "Given a balanced string `s`, split it into some number of substrings such that each substring is balanced. Return the maximum number of balanced strings you can obtain.",
        "example": "Example 1:\n\nInput: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains the same number of 'L' and 'R'.\n\nExample 2:\n\nInput: s = \"RLRRRLLRLL\"\nOutput: 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains the same number of 'L' and 'R'. Note that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.\n\nExample 3:\n\nInput: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".",
        "level": "Easy",
        "tags": [
            "string",
            "substring",
            "balanced"
        ],
        "test_cases": {
            "inputs": [
                "\"RLRRLLRLRL\"",
                "\"RLRRRLLRLL\"",
                "\"LLLLRRRR\"",
                "\"RLRLRLRLRLRL\"",
                "\"RRLLRRLLRRLL\"",
                "\"LRLRLRLRLRLR\"",
                "\"RLLRLLRLLRLL\"",
                "\"RRRRLLLL\"",
                "\"LLLLRR\"",
                "\"RRLRLL\"",
                "\"RLRLLR\"",
                "\"RLLRLR\"",
                "\"LRLRRL\"",
                "\"LRRLLR\"",
                "\"RRLLRL\"",
                "\"RLRLRL\"",
                "\"LRLRLR\"",
                "\"RLLRLL\"",
                "\"RRRRLL\"",
                "\"LLLLRRR\""
            ],
            "outputs": [
                "4",
                "2",
                "1",
                "6",
                "4",
                "6",
                "6",
                "2",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2"
            ]
        }
    },
    "1222": {
        "title": "Black Queens Attack",
        "description": "On a 0-indexed 8 x 8 chessboard, there can be multiple black queens and one white king. You are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king. Return the coordinates of the black queens that can directly attack the king. You may return the answer in any order.",
        "example": "Example:\n\nInput: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\nOutput: [[0,1],[1,0],[3,3]]\nExplanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "chess"
        ],
        "test_cases": {
            "inputs": [
                "[[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]]",
                "[[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]"
            ],
            "outputs": [
                "[[0,1],[1,0],[3,3]]",
                "[[2,2],[3,4],[4,4]]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "1223": {
        "title": "Distinct Sequences with Consecutive Roll Constraints",
        "description": "A die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times.\n\nGiven an array of integers `rollMax` and an integer `n`, return the number of distinct sequences that can be obtained with exactly `n` rolls. Since the answer may be too large, return it modulo `109 + 7`.\n\nTwo sequences are considered different if at least one element differs from each other.",
        "example": "Example:\n\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of the die. If there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at the rollMax array, the numbers 1 and 2 appear at most once consecutively. Therefore, sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    [
                        1,
                        1,
                        2,
                        2,
                        2,
                        3
                    ]
                ],
                [
                    2,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    3,
                    [
                        1,
                        1,
                        1,
                        2,
                        2,
                        3
                    ]
                ],
                [
                    4,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    5,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    6,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    7,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    8,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    9,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    11,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    12,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    13,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    14,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    15,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    16,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    17,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    18,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    19,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    20,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            ],
            "outputs": [
                34,
                30,
                181,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210
            ]
        }
    },
    "1224": null,
    "1227": {
        "title": "Probability of Getting Own Seat",
        "description": "There are `n` passengers boarding an airplane with exactly `n` seats. The first passenger has lost their ticket and picks a seat randomly. After that, the rest of the passengers will take their own seat if it is still available, otherwise they will pick other seats randomly. You need to return the probability that the `nth` person gets their own seat.",
        "example": "Example 1:\n\nInput: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.\n\nExample 2:\n\nInput: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when the first person gets the first seat).",
        "level": "Medium",
        "tags": [
            "probability",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                100
            ],
            "outputs": [
                1.0,
                0.5,
                0.33333,
                0.25,
                0.2,
                0.5,
                0.5
            ]
        }
    },
    "1228": {
        "title": "Missing Value in Arithmetic Progression",
        "description": "Given an array `arr` where the values are in arithmetic progression, with the difference between consecutive elements being the same, except for one missing value. The missing value is not the first or last value in the array. Write a function that takes in the array `arr` and returns the missing value.",
        "example": "Example:\n\nInput: arr = [5, 7, 11, 13]\nOutput: 9\nExplanation: The previous array was [5, 7, 9, 11, 13].\n\nInput: arr = [15, 13, 12]\nOutput: 14\nExplanation: The previous array was [15, 14, 13, 12].",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[5, 7, 11, 13]",
                "[15, 13, 12]",
                "[2, 4, 6, 10, 12]",
                "[20, 25, 30, 35, 40, 45]",
                "[100, 90, 80, 70, 60]",
                "[1, 3, 5, 9, 11, 13, 15]",
                "[8, 12, 16, 20, 24, 28, 32, 36]",
                "[1000, 900, 800, 700, 500, 400, 300, 200, 100]",
                "[3, 6, 9, 15, 18, 21, 24, 27, 30, 33]",
                "[50, 45, 40, 35, 30, 25, 20, 15, 10, 5]"
            ],
            "outputs": [
                "9",
                "14",
                "8",
                "15",
                "50",
                "7",
                "4",
                "500",
                "12",
                "0"
            ]
        }
    },
    "1229": {
        "title": "Earliest Common Time Slot",
        "description": "Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`. If there is no common time slot that satisfies the requirements, return an empty array. The format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`. It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.",
        "example": "Example:\n\nInput: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8\nOutput: [60,68]\n\nInput: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12\nOutput: []",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],8]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],12]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],5]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],20]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],100]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],10]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],15]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],25]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],30]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],35]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],40]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],45]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],50]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],55]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],60]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],65]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],70]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],75]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],80]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],85]"
            ],
            "outputs": [
                "[60,68]",
                "[]",
                "[10,15]",
                "[140,210]",
                "[]",
                "[5,15]",
                "[25,30]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[60,65]",
                "[60,65]",
                "[60,65]",
                "[60,65]",
                "[60,65]",
                "[60,65]"
            ]
        }
    },
    "1230": {
        "title": "Coin Toss Probability",
        "description": "You have some coins. The `i`-th coin has a probability `prob[i]` of facing heads when tossed. Return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.",
        "example": "Example:\n\nInput: prob = [0.4], target = 1\nOutput: 0.40000\n\nExplanation: There is only one coin with a probability of 0.4 to face heads. The probability of getting exactly 1 head is 0.4.\n\nInput: prob = [0.5,0.5,0.5,0.5,0.5], target = 0\nOutput: 0.03125\n\nExplanation: There are 5 coins, each with a probability of 0.5 to face heads. The probability of getting exactly 0 heads is 0.03125.",
        "level": "Medium",
        "tags": [
            "probability",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[0.4]",
                "[0.5,0.5,0.5,0.5,0.5]",
                "[0.2,0.3,0.4,0.5]",
                "[0.1,0.2,0.3,0.4,0.5,0.6]",
                "[0.25,0.75,0.5,0.1,0.9]",
                "[0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6]",
                "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]",
                "[0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0]",
                "[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5]",
                "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0]"
            ],
            "outputs": [
                "0.40000",
                "0.03125",
                "0.12000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000"
            ]
        }
    },
    "1231": {
        "title": "Maximum Sweetness of Chocolate Bar",
        "description": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`. You want to share the chocolate with your `k` friends so you start cutting the chocolate bar into `k + 1` pieces using `k` cuts, each piece consists of some **consecutive** chunks. Being generous, you will eat the piece with the **minimum total sweetness** and give the other pieces to your friends. Find the **maximum total sweetness** of the piece you can get by cutting the chocolate bar optimally.",
        "example": "For example, if the sweetness array is [1,2,3,4,5,6,7,8,9] and k is 5, you can divide the chocolate into [1,2,3], [4,5], [6], [7], [8], [9]. The piece with the minimum total sweetness is [6], so the maximum total sweetness you can get is 6.",
        "level": "Medium",
        "tags": [
            "array",
            "optimization"
        ],
        "test_cases": {
            "inputs": [
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "k": 5
                },
                {
                    "sweetness": [
                        5,
                        6,
                        7,
                        8,
                        9,
                        1,
                        2,
                        3,
                        4
                    ],
                    "k": 8
                },
                {
                    "sweetness": [
                        1,
                        2,
                        2,
                        1,
                        2,
                        2,
                        1,
                        2,
                        2
                    ],
                    "k": 2
                },
                {
                    "sweetness": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "k": 0
                },
                {
                    "sweetness": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 9
                },
                {
                    "sweetness": [
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "k": 4
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 3
                },
                {
                    "sweetness": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 0
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 9
                },
                {
                    "sweetness": [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "k": 9
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 5
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 10
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 1
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 2
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 7
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 8
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 6
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 4
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 3
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 0
                }
            ],
            "outputs": [
                6,
                1,
                5,
                150,
                1,
                5,
                18,
                55,
                10,
                10,
                15,
                10,
                55,
                55,
                15,
                18,
                10,
                15,
                18,
                55
            ]
        }
    },
    "1232": {
        "title": "Straight Line Check",
        "description": "Given an array of coordinates, check if these points make a straight line in the XY plane.",
        "example": "Example 1:\n\nInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nOutput: true\n\nExample 2:\n\nInput: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\nOutput: false",
        "level": "Easy",
        "tags": [
            "Array",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]",
                "[[1,2],[2,3],[3,5],[4,6],[5,7],[6,8]]",
                "[[1,1],[2,3],[3,5],[4,7],[5,9],[6,11]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,1],[2,2],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
                "[[1,2],[2,3],[3,5],[4,6],[5,7],[6,8],[7,10]]",
                "[[1,1],[2,3],[3,5],[4,7],[5,9],[6,11],[7,13]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,1],[2,2],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true"
            ]
        }
    },
    "1233": null,
    "1234": {
        "title": "Minimum Balanced Substring",
        "description": "Given a string s of length `n` containing only four kinds of characters: 'Q', 'W', 'E', and 'R', determine the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string. If s is already balanced, return 0.",
        "example": "Example:\n\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' with 'R', so that \"RQWE\" (or \"QRWE\") is balanced.",
        "level": "Medium",
        "tags": [
            "string",
            "substring",
            "balanced"
        ],
        "test_cases": {
            "inputs": [
                "\"QWER\"",
                "\"QQWE\"",
                "\"QQQW\"",
                "\"QQQQ\"",
                "\"QWRE\"",
                "\"QWQW\"",
                "\"QWEE\"",
                "\"QWRR\"",
                "\"QWQQ\"",
                "\"QWERQWER\"",
                "\"QQWEQQWE\"",
                "\"QQQWQQQW\"",
                "\"QQQQQQQQ\"",
                "\"QWREQWER\"",
                "\"QWQWQWQW\"",
                "\"QWEEQWEE\"",
                "\"QWRRQWRR\"",
                "\"QWQQQWQQ\"",
                "\"QWERQWERQWERQWER\"",
                "\"QQWEQQWEQQWEQQWE\"",
                "\"QQQWQQQWQQQWQQQW\"",
                "\"QQQQQQQQQQQQQQQQ\""
            ],
            "outputs": [
                "0",
                "1",
                "2",
                "3",
                "1",
                "2",
                "2",
                "2",
                "2",
                "0",
                "0",
                "0",
                "0",
                "1",
                "2",
                "2",
                "2",
                "2",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "1235": {
        "title": "Maximum Profit from Non-Overlapping Jobs",
        "description": "You are given `n` jobs, where each job has a start time, end time, and a corresponding profit. Your task is to select a subset of jobs such that no two jobs overlap in time and the total profit is maximized. If you choose a job that ends at time `X`, you can start another job that starts at time `X`. Implement a function `maxProfit` to solve this problem and return the maximum profit possible.",
        "example": "Example:\n\nInput:\nstartTime = [1,2,3,3]\nendTime = [3,4,5,6]\nprofit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. The time range [1-3] + [3-6] gives a profit of 120 = 50 + 70.",
        "level": "Medium",
        "tags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "test_cases": {
            "inputs": [
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        3
                    ],
                    "endTime": [
                        3,
                        4,
                        5,
                        6
                    ],
                    "profit": [
                        50,
                        10,
                        40,
                        70
                    ]
                },
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        4,
                        6
                    ],
                    "endTime": [
                        3,
                        5,
                        10,
                        6,
                        9
                    ],
                    "profit": [
                        20,
                        20,
                        100,
                        70,
                        60
                    ]
                },
                {
                    "startTime": [
                        1,
                        1,
                        1
                    ],
                    "endTime": [
                        2,
                        3,
                        4
                    ],
                    "profit": [
                        5,
                        6,
                        4
                    ]
                },
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "endTime": [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "profit": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ]
                },
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "endTime": [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "profit": [
                        50,
                        40,
                        30,
                        20,
                        10
                    ]
                }
            ],
            "outputs": [
                120,
                150,
                6,
                150,
                150
            ]
        }
    },
    "1236": {
        "title": "Web Crawler",
        "description": "Given a start URL and an interface HtmlParser, implement a web crawler to crawl all links that are under the same hostname as the start URL. Return all URLs obtained by your web crawler in any order. The crawler should start from the page of the start URL and call HtmlParser.getUrls(url) to get all URLs from a webpage of the given URL. It should not crawl the same link twice and should only explore links that are under the same hostname as the start URL.",
        "example": "Example 1:\n\nInput:\nstartUrl = \"http://example.org\"\n\nOutput:\n[\"http://example.org\", \"http://example.org/about\", \"http://example.org/contact\"]\n\nExplanation:\nThe start URL is \"http://example.org\". The crawler starts from this page and calls HtmlParser.getUrls(url) to get all URLs from this webpage. It then explores each URL and adds the URLs that have the same hostname as the start URL to the result list. The final result is [\"http://example.org\", \"http://example.org/about\", \"http://example.org/contact\"].\n\nExample 2:\n\nInput:\nstartUrl = \"http://leetcode.com\"\n\nOutput:\n[\"http://leetcode.com\", \"http://leetcode.com/problems\", \"http://leetcode.com/contest\"]\n\nExplanation:\nThe start URL is \"http://leetcode.com\". The crawler starts from this page and calls HtmlParser.getUrls(url) to get all URLs from this webpage. It then explores each URL and adds the URLs that have the same hostname as the start URL to the result list. The final result is [\"http://leetcode.com\", \"http://leetcode.com/problems\", \"http://leetcode.com/contest\"].",
        "level": "Medium",
        "tags": [
            "web crawler",
            "hostname",
            "URL"
        ],
        "test_cases": {
            "inputs": [
                "\"http://example.org\"",
                "\"http://leetcode.com\""
            ],
            "outputs": [
                "[\"http://example.org\", \"http://example.org/about\", \"http://example.org/contact\"]",
                "[\"http://leetcode.com\", \"http://leetcode.com/problems\", \"http://leetcode.com/contest\"]"
            ]
        }
    },
    "1237": {
        "title": "Reverse Engineer Custom Function",
        "description": "Given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. The function is monotonically increasing, meaning that `f(x, y) < f(x + 1, y)` and `f(x, y) < f(x, y + 1)`.",
        "example": "Example:\n\nInput: function_id = 1, z = 5\nOutput: [[1,4],[2,3],[3,2],[4,1]]\nExplanation: The hidden formula for function_id = 1 is f(x, y) = x + y. The following positive integer values of x and y make f(x, y) equal to 5: x=1, y=4 -> f(1, 4) = 1 + 4 = 5. x=2, y=3 -> f(2, 3) = 2 + 3 = 5. x=3, y=2 -> f(3, 2) = 3 + 2 = 5. x=4, y=1 -> f(4, 1) = 4 + 1 = 5.",
        "level": "Medium",
        "tags": [
            "math",
            "reverse-engineering"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    5
                ],
                [
                    2,
                    5
                ],
                [
                    3,
                    10
                ],
                [
                    4,
                    20
                ],
                [
                    5,
                    50
                ],
                [
                    6,
                    100
                ],
                [
                    7,
                    200
                ],
                [
                    8,
                    500
                ],
                [
                    9,
                    1000
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    3,
                    3
                ],
                [
                    4,
                    4
                ],
                [
                    5,
                    5
                ],
                [
                    6,
                    6
                ],
                [
                    7,
                    7
                ],
                [
                    8,
                    8
                ],
                [
                    9,
                    9
                ],
                [
                    1,
                    100
                ],
                [
                    9,
                    1
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        1
                    ]
                ],
                [
                    [
                        1,
                        9
                    ],
                    [
                        2,
                        8
                    ],
                    [
                        3,
                        7
                    ],
                    [
                        4,
                        6
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        6,
                        4
                    ],
                    [
                        7,
                        3
                    ],
                    [
                        8,
                        2
                    ],
                    [
                        9,
                        1
                    ]
                ],
                [
                    [
                        1,
                        19
                    ],
                    [
                        2,
                        18
                    ],
                    [
                        3,
                        17
                    ],
                    [
                        4,
                        16
                    ],
                    [
                        5,
                        15
                    ],
                    [
                        6,
                        14
                    ],
                    [
                        7,
                        13
                    ],
                    [
                        8,
                        12
                    ],
                    [
                        9,
                        11
                    ],
                    [
                        10,
                        10
                    ],
                    [
                        11,
                        9
                    ],
                    [
                        12,
                        8
                    ],
                    [
                        13,
                        7
                    ],
                    [
                        14,
                        6
                    ],
                    [
                        15,
                        5
                    ],
                    [
                        16,
                        4
                    ],
                    [
                        17,
                        3
                    ],
                    [
                        18,
                        2
                    ],
                    [
                        19,
                        1
                    ]
                ],
                [
                    [
                        1,
                        49
                    ],
                    [
                        7,
                        43
                    ],
                    [
                        14,
                        36
                    ],
                    [
                        21,
                        29
                    ],
                    [
                        28,
                        22
                    ],
                    [
                        35,
                        15
                    ],
                    [
                        42,
                        8
                    ],
                    [
                        49,
                        1
                    ]
                ],
                [
                    [
                        1,
                        99
                    ],
                    [
                        10,
                        90
                    ],
                    [
                        19,
                        81
                    ],
                    [
                        28,
                        72
                    ],
                    [
                        37,
                        63
                    ],
                    [
                        46,
                        54
                    ],
                    [
                        55,
                        45
                    ],
                    [
                        64,
                        36
                    ],
                    [
                        73,
                        27
                    ],
                    [
                        82,
                        18
                    ],
                    [
                        91,
                        9
                    ],
                    [
                        100,
                        0
                    ]
                ],
                [
                    [
                        1,
                        199
                    ],
                    [
                        20,
                        180
                    ],
                    [
                        39,
                        161
                    ],
                    [
                        58,
                        142
                    ],
                    [
                        77,
                        123
                    ],
                    [
                        96,
                        104
                    ],
                    [
                        115,
                        85
                    ],
                    [
                        134,
                        66
                    ],
                    [
                        153,
                        47
                    ],
                    [
                        172,
                        28
                    ],
                    [
                        191,
                        9
                    ],
                    [
                        210,
                        -10
                    ]
                ],
                [
                    [
                        1,
                        499
                    ],
                    [
                        50,
                        450
                    ],
                    [
                        99,
                        401
                    ],
                    [
                        148,
                        352
                    ],
                    [
                        197,
                        303
                    ],
                    [
                        246,
                        254
                    ],
                    [
                        295,
                        205
                    ],
                    [
                        344,
                        156
                    ],
                    [
                        393,
                        107
                    ],
                    [
                        442,
                        58
                    ],
                    [
                        491,
                        9
                    ],
                    [
                        540,
                        -40
                    ]
                ],
                [
                    [
                        1,
                        999
                    ],
                    [
                        100,
                        900
                    ],
                    [
                        199,
                        801
                    ],
                    [
                        298,
                        702
                    ],
                    [
                        397,
                        603
                    ],
                    [
                        496,
                        504
                    ],
                    [
                        595,
                        405
                    ],
                    [
                        694,
                        306
                    ],
                    [
                        793,
                        207
                    ],
                    [
                        892,
                        108
                    ],
                    [
                        991,
                        9
                    ],
                    [
                        1090,
                        -90
                    ]
                ],
                [
                    [
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        1
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        1
                    ]
                ],
                [
                    [
                        1,
                        6
                    ],
                    [
                        2,
                        5
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        3
                    ],
                    [
                        5,
                        2
                    ],
                    [
                        6,
                        1
                    ]
                ],
                [
                    [
                        1,
                        7
                    ],
                    [
                        2,
                        6
                    ],
                    [
                        3,
                        5
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        3
                    ],
                    [
                        6,
                        2
                    ],
                    [
                        7,
                        1
                    ]
                ],
                [
                    [
                        1,
                        8
                    ],
                    [
                        2,
                        7
                    ],
                    [
                        3,
                        6
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        4
                    ],
                    [
                        6,
                        3
                    ],
                    [
                        7,
                        2
                    ],
                    [
                        8,
                        1
                    ]
                ],
                [
                    [
                        1,
                        9
                    ],
                    [
                        2,
                        8
                    ],
                    [
                        3,
                        7
                    ],
                    [
                        4,
                        6
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        6,
                        4
                    ],
                    [
                        7,
                        3
                    ],
                    [
                        8,
                        2
                    ],
                    [
                        9,
                        1
                    ]
                ],
                [
                    [
                        1,
                        100
                    ],
                    [
                        100,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        9,
                        1
                    ]
                ]
            ]
        }
    },
    "1238": null,
    "1239": {
        "title": "Maximum Length of Concatenated String with Unique Characters",
        "description": "Given an array of strings `arr`, a string `s` is formed by the concatenation of a subsequence of `arr` that has unique characters. Return the maximum possible length of `s`.",
        "example": "Example:\n\nInput: arr = [\"un \", \"iq \", \"ue \"]\nOutput: 4\nExplanation: All the valid concatenations are:\n- \"\"\n- \"un \"\n- \"iq \"\n- \"ue \"\n- \"uniq \" (\"un \" + \"iq \")\n- \"ique \" (\"iq \" + \"ue \")\nMaximum length is 4.",
        "level": "Medium",
        "tags": [
            "array",
            "string",
            "subsequence"
        ],
        "test_cases": {
            "inputs": [
                [
                    "un ",
                    "iq ",
                    "ue "
                ],
                [
                    "cha ",
                    "r ",
                    "act ",
                    "ers "
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz "
                ],
                [
                    "a ",
                    "b ",
                    "c ",
                    "d ",
                    "e ",
                    "f ",
                    "g ",
                    "h ",
                    "i ",
                    "j ",
                    "k ",
                    "l ",
                    "m ",
                    "n ",
                    "o ",
                    "p ",
                    "q ",
                    "r ",
                    "s ",
                    "t ",
                    "u ",
                    "v ",
                    "w ",
                    "x ",
                    "y ",
                    "z "
                ],
                [
                    "abc ",
                    "def ",
                    "ghi ",
                    "jkl ",
                    "mno ",
                    "pqr ",
                    "stu ",
                    "vwx ",
                    "yz "
                ]
            ],
            "outputs": [
                4,
                6,
                26,
                26,
                9
            ]
        }
    },
    "1240": {
        "title": "Minimum Number of Squares to Tile a Rectangle",
        "description": "Given a rectangle of size `n` x `m`, you need to find the minimum number of integer-sided squares that can tile the rectangle completely. Return the minimum number of squares required.",
        "example": "Example 1:\n\nInput: n = 2, m = 3\nOutput: 3\nExplanation: To cover the rectangle, we need 3 squares: 2 squares of size 1x1 and 1 square of size 2x2.\n\nExample 2:\n\nInput: n = 5, m = 8\nOutput: 5\n\nExample 3:\n\nInput: n = 11, m = 13\nOutput: 6",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3
                ],
                [
                    5,
                    8
                ],
                [
                    11,
                    13
                ],
                [
                    1,
                    1
                ],
                [
                    4,
                    4
                ],
                [
                    6,
                    6
                ],
                [
                    13,
                    13
                ],
                [
                    10,
                    12
                ],
                [
                    7,
                    9
                ],
                [
                    3,
                    10
                ],
                [
                    8,
                    5
                ],
                [
                    9,
                    11
                ],
                [
                    12,
                    12
                ],
                [
                    13,
                    1
                ],
                [
                    1,
                    13
                ],
                [
                    13,
                    13
                ],
                [
                    13,
                    12
                ],
                [
                    12,
                    13
                ],
                [
                    13,
                    7
                ],
                [
                    7,
                    13
                ]
            ],
            "outputs": [
                3,
                5,
                6,
                1,
                4,
                4,
                9,
                6,
                5,
                4,
                5,
                6,
                9,
                13,
                13,
                13,
                9,
                9,
                9,
                9
            ]
        }
    },
    "1243": {
        "title": "Array Transformation",
        "description": "Given an initial array `arr`, every day you produce a new array using the array of the previous day. On the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`: \n\n1. If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented. \n2. If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented. \n3. The first and last elements never change. \n\nAfter some days, the array does not change. Return that final array.",
        "example": "Example:\n\nInput: arr = [6,2,3,4]\nOutput: [6,3,3,4]\nExplanation: On the first day, the array is changed from [6,2,3,4] to [6,3,3,4]. No more operations can be done to this array.",
        "level": "Medium",
        "tags": [
            "array",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                [
                    6,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    6,
                    3,
                    4,
                    3,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                [
                    6,
                    3,
                    3,
                    4
                ],
                [
                    1,
                    4,
                    4,
                    4,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ]
        }
    },
    "1244": {
        "title": "Leaderboard Class",
        "description": "Design a Leaderboard class that supports three functions: addScore(playerId, score), top(K), and reset(playerId). The addScore function updates the leaderboard by adding the given score to the player's score. If the player does not exist in the leaderboard, they are added with the given score. The top function returns the sum of the scores of the top K players. The reset function resets the score of the player with the given playerId to 0. Initially, the leaderboard is empty.",
        "example": "Example:\n\nLeaderboard leaderboard = new Leaderboard();\nleaderboard.addScore(1, 73); // leaderboard = [[1, 73]];\nleaderboard.addScore(2, 56); // leaderboard = [[1, 73], [2, 56]];\nleaderboard.addScore(3, 39); // leaderboard = [[1, 73], [2, 56], [3, 39]];\nleaderboard.addScore(4, 51); // leaderboard = [[1, 73], [2, 56], [3, 39], [4, 51]];\nleaderboard.addScore(5, 4); // leaderboard = [[1, 73], [2, 56], [3, 39], [4, 51], [5, 4]];\nleaderboard.top(1); // returns 73;\nleaderboard.reset(1); // leaderboard = [[2, 56], [3, 39], [4, 51], [5, 4]];\nleaderboard.reset(2); // leaderboard = [[3, 39], [4, 51], [5, 4]];\nleaderboard.addScore(2, 51); // leaderboard = [[2, 51], [3, 39], [4, 51], [5, 4]];\nleaderboard.top(3); // returns 141 = 51 + 51 + 39;",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    1,
                    73
                ],
                [
                    2,
                    56
                ],
                [
                    3,
                    39
                ],
                [
                    4,
                    51
                ],
                [
                    5,
                    4
                ],
                [
                    1
                ],
                [
                    1
                ],
                [
                    2
                ],
                [
                    2,
                    51
                ],
                [
                    3
                ]
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "73",
                "null",
                "null",
                "null",
                "141"
            ]
        }
    },
    "1245": {
        "title": "Tree Diameter",
        "description": "Given an undirected tree with `n` nodes labeled from 0 to n-1, represented by a 2D array `edges`, find the diameter of the tree. The diameter of a tree is defined as the number of edges in the longest path between any two nodes in the tree.",
        "example": "Example:\n\nInput: edges = [[0,1],[0,2]]\nOutput: 2\nExplanation: The longest path in the tree is 1 - 0 - 2.\n\nInput: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]\nOutput: 4\nExplanation: The longest path in the tree is 3 - 2 - 1 - 4 - 5.",
        "level": "Medium",
        "tags": [
            "Tree",
            "Graph",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        5
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        0,
                        5
                    ],
                    [
                        0,
                        6
                    ],
                    [
                        0,
                        7
                    ],
                    [
                        0,
                        8
                    ],
                    [
                        0,
                        9
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ],
                    [
                        24,
                        25
                    ],
                    [
                        25,
                        26
                    ],
                    [
                        26,
                        27
                    ],
                    [
                        27,
                        28
                    ],
                    [
                        28,
                        29
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ],
                    [
                        24,
                        25
                    ],
                    [
                        25,
                        26
                    ],
                    [
                        26,
                        27
                    ],
                    [
                        27,
                        28
                    ],
                    [
                        28,
                        29
                    ],
                    [
                        29,
                        30
                    ],
                    [
                        30,
                        31
                    ],
                    [
                        31,
                        32
                    ],
                    [
                        32,
                        33
                    ],
                    [
                        33,
                        34
                    ],
                    [
                        34,
                        35
                    ],
                    [
                        35,
                        36
                    ],
                    [
                        36,
                        37
                    ],
                    [
                        37,
                        38
                    ],
                    [
                        38,
                        39
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ],
                    [
                        24,
                        25
                    ],
                    [
                        25,
                        26
                    ],
                    [
                        26,
                        27
                    ],
                    [
                        27,
                        28
                    ],
                    [
                        28,
                        29
                    ],
                    [
                        29,
                        30
                    ],
                    [
                        30,
                        31
                    ],
                    [
                        31,
                        32
                    ],
                    [
                        32,
                        33
                    ],
                    [
                        33,
                        34
                    ],
                    [
                        34,
                        35
                    ],
                    [
                        35,
                        36
                    ],
                    [
                        36,
                        37
                    ],
                    [
                        37,
                        38
                    ],
                    [
                        38,
                        39
                    ],
                    [
                        39,
                        40
                    ],
                    [
                        40,
                        41
                    ],
                    [
                        41,
                        42
                    ],
                    [
                        42,
                        43
                    ],
                    [
                        43,
                        44
                    ],
                    [
                        44,
                        45
                    ],
                    [
                        45,
                        46
                    ],
                    [
                        46,
                        47
                    ],
                    [
                        47,
                        48
                    ],
                    [
                        48,
                        49
                    ]
                ]
            ],
            "outputs": [
                2,
                4,
                8,
                9,
                14,
                19,
                24,
                29,
                34,
                39
            ]
        }
    },
    "1246": {
        "title": "Minimum Moves to Remove All Numbers",
        "description": "Given an integer array `arr`, you need to find the minimum number of moves required to remove all numbers from the array. In one move, you can select a palindromic subarray `arr[i], arr[i + 1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and right of that subarray move to fill the gap left by the removal.",
        "example": "Example:\n\nInput: arr = [1,2]\nOutput: 2\n\nExplanation: The array [1,2] is already a palindrome, so we need to remove it in two moves.\n\nInput: arr = [1,3,4,1,5]\nOutput: 3\nExplanation: We can remove the subarrays [4], [1,3,1], and [5] to get an empty array.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2
                ],
                [
                    1,
                    3,
                    4,
                    1,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                2,
                3,
                5,
                5,
                3,
                10,
                10,
                7,
                9,
                12,
                12,
                15,
                15,
                18,
                18,
                21,
                21,
                24,
                24,
                27
            ]
        }
    },
    "1247": null,
    "1248": null,
    "1250": {
        "title": "Good Array",
        "description": "Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be **good** if you can obtain a sum of `1` from the array by any possible subset and multiplicand. Return `True` if the array is **good** otherwise return `False`.",
        "example": "Example:\n\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[12,5,7,23]",
                "[29,6,10]",
                "[3,6]",
                "[1,2,3,4,5]",
                "[10,20,30,40,50]",
                "[100,200,300,400,500]",
                "[2,4,6,8,10]",
                "[1,3,5,7,9]",
                "[15,25,35,45,55]",
                "[1000,2000,3000,4000,5000]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[3,3,3,3,3]",
                "[4,4,4,4,4]",
                "[5,5,5,5,5]",
                "[6,6,6,6,6]",
                "[7,7,7,7,7]",
                "[8,8,8,8,8]",
                "[9,9,9,9,9]",
                "[10,10,10,10,10]"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "1252": {
        "title": "Odd-Valued Cells",
        "description": "You are given an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a 0-indexed location to perform some increment operations on the matrix. For each location `indices[i]`, you need to increment all the cells on row `ri` and all the cells on column `ci`. After applying the increments to all locations in `indices`, return the number of odd-valued cells in the matrix.",
        "example": "Example:\n\nInput: m = 2, n = 3, indices = [[0,1],[1,1]]\nOutput: 6\nExplanation: Initial matrix = [[0,0,0],[0,0,0]]. After applying the first increment, it becomes [[1,2,1],[0,1,0]]. The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.",
        "level": "Medium",
        "tags": [
            "matrix",
            "increment",
            "odd numbers"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            1
                        ]
                    ]
                ],
                [
                    2,
                    2,
                    [
                        [
                            1,
                            1
                        ],
                        [
                            0,
                            0
                        ]
                    ]
                ],
                [
                    3,
                    4,
                    [
                        [
                            0,
                            0
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    4,
                    4,
                    [
                        [
                            0,
                            0
                        ],
                        [
                            1,
                            1
                        ],
                        [
                            2,
                            2
                        ],
                        [
                            3,
                            3
                        ]
                    ]
                ],
                [
                    2,
                    2,
                    [
                        [
                            0,
                            0
                        ],
                        [
                            1,
                            1
                        ],
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            0
                        ]
                    ]
                ]
            ],
            "outputs": [
                6,
                0,
                10,
                16,
                4
            ]
        }
    },
    "1253": {
        "title": "Reconstruct Binary Matrix",
        "description": "Given the details of a matrix with `n` columns and `2` rows, where each element in the matrix can be `0` or `1`, the sum of elements of the 0-th (upper) row is given as `upper`, the sum of elements of the 1-st (lower) row is given as `lower`, and the sum of elements in the i-th column (0-indexed) is `colsum[i]`, your task is to reconstruct the matrix with the given `upper`, `lower`, and `colsum`. Return the reconstructed matrix as a 2-D integer array. If there are multiple valid solutions, any of them will be accepted. If no valid solution exists, return an empty 2-D array.",
        "example": "Example:\n\nInput: upper = 2, lower = 1, colsum = [1,1,1]\nOutput: [[1,1,0],[0,0,1]]\nExplanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    1,
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    2,
                    3,
                    [
                        2,
                        2,
                        1,
                        1
                    ]
                ],
                [
                    5,
                    5,
                    [
                        2,
                        1,
                        2,
                        0,
                        1,
                        0,
                        1,
                        2,
                        0,
                        1
                    ]
                ],
                [
                    0,
                    0,
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    3,
                    3,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    4,
                    4,
                    [
                        2,
                        2,
                        2,
                        2,
                        0,
                        0
                    ]
                ],
                [
                    2,
                    2,
                    [
                        1,
                        1,
                        0,
                        0,
                        1,
                        1
                    ]
                ],
                [
                    1,
                    2,
                    [
                        0,
                        1,
                        1,
                        0,
                        1,
                        0
                    ]
                ],
                [
                    3,
                    2,
                    [
                        1,
                        0,
                        1,
                        1,
                        0,
                        1
                    ]
                ],
                [
                    5,
                    0,
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ],
                [],
                [
                    [
                        1,
                        1,
                        1,
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        0,
                        0,
                        1,
                        1,
                        0,
                        1
                    ]
                ],
                [],
                [
                    [
                        1,
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        1,
                        1,
                        0,
                        0
                    ]
                ],
                [
                    [
                        0,
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        1,
                        1,
                        0
                    ]
                ],
                [
                    [
                        1,
                        0,
                        1,
                        0,
                        0,
                        1
                    ],
                    [
                        0,
                        1,
                        0,
                        1,
                        1,
                        0
                    ]
                ],
                []
            ]
        }
    },
    "1257": {
        "title": "Smallest Common Region",
        "description": "You are given some lists of `regions` where the first region of each list includes all other regions in that list. Naturally, if a region `x` contains another region `y` then `x` is bigger than `y`. Also, by definition, a region `x` contains itself. Given two regions: `region1` and `region2`, return the smallest region that contains both of them. If you are given regions `r1`, `r2`, and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`. It is guaranteed the smallest region exists.",
        "example": "Example:\n\nInput:\nregions = [[\"Earth\", \"North America\", \"South America\"], [\"North America\", \"United States\", \"Canada\"], [\"United States\", \"New York\", \"Boston\"], [\"Canada\", \"Ontario\", \"Quebec\"], [\"South America\", \"Brazil\"]],\nregion1 = \"Quebec\",\nregion2 = \"New York\"\nOutput: \"North America\"\n\nInput:\nregions = [[\"Earth\", \"North America\", \"South America\"], [\"North America\", \"United States\", \"Canada\"], [\"United States\", \"New York\", \"Boston\"], [\"Canada\", \"Ontario\", \"Quebec\"], [\"South America\", \"Brazil\"]],\nregion1 = \"Canada\",\nregion2 = \"South America\"\nOutput: \"Earth\"",
        "level": "Medium",
        "tags": [
            "array",
            "graph",
            "tree"
        ],
        "test_cases": {
            "inputs": [
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Quebec",
                    "region2": "New York"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Canada",
                    "region2": "South America"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Brazil",
                    "region2": "Ontario"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Earth",
                    "region2": "Earth"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Boston",
                    "region2": "New York"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "United States",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Ontario",
                    "region2": "South America"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Earth",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Canada",
                    "region2": "Boston"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "South America",
                    "region2": "Earth"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "New York",
                    "region2": "Ontario"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Quebec",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Boston",
                    "region2": "Canada"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "United States",
                    "region2": "Ontario"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Ontario",
                    "region2": "Earth"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Brazil",
                    "region2": "South America"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Earth",
                    "region2": "New York"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Canada",
                    "region2": "Boston"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "South America",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "New York",
                    "region2": "Boston"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Quebec",
                    "region2": "Canada"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Boston",
                    "region2": "Earth"
                }
            ],
            "outputs": [
                "North America",
                "Earth",
                "Earth",
                "Earth",
                "North America",
                "Earth",
                "Earth",
                "Earth",
                "North America",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth"
            ]
        }
    },
    "1258": {
        "title": "Synonymous Sentences",
        "description": "Given a list of equivalent string pairs `synonyms` and a sentence `text`, return all possible synonymous sentences sorted lexicographically.",
        "example": "For example, given synonyms = [['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']] and text = 'I am happy today but was sad yesterday', the possible synonymous sentences are: ['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday'].",
        "level": "Medium",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was sad yesterday']",
                "[[['happy', 'joy'], ['cheerful', 'glad']], 'I am happy today but was sad yesterday']",
                "[[], 'I am happy today but was sad yesterday']",
                "[[['happy', 'joy']], 'I am happy today but was sad yesterday']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], '']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was sad']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was sad yesterday']"
            ],
            "outputs": [
                "['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday']",
                "['I am happy today but was sad yesterday', 'I am joy today but was sad yesterday']",
                "['I am happy today but was sad yesterday']",
                "['I am happy today but was sad yesterday']",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday']"
            ]
        }
    },
    "1259": {
        "title": "Handshake Arrangements",
        "description": "You are given an even number of people `numPeople` that stand around a circle and each person shakes hands with someone else so that there are `numPeople / 2` handshakes total. Return the number of ways these handshakes could occur such that none of the handshakes cross. Since the answer could be very large, return it modulo 109 + 7.",
        "example": "Example:\n\nInput: numPeople = 4\nOutput: 2\nExplanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].",
        "level": "Medium",
        "tags": [
            "Math",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                4,
                6,
                8,
                10,
                12,
                14,
                16,
                18,
                20,
                22,
                24,
                26,
                28,
                30,
                32,
                34,
                36,
                38,
                40,
                42
            ],
            "outputs": [
                2,
                5,
                14,
                42,
                132,
                429,
                1430,
                4862,
                16796,
                58786,
                208012,
                742900,
                2674440,
                9694845,
                35357670,
                129644790,
                477638700,
                1767263190,
                6564120420,
                24466267020
            ]
        }
    },
    "1260": {
        "title": "Grid Shift",
        "description": "Given a 2D grid of size m x n and an integer k, perform k shift operations on the grid. In each shift operation, the elements in the grid move according to the following rules: \n\n- Element at grid[i][j] moves to grid[i][j + 1].\n- Element at grid[i][n - 1] moves to grid[i + 1][0].\n- Element at grid[m - 1][n - 1] moves to grid[0][0].\n\nReturn the 2D grid after applying the shift operation k times.",
        "example": "Example:\n\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[9,1,2],[3,4,5],[6,7,8]]\n\nInput: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\nOutput: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9\nOutput: [[1,2,3],[4,5,6],[7,8,9]]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "shift"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90],[91,92,93,94,95]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90],[91,92,93,94,95],[96,97,98,99,100]]"
            ],
            "outputs": [
                "[[9,1,2],[3,4,5],[6,7,8]]",
                "[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[4,1,2,3],[8,5,6,7],[12,9,10,11]]",
                "[[4,5,6],[7,8,9],[10,11,1],[2,3,5]]",
                "[[6,7,8,9,10],[11,12,13,14,15],[1,2,3,4,5]]",
                "[[11,12,13,14,15],[16,17,18,19,20],[21,1,2,3,4],[6,7,8,9,10]]",
                "[[16,17,18,19,20],[21,22,23,24,25],[26,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[21,22,23,24,25],[26,27,28,29,30],[31,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[26,27,28,29,30],[31,32,33,34,35],[36,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[31,32,33,34,35],[36,37,38,39,40],[41,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]",
                "[[36,37,38,39,40],[41,42,43,44,45],[46,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]",
                "[[41,42,43,44,45],[46,47,48,49,50],[51,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40]]",
                "[[46,47,48,49,50],[51,52,53,54,55],[56,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45]]",
                "[[51,52,53,54,55],[56,57,58,59,60],[61,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50]]",
                "[[56,57,58,59,60],[61,62,63,64,65],[66,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55]]",
                "[[61,62,63,64,65],[66,67,68,69,70],[71,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60]]",
                "[[66,67,68,69,70],[71,72,73,74,75],[76,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65]]",
                "[[71,72,73,74,75],[76,77,78,79,80],[81,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70]]",
                "[[76,77,78,79,80],[81,82,83,84,85],[86,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75]]",
                "[[81,82,83,84,85],[86,87,88,89,90],[91,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80]]",
                "[[86,87,88,89,90],[91,92,93,94,95],[96,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85]]",
                "[[91,92,93,94,95],[96,97,98,99,100],[1,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90]]"
            ]
        }
    },
    "1261": null,
    "1262": {
        "title": "Maximum Sum Divisible by Three",
        "description": "Given an integer array `nums`, return the maximum possible sum of elements of the array such that it is divisible by three.",
        "example": "Example 1:\n\nInput: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8. Their sum is 18, which is the maximum sum divisible by 3.\n\nExample 2:\n\nInput: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.\n\nExample 3:\n\nInput: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4. Their sum is 12, which is the maximum sum divisible by 3.",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    6,
                    5,
                    1,
                    8
                ],
                [
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25
                ],
                [
                    6,
                    12,
                    18,
                    24,
                    30
                ],
                [
                    7,
                    14,
                    21,
                    28,
                    35
                ],
                [
                    9,
                    18,
                    27,
                    36,
                    45
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    11,
                    22,
                    33,
                    44,
                    55
                ],
                [
                    13,
                    26,
                    39,
                    52,
                    65
                ],
                [
                    14,
                    28,
                    42,
                    56,
                    70
                ],
                [
                    15,
                    30,
                    45,
                    60,
                    75
                ],
                [
                    16,
                    32,
                    48,
                    64,
                    80
                ],
                [
                    17,
                    34,
                    51,
                    68,
                    85
                ],
                [
                    19,
                    38,
                    57,
                    76,
                    95
                ],
                [
                    21,
                    42,
                    63,
                    84,
                    105
                ]
            ],
            "outputs": [
                18,
                0,
                12,
                3,
                6,
                9,
                12,
                60,
                60,
                63,
                63,
                60,
                66,
                66,
                84,
                84,
                96,
                102,
                102,
                126
            ]
        }
    },
    "1263": {
        "title": "Minimum Number of Pushes",
        "description": "A storekeeper is playing a game where they need to push a box to a target location in a warehouse. The game is represented by an m x n grid of characters, where each element is a wall, floor, or box. The player can move up, down, left, or right in the grid if it is a floor (empty cell). The goal is to move the box to the target position under certain rules. The player cannot walk through the box and can only push the box to an adjacent free cell. Return the minimum number of pushes required to move the box to the target. If it is not possible to reach the target, return -1.",
        "example": "Example:\n\nInput:\ngrid = [\n    ['#', '#', '#', '#', '#', '#'],\n    ['#', 'T', '#', '#', '#', '#'],\n    ['#', '.', '.', 'B', '.', '#'],\n    ['#', '.', '#', '#', '.', '#'],\n    ['#', '.', '.', '.', 'S', '#'],\n    ['#', '#', '#', '#', '#', '#']\n]\nOutput: 3\nExplanation: The box can be pushed down, left, and up to reach the target.",
        "level": "Medium",
        "tags": [
            "grid",
            "search",
            "BFS"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        "T",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        "B",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        "#",
                        "#",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        "S",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ]
                ],
                [
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        "T",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        "B",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        "S",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ]
                ],
                [
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        "T",
                        ".",
                        ".",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        "#",
                        "B",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        "S",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ]
                ]
            ],
            "outputs": [
                3,
                -1,
                5
            ]
        }
    },
    "1265": {
        "title": "Reverse Linked List Values",
        "description": "You are given an immutable linked list. Implement a function to print out all the values of each node in reverse order using the provided interface.\n\nThe interface `ImmutableListNode` represents an immutable linked list, and you are given the head of the list. You can only access the linked list using the following functions:\n\n- `ImmutableListNode.printValue()`: Prints the value of the current node.\n- `ImmutableListNode.getNext()`: Returns the next node.\n\nYou must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.",
        "example": "Example:\n\nInput: head = [1,2,3,4]\nOutput: [4,3,2,1]\n\nExplanation: The linked list contains the values 1, 2, 3, and 4. Printing the values in reverse order gives [4, 3, 2, 1].",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Immutable",
            "Reverse"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "head": [
                        0,
                        -4,
                        -1,
                        3,
                        -5
                    ]
                },
                {
                    "head": [
                        -2,
                        0,
                        6,
                        4,
                        4,
                        -6
                    ]
                },
                {
                    "head": [
                        1
                    ]
                },
                {
                    "head": [
                        1000,
                        -1000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "head": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        -6,
                        -7,
                        -8,
                        -9,
                        -10
                    ]
                },
                {
                    "head": [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                },
                {
                    "head": [
                        1,
                        3,
                        5,
                        7,
                        9,
                        2,
                        4,
                        6,
                        8,
                        10
                    ]
                },
                {
                    "head": [
                        -1,
                        -3,
                        -5,
                        -7,
                        -9,
                        -2,
                        -4,
                        -6,
                        -8,
                        -10
                    ]
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                },
                {
                    "head": [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                },
                {
                    "head": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        -6,
                        -7,
                        -8,
                        -9,
                        -10,
                        -11,
                        -12,
                        -13,
                        -14,
                        -15,
                        -16,
                        -17,
                        -18,
                        -19,
                        -20
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            ],
            "outputs": [
                [
                    4,
                    3,
                    2,
                    1
                ],
                [
                    -5,
                    3,
                    -1,
                    -4,
                    0
                ],
                [
                    -6,
                    4,
                    4,
                    6,
                    0,
                    -2
                ],
                [
                    1
                ],
                [
                    -1000,
                    1000
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    -10,
                    -9,
                    -8,
                    -7,
                    -6,
                    -5,
                    -4,
                    -3,
                    -2,
                    -1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    -10,
                    -8,
                    -6,
                    -4,
                    -2,
                    -9,
                    -7,
                    -5,
                    -3,
                    -1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    -20,
                    -19,
                    -18,
                    -17,
                    -16,
                    -15,
                    -14,
                    -13,
                    -12,
                    -11,
                    -10,
                    -9,
                    -8,
                    -7,
                    -6,
                    -5,
                    -4,
                    -3,
                    -2,
                    -1
                ],
                [
                    100,
                    99,
                    98,
                    97,
                    96,
                    95,
                    94,
                    93,
                    92,
                    91,
                    90,
                    89,
                    88,
                    87,
                    86,
                    85,
                    84,
                    83,
                    82,
                    81,
                    80,
                    79,
                    78,
                    77,
                    76,
                    75,
                    74,
                    73,
                    72,
                    71,
                    70,
                    69,
                    68,
                    67,
                    66,
                    65,
                    64,
                    63,
                    62,
                    61,
                    60,
                    59,
                    58,
                    57,
                    56,
                    55,
                    54,
                    53,
                    52,
                    51,
                    50,
                    49,
                    48,
                    47,
                    46,
                    45,
                    44,
                    43,
                    42,
                    41,
                    40,
                    39,
                    38,
                    37,
                    36,
                    35,
                    34,
                    33,
                    32,
                    31,
                    30,
                    29,
                    28,
                    27,
                    26,
                    25,
                    24,
                    23,
                    22,
                    21,
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ]
        }
    },
    "1266": {
        "title": "Minimum Time to Visit All Points",
        "description": "Given a list of points on a 2D plane, find the minimum time in seconds to visit all the points in the order given. You can move vertically, horizontally, or diagonally (sqrt(2) units) in 1 second. You must visit the points in the same order as they appear in the list.",
        "example": "Example:\n\nInput: points = [[1,1],[3,4],[-1,0]]\nOutput: 7\nExplanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]. The time from [1,1] to [3,4] is 3 seconds and the time from [3,4] to [-1,0] is 4 seconds. The total time is 7 seconds.",
        "level": "Medium",
        "tags": [
            "array",
            "geometry"
        ],
        "test_cases": {
            "inputs": [
                "[[1,1],[3,4],[-1,0]]",
                "[[3,2],[-2,2]]",
                "[[0,0],[0,1],[1,0],[1,1]]",
                "[[5,5],[10,10],[15,15],[20,20]]",
                "[[-5,-5],[-10,-10],[-15,-15],[-20,-20]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30]]"
            ],
            "outputs": [
                "7",
                "5",
                "3",
                "20",
                "20",
                "18",
                "28",
                "38",
                "48",
                "58"
            ]
        }
    },
    "1267": null,
    "1268": {
        "title": "Product Suggestion System",
        "description": "You are given an array of strings `products` and a string `searchWord`. Design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have a common prefix with `searchWord`. If there are more than three products with a common prefix, return the three lexicographically minimum products. Return a list of lists of the suggested products after each character of `searchWord` is typed.",
        "example": "Example:\n\nInput: products = [\"mobile \", \"mouse \", \"moneypot \", \"monitor \", \"mousepad \"], searchWord = \"mouse \"\nOutput: [[\"mobile \", \"moneypot \", \"monitor \"],[\"mobile \", \"moneypot \", \"monitor \"],[\"mouse \", \"mousepad \"],[\"mouse \", \"mousepad \"],[\"mouse \", \"mousepad \"]]\nExplanation: products sorted lexicographically = [\"mobile \", \"moneypot \", \"monitor \", \"mouse \", \"mousepad \"]. After typing m and mo all products match and we show the user [\"mobile \", \"moneypot \", \"monitor \"]. After typing mou, mous, and mouse the system suggests [\"mouse \", \"mousepad \"].",
        "level": "Medium",
        "tags": [
            "array",
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "products": [
                        "mobile ",
                        "mouse ",
                        "moneypot ",
                        "monitor ",
                        "mousepad "
                    ],
                    "searchWord": "mouse "
                },
                {
                    "products": [
                        "havana "
                    ],
                    "searchWord": "havana "
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "b"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "d"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "e"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "f"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "g"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "h"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "i"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "j"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "k"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "l"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "m"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "n"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "o"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "p"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "q"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "r"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "s"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "t"
                }
            ],
            "outputs": [
                [
                    [
                        "mobile ",
                        "moneypot ",
                        "monitor "
                    ],
                    [
                        "mobile ",
                        "moneypot ",
                        "monitor "
                    ],
                    [
                        "mouse ",
                        "mousepad "
                    ],
                    [
                        "mouse ",
                        "mousepad "
                    ],
                    [
                        "mouse ",
                        "mousepad "
                    ]
                ],
                [
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ]
                ],
                [
                    [
                        "apple ",
                        "banana ",
                        "cherry "
                    ],
                    [
                        "apple ",
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ]
                ],
                [
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ]
                ],
                [
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ]
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ]
            ]
        }
    },
    "1269": {
        "title": "Pointer Movement",
        "description": "You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time). Given two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.",
        "example": "Example:\n\nInput: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 different ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    2
                ],
                [
                    2,
                    4
                ],
                [
                    4,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    10,
                    5
                ],
                [
                    500,
                    100
                ],
                [
                    20,
                    10
                ],
                [
                    100,
                    50
                ],
                [
                    5,
                    3
                ],
                [
                    8,
                    4
                ],
                [
                    15,
                    7
                ],
                [
                    30,
                    15
                ],
                [
                    50,
                    25
                ],
                [
                    100,
                    50
                ],
                [
                    200,
                    100
                ],
                [
                    300,
                    150
                ],
                [
                    400,
                    200
                ],
                [
                    500,
                    250
                ],
                [
                    500,
                    500
                ],
                [
                    1,
                    500
                ]
            ],
            "outputs": [
                4,
                2,
                8,
                1,
                792,
                33590706,
                184756,
                538992043,
                13,
                18,
                136,
                40116600,
                538992043,
                538992043,
                538992043,
                538992043,
                538992043,
                538992043,
                538992043,
                1
            ]
        }
    },
    "1271": {
        "title": "Hexspeak Representation",
        "description": "Given a decimal number, convert it to its Hexspeak representation by converting it to an uppercase hexadecimal string and replacing '0' with 'O' and '1' with 'I'. Return the Hexspeak representation if it is valid, otherwise return 'ERROR'.",
        "example": "Example:\n\nInput: num = \"257\"\nOutput: \"IOI\"\nExplanation: 257 is 101 in hexadecimal.",
        "level": "Easy",
        "tags": [
            "String",
            "Conversion"
        ],
        "test_cases": {
            "inputs": [
                "\"257\"",
                "\"3\"",
                "\"10\"",
                "\"16\"",
                "\"100\"",
                "\"256\"",
                "\"1024\"",
                "\"4096\"",
                "\"65535\"",
                "\"100000\"",
                "\"999999\"",
                "\"1000000\"",
                "\"1000000000000\"",
                "\"999999999999\""
            ],
            "outputs": [
                "\"IOI\"",
                "\"ERROR\"",
                "\"A\"",
                "\"10\"",
                "\"64\"",
                "\"100\"",
                "\"400\"",
                "\"1000\"",
                "\"FFFF\"",
                "\"ERROR\"",
                "\"ERROR\"",
                "\"ERROR\"",
                "\"ERROR\"",
                "\"ERROR\""
            ]
        }
    },
    "1272": {
        "title": "Remove Interval",
        "description": "Given a sorted list of disjoint intervals representing a set of real numbers, remove a specified interval from the set. Return the updated set of intervals as a sorted list of disjoint intervals.",
        "example": "Example:\n\nInput: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]\nOutput: [[0,1],[6,7]]\n\nExplanation: The original set of intervals is [[0,2],[3,4],[5,7]]. The interval [1,6] is removed from the set, resulting in the updated set of intervals [[0,1],[6,7]].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[0,2],[3,4],[5,7]]",
                "[[0,5]]",
                "[[-5,-4],[-3,-2],[1,2],[3,5],[8,9]]",
                "[[1,3],[5,7],[9,11]]",
                "[[0,10]]",
                "[[-10,-5],[-3,0],[2,5],[7,10]]",
                "[[0,2],[4,6],[8,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6]]",
                "[[0,1],[2,3],[4,5],[6,7]]",
                "[[0,5],[6,10]]",
                "[[-10,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,2],[3,5],[6,8],[9,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6],[7,9]]",
                "[[0,3],[4,7],[8,11],[12,15]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9]]",
                "[[-5,-4],[-3,-2],[0,1],[2,3],[4,5]]",
                "[[0,2],[3,5],[6,8],[9,11],[12,14]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]]"
            ],
            "outputs": [
                "[[0,1],[6,7]]",
                "[[0,2],[3,5]]",
                "[[-5,-4],[-3,-2],[4,5],[8,9]]",
                "[[1,3],[5,7],[9,11]]",
                "[]",
                "[[-10,-5],[-3,0],[2,5],[7,10]]",
                "[[0,2],[4,6],[8,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6]]",
                "[[0,1],[2,3],[4,5],[6,7]]",
                "[[0,5],[6,10]]",
                "[[-10,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,2],[3,5],[6,8],[9,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6],[7,9]]",
                "[[0,3],[4,7],[8,11],[12,15]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9]]",
                "[[-5,-4],[-3,-2],[0,1],[2,3],[4,5]]",
                "[[0,2],[3,5],[6,8],[9,11],[12,14]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]]"
            ]
        }
    },
    "1273": {
        "title": "Remove Subtrees with Zero Sum",
        "description": "Given a tree rooted at node 0, where each node has a value and a parent node, remove every subtree whose sum of values of nodes is zero. Return the number of remaining nodes in the tree.",
        "example": "Example:\n\nInput: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]\nOutput: 2\n\nExplanation: The tree can be represented as follows:\n\n       0 (1)\n      / \\\n     1   2 (1)\n    /   /|\\\n   3   4 5 6\n\nThe subtree rooted at node 1 has a sum of values equal to -2 + 4 + 0 = 2, which is not zero. The subtree rooted at node 2 has a sum of values equal to -2 + (-1) + (-1) = -4, which is zero. Therefore, the subtree rooted at node 2 should be removed. The remaining nodes are 0 and 1, so the output is 2.",
        "level": "Medium",
        "tags": [
            "Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nodes": 7,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        2,
                        2,
                        2
                    ],
                    "value": [
                        1,
                        -2,
                        4,
                        0,
                        -2,
                        -1,
                        -1
                    ]
                },
                {
                    "nodes": 7,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        2,
                        2,
                        2
                    ],
                    "value": [
                        1,
                        -2,
                        4,
                        0,
                        -2,
                        -1,
                        -2
                    ]
                },
                {
                    "nodes": 5,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        1
                    ],
                    "value": [
                        1,
                        -1,
                        1,
                        0,
                        0
                    ]
                },
                {
                    "nodes": 6,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        1,
                        2
                    ],
                    "value": [
                        1,
                        -1,
                        1,
                        0,
                        0,
                        0
                    ]
                },
                {
                    "nodes": 8,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        3
                    ],
                    "value": [
                        1,
                        -1,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            ],
            "outputs": [
                2,
                6,
                3,
                4,
                5
            ]
        }
    },
    "1274": null,
    "1275": {
        "title": "Tic-Tac-Toe Winner",
        "description": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The first player A always places 'X' characters, while the second player B always places 'O' characters. The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli], return the winner of the game if it exists (A or B). In case the game ends in a draw return 'Draw'. If there are still movements to play return 'Pending'.",
        "example": "Example 1:\n\nInput: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: 'A'\nExplanation: A wins, they always play first.\n\nExample 2:\n\nInput: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: 'B'\nExplanation: B wins.\n\nExample 3:\n\nInput: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: 'Draw'\nExplanation: The game ends in a draw since there are no moves to make.",
        "level": "Easy",
        "tags": [
            "Array",
            "Simulation"
        ],
        "test_cases": {
            "inputs": [
                "[[0,0],[2,0],[1,1],[2,1],[2,2]]",
                "[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
                "[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1],[0,2],[1,2],[2,0]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1],[0,2],[1,2]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1],[0,2]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0]]",
                "[[0,0],[1,1],[2,2],[0,1]]",
                "[[0,0],[1,1],[2,2]]",
                "[[0,0],[1,1]]",
                "[[0,0]]",
                "[[0,0],[0,1],[0,2]]",
                "[[1,0],[1,1],[1,2]]",
                "[[2,0],[2,1],[2,2]]",
                "[[0,0],[1,0],[2,0]]",
                "[[0,1],[1,1],[2,1]]",
                "[[0,2],[1,2],[2,2]]",
                "[[0,0],[1,1],[0,1],[1,0],[2,2],[2,1],[0,2],[2,0],[1,2]]",
                "[[0,0],[1,1],[0,1],[1,0],[2,2],[2,1],[0,2],[2,0]]"
            ],
            "outputs": [
                "'A'",
                "'B'",
                "'Draw'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'Draw'",
                "'Pending'"
            ]
        }
    },
    "1276": {
        "title": "Burger Ingredients",
        "description": "Given the number of tomato slices and cheese slices, determine the number of jumbo and small burgers that can be made using the given ingredients. The ingredients for each type of burger are as follows: \n\n- Jumbo Burger: 4 tomato slices and 1 cheese slice \n- Small Burger: 2 tomato slices and 1 cheese slice \n\nReturn the number of jumbo and small burgers as a list `[total_jumbo, total_small]` such that the remaining tomato slices and cheese slices are equal to 0. If it is not possible to use all the ingredients to make the burgers, return an empty list. ",
        "example": "Example:\n\nInput: tomatoSlices = 16, cheeseSlices = 7\nOutput: [1, 6]\nExplanation: To make one jumbo burger and six small burgers, we need 4*1 + 2*6 = 16 tomato slices and 1 + 6 = 7 cheese slices. There will be no remaining ingredients.",
        "level": "Easy",
        "tags": [
            "Math",
            "Arrays"
        ],
        "test_cases": {
            "inputs": [
                [
                    16,
                    7
                ],
                [
                    17,
                    4
                ],
                [
                    4,
                    17
                ],
                [
                    0,
                    0
                ],
                [
                    10,
                    5
                ],
                [
                    8,
                    2
                ],
                [
                    6,
                    3
                ],
                [
                    12,
                    6
                ],
                [
                    20,
                    10
                ],
                [
                    15,
                    8
                ],
                [
                    3,
                    1
                ],
                [
                    9,
                    4
                ],
                [
                    14,
                    7
                ],
                [
                    18,
                    9
                ],
                [
                    21,
                    11
                ],
                [
                    25,
                    12
                ],
                [
                    30,
                    15
                ],
                [
                    35,
                    17
                ],
                [
                    40,
                    20
                ],
                [
                    45,
                    22
                ]
            ],
            "outputs": [
                [
                    1,
                    6
                ],
                [],
                [],
                [
                    0,
                    0
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    3
                ],
                [
                    2,
                    3
                ],
                [
                    5,
                    5
                ],
                [
                    3,
                    6
                ],
                [],
                [
                    2,
                    3
                ],
                [
                    3,
                    4
                ],
                [
                    4,
                    5
                ],
                [
                    5,
                    6
                ],
                [
                    6,
                    7
                ],
                [
                    7,
                    8
                ],
                [
                    8,
                    9
                ],
                [
                    10,
                    10
                ],
                [
                    11,
                    11
                ]
            ]
        }
    },
    "1277": null,
    "1278": {
        "title": "Minimal Palindrome Divisions",
        "description": "Given a string `s` containing lowercase letters and an integer `k`, you need to change some characters of `s` to other lowercase English letters. Then divide `s` into `k` non-empty disjoint substrings such that each substring is a palindrome. Return the minimal number of characters that you need to change to divide the string.",
        "example": "Example:\n\nInput: s = \"abc\", k = 2\nOutput: 1\nExplanation: You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.",
        "level": "Medium",
        "tags": [
            "String",
            "Palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"abc\"",
                "\"aabbc\"",
                "\"leetcode\""
            ],
            "outputs": [
                "1",
                "0",
                "0"
            ]
        }
    },
    "1281": {
        "title": "Difference between Product and Sum of Digits",
        "description": "Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.",
        "example": "Example:\n\nInput: n = 234\nOutput: 15\nExplanation: Product of digits = 2 * 3 * 4 = 24\nSum of digits = 2 + 3 + 4 = 9\nResult = 24 - 9 = 15",
        "level": "Easy",
        "tags": [
            "math",
            "numbers"
        ],
        "test_cases": {
            "inputs": [
                234,
                4421,
                0,
                1,
                123456,
                9999,
                10000,
                987654321
            ],
            "outputs": [
                15,
                21,
                0,
                0,
                720,
                0,
                -1,
                362880
            ]
        }
    },
    "1282": null,
    "1283": {
        "title": "Smallest Divisor",
        "description": "Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the **smallest** `divisor` such that the result mentioned above is less than or equal to `threshold`.\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\nThe test cases are generated so that there will be an answer.",
        "example": "Example:\n\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2).",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,5,9], 6",
                "[44,22,33,11,1], 5",
                "[10,20,30,40], 15",
                "[3,6,9,12], 4",
                "[100,200,300,400], 100",
                "[7,14,21,28], 10",
                "[2,4,6,8], 3",
                "[50,100,150,200], 75",
                "[11,22,33,44], 20",
                "[5,10,15,20], 7",
                "[8,16,24,32], 5",
                "[25,50,75,100], 30",
                "[9,18,27,36], 12",
                "[15,30,45,60], 25",
                "[12,24,36,48], 8",
                "[40,80,120,160], 60",
                "[6,12,18,24], 9",
                "[20,40,60,80], 35",
                "[14,28,42,56], 18",
                "[30,60,90,120], 50"
            ],
            "outputs": [
                "5",
                "44",
                "10",
                "3",
                "100",
                "7",
                "2",
                "50",
                "11",
                "5",
                "8",
                "25",
                "9",
                "15",
                "6",
                "40",
                "6",
                "20",
                "14",
                "30"
            ]
        }
    },
    "1284": null,
    "1286": {
        "title": "Combination Iterator",
        "description": "Design a CombinationIterator class that generates combinations of a given length in lexicographical order. The class should have a constructor that takes a string of sorted distinct lowercase English letters and an integer representing the combination length. It should also have two methods: next() which returns the next combination, and hasNext() which returns true if there is a next combination available.",
        "example": "Example:\n\nInput:\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // returns \"ab\"\nitr.hasNext(); // returns true\nitr.next();    // returns \"ac\"\nitr.hasNext(); // returns true\nitr.next();    // returns \"bc\"\nitr.hasNext(); // returns false\n\nExplanation:\nThe CombinationIterator is initialized with the string \"abc\" and combination length 2. The first call to next() returns \"ab\", the second call to hasNext() returns true indicating that there is another combination available. The second call to next() returns \"ac\", and the third call to hasNext() returns true. The third call to next() returns \"bc\", and the fourth call to hasNext() returns false indicating that there are no more combinations available.",
        "level": "Medium",
        "tags": [
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abc",
                    2
                ],
                [
                    "abcd",
                    3
                ],
                [
                    "xyz",
                    1
                ],
                [
                    "pqrst",
                    5
                ],
                [
                    "lmno",
                    4
                ],
                [
                    "abcdefgh",
                    2
                ],
                [
                    "ijklmnop",
                    3
                ],
                [
                    "qrstuvwxyz",
                    4
                ],
                [
                    "abcdefg",
                    1
                ],
                [
                    "hijklmnopqrs",
                    6
                ],
                [
                    "tuvwxyz",
                    2
                ],
                [
                    "abcdefghi",
                    3
                ],
                [
                    "jklmnopqr",
                    4
                ],
                [
                    "stuvwxyz",
                    5
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    1
                ],
                [
                    "abcde",
                    2
                ],
                [
                    "fghijklmnopqrstuvwxyz",
                    3
                ],
                [
                    "abcdef",
                    4
                ],
                [
                    "ghijklmnopqrstuvwxyz",
                    5
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    15
                ]
            ],
            "outputs": [
                "ab",
                "abc",
                "x",
                "pqrst",
                "lmno",
                "ab",
                "abc",
                "abcd",
                "a",
                "hijklm",
                "tu",
                "abc",
                "abcd",
                "abcde",
                "a",
                "ab",
                "abc",
                "abcd",
                "abcde",
                "abcdefghijklmnop",
                "abcdefghijklmnopqrstuvwxyz"
            ]
        }
    },
    "1287": null,
    "1288": {
        "title": "Interval Coverage",
        "description": "Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list. The interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`. Return the number of remaining intervals.",
        "example": "Example:\n\nInput: intervals = [[1,4],[3,6],[2,8]]\nOutput: 2\nExplanation: Interval [3,6] is covered by [2,8], therefore it is removed.",
        "level": "Easy",
        "tags": [
            "array",
            "interval"
        ],
        "test_cases": {
            "inputs": [
                "[[1,4],[3,6],[2,8]]",
                "[[1,4],[2,3]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,10],[2,9],[3,8],[4,7],[5,6]]",
                "[[1,5],[2,4],[3,6],[4,7],[5,8]]",
                "[[1,3],[2,4],[3,5],[4,6],[5,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,5],[2,4],[3,6],[4,7],[5,8],[6,9],[7,10]]",
                "[[1,10],[2,9],[3,8],[4,7],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86],[16,85],[17,84],[18,83],[19,82],[20,81],[21,80],[22,79],[23,78],[24,77],[25,76],[26,75],[27,74],[28,73],[29,72],[30,71],[31,70],[32,69],[33,68],[34,67],[35,66],[36,65],[37,64],[38,63],[39,62],[40,61],[41,60],[42,59],[43,58],[44,57],[45,56],[46,55],[47,54],[48,53],[49,52],[50,51]]"
            ],
            "outputs": [
                "2",
                "1",
                "4",
                "5",
                "5",
                "5",
                "5",
                "7",
                "9",
                "10",
                "1"
            ]
        }
    },
    "1289": {
        "title": "Minimum Falling Path Sum",
        "description": "Given an `n x n` integer matrix `grid`, find the minimum sum of a falling path with non-zero shifts. A falling path with non-zero shifts is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.",
        "example": "Example:\n\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: The possible falling paths are: [1,5,9], [1,5,7], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9]. The falling path with the smallest sum is [1,5,7], so the answer is 13.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "matrix",
            "minimum sum"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        7
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        9,
                        10,
                        11,
                        12
                    ],
                    [
                        13,
                        14,
                        15,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ],
                    [
                        10,
                        11,
                        12
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    [
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25
                    ]
                ],
                [
                    [
                        9,
                        8,
                        7
                    ],
                    [
                        6,
                        5,
                        4
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3
                    ],
                    [
                        -4,
                        -5,
                        -6
                    ],
                    [
                        -7,
                        -8,
                        -9
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        2,
                        2,
                        2,
                        2
                    ],
                    [
                        3,
                        3,
                        3,
                        3
                    ],
                    [
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    [
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25
                    ],
                    [
                        26,
                        27,
                        28,
                        29,
                        30
                    ]
                ],
                [
                    [
                        -1,
                        2,
                        -3,
                        4,
                        -5
                    ],
                    [
                        6,
                        -7,
                        8,
                        -9,
                        10
                    ],
                    [
                        -11,
                        12,
                        -13,
                        14,
                        -15
                    ],
                    [
                        16,
                        -17,
                        18,
                        -19,
                        20
                    ],
                    [
                        -21,
                        22,
                        -23,
                        24,
                        -25
                    ]
                ]
            ],
            "outputs": [
                13,
                7,
                30,
                21,
                65,
                6,
                -21,
                10,
                55,
                -25
            ]
        }
    },
    "1290": {
        "title": "Decimal Value of Binary Linked List",
        "description": "Given a singly-linked list where each node holds either 0 or 1, representing the binary representation of a number, return the decimal value of the number. The most significant bit is at the head of the linked list.",
        "example": "Example:\n\nInput: head = [1,0,1]\nOutput: 5\nExplanation: (101) in base 2 = (5) in base 10",
        "level": "Easy",
        "tags": [
            "linked list",
            "binary",
            "conversion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    1
                ],
                [
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "outputs": [
                5,
                0,
                2147483647
            ]
        }
    },
    "1291": {
        "title": "Sequential Digits",
        "description": "Given a range of integers [low, high], find all the integers within the range that have sequential digits. An integer has sequential digits if and only if each digit in the number is one more than the previous digit. Return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.",
        "example": "For example, given the range [100, 300], the integers with sequential digits are 123 and 234. Therefore, the output would be [123, 234].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    100,
                    300
                ],
                [
                    1000,
                    13000
                ],
                [
                    10,
                    50
                ],
                [
                    500,
                    1000
                ],
                [
                    100,
                    1000
                ],
                [
                    100,
                    100
                ],
                [
                    1000,
                    1000
                ],
                [
                    123,
                    321
                ],
                [
                    1234,
                    4321
                ],
                [
                    10000,
                    20000
                ],
                [
                    12345,
                    54321
                ],
                [
                    100000,
                    200000
                ],
                [
                    123456,
                    654321
                ],
                [
                    1000000,
                    2000000
                ],
                [
                    1234567,
                    7654321
                ],
                [
                    10000000,
                    20000000
                ],
                [
                    12345678,
                    87654321
                ],
                [
                    100000000,
                    200000000
                ],
                [
                    123456789,
                    987654321
                ],
                [
                    1000000000,
                    1000000000
                ]
            ],
            "outputs": [
                [
                    123,
                    234
                ],
                [
                    1234,
                    2345,
                    3456,
                    4567,
                    5678,
                    6789,
                    12345
                ],
                [],
                [
                    567,
                    678,
                    789
                ],
                [
                    123,
                    234,
                    345,
                    456,
                    567,
                    678,
                    789,
                    1234,
                    2345,
                    3456,
                    4567,
                    5678,
                    6789
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ]
        }
    },
    "1292": {
        "title": "Maximum Side Length of Square",
        "description": "Given a matrix `mat` and an integer `threshold`, find the maximum side length of a square with a sum less than or equal to the threshold. If there is no such square, return 0.",
        "example": "Example:\n\nInput: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of a square with a sum less than 4 is 2.\n\nInput: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0\nExplanation: There is no square with a sum less than or equal to 1.",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "mat": [
                        [
                            1,
                            1,
                            3,
                            2,
                            4,
                            3,
                            2
                        ],
                        [
                            1,
                            1,
                            3,
                            2,
                            4,
                            3,
                            2
                        ],
                        [
                            1,
                            1,
                            3,
                            2,
                            4,
                            3,
                            2
                        ]
                    ],
                    "threshold": 4
                },
                {
                    "mat": [
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ]
                    ],
                    "threshold": 1
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 12
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 20
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 30
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 40
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 50
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 60
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 70
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 80
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 90
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 100
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 110
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 120
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 130
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 140
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 150
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 160
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 170
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 180
                }
            ],
            "outputs": [
                2,
                0,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ]
        }
    },
    "1293": {
        "title": "Minimum Steps with Obstacle Elimination",
        "description": "You are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right from and to an empty cell in **one step**. Return the minimum number of steps to walk from the upper left corner `(0, 0)` to the lower right corner `(m - 1, n - 1)` given that you can eliminate at most `k` obstacles. If it is not possible to find such a walk, return `-1`.",
        "example": "Example:\n\nInput: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1\nOutput: 6\nExplanation: The shortest path without eliminating any obstacle is 10. The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> **(3,2)** -> (4,2).",
        "level": "Medium",
        "tags": [
            "matrix",
            "graph",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 1
                },
                {
                    "grid": [
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            1,
                            1,
                            1
                        ],
                        [
                            1,
                            0,
                            0
                        ]
                    ],
                    "k": 1
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 2
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 3
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 4
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 5
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 6
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 7
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 8
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 9
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 10
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 11
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 12
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 13
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 14
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 15
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 16
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 17
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 18
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 19
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 20
                }
            ],
            "outputs": [
                6,
                -1,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6
            ]
        }
    },
    "1295": {
        "title": "Count of Integers with Even Number of Digits",
        "description": "Given an array `nums` of integers, return the count of integers that contain an even number of digits.",
        "example": "Example 1:\n\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation: \n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\n\nExample 2:\n\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation: \nOnly 1771 contains an even number of digits.",
        "level": "Easy",
        "tags": [
            "array",
            "digits"
        ],
        "test_cases": {
            "inputs": [
                [
                    12,
                    345,
                    2,
                    6,
                    7896
                ],
                [
                    555,
                    901,
                    482,
                    1771
                ],
                [
                    0,
                    1,
                    10,
                    100,
                    1000
                ],
                [
                    123,
                    456,
                    789,
                    1010
                ],
                [
                    1111,
                    2222,
                    3333,
                    4444
                ],
                [
                    12345,
                    67890,
                    13579,
                    24680
                ],
                [
                    100000,
                    200000,
                    300000,
                    400000
                ],
                [
                    123456789,
                    987654321,
                    135792468,
                    864209753
                ],
                [
                    111111111,
                    222222222,
                    333333333,
                    444444444
                ],
                [
                    1234567890,
                    9876543210,
                    1357924680,
                    8642097530
                ],
                [
                    1111111111,
                    2222222222,
                    3333333333,
                    4444444444
                ],
                [
                    12345678901,
                    98765432109,
                    13579246801,
                    86420975309
                ],
                [
                    11111111111,
                    22222222222,
                    33333333333,
                    44444444444
                ],
                [
                    123456789012,
                    987654321098,
                    135792468012,
                    864209753098
                ],
                [
                    111111111111,
                    222222222222,
                    333333333333,
                    444444444444
                ],
                [
                    1234567890123,
                    9876543210987,
                    1357924680123,
                    8642097530987
                ],
                [
                    1111111111111,
                    2222222222222,
                    3333333333333,
                    4444444444444
                ],
                [
                    12345678901234,
                    98765432109876,
                    13579246801234,
                    86420975309876
                ],
                [
                    11111111111111,
                    22222222222222,
                    33333333333333,
                    44444444444444
                ],
                [
                    123456789012345,
                    987654321098765,
                    135792468012345,
                    864209753098765
                ],
                [
                    111111111111111,
                    222222222222222,
                    333333333333333,
                    444444444444444
                ]
            ],
            "outputs": [
                2,
                1,
                2,
                0,
                4,
                2,
                4,
                4,
                0,
                4,
                0,
                4,
                0,
                4,
                0,
                4,
                0,
                4,
                0,
                4
            ]
        }
    },
    "1296": null,
    "1297": {
        "title": "Maximum Occurrences of Substring",
        "description": "Given a string `s`, return the maximum number of occurrences of any substring under the following rules:\n\n- The number of unique characters in the substring must be less than or equal to `maxLetters`.\n- The substring size must be between `minSize` and `maxSize` inclusive.",
        "example": "Example:\n\nInput: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: The substring \"aab\" has 2 occurrences in the original string. It satisfies the conditions of having 2 unique letters and a size between 3 and 4 (inclusive).\n\nInput: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: The substring \"aaa\" occurs 2 times in the string. It can overlap.",
        "level": "Medium",
        "tags": [
            "string",
            "substring",
            "occurrences"
        ],
        "test_cases": {
            "inputs": [
                "\"aababcaab\"",
                "\"aaaa\"",
                "\"abcabcabc\"",
                "\"abababab\"",
                "\"aabbaabbaabb\"",
                "\"abcdefg\"",
                "\"a\"",
                "\"aa\"",
                "\"aaa\"",
                "\"aaaa\"",
                "\"aaaaa\"",
                "\"aaaaaa\"",
                "\"aaaaaaa\"",
                "\"aaaaaaaa\"",
                "\"aaaaaaaaa\"",
                "\"aaaaaaaaaa\"",
                "\"aaaaaaaaaaa\"",
                "\"aaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaaaa\""
            ],
            "outputs": [
                "2",
                "2",
                "3",
                "4",
                "3",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "1298": {
        "title": "Maximum Number of Candies",
        "description": "You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes`. Each box has a status (open or closed), a number of candies, a list of keys to open other boxes, and a list of boxes contained within it. You are also given an array `initialBoxes` which contains the labels of the boxes you initially have. You can take all the candies in any open box and use the keys to open new boxes. Return the maximum number of candies you can collect following the given rules.",
        "example": "Example:\n\nInput:\nstatus = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You start with box 0, which is open and contains 7 candies. Inside box 0, you find boxes 1 and 2. Box 1 is closed, so you open box 2 and find 4 candies and a key to box 1. In box 1, you find 5 candies and box 3, but you don't have a key to open box 3. Therefore, the maximum number of candies you can collect is 16 (7 + 4 + 5).",
        "level": "Medium",
        "tags": [
            "array",
            "graph",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                {
                    "status": [
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        7,
                        5,
                        4,
                        100
                    ],
                    "keys": [
                        [],
                        [],
                        [
                            1
                        ],
                        []
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2
                        ],
                        [
                            3
                        ],
                        [],
                        []
                    ],
                    "initialBoxes": [
                        0
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "keys": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [],
                        [],
                        [],
                        [],
                        []
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [],
                        [],
                        [],
                        [],
                        []
                    ],
                    "initialBoxes": [
                        0
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "status": [
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            3,
                            4,
                            5
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            5
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                }
            ],
            "outputs": [
                16,
                6,
                150,
                0,
                15,
                21,
                55,
                0,
                10,
                55,
                55,
                10,
                55,
                55,
                10,
                55
            ]
        }
    },
    "1299": null,
    "1300": null,
    "1301": {
        "title": "Maximum Sum Path on a Square Board",
        "description": "You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character 'S'.\n\nYou need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\n\nIn case there is no path, return [0, 0].",
        "example": "Example:\n\nInput: board = [\"E23\",\"2X2\",\"12S\"]\nOutput: [7,1]\n\nExplanation: The maximum sum of numeric characters that can be collected is 7. There is only one path to reach the top left square.\n\nInput: board = [\"E12\",\"1X1\",\"21S\"]\nOutput: [4,2]\n\nExplanation: The maximum sum of numeric characters that can be collected is 4. There are two paths to reach the top left square.\n\nInput: board = [\"E11\",\"XXX\",\"11S\"]\nOutput: [0,0]\n\nExplanation: There is no path to reach the top left square.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "path finding"
        ],
        "test_cases": {
            "inputs": [
                [
                    "E23",
                    "2X2",
                    "12S"
                ],
                [
                    "E12",
                    "1X1",
                    "21S"
                ],
                [
                    "E11",
                    "XXX",
                    "11S"
                ],
                [
                    "E1X",
                    "2X2",
                    "12S"
                ],
                [
                    "E12",
                    "1X1",
                    "2XS"
                ],
                [
                    "E12",
                    "1X1",
                    "2X2"
                ],
                [
                    "E111",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ]
            ],
            "outputs": [
                [
                    7,
                    1
                ],
                [
                    4,
                    2
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ]
            ]
        }
    },
    "1302": null,
    "1304": {
        "title": "Array with Zero Sum",
        "description": "Given an integer `n`, return any array containing `n` unique integers such that they add up to 0.",
        "example": "Example:\n\nInput: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays are also accepted [-5,-1,1,2,3], [-3,-1,2,-2,4].",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                5,
                3,
                1,
                2,
                10,
                100
            ],
            "outputs": [
                "[-7,-1,1,3,4]",
                "[-1,0,1]",
                "[0]",
                "[-1,1]",
                "[-5,5]",
                "[-50,50,-10,10,-20,20,-30,30,-40,40,-60,60,-70,70,-80,80,-90,90,-100,100]"
            ]
        }
    },
    "1305": {
        "title": "Merge Binary Search Trees",
        "description": "Given two binary search trees `root1` and `root2`, merge them into a single sorted binary search tree and return the root of the merged tree.",
        "example": "Example 1:\n\nInput: root1 = [2,1,4], root2 = [1,0,3]\nOutput: [0,1,1,2,3,4]\n\nExample 2:\n\nInput: root1 = [1,null,8], root2 = [8,1]\nOutput: [1,1,8,8]\n\nExplanation:\n\nIn Example 1, the merged tree is a binary search tree with elements [0,1,1,2,3,4].\n\nIn Example 2, the merged tree is a binary search tree with elements [1,1,8,8].",
        "level": "Medium",
        "tags": [
            "binary search tree",
            "tree traversal",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,4]",
                "[1,0,3]",
                "[1,null,8]",
                "[8,1]",
                "[]",
                "[1]",
                "[5,3,6,2,4,null,7]",
                "[1,2,3,4,5,6,7,8,9]",
                "[9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[0,1,1,2,3,4]",
                "[1,1,8,8]",
                "[]",
                "[1]",
                "[5,3,6,2,4,null,7]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9]"
            ]
        }
    },
    "1306": null,
    "1307": {
        "title": "Solvable Equation",
        "description": "Given an equation, represented by `words` on the left side and the `result` on the right side, you need to check if the equation is solvable under the following rules:\n\n- Each character is decoded as one digit (0 - 9).\n- No two characters can map to the same digit.\n- Each `words[i]` and `result` are decoded as one number **without** leading zeros.\n- The sum of numbers on the left side (`words`) will equal the number on the right side (`result`).\n\nWrite a function `isSolvable(words: List[str], result: str) -> bool` that returns `True` if the equation is solvable, otherwise returns `False`.",
        "example": "Example:\n\nInput:\nwords = [\"SEND \", \"MORE \"]\nresult = \"MONEY \"\nOutput:\nTrue\nExplanation:\nMap 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that:  \"SEND \" +  \"MORE \" =  \"MONEY \" ,  9567 + 1085 = 10652",
        "level": "Medium",
        "tags": [
            "math",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    "SEND ",
                    "MORE "
                ],
                [
                    "SIX ",
                    "SEVEN ",
                    "SEVEN "
                ],
                [
                    "LEET ",
                    "CODE "
                ],
                [
                    "AB ",
                    "CD ",
                    "EF ",
                    "GH ",
                    "IJ "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J "
                ],
                [
                    "HELLO ",
                    "WORLD "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE "
                ],
                [
                    "APPLE ",
                    "BANANA ",
                    "CHERRY ",
                    "DATE "
                ],
                [
                    "CAT ",
                    "DOG ",
                    "ELEPHANT ",
                    "FOX ",
                    "GIRAFFE "
                ],
                [
                    "CAR ",
                    "BUS ",
                    "TRAIN ",
                    "PLANE ",
                    "BOAT "
                ],
                [
                    "RED ",
                    "BLUE ",
                    "GREEN ",
                    "YELLOW ",
                    "ORANGE "
                ],
                [
                    "SUN ",
                    "MOON ",
                    "STAR ",
                    "SKY ",
                    "CLOUD "
                ],
                [
                    "PEN ",
                    "PENCIL ",
                    "ERASER ",
                    "RULER ",
                    "BOOK "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE ",
                    "SIX "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J ",
                    "K "
                ],
                [
                    "HELLO ",
                    "WORLD ",
                    "PYTHON ",
                    "CODING "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE ",
                    "SIX ",
                    "SEVEN "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J ",
                    "K ",
                    "L "
                ],
                [
                    "HELLO ",
                    "WORLD ",
                    "PYTHON ",
                    "CODING ",
                    "CHALLENGE "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE ",
                    "SIX ",
                    "SEVEN ",
                    "EIGHT "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J ",
                    "K ",
                    "L ",
                    "M "
                ]
            ],
            "outputs": [
                true,
                true,
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "1309": null,
    "1310": {
        "title": "XOR Queries",
        "description": "You are given an array `arr` of positive integers. You are also given the array `queries` where `queries[i] = [lefti, righti]`. For each query `i`, compute the XOR of elements from `lefti` to `righti` (that is, `arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]`). Return an array `answer` where `answer[i]` is the answer to the `ith` query.",
        "example": "Example 1:\n\nInput: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\nOutput: [2,7,14,8]\nExplanation: The binary representation of the elements in the array are:\n1 = 0001\n3 = 0011\n4 = 0100\n8 = 1000\nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2\n[1,2] = 3 xor 4 = 7\n[0,3] = 1 xor 3 xor 4 xor 8 = 14\n[3,3] = 8\n\nExample 2:\n\nInput: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\nOutput: [8,0,4,4]",
        "level": "Medium",
        "tags": [
            "array",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3,4,8], [[0,1],[1,2],[0,3],[3,3]]]",
                "[[4,8,2,10], [[2,3],[1,3],[0,0],[0,3]]]",
                "[[1,2,3,4,5], [[0,4],[1,3],[2,2],[3,4]]]",
                "[[10,20,30,40,50], [[0,2],[1,4],[2,3],[3,3]]]",
                "[[100,200,300,400,500], [[0,0],[1,2],[2,4],[3,4]]]",
                "[[2,4,6,8,10], [[0,1],[1,3],[2,4],[3,4]]]",
                "[[5,10,15,20,25], [[0,3],[1,2],[2,3],[3,4]]]",
                "[[3,6,9,12,15], [[0,4],[1,3],[2,2],[3,3]]]",
                "[[7,14,21,28,35], [[0,2],[1,4],[2,3],[3,3]]]",
                "[[1,1,1,1,1], [[0,0],[1,1],[2,2],[3,4]]]",
                "[[2,2,2,2,2], [[0,1],[1,3],[2,4],[3,3]]]",
                "[[3,3,3,3,3], [[0,3],[1,2],[2,3],[3,4]]]",
                "[[4,4,4,4,4], [[0,4],[1,3],[2,2],[3,3]]]",
                "[[5,5,5,5,5], [[0,2],[1,4],[2,3],[3,3]]]",
                "[[6,6,6,6,6], [[0,0],[1,2],[2,4],[3,4]]]",
                "[[7,7,7,7,7], [[0,1],[1,3],[2,3],[3,3]]]",
                "[[8,8,8,8,8], [[0,3],[1,2],[2,3],[3,4]]]",
                "[[9,9,9,9,9], [[0,4],[1,4],[2,2],[3,3]]]",
                "[[10,10,10,10,10], [[0,2],[1,3],[2,4],[3,3]]]",
                "[[11,11,11,11,11], [[0,3],[1,4],[2,3],[3,4]]]"
            ],
            "outputs": [
                "[2,7,14,8]",
                "[8,0,4,4]",
                "[5,4,3,4]",
                "[20,38,38,12]",
                "[100,300,400,400]",
                "[6,14,14,8]",
                "[28,29,30,12]",
                "[45,24,9,12]",
                "[22,7,28,28]",
                "[1,2,1,1]",
                "[0,2,2,2]",
                "[3,0,3,3]",
                "[4,4,4,4]",
                "[5,1,4,4]",
                "[6,6,6,6]",
                "[7,0,7,7]",
                "[8,8,8,8]",
                "[9,0,9,9]",
                "[10,0,10,10]",
                "[11,0,11,11]"
            ]
        }
    },
    "1311": {
        "title": "Watched Videos by Friends",
        "description": "You are given a list of people, each with a unique ID. Each person has a list of watched videos and a list of friends. The level of videos represents the distance between you and the person who watched the video. Level 1 videos are watched by your friends, level 2 videos are watched by the friends of your friends, and so on. Given your ID and the level of videos, return the list of videos ordered by their frequencies (increasing). If two videos have the same frequency, order them alphabetically.",
        "example": "Example 1:\n\nInput:\nwatchedVideos = [['A', 'B'], ['C'], ['B', 'C'], ['D']]\nfriends = [[1,2],[0,3],[0,3],[1,2]]\nid = 0\nlevel = 1\nOutput: ['B', 'C']\nExplanation: You have ID 0 and your friends are ID 1 and ID 2. ID 1 watched video 'C' and ID 2 watched videos 'B' and 'C'. The frequencies of watched videos by your friends are: 'B' -> 1, 'C' -> 2.\n\nExample 2:\n\nInput:\nwatchedVideos = [['A', 'B'], ['C'], ['B', 'C'], ['D']]\nfriends = [[1,2],[0,3],[0,3],[1,2]]\nid = 0\nlevel = 2\nOutput: ['D']\nExplanation: You have ID 0 and the only friend of your friends is ID 3. ID 3 watched video 'D'.",
        "level": "Medium",
        "tags": [
            "graph",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 2]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 6]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 6]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 6]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 6]"
            ],
            "outputs": [
                "['B', 'C']",
                "['D']",
                "['A', 'B', 'C']",
                "['B', 'C', 'D']",
                "['A', 'B', 'C', 'D']",
                "[]",
                "['A', 'B', 'C', 'D']",
                "['A', 'B', 'C', 'D']",
                "['A', 'B', 'C', 'D']",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "1312": null,
    "1313": {
        "title": "Decompress Run-Length Encoded List",
        "description": "Given a list `nums` of integers representing a list compressed with run-length encoding, the task is to decompress the list. Each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`) represents `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.",
        "example": "For example, if the input list is `nums = [1,2,3,4]`, the output should be `[2,4,4,4]`. The first pair [1,2] means we have freq = 1 and val = 2, so we generate the array [2]. The second pair [3,4] means we have freq = 3 and val = 4, so we generate [4,4,4]. Finally, the concatenation [2] + [4,4,4] is [2,4,4,4].",
        "level": "Easy",
        "tags": [
            "array"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    5,
                    3,
                    2,
                    1,
                    6
                ],
                [
                    3,
                    10,
                    2,
                    5,
                    1,
                    3
                ],
                [
                    1,
                    100,
                    2,
                    50,
                    3,
                    25,
                    4,
                    10
                ]
            ],
            "outputs": [
                [
                    2,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    3,
                    3
                ],
                [
                    5,
                    5,
                    2,
                    2,
                    6
                ],
                [
                    10,
                    10,
                    5,
                    5,
                    3
                ],
                [
                    100,
                    50,
                    50,
                    25,
                    25,
                    25,
                    10,
                    10,
                    10,
                    10
                ]
            ]
        }
    },
    "1314": {
        "title": "Matrix Sum within Range",
        "description": "Given a matrix `mat` of size `m x n` and an integer `k`, return a matrix `answer` where each element `answer[i][j]` is the sum of all elements `mat[r][c]` for `i - k <= r <= i + k`, `j - k <= c <= j + k`, and `(r, c)` is a valid position in the matrix.",
        "example": "Example 1:\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[12,21,16],[27,45,33],[24,39,28]]\n\nExample 2:\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\nOutput: [[45,45,45],[45,45,45],[45,45,45]]",
        "level": "Medium",
        "tags": [
            "matrix",
            "sum",
            "range"
        ],
        "test_cases": {
            "inputs": [
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 1
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 2
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 0
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 3
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 4
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 5
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 6
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 7
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 8
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 9
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 10
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 11
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 12
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 13
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 14
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 15
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 16
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 17
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 18
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 19
                }
            ],
            "outputs": [
                [
                    [
                        12,
                        21,
                        16
                    ],
                    [
                        27,
                        45,
                        33
                    ],
                    [
                        24,
                        39,
                        28
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ]
            ]
        }
    },
    "1315": {
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "description": "Given the `root` of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.\n\nA grandparent of a node is the parent of its parent if it exists.",
        "example": "Example:\n\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 18\nExplanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
                "[1]",
                "[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
                "[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]"
            ],
            "outputs": [
                "18",
                "0",
                "120",
                "0",
                "0",
                "0",
                "0",
                "30",
                "0",
                "380"
            ]
        }
    },
    "1317": {
        "title": "No-Zero Integers",
        "description": "Given an integer `n`, return a list of two integers `[a, b]` where `a` and `b` are No-Zero integers and `a + b = n`. A No-Zero integer is a positive integer that does not contain any `0` in its decimal representation.",
        "example": "Example:\n\nInput: n = 11\nOutput: [2, 9]\nExplanation: Let a = 2 and b = 9. Both a and b are No-Zero integers, and a + b = 9 = n. Note that there are other valid answers as [8, 3] that can be accepted.",
        "level": "Easy",
        "tags": [
            "Math",
            "Numbers"
        ],
        "test_cases": {
            "inputs": [
                2,
                11,
                20,
                100,
                999,
                1000,
                12345,
                67890,
                987654,
                1000000,
                123456789,
                987654321,
                1000000000,
                1234567890,
                9876543210,
                10000000000,
                12345678901,
                98765432109,
                100000000000,
                123456789012
            ],
            "outputs": [
                [
                    1,
                    1
                ],
                [
                    2,
                    9
                ],
                [
                    11,
                    9
                ],
                [
                    99,
                    1
                ],
                [
                    999,
                    0
                ],
                [
                    999,
                    1
                ],
                [
                    12345,
                    0
                ],
                [
                    67890,
                    0
                ],
                [
                    987654,
                    0
                ],
                [
                    999999,
                    1
                ],
                [
                    123456789,
                    0
                ],
                [
                    987654321,
                    0
                ],
                [
                    999999999,
                    1
                ],
                [
                    123456789,
                    0
                ],
                [
                    987654321,
                    0
                ],
                [
                    9999999999,
                    1
                ],
                [
                    1234567890,
                    1
                ],
                [
                    9876543210,
                    0
                ],
                [
                    99999999999,
                    1
                ],
                [
                    12345678901,
                    1
                ]
            ]
        }
    },
    "1318": {
        "title": "Minimum Flips for Bitwise OR",
        "description": "Given three positive numbers `a`, `b`, and `c`, you need to determine the minimum number of bit flips required in `a` and `b` to make the bitwise OR of `a` and `b` equal to `c`. A flip operation involves changing any single bit from 1 to 0 or from 0 to 1 in the binary representation of a number.",
        "example": "Example:\n\nInput: a = 2, b = 6, c = 5\nOutput: 3\nExplanation: After flipping the bits, a = 1, b = 4, and c = 5. Now, the bitwise OR of a and b is equal to c.\n\nInput: a = 4, b = 2, c = 7\nOutput: 1\n\nInput: a = 1, b = 2, c = 3\nOutput: 0",
        "level": "Medium",
        "tags": [
            "bit manipulation",
            "binary representation",
            "flipping bits"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    6,
                    5
                ],
                [
                    4,
                    2,
                    7
                ],
                [
                    1,
                    2,
                    3
                ],
                [
                    10,
                    15,
                    5
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    100,
                    200,
                    300
                ],
                [
                    512,
                    1024,
                    1536
                ],
                [
                    1023,
                    2047,
                    3070
                ],
                [
                    1000,
                    2000,
                    3000
                ],
                [
                    12345,
                    67890,
                    80235
                ],
                [
                    111111,
                    222222,
                    333333
                ],
                [
                    999999,
                    888888,
                    777777
                ],
                [
                    1000000000,
                    999999999,
                    1999999999
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1
                ],
                [
                    0,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "outputs": [
                3,
                1,
                0,
                2,
                2,
                6,
                2,
                2,
                2,
                10,
                12,
                12,
                2,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1319": {
        "title": "Minimum Cable Connections",
        "description": "You are given a network of `n` computers connected by ethernet cables. Each cable is represented by a pair of computers it connects. Your task is to determine the minimum number of cable connections you need to make in order to ensure that all computers are directly or indirectly connected. You can extract cables between directly connected computers and place them between disconnected computers to establish direct connections. If it is not possible to connect all computers, return -1.",
        "example": "Example:\n\nInput: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove the cable between computer 1 and 2 and place it between computers 1 and 3.\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.",
        "level": "Medium",
        "tags": [
            "Graph",
            "Union Find"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    2,
                    [
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ]
            ],
            "outputs": [
                1,
                2,
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1320": {
        "title": "Minimum Distance to Type Using Two Fingers",
        "description": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate. Given the string word, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. Note that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.",
        "example": "Example:\n\nInput: word = \"CAKE\"\nOutput: 3\nExplanation: Using two fingers, one optimal way to type \"CAKE\" is: Finger 1 on letter 'C' -> cost = 0, Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2, Finger 2 on letter 'K' -> cost = 0, Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1, Total distance = 3",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "string",
            "optimization"
        ],
        "test_cases": {
            "inputs": [
                "\"CAKE\"",
                "\"HAPPY\"",
                "\"KEYBOARD\"",
                "\"PROGRAMMING\"",
                "\"ALGORITHM\"",
                "\"COMPUTER\"",
                "\"SCIENCE\"",
                "\"ENGINEERING\"",
                "\"MATHEMATICS\"",
                "\"PYTHON\"",
                "\"JAVA\"",
                "\"C++\"",
                "\"DATA\"",
                "\"STRUCTURES\"",
                "\"ALGORITHMS\"",
                "\"CODING\"",
                "\"CHALLENGE\"",
                "\"INTERVIEW\"",
                "\"PREPARATION\"",
                "\"PRACTICE\""
            ],
            "outputs": [
                "3",
                "6",
                "12",
                "16",
                "11",
                "9",
                "9",
                "15",
                "16",
                "7",
                "7",
                "7",
                "7",
                "14",
                "16",
                "11",
                "14",
                "17",
                "18",
                "15"
            ]
        }
    },
    "1323": {
        "title": "Maximum Number by Changing Digits",
        "description": "You are given a positive integer `num` consisting only of digits `6` and `9`. Return the maximum number you can get by changing at most one digit (`6` becomes `9`, and `9` becomes `6`).",
        "example": "Example:\n\nInput: num = 9669\nOutput: 9969\nExplanation: Changing the first digit results in 6669. Changing the second digit results in 9969. Changing the third digit results in 9699. Changing the fourth digit results in 9666. The maximum number is 9969.",
        "level": "Easy",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                "9669",
                "9996",
                "9999",
                "6666",
                "6699",
                "6969",
                "9666",
                "9699",
                "9966",
                "9996",
                "666666",
                "999999",
                "666966",
                "966996",
                "696969",
                "969696",
                "966969",
                "969966",
                "999666",
                "666999"
            ],
            "outputs": [
                "9969",
                "9999",
                "9999",
                "9666",
                "9699",
                "9969",
                "9669",
                "9699",
                "9969",
                "9999",
                "999999",
                "999999",
                "999969",
                "969996",
                "999999",
                "969696",
                "969969",
                "969969",
                "999966",
                "966999"
            ]
        }
    },
    "1324": {
        "title": "Vertical Words",
        "description": "Given a string `s`, return all the words vertically in the same order in which they appear in `s`. Words are returned as a list of strings, complete with spaces when necessary. Trailing spaces are not allowed. Each word will be put in only one column, and in one column, there will be only one word.",
        "example": "Example 1:\n\nInput: s = \"HOW ARE YOU \"\nOutput: [\"HAY \", \"ORO \", \"WEU \"]\nExplanation: Each word is printed vertically.\n  \"HAY \"\n  \"ORO \"\n  \"WEU \"\n\nExample 2:\n\nInput: s = \"TO BE OR NOT TO BE \"\nOutput: [\"TBONTB \", \"OEROOE \", \"   T \"]\nExplanation: Trailing spaces are not allowed.\n \"TBONTB \"\n \"OEROOE \"\n \"   T \"\n\nExample 3:\n\nInput: s = \"CONTEST IS COMING \"\nOutput: [\"CIC \", \"OSO \", \"N M \", \"T I \", \"E N \", \"S G \", \"T \"]",
        "level": "Medium",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"HOW ARE YOU \"",
                "\"TO BE OR NOT TO BE \"",
                "\"CONTEST IS COMING \"",
                "\"HELLO WORLD \"",
                "\"I AM FINE \"",
                "\"THIS IS A TEST \"",
                "\"GOOD MORNING \"",
                "\"WELCOME TO THE PARTY \"",
                "\"LET'S GO \"",
                "\"THANK YOU \"",
                "\"I LOVE CODING \"",
                "\"HAPPY BIRTHDAY \"",
                "\"HAVE A NICE DAY \"",
                "\"KEEP SMILING \"",
                "\"ENJOY YOUR DAY \"",
                "\"STAY POSITIVE \"",
                "\"NEVER GIVE UP \"",
                "\"DREAM BIG \"",
                "\"BE YOURSELF \"",
                "\"BELIEVE IN YOURSELF \""
            ],
            "outputs": [
                "[\"HAY \", \"ORO \", \"WEU \"]",
                "[\"TBONTB \", \"OEROOE \", \"   T \"]",
                "[\"CIC \", \"OSO \", \"N M \", \"T I \", \"E N \", \"S G \", \"T \"]",
                "[\"HW \", \"EO \", \"LR \", \"LL \", \"OD \"]",
                "[\"IA \", \"MF \", \"EN \"]",
                "[\"TI \", \"HS \", \"IE \", \"SA \", \"ST \"]",
                "[\"GM \", \"OO \", \"OD \", \"RN \", \"IN \", \"NG \"]",
                "[\"WTTP \", \"OEO \", \"LHR \", \"CME \", \"OIN \", \"RNY \", \"G \"]",
                "[\"L \", \"E \", \"T'S \", \"  \", \"G \", \"O \"]",
                "[\"TY \", \"H \", \"NA \", \"KU \", \"OY \"]",
                "[\"ILC \", \"OO \", \"VD \", \"EN \", \"IG \", \"N \"]",
                "[\"HB \", \"AE \", \"VP \", \"PI \", \"YR \", \"TD \", \"AY \"]",
                "[\"HAN \", \"VI \", \"CE \", \"EA \", \"YD \", \"A \"]",
                "[\"KS \", \"EE \", \"PM \", \"LI \", \"NI \", \"NG \"]",
                "[\"EY \", \"OY \", \"RU \", \"DA \", \"Y \"]",
                "[\"SP \", \"TO \", \"AI \", \"YT \", \"VI \", \"NE \"]",
                "[\"NE \", \"VE \", \"RE \", \"GI \", \"VU \", \"EP \"]",
                "[\"DB \", \"IR \", \"EA \", \"MY \", \"G \"]",
                "[\"BE \", \"YO \", \"UR \", \"SE \", \"LF \"]",
                "[\"BIY \", \"EL \", \"IE \", \"VE \", \"NI \", \"YR \", \"UO \", \"SE \", \"LF \"]"
            ]
        }
    },
    "1325": {
        "title": "Delete Leaf Nodes with Target Value",
        "description": "Given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`. If a leaf node with value `target` is deleted and its parent node becomes a leaf node with value `target`, it should also be deleted. Repeat this process until no more leaf nodes with value `target` exist.",
        "example": "Example:\n\nInput: root = [1,2,3,2,null,2,4], target = 2\nOutput: [1,null,3,null,4]\nExplanation: Leaf nodes in green with value (target = 2) are removed. After removing, new nodes become leaf nodes with value (target = 2).\n\nInput: root = [1,3,3,3,2], target = 3\nOutput: [1,3,null,null,2]\n\nInput: root = [1,2,null,2,null,2], target = 2\nOutput: [1]\nExplanation: Leaf nodes in green with value (target = 2) are removed at each step.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,2,null,2,4]",
                "[1,3,3,3,2]",
                "[1,2,null,2,null,2]",
                "[1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[1,null,3,null,4]",
                "[1,3,null,null,2]",
                "[1]",
                "[1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ]
        }
    },
    "1326": {
        "title": "Minimum Number of Taps",
        "description": "You are given a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. There are n + 1 taps located at points [0, 1, ..., n] in the garden. Each tap has a range that represents the area it can water. The range of the i-th tap is given by ranges[i], which means it can water the area [i - ranges[i], i + ranges[i]] if it was open. You need to find the minimum number of taps that should be open to water the whole garden. If the garden cannot be watered, return -1.",
        "example": "Example:\n\nInput: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]. The tap at point 1 can cover the interval [-3,5]. The tap at point 2 can cover the interval [1,3]. The tap at point 3 can cover the interval [2,4]. The tap at point 4 can cover the interval [4,4]. The tap at point 5 can cover the interval [5,5]. Opening only the second tap will water the whole garden [0,5].",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    [
                        3,
                        4,
                        1,
                        1,
                        0,
                        0
                    ]
                ],
                [
                    3,
                    [
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    7,
                    [
                        1,
                        2,
                        1,
                        0,
                        2,
                        1,
                        0,
                        1
                    ]
                ],
                [
                    10,
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    4,
                    [
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            ],
            "outputs": [
                1,
                -1,
                3,
                1,
                -1
            ]
        }
    },
    "1328": {
        "title": "Lexicographically Smallest Non-Palindrome",
        "description": "Given a palindromic string of lowercase English letters `palindrome`, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string. A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`.",
        "example": "Example:\n\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\". Of all the ways, \"aaccba\" is the lexicographically smallest.",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome",
            "lexicographically"
        ],
        "test_cases": {
            "inputs": [
                "\"abccba\"",
                "\"a\"",
                "\"abcba\"",
                "\"aaa\"",
                "\"racecar\"",
                "\"level\"",
                "\"deed\"",
                "\"noon\"",
                "\"madam\"",
                "\"stats\"",
                "\"radar\"",
                "\"rotor\"",
                "\"civic\"",
                "\"kayak\"",
                "\"refer\"",
                "\"tenet\"",
                "\"wow\"",
                "\"pop\"",
                "\"hello\"",
                "\"world\""
            ],
            "outputs": [
                "\"aaccba\"",
                "\"\"",
                "\"abccba\"",
                "\"aa\"",
                "\"racecaa\"",
                "\"levea\"",
                "\"deea\"",
                "\"nooa\"",
                "\"mada\"",
                "\"stata\"",
                "\"rada\"",
                "\"rotoa\"",
                "\"civac\"",
                "\"kayak\"",
                "\"refea\"",
                "\"tenet\"",
                "\"woa\"",
                "\"poa\"",
                "\"\"",
                "\"worla\""
            ]
        }
    },
    "1329": {
        "title": "Sort Matrix Diagonals",
        "description": "Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.",
        "example": "Example 1:\n\nInput: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n\nExample 2:\n\nInput: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]",
        "level": "Medium",
        "tags": [
            "matrix",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
                "[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[9,8,7],[6,5,4],[3,2,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3,4],[5,6,7,8]]",
                "[[1,2,3,4,5],[6,7,8,9,10]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29]]"
            ],
            "outputs": [
                "[[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
                "[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3,4],[5,6,7,8]]",
                "[[1,2,3,4,5],[6,7,8,9,10]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29]]"
            ]
        }
    },
    "1330": null,
    "1331": {
        "title": "Rank Array Elements",
        "description": "Given an array of integers `arr`, replace each element with its rank. The rank represents how large the element is. The rank has the following rules:\n\n* Rank is an integer starting from 1.\n* The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n* Rank should be as small as possible.",
        "example": "Example:\n\nInput: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[40,10,20,30]",
                "[100,100,100]",
                "[37,12,28,9,100,56,80,5,12]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0]",
                "[10,20,30,40,50,60,70,80,90,100]"
            ],
            "outputs": [
                "[4,1,2,3]",
                "[1,1,1]",
                "[5,3,4,2,8,6,7,1,3]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "1332": {
        "title": "Minimum Steps to Make String Empty",
        "description": "Given a string `s` consisting only of letters 'a' and 'b', you can remove one palindromic subsequence from `s` in a single step. Return the minimum number of steps required to make the given string empty. A string is a subsequence of a given string if it is generated by deleting some characters of the given string without changing their order. Note that a subsequence does not necessarily need to be contiguous. A string is called palindrome if it reads the same backward as well as forward.",
        "example": "Example:\n\nInput: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.",
        "level": "Easy",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"ababa\"",
                "\"abb\"",
                "\"baabb\"",
                "\"a\"",
                "\"b\"",
                "\"aa\"",
                "\"bb\"",
                "\"aba\"",
                "\"bab\"",
                "\"abba\"",
                "\"baab\"",
                "\"aabbaa\"",
                "\"abababa\"",
                "\"abbaabba\"",
                "\"abababab\"",
                "\"abbaabbaabba\"",
                "\"ababababababa\"",
                "\"abbaabbaabbaabba\"",
                "\"abababababababab\"",
                "\"abbaabbaabbaabbaabba\""
            ],
            "outputs": [
                "1",
                "2",
                "2",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "2",
                "3",
                "4",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10"
            ]
        }
    },
    "1333": {
        "title": "Filter Restaurants",
        "description": "Given an array of restaurants, each represented by [id, rating, veganFriendly, price, distance], filter the restaurants based on three criteria: veganFriendly, maxPrice, and maxDistance. Return the IDs of the filtered restaurants, ordered by rating from highest to lowest. If two restaurants have the same rating, order them by ID from highest to lowest.",
        "example": "Example 1:\n\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5]\nExplanation: The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1]\nAfter filtering restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]",
                "1, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]",
                "0, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]",
                "0, 30, 3",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "1, 40, 5",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "0, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "1, 30, 3",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "0, 40, 5",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "1, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "0, 30, 3",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "1, 50, 5",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "0, 60, 8",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "1, 30, 4",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "0, 40, 6"
            ],
            "outputs": [
                "[3,1,5]",
                "[4,3,2,1,5]",
                "[4,5]",
                "[6,3,2,1,5]",
                "[6,4,3,2,1,5]",
                "[6,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]"
            ]
        }
    },
    "1334": {
        "title": "City Reachability",
        "description": "Given a graph representing cities and their connections, find the city with the smallest number of reachable cities within a given distance threshold. If there are multiple cities with the same number of reachable cities, return the city with the greatest number.",
        "example": "For example, consider a graph with 4 cities and the following connections: \n\nedges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]] \ndistanceThreshold = 4 \n\nThe neighboring cities at a distanceThreshold = 4 for each city are: \nCity 0 -> [City 1, City 2] \nCity 1 -> [City 0, City 2, City 3] \nCity 2 -> [City 0, City 1, City 3] \nCity 3 -> [City 1, City 2] \n\nIn this case, cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number. \n\nTherefore, the output would be 3.",
        "level": "Medium",
        "tags": [
            "graph",
            "shortest path",
            "connectivity"
        ],
        "test_cases": {
            "inputs": [
                {
                    "n": 4,
                    "edges": [
                        [
                            0,
                            1,
                            3
                        ],
                        [
                            1,
                            2,
                            1
                        ],
                        [
                            1,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            1
                        ]
                    ],
                    "distanceThreshold": 4
                },
                {
                    "n": 5,
                    "edges": [
                        [
                            0,
                            1,
                            2
                        ],
                        [
                            0,
                            4,
                            8
                        ],
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            1,
                            4,
                            2
                        ],
                        [
                            2,
                            3,
                            1
                        ],
                        [
                            3,
                            4,
                            1
                        ]
                    ],
                    "distanceThreshold": 2
                },
                {
                    "n": 3,
                    "edges": [
                        [
                            0,
                            1,
                            5
                        ],
                        [
                            1,
                            2,
                            3
                        ]
                    ],
                    "distanceThreshold": 6
                },
                {
                    "n": 6,
                    "edges": [
                        [
                            0,
                            1,
                            2
                        ],
                        [
                            0,
                            2,
                            4
                        ],
                        [
                            1,
                            3,
                            1
                        ],
                        [
                            1,
                            4,
                            2
                        ],
                        [
                            2,
                            3,
                            3
                        ],
                        [
                            2,
                            5,
                            2
                        ],
                        [
                            3,
                            4,
                            1
                        ],
                        [
                            4,
                            5,
                            2
                        ]
                    ],
                    "distanceThreshold": 5
                },
                {
                    "n": 2,
                    "edges": [
                        [
                            0,
                            1,
                            1
                        ]
                    ],
                    "distanceThreshold": 1
                }
            ],
            "outputs": [
                3,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1335": null,
    "1337": null,
    "1338": null,
    "1339": {
        "title": "Maximum Product of Split Binary Tree",
        "description": "Given the `root` of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized. Return the maximum product of the sums of the two subtrees modulo 109 + 7.",
        "example": "Example:\n\nInput: root = [1,2,3,4,5,6]\nOutput: 110\nExplanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)",
        "level": "Medium",
        "tags": [
            "binary tree",
            "recursion",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5,6]",
                "[1,null,2,3,4,null,null,5,6]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,null,null,5,6,null,null,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                110,
                90,
                3024,
                18,
                720,
                486194640
            ]
        }
    },
    "1340": {
        "title": "Maximum Number of Indices",
        "description": "Given an array of integers `arr` and an integer `d`, you can jump from index `i` to index `i + x` or `i - x` where `0 < x <= d`. However, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j`. Return the maximum number of indices you can visit.",
        "example": "Example:\n\nInput: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation: You can start at index 10 and jump to indices 8, 6, and 7.\n\nInput: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You can start at any index, but you can only jump to the same index.\n\nInput: arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0 and visit all indices.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[6,4,14,6,8,13,9,7,10,6,12]",
                "[3,3,3,3,3]",
                "[7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[5,4,3,2,1,2,3,4,5]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,5,4,3,2,1]",
                "[1,2,3,4,5,4,3,2,1,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,5,4,3,2,1,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]"
            ],
            "outputs": [
                "4",
                "1",
                "7",
                "10",
                "10",
                "1",
                "5",
                "5",
                "20",
                "20",
                "20",
                "20",
                "20",
                "5",
                "5",
                "5",
                "5",
                "5",
                "5",
                "5"
            ]
        }
    },
    "1342": {
        "title": "Steps to Reduce Number to Zero",
        "description": "Given an integer `num`, return the number of steps required to reduce it to zero. In each step, if the current number is even, divide it by 2. If the current number is odd, subtract 1 from it.",
        "example": "Example:\n\nInput: num = 14\nOutput: 6\nExplanation: \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3. \nStep 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.",
        "level": "Easy",
        "tags": [
            "math",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                14,
                8,
                123,
                0,
                1,
                2,
                100,
                1000,
                999999,
                106
            ],
            "outputs": [
                6,
                4,
                12,
                0,
                1,
                1,
                7,
                13,
                19,
                19
            ]
        }
    },
    "1343": {
        "title": "Sub-array Average",
        "description": "Given an array of integers `arr` and two integers `k` and `threshold`, return the number of sub-arrays of size `k` and average greater than or equal to `threshold`.",
        "example": "Example:\n\nInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).",
        "level": "Medium",
        "tags": [
            "array",
            "sub-array",
            "average"
        ],
        "test_cases": {
            "inputs": [
                {
                    "arr": [
                        2,
                        2,
                        2,
                        2,
                        5,
                        5,
                        5,
                        8
                    ],
                    "k": 3,
                    "threshold": 4
                },
                {
                    "arr": [
                        11,
                        13,
                        17,
                        23,
                        29,
                        31,
                        7,
                        5,
                        2,
                        3
                    ],
                    "k": 3,
                    "threshold": 5
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 4,
                    "threshold": 7
                },
                {
                    "arr": [
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "k": 2,
                    "threshold": 6
                },
                {
                    "arr": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "k": 5,
                    "threshold": 50
                },
                {
                    "arr": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 10,
                    "threshold": 1
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 1,
                    "threshold": 15
                },
                {
                    "arr": [
                        3,
                        6,
                        9,
                        12,
                        15,
                        18,
                        21,
                        24,
                        27,
                        30
                    ],
                    "k": 10,
                    "threshold": 20
                },
                {
                    "arr": [
                        1,
                        3,
                        5,
                        7,
                        9,
                        11,
                        13,
                        15,
                        17,
                        19
                    ],
                    "k": 2,
                    "threshold": 10
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 5,
                    "threshold": 25
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 3,
                    "threshold": 15
                },
                {
                    "arr": [
                        5,
                        10,
                        15,
                        20,
                        25,
                        30,
                        35,
                        40,
                        45,
                        50
                    ],
                    "k": 4,
                    "threshold": 35
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 5,
                    "threshold": 5
                },
                {
                    "arr": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "k": 2,
                    "threshold": 75
                },
                {
                    "arr": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 1,
                    "threshold": 2
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 10,
                    "threshold": 10
                },
                {
                    "arr": [
                        3,
                        6,
                        9,
                        12,
                        15,
                        18,
                        21,
                        24,
                        27,
                        30
                    ],
                    "k": 3,
                    "threshold": 25
                },
                {
                    "arr": [
                        1,
                        3,
                        5,
                        7,
                        9,
                        11,
                        13,
                        15,
                        17,
                        19
                    ],
                    "k": 4,
                    "threshold": 12
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 5,
                    "threshold": 30
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 2,
                    "threshold": 7
                },
                {
                    "arr": [
                        5,
                        10,
                        15,
                        20,
                        25,
                        30,
                        35,
                        40,
                        45,
                        50
                    ],
                    "k": 3,
                    "threshold": 20
                }
            ],
            "outputs": [
                3,
                6,
                7,
                9,
                6,
                10,
                0,
                0,
                8,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1344": {
        "title": "Smaller Angle Between Hour and Minute Hand",
        "description": "Given two numbers, `hour` and `minutes`, return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.",
        "example": "Example:\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExplanation: The hour hand is at 12 and the minute hand is at 6. The angle between them is 165 degrees.",
        "level": "Easy",
        "tags": [
            "math",
            "geometry"
        ],
        "test_cases": {
            "inputs": [
                [
                    12,
                    30
                ],
                [
                    3,
                    30
                ],
                [
                    3,
                    15
                ],
                [
                    1,
                    0
                ],
                [
                    6,
                    0
                ],
                [
                    9,
                    45
                ],
                [
                    12,
                    0
                ],
                [
                    6,
                    30
                ],
                [
                    9,
                    0
                ],
                [
                    12,
                    45
                ],
                [
                    1,
                    15
                ],
                [
                    6,
                    15
                ],
                [
                    9,
                    30
                ],
                [
                    12,
                    15
                ],
                [
                    3,
                    0
                ],
                [
                    6,
                    45
                ],
                [
                    9,
                    15
                ],
                [
                    1,
                    30
                ],
                [
                    3,
                    45
                ],
                [
                    1,
                    45
                ]
            ],
            "outputs": [
                165,
                75,
                7.5,
                0,
                180,
                112.5,
                0,
                15,
                90,
                82.5,
                22.5,
                97.5,
                105,
                157.5,
                82.5,
                90,
                52.5,
                97.5,
                52.5,
                7.5
            ]
        }
    },
    "1345": {
        "title": "Minimum Number of Steps to Reach Last Index",
        "description": "Given an array of integers `arr`, you are initially positioned at the first index of the array. In one step, you can jump from index `i` to index: \n\n- `i + 1` where: `i + 1 < arr.length`. \n- `i - 1` where: `i - 1 >= 0`. \n- `j` where: `arr[i] == arr[j]` and `i != j`. \n\nReturn the minimum number of steps to reach the last index of the array. Note that you cannot jump outside of the array at any time.",
        "example": "Example:\n\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    100,
                    -23,
                    -23,
                    404,
                    100,
                    23,
                    23,
                    23,
                    3,
                    404
                ],
                [
                    7
                ],
                [
                    7,
                    6,
                    9,
                    6,
                    9,
                    6,
                    9,
                    7
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "outputs": [
                3,
                0,
                1,
                4,
                4,
                4,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9
            ]
        }
    },
    "1346": {
        "title": "Double the Value",
        "description": "Given an array `arr` of integers, check if there exist two indices `i` and `j` such that `i != j`, `0 <= i, j < arr.length`, and `arr[i] == 2 * arr[j]`.",
        "example": "Example:\n\nInput: arr = [10,2,5,3]\nOutput: true\nExplanation: For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]\n\nInput: arr = [3,1,7,11]\nOutput: false\nExplanation: There is no i and j that satisfy the conditions.",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    2,
                    5,
                    3
                ],
                [
                    3,
                    1,
                    7,
                    11
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    4,
                    6,
                    8
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    4,
                    8
                ],
                [
                    5,
                    10,
                    20,
                    40
                ],
                [
                    100,
                    200,
                    400,
                    800
                ],
                [
                    1,
                    3,
                    5,
                    7
                ],
                [
                    2,
                    6,
                    10,
                    14
                ],
                [
                    0,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                false,
                false,
                false,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "1347": {
        "title": "Minimum Steps to Make Anagram",
        "description": "Given two strings of the same length `s` and `t`, you can choose any character of `t` and replace it with another character in one step. Return the minimum number of steps required to make `t` an anagram of `s`. An anagram of a string is a string that contains the same characters with a different (or the same) ordering.",
        "example": "Example:\n\nInput: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with 'b', t = \"bba\" which is an anagram of s.",
        "level": "Easy",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    "bab",
                    "aba"
                ],
                [
                    "leetcode",
                    "practice"
                ],
                [
                    "anagram",
                    "mangaar"
                ],
                [
                    "abc",
                    "cba"
                ],
                [
                    "hello",
                    "olleh"
                ],
                [
                    "abcd",
                    "dcba"
                ],
                [
                    "xyz",
                    "zyx"
                ],
                [
                    "apple",
                    "papel"
                ],
                [
                    "banana",
                    "ananab"
                ],
                [
                    "programming",
                    "gnimmargorp"
                ],
                [
                    "racecar",
                    "racecar"
                ],
                [
                    "moon",
                    "noon"
                ],
                [
                    "good",
                    "dog"
                ],
                [
                    "python",
                    "typhon"
                ],
                [
                    "algorithm",
                    "logarithm"
                ],
                [
                    "java",
                    "java"
                ],
                [
                    "computer",
                    "recotmup"
                ],
                [
                    "happy",
                    "yppah"
                ],
                [
                    "world",
                    "dlrow"
                ],
                [
                    "test",
                    "tset"
                ]
            ],
            "outputs": [
                1,
                5,
                0,
                0,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                1,
                1,
                3,
                1,
                0,
                3,
                0,
                0,
                2
            ]
        }
    },
    "1348": {
        "title": "Tweet Activity Monitoring",
        "description": "A social media company wants to monitor tweet activity by analyzing the number of tweets that occur in select periods of time. The periods can be divided into smaller time chunks based on a specified frequency (every minute, hour, or day). Implement an API to help the company with their analysis.",
        "example": "Example:\n\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0); // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60); // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10); // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // returns [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // returns [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120); // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210); // returns [4]; chunk [0,210] had 4 tweets",
        "level": "Medium",
        "tags": [
            "API",
            "time",
            "frequency",
            "analysis"
        ],
        "test_cases": {
            "inputs": [
                [
                    "TweetCounts",
                    "recordTweet",
                    "recordTweet",
                    "recordTweet",
                    "getTweetCountsPerFrequency",
                    "getTweetCountsPerFrequency",
                    "recordTweet",
                    "getTweetCountsPerFrequency"
                ],
                [
                    [
                        "tweet3",
                        0
                    ],
                    [
                        "tweet3",
                        60
                    ],
                    [
                        "tweet3",
                        10
                    ],
                    [
                        "minute",
                        "tweet3",
                        0,
                        59
                    ],
                    [
                        "minute",
                        "tweet3",
                        0,
                        60
                    ],
                    [
                        "tweet3",
                        120
                    ],
                    [
                        "hour",
                        "tweet3",
                        0,
                        210
                    ]
                ]
            ],
            "outputs": [
                [
                    null,
                    null,
                    null,
                    null,
                    [
                        2
                    ],
                    [
                        2,
                        1
                    ],
                    null,
                    [
                        4
                    ]
                ]
            ]
        }
    },
    "1349": {
        "title": "Maximum Number of Students in a Classroom",
        "description": "Given a `m * n` matrix `seats` that represents the distribution of seats in a classroom. If a seat is broken, it is denoted by a `'#'` character, otherwise it is denoted by a `'.'` character. Students can see the answers of those sitting next to the left, right, upper left, and upper right, but they cannot see the answers of the student sitting directly in front or behind them. Return the maximum number of students that can take the exam together without any possibility of cheating. Students must be placed in seats in good condition.",
        "example": "Example:\n\nInput: seats = [[\"#\", \".\", \"#\", \"#\", \".\", \"#\"],\n                [\".\", \"#\", \"#\", \"#\", \"#\", \".\"],\n                [\"#\", \".\", \"#\", \"#\", \".\", \"#\"]]\nOutput: 4\nExplanation: The teacher can place 4 students in available seats so they don't cheat on the exam.",
        "level": "Medium",
        "tags": [
            "matrix",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[[\"#\", \".\", \"#\", \"#\", \".\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \".\"],\n [\"#\", \".\", \"#\", \"#\", \".\", \"#\"]] ",
                "[[\".\", \"#\"],\n [\"#\", \"#\"],\n [\"#\", \".\"],\n [\"#\", \"#\"],\n [\".\", \"#\"]] ",
                "[[\"#\", \".\", \"#\", \".\", \"#\"],\n [\".\", \"#\", \".\", \"#\", \"#\"],\n [\"#\", \".\", \"#\", \".\", \"#\"],\n [\".\", \"#\", \".\", \"#\", \"#\"],\n [\"#\", \".\", \"#\", \".\", \"#\"]] ",
                "[[\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"]] ",
                "[[\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"]] "
            ],
            "outputs": [
                "4",
                "3",
                "6",
                "8",
                "8"
            ]
        }
    },
    "1351": {
        "title": "Count Negative Numbers in a Sorted Matrix",
        "description": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, write a function to count the number of negative numbers in the grid.",
        "example": "Example 1:\n\nInput: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negative numbers in the matrix.\n\nExample 2:\n\nInput: grid = [[3,2],[1,0]]\nOutput: 0\nExplanation: There are no negative numbers in the matrix.",
        "level": "Easy",
        "tags": [
            "array",
            "matrix",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        4,
                        3,
                        2,
                        -1
                    ],
                    [
                        3,
                        2,
                        1,
                        -1
                    ],
                    [
                        1,
                        1,
                        -1,
                        -2
                    ],
                    [
                        -1,
                        -1,
                        -2,
                        -3
                    ]
                ],
                [
                    [
                        3,
                        2
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        -1
                    ]
                ],
                [
                    [
                        0
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3
                    ],
                    [
                        -4,
                        -5,
                        -6
                    ],
                    [
                        -7,
                        -8,
                        -9
                    ]
                ],
                [
                    [
                        -1,
                        0,
                        1
                    ],
                    [
                        -2,
                        0,
                        2
                    ],
                    [
                        -3,
                        0,
                        3
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        0,
                        1
                    ],
                    [
                        -1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        0,
                        -1
                    ],
                    [
                        1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        0
                    ],
                    [
                        -1,
                        0,
                        0
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ]
            ],
            "outputs": [
                8,
                0,
                1,
                0,
                9,
                0,
                9,
                3,
                6,
                3,
                3,
                0,
                9,
                0,
                16,
                16,
                25,
                0,
                25,
                25
            ]
        }
    },
    "1352": {
        "title": "Product of Last K Integers",
        "description": "Design an algorithm that accepts a stream of integers and retrieves the product of the last `k` integers of the stream. Implement the `ProductOfNumbers` class with the following methods: \n\n- `ProductOfNumbers()`: Initializes the object with an empty stream. \n- `void add(int num)`: Appends the integer `num` to the stream. \n- `int getProduct(int k)`: Returns the product of the last `k` numbers in the current list. You can assume that always the current list has at least `k` numbers. The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.",
        "example": "ProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32",
        "level": "Medium",
        "tags": [
            "array",
            "stream",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    3
                ],
                [
                    0
                ],
                [
                    2
                ],
                [
                    5
                ],
                [
                    4
                ],
                [
                    2
                ],
                [
                    3
                ],
                [
                    4
                ],
                [
                    8
                ],
                [
                    2
                ]
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "20",
                "40",
                "0",
                "null",
                "32"
            ]
        }
    },
    "1353": {
        "title": "Maximum Number of Events",
        "description": "You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`. You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`. Return the maximum number of events you can attend.",
        "example": "Example:\n\nInput: events = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: You can attend all the three events. One way to attend them all is as shown. Attend the first event on day 1. Attend the second event on day 2. Attend the third event on day 3.",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2],[2,3],[3,4]]",
                "[[1,2],[2,3],[3,4],[1,2]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "[[1,2],[1,2],[1,2],[1,2]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21]]",
                "[[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86],[16,85],[17,84],[18,83],[19,82],[20,81]]",
                "[[1,1]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]]"
            ],
            "outputs": [
                "3",
                "4",
                "5",
                "1",
                "20",
                "20",
                "1",
                "100"
            ]
        }
    },
    "1354": {
        "title": "Construct Target Array With Multiple Sums",
        "description": "You are given an array `target` of n integers. From a starting array `arr` consisting of `n` 1's, you may perform the following procedure:\n\n- Let `x` be the sum of all elements currently in your array.\n- Choose index `i`, such that `0 <= i < n`, and set the value of `arr` at index `i` to `x`.\n- You may repeat this procedure as many times as needed.\n\nReturn `true` if it is possible to construct the `target` array from `arr`, otherwise, return `false`.",
        "example": "Example:\n\nInput: target = [9,3,5]\nOutput: true\nExplanation: Start with arr = [1, 1, 1]\n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[9,3,5]",
                "[1,1,1,2]",
                "[8,5]",
                "[1,1,1,1]",
                "[10,20,30,40,50]",
                "[2,4,6,8,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,3,5,7,9,11,13,15,17,19]",
                "[1,2,4,8,16,32,64,128,256,512]",
                "[1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "1356": {
        "title": "Sorting Integers by Binary Representation",
        "description": "Given an integer array `arr`, sort the integers in the array in ascending order by the number of `1`'s in their binary representation. In case of two or more integers having the same number of `1`'s, sort them in ascending order. Return the sorted array.",
        "example": "Example 1:\n\nInput: arr = [0,1,2,3,4,5,6,7,8]\nOutput: [0,1,2,4,8,3,5,6,7]\nExplanation: [0] is the only integer with 0 bits. [1,2,4,8] all have 1 bit. [3,5,6] have 2 bits. [7] has 3 bits. The sorted array by bits is [0,1,2,4,8,3,5,6,7]\n\nExample 2:\n\nInput: arr = [1024,512,256,128,64,32,16,8,4,2,1]\nOutput: [1,2,4,8,16,32,64,128,256,512,1024]\nExplanation: All integers have 1 bit in the binary representation, so they are sorted in ascending order.",
        "level": "Easy",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    1024,
                    512,
                    256,
                    128,
                    64,
                    32,
                    16,
                    8,
                    4,
                    2,
                    1
                ],
                [
                    9,
                    3,
                    5,
                    6,
                    7,
                    2,
                    1,
                    0
                ],
                [
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    0
                ],
                [
                    16,
                    8,
                    4,
                    2,
                    1,
                    32,
                    64,
                    128,
                    256,
                    512,
                    1024
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "outputs": [
                [
                    0,
                    1,
                    2,
                    4,
                    8,
                    3,
                    5,
                    6,
                    7
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512,
                    1024
                ],
                [
                    0,
                    1,
                    2,
                    4,
                    8,
                    3,
                    5,
                    6,
                    7,
                    9
                ],
                [
                    0,
                    1,
                    2,
                    4,
                    8,
                    3,
                    5,
                    6,
                    7,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512,
                    1024
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ]
        }
    },
    "1357": null,
    "1358": null,
    "1359": {
        "title": "Valid Pickup and Delivery Sequences",
        "description": "Given `n` orders, each order consists of pickup and delivery services. Count all valid pickup/delivery possible sequences such that delivery(i) is always after pickup(i). Return the count modulo 10^9 + 7.",
        "example": "Example 1:\n\nInput: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always comes after Pickup 1.\n\nExample 2:\n\nInput: n = 2\nOutput: 6\nExplanation: All possible orders: (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1), and (P2,D2,P1,D1). This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after Delivery 2.\n\nExample 3:\n\nInput: n = 3\nOutput: 90",
        "level": "Medium",
        "tags": [
            "permutations",
            "combinatorics",
            "modulo"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                20,
                50,
                100,
                200,
                500,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                10000000000,
                100000000000
            ],
            "outputs": [
                1,
                6,
                90,
                2520,
                113400,
                986410223,
                457992974,
                772009097,
                437918130,
                666992288,
                703097347,
                457992974,
                66520193,
                457992974,
                66520193,
                457992974,
                66520193,
                457992974,
                66520193,
                457992974
            ]
        }
    },
    "1360": {
        "title": "Count the Number of Days Between Two Dates",
        "description": "Write a program that takes two dates as input and counts the number of days between them. The dates are given as strings in the format `YYYY-MM-DD`. The program should return the number of days as an integer.",
        "example": "Example:\n\nInput: date1 = \"2019-06-29\", date2 = \"2019-06-30\"\nOutput: 1\n\nExplanation: The number of days between June 29, 2019, and June 30, 2019, is 1.\n\nInput: date1 = \"2020-01-15\", date2 = \"2019-12-31\"\nOutput: 15\n\nExplanation: The number of days between December 31, 2019, and January 15, 2020, is 15.",
        "level": "Easy",
        "tags": [
            "date",
            "string manipulation"
        ],
        "test_cases": {
            "inputs": [
                "\"2019-06-29\", \"2019-06-30\"",
                "\"2020-01-15\", \"2019-12-31\"",
                "\"1971-01-01\", \"1971-01-01\"",
                "\"2100-12-31\", \"2100-12-31\"",
                "\"2000-02-28\", \"2000-03-01\"",
                "\"2000-02-28\", \"2001-02-28\"",
                "\"2000-02-28\", \"2001-03-01\"",
                "\"2000-02-28\", \"2004-02-28\"",
                "\"2000-02-28\", \"2004-02-29\"",
                "\"2000-02-28\", \"2004-03-01\"",
                "\"2000-02-29\", \"2004-02-28\"",
                "\"2000-02-29\", \"2004-02-29\"",
                "\"2000-02-29\", \"2004-03-01\"",
                "\"2000-03-01\", \"2004-02-28\"",
                "\"2000-03-01\", \"2004-02-29\"",
                "\"2000-03-01\", \"2004-03-01\"",
                "\"2004-02-28\", \"2004-02-28\"",
                "\"2004-02-28\", \"2004-02-29\"",
                "\"2004-02-28\", \"2004-03-01\"",
                "\"2004-02-29\", \"2004-02-28\""
            ],
            "outputs": [
                "1",
                "15",
                "0",
                "0",
                "2",
                "366",
                "367",
                "1461",
                "1462",
                "1463",
                "1461",
                "1462",
                "1463",
                "1461",
                "1462",
                "1463",
                "0",
                "1",
                "2",
                "1"
            ]
        }
    },
    "1361": {
        "title": "Valid Binary Tree",
        "description": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`. Write a function that returns `true` if and only if **all** the given nodes form **exactly one** valid binary tree.\n\nIf node `i` has no left child, then `leftChild[i]` will equal `-1`. Similarly, if node `i` has no right child, then `rightChild[i]` will equal `-1`.\n\nNote that the nodes have no values and that we only use the node numbers in this problem.",
        "example": "Example:\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true\n\nExplanation: The given nodes form a valid binary tree.\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false\n\nExplanation: The given nodes do not form a valid binary tree as node 3 has both left and right children.\n\nInput: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false\n\nExplanation: The given nodes do not form a valid binary tree as node 0 has a left child but node 1 does not have a right child.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Graph",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "n": 4,
                    "leftChild": [
                        1,
                        -1,
                        3,
                        -1
                    ],
                    "rightChild": [
                        2,
                        -1,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 4,
                    "leftChild": [
                        1,
                        -1,
                        3,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 2,
                    "leftChild": [
                        1,
                        0
                    ],
                    "rightChild": [
                        -1,
                        -1
                    ]
                },
                {
                    "n": 1,
                    "leftChild": [
                        -1
                    ],
                    "rightChild": [
                        -1
                    ]
                },
                {
                    "n": 3,
                    "leftChild": [
                        1,
                        -1,
                        -1
                    ],
                    "rightChild": [
                        2,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 3,
                    "leftChild": [
                        1,
                        -1,
                        -1
                    ],
                    "rightChild": [
                        -1,
                        2,
                        -1
                    ]
                },
                {
                    "n": 3,
                    "leftChild": [
                        -1,
                        0,
                        -1
                    ],
                    "rightChild": [
                        -1,
                        -1,
                        2
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        -1,
                        1
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        1,
                        -1
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        1,
                        2
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        -1,
                        1
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        -1
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        2
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        3
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        4
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        5
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        6
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        0
                    ]
                }
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1362": {
        "title": "Closest Divisors",
        "description": "Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`. Return the two integers in any order.",
        "example": "Example 1:\n\nInput: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.",
        "level": "Medium",
        "tags": [
            "math",
            "number theory"
        ],
        "test_cases": {
            "inputs": [
                8,
                123,
                999,
                1,
                2,
                10,
                100,
                1000,
                123456,
                987654321,
                999999999
            ],
            "outputs": [
                [
                    3,
                    3
                ],
                [
                    5,
                    25
                ],
                [
                    40,
                    25
                ],
                [
                    1,
                    2
                ],
                [
                    1,
                    2
                ],
                [
                    2,
                    5
                ],
                [
                    10,
                    10
                ],
                [
                    25,
                    40
                ],
                [
                    432,
                    285
                ],
                [
                    987654321,
                    1
                ],
                [
                    999999999,
                    1
                ]
            ]
        }
    },
    "1363": {
        "title": "Largest Multiple of Three",
        "description": "Given an array of digits `digits`, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer, return an empty string. Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.",
        "example": "Example:\n\nInput: digits = [8,1,9]\nOutput: \"981\"\nExplanation: The largest multiple of three that can be formed by concatenating some of the given digits is 981.",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    8,
                    1,
                    9
                ],
                [
                    8,
                    6,
                    7,
                    1,
                    0
                ],
                [
                    1
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    0
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "outputs": [
                "981",
                "8760",
                "",
                "0",
                "111",
                "222",
                "987654321",
                "987654321",
                "9876543210",
                "9876543210",
                "333",
                "444",
                "444",
                "444",
                "555",
                "555",
                "555",
                "666",
                "666",
                "666"
            ]
        }
    },
    "1365": {
        "title": "Count Smaller Numbers",
        "description": "Given an array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` **and** `nums[j] < nums[i]`. Return the answer in an array.",
        "example": "Example 1:\n\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). For nums[1]=1 does not exist any smaller number than it. For nums[2]=2 there exist one smaller number than it (1). For nums[3]=2 there exist one smaller number than it (1). For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\nExample 2:\n\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n\nExample 3:\n\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]",
        "level": "Easy",
        "tags": [
            "array",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                "[8,1,2,2,3]",
                "[6,5,4,8]",
                "[7,7,7,7]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,3,5,7,9,2,4,6,8,10]",
                "[10,8,6,4,2,9,7,5,3,1]",
                "[1,1,1,2,2,2,3,3,3]",
                "[3,3,3,2,2,2,1,1,1]",
                "[1,2,3,4,5,5,4,3,2,1]",
                "[1,1,1,1,1,2,2,2,2,2]",
                "[2,2,2,2,2,1,1,1,1,1]",
                "[1,2,3,4,5,1,2,3,4,5]",
                "[5,4,3,2,1,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[4,0,1,1,3]",
                "[2,1,0,3]",
                "[0,0,0,0]",
                "[0,0,0,0,0]",
                "[4,3,2,1,0]",
                "[0,0,0,0,0]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[9,8,7,6,5,4,3,2,1,0]",
                "[0,1,2,3,4,0,1,2,3,4]",
                "[4,3,2,1,0,4,3,2,1,0]",
                "[3,3,3,6,6,6,9,9,9]",
                "[9,9,9,6,6,6,3,3,3]",
                "[4,3,2,1,0,0,1,2,3,4]",
                "[0,0,0,0,0,5,5,5,5,5]",
                "[5,5,5,5,5,0,0,0,0,0]",
                "[4,3,2,1,0,4,3,2,1,0]",
                "[0,1,2,3,4,0,1,2,3,4]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
                "[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]"
            ]
        }
    },
    "1366": {
        "title": "Team Ranking",
        "description": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition. The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. You are given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above. Return a string of all teams sorted by the ranking system.",
        "example": "Example:\n\nInput: votes = [\"ABC \", \"ACB \", \"ABC \", \"ACB \", \"ACB \"]\nOutput: \"ACB \"\nExplanation: Team A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team. Team B was ranked second by 2 voters and ranked third by 3 voters. Team C was ranked second by 3 voters and ranked third by 2 voters. As most of the voters ranked C second, team C is the second team, and team B is the third.",
        "level": "Medium",
        "tags": [
            "sorting",
            "tie-breaking",
            "ranking"
        ],
        "test_cases": {
            "inputs": [
                [
                    "ABC ",
                    "ACB ",
                    "ABC ",
                    "ACB ",
                    "ACB "
                ],
                [
                    "WXYZ ",
                    "XYZW "
                ],
                [
                    "ZMNAGUEDSJYLBOPHRQICWFXTVK "
                ],
                [
                    "ABC ",
                    "ACB ",
                    "BAC ",
                    "BCA ",
                    "CAB ",
                    "CBA "
                ],
                [
                    "ABC ",
                    "ACB ",
                    "BAC ",
                    "BCA ",
                    "CAB ",
                    "CBA ",
                    "ABC ",
                    "ACB ",
                    "BAC ",
                    "BCA ",
                    "CAB ",
                    "CBA "
                ]
            ],
            "outputs": [
                "ACB ",
                "XWYZ ",
                "ZMNAGUEDSJYLBOPHRQICWFXTVK ",
                "ABC ",
                "ACB "
            ]
        }
    },
    "1367": {
        "title": "Downward Path in Binary Tree",
        "description": "Given a binary tree `root` and a linked list with `head` as the first node, determine if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree.",
        "example": "Example 1:\n\nInput: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\nExplanation: Nodes in blue form a subpath in the binary tree.\n\nExample 2:\n\nInput: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\n\nExample 3:\n\nInput: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from head.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "linked list",
            "path"
        ],
        "test_cases": {
            "inputs": [
                "[4,2,8]",
                "[1,4,2,6]",
                "[1,4,2,6,8]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1]",
                "[1,2]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "true",
                "false"
            ]
        }
    },
    "1368": null,
    "1370": {
        "title": "String Reordering Algorithm",
        "description": "Given a string `s`, reorder the string using the following algorithm:\n\n1. Pick the **smallest** character from `s` and **append** it to the result.\n2. Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.\n3. Repeat step 2 until you cannot pick more characters.\n4. Pick the **largest** character from `s` and **append** it to the result.\n5. Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it.\n6. Repeat step 5 until you cannot pick more characters.\n7. Repeat the steps from 1 to 6 until you pick all characters from `s`.\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\n\nReturn the result string after sorting `s` with this algorithm.",
        "example": "Example:\n\nInput: s = \"aaaabbbbcccc \"\nOutput: \"abccbaabccba \"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc \". After steps 4, 5 and 6 of the first iteration, result = \"abccba \". First iteration is done. Now s = \"aabbcc \" and we go back to step 1. After steps 1, 2 and 3 of the second iteration, result = \"abccbaabc \". After steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba \".\n\nInput: s = \"rat \"\nOutput: \"art \"\nExplanation: The word \"rat \" becomes \"art \" after re-ordering it with the mentioned algorithm.",
        "level": "Medium",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "\"aaaabbbbcccc \"",
                "\"rat \"",
                "\"abcde \"",
                "\"zyxwvutsr \"",
                "\"hello world \"",
                "\"programming \"",
                "\"algorithm \"",
                "\"leetcode \"",
                "\"python \"",
                "\"java \"",
                "\"coding \"",
                "\"question \"",
                "\"example \"",
                "\"test \"",
                "\"case \"",
                "\"solution \"",
                "\"problem \"",
                "\"code \"",
                "\"challenge \"",
                "\"practice \""
            ],
            "outputs": [
                "\"abccbaabccba \"",
                "\"art \"",
                "\"abcde \"",
                "\"ztsrwyxvuu \"",
                "\"ehllowrdl \"",
                "\"agimnorpmm \"",
                "\"aaolrthgm \"",
                "\"ceotdel \"",
                "\"nopty \"",
                "\"ajv \"",
                "\"cdgino \"",
                "\"eestion \"",
                "\"aeelmpx \"",
                "\"acet \"",
                "\"aces \"",
                "\"eilnosu \"",
                "\"bemopr \"",
                "\"cdeo \"",
                "\"aceeghlln \"",
                "\"aceiprt \""
            ]
        }
    },
    "1371": null,
    "1372": {
        "title": "Longest ZigZag Path in Binary Tree",
        "description": "Given the root of a binary tree, find the length of the longest ZigZag path in the tree. A ZigZag path is defined as follows: Choose any node in the binary tree and a direction (right or left). If the current direction is right, move to the right child of the current node; otherwise, move to the left child. Change the direction from right to left or from left to right. Repeat the second and third steps until you can't move in the tree. Zigzag length is defined as the number of nodes visited - 1. Return the longest ZigZag path contained in the tree.",
        "example": "Example:\n\nInput: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\nOutput: 3\nExplanation: The longest ZigZag path is formed by visiting the nodes in the order: right -> left -> right.\n\nInput: root = [1,1,1,null,1,null,null,1,1,null,1]\nOutput: 4\nExplanation: The longest ZigZag path is formed by visiting the nodes in the order: left -> right -> left -> right.\n\nInput: root = [1]\nOutput: 0\nExplanation: There is only one node in the tree, so the ZigZag path length is 0.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        1,
                        null,
                        1,
                        1,
                        1,
                        null,
                        null,
                        1,
                        1,
                        null,
                        1,
                        null,
                        null,
                        null,
                        1,
                        null,
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        1,
                        1,
                        null,
                        1,
                        null,
                        null,
                        1,
                        1,
                        null,
                        1
                    ]
                },
                {
                    "root": [
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        null,
                        4,
                        5,
                        null,
                        null,
                        6,
                        7,
                        8,
                        9,
                        null,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                }
            ],
            "outputs": [
                3,
                4,
                0,
                9,
                5,
                9,
                9,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7
            ]
        }
    },
    "1373": null,
    "1374": {
        "title": "Odd Occurrences",
        "description": "Given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times. The returned string must contain only lowercase English letters. If there are multiple valid strings, return any of them.",
        "example": "Example:\n\nInput: n = 4\nOutput: \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".",
        "level": "Easy",
        "tags": [
            "string",
            "math"
        ],
        "test_cases": {
            "inputs": [
                4,
                2,
                7,
                1,
                10,
                20,
                100,
                500,
                333,
                222,
                111,
                99,
                77,
                55,
                33,
                11,
                9,
                7,
                5,
                3
            ],
            "outputs": [
                "pppz",
                "xy",
                "holasss",
                "a",
                "abcdefghij",
                "abcdefghijklmnopqrst",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz"
            ]
        }
    },
    "1375": {
        "title": "Prefix-Aligned Binary String",
        "description": "You have a 1-indexed binary string of length `n` where all the bits are `0` initially. We will flip all the bits of this binary string (i.e., change them from `0` to `1`) one by one. You are given a 1-indexed integer array `flips` where `flips[i]` indicates that the bit at index `i` will be flipped in the `ith` step.\n\nA binary string is prefix-aligned if, after the `ith` step, all the bits in the inclusive range `[1, i]` are ones and all the other bits are zeros.\n\nReturn the number of times the binary string is prefix-aligned during the flipping process.",
        "example": "Example:\n\nInput: flips = [3,2,4,1,5]\nOutput: 2\nExplanation: The binary string is initially \"00000 \".\nAfter applying step 1: The string becomes \"00100 \", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100 \", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110 \", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110 \", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111 \", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.",
        "level": "Medium",
        "tags": [
            "array",
            "prefix-aligned",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,4,1,5]",
                "[4,1,2,3]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1]",
                "[2]",
                "[3]",
                "[4]",
                "[5]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[3,3,3,3,3]",
                "[4,4,4,4,4]",
                "[5,5,5,5,5]",
                "[1,2,3,4,5,1,2,3,4,5]",
                "[5,4,3,2,1,5,4,3,2,1]",
                "[1,2,3,4,5,5,4,3,2,1]",
                "[5,4,3,2,1,1,2,3,4,5]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2]"
            ],
            "outputs": [
                "2",
                "1",
                "5",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2"
            ]
        }
    },
    "1376": {
        "title": "Informing Employees",
        "description": "A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`. Each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure. The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. The `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news). Return the number of minutes needed to inform all the employees about the urgent news.",
        "example": "Example:\n\nInput: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.\n\nInput: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all. The tree structure of the employees in the company is shown.",
        "level": "Medium",
        "tags": [
            "tree",
            "depth-first search",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    [
                        -1
                    ],
                    [
                        0
                    ]
                ],
                [
                    6,
                    2,
                    [
                        2,
                        2,
                        -1,
                        2,
                        2,
                        2
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    5,
                    0,
                    [
                        -1,
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    4,
                    2,
                    [
                        3,
                        3,
                        -1,
                        2
                    ],
                    [
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    3,
                    0,
                    [
                        -1,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        2
                    ]
                ],
                [
                    7,
                    6,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        -1
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ]
            ],
            "outputs": [
                0,
                1,
                2,
                1,
                2,
                1
            ]
        }
    },
    "1377": {
        "title": "Frog Jumping Probability",
        "description": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from **vertex 1**. In one second, the frog jumps from its current vertex to another **unvisited** vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.\n\nReturn the probability that after `t` seconds the frog is on the vertex `target`. Answers within `10-5` of the actual answer will be accepted.",
        "example": "Example:\n\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\nOutput: 0.16666666666666666\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666.",
        "level": "Medium",
        "tags": [
            "graph",
            "probability"
        ],
        "test_cases": {
            "inputs": [
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            7
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            3,
                            5
                        ]
                    ],
                    2,
                    4
                ],
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            7
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            3,
                            5
                        ]
                    ],
                    1,
                    7
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    3,
                    5
                ],
                [
                    4,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ]
                    ],
                    1,
                    4
                ],
                [
                    6,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ],
                    4,
                    6
                ],
                [
                    8,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ]
                    ],
                    3,
                    7
                ],
                [
                    10,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ],
                        [
                            5,
                            10
                        ]
                    ],
                    2,
                    9
                ],
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ],
                    5,
                    1
                ],
                [
                    9,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ]
                    ],
                    5,
                    6
                ],
                [
                    6,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ],
                    1,
                    6
                ],
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ]
                    ],
                    3,
                    7
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    2,
                    5
                ],
                [
                    4,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ]
                    ],
                    2,
                    4
                ],
                [
                    8,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ]
                    ],
                    2,
                    7
                ],
                [
                    10,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ],
                        [
                            5,
                            10
                        ]
                    ],
                    4,
                    10
                ],
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ],
                    1,
                    3
                ],
                [
                    9,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ]
                    ],
                    3,
                    6
                ],
                [
                    6,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ],
                    2,
                    6
                ],
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ]
                    ],
                    1,
                    7
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    1,
                    5
                ]
            ],
            "outputs": [
                0.16666666666666666,
                0.3333333333333333,
                0.0,
                0.25,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0
            ]
        }
    },
    "1379": {
        "title": "Find Cloned Node in Binary Tree",
        "description": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree, return a reference to the same node in the `cloned` tree. The `cloned` tree is a copy of the `original` tree. Note that you are not allowed to change any of the two trees or the `target` node, and the answer must be a reference to a node in the `cloned` tree.",
        "example": "Example 1:\n\nInput: tree = [7,4,3,null,null,6,19], target = 3\nOutput: 3\nExplanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[7,4,3,null,null,6,19]",
                "[7]",
                "[8,null,6,null,5,null,4,null,3,null,2,null,1]"
            ],
            "outputs": [
                "3",
                "7",
                "4"
            ]
        }
    },
    "1380": {
        "title": "Lucky Numbers in Matrix",
        "description": "Given an `m x n` matrix of **distinct** numbers, find all the **lucky numbers** in the matrix. A lucky number is an element of the matrix that is the minimum element in its row and the maximum element in its column.",
        "example": "Example:\n\nInput: matrix = [[3,7,8],[9,11,13],[15,16,17]]\nOutput: [15]\nExplanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.",
        "level": "Easy",
        "tags": [
            "array",
            "matrix",
            "search"
        ],
        "test_cases": {
            "inputs": [
                "[[3,7,8],[9,11,13],[15,16,17]]",
                "[[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
                "[[7,8],[1,2]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[9,8,7],[6,5,4],[3,2,1]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[12,11,10,9],[8,7,6,5],[4,3,2,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[5,6,7,8,9],[1,2,3,4,5],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]]",
                "[[24,23,22,21,20],[19,18,17,16,15],[14,13,12,11,10],[5,4,3,2,1]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]]",
                "[[24,23,22,21,20],[19,18,17,16,15],[14,13,12,11,10],[9,8,7,6,5],[4,3,2,1]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28]]",
                "[[28,27,26,25,24,23,22],[21,20,19,18,17,16,15],[14,13,12,11,10,9,8],[7,6,5,4,3,2,1]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24]]",
                "[[24,23,22,21,20,19,18,17],[16,15,14,13,12,11,10,9],[8,7,6,5,4,3,2,1]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27]]",
                "[[27,26,25,24,23,22,21,20,19],[18,17,16,15,14,13,12,11,10],[9,8,7,6,5,4,3,2,1]]"
            ],
            "outputs": [
                "[15]",
                "[12]",
                "[7]",
                "[1, 5, 9]",
                "[9, 5, 1]",
                "[1, 5, 9]",
                "[9, 5, 1]",
                "[1, 6, 11]",
                "[15, 10, 5]",
                "[1]",
                "[2]",
                "[5, 11, 17, 23]",
                "[24, 18, 12, 6]",
                "[1, 7, 13, 19]",
                "[28, 21, 14, 7]",
                "[1, 9, 17]",
                "[24, 16, 8]",
                "[1, 10, 19]",
                "[24, 16, 8]",
                "[1, 10, 19]",
                "[27, 18, 9]"
            ]
        }
    },
    "1381": null,
    "1382": {
        "title": "Balanced Binary Search Tree",
        "description": "Given the `root` of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them. A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.",
        "example": "Example:\n\nInput: root = [1,null,2,null,3,null,4,null,null]\nOutput: [2,1,3,null,null,null,4]\nExplanation: This is not the only correct answer, [3,1,4,null,2] is also correct.",
        "level": "Medium",
        "tags": [
            "binary search tree",
            "balanced tree"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,null,3,null,4,null,null]",
                "[2,1,3]",
                "[5,3,7,2,4,6,8]",
                "[10,5,15,3,7,12,18,2,4,6,8,11,13,17,19]",
                "[1]"
            ],
            "outputs": [
                "[2,1,3,null,null,null,4]",
                "[2,1,3]",
                "[5,3,7,2,4,6,8]",
                "[10,5,15,3,7,12,18,2,4,6,8,11,13,17,19]",
                "[1]"
            ]
        }
    },
    "1383": {
        "title": "Maximum Performance of a Team",
        "description": "You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.\n\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.\n\nReturn the maximum performance of this team. Since the answer can be a huge number, return it modulo `109 + 7`.",
        "example": "Example:\n\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[6, [2,10,3,1,5,8], [5,4,3,9,7,2], 2]",
                "[6, [2,10,3,1,5,8], [5,4,3,9,7,2], 3]",
                "[6, [2,10,3,1,5,8], [5,4,3,9,7,2], 4]",
                "[5, [1,2,3,4,5], [5,5,5,5,5], 2]",
                "[3, [1,2,3], [1,1,1], 1]",
                "[4, [1,2,3,4], [1,1,1,1], 4]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 5]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 3]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 0]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 6]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 10]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 100]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 10000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 100000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1000000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 10000000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 100000000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1000000000]"
            ],
            "outputs": [
                "60",
                "68",
                "72",
                "25",
                "3",
                "10",
                "15",
                "9",
                "5",
                "0",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15"
            ]
        }
    },
    "1385": {
        "title": "Distance Value between Two Arrays",
        "description": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, return the distance value between the two arrays. The distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.",
        "example": "Example 1:\n\nInput: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: For arr1[0]=4 we have: |4-10|=6 > d=2 |4-9|=5 > d=2 |4-1|=3 > d=2 |4-8|=4 > d=2 For arr1[1]=5 we have: |5-10|=5 > d=2 |5-9|=4 > d=2 |5-1|=4 > d=2 |5-8|=3 > d=2 For arr1[2]=8 we have: |8-10|=2 <= d=2 |8-9|=1 <= d=2 |8-1|=7 > d=2 |8-8|=0 <= d=2\n\nExample 2:\n\nInput: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2\n\nExample 3:\n\nInput: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1",
        "level": "Easy",
        "tags": [
            "array",
            "distance"
        ],
        "test_cases": {
            "inputs": [
                "[4,5,8], [10,9,1,8], 2",
                "[1,4,2,3], [-4,-3,6,10,20,30], 3",
                "[2,1,100,3], [-5,-2,10,-3,7], 6",
                "[-1,0,1], [1,2,3], 0",
                "[10,20,30], [5,15,25], 10",
                "[1,2,3,4,5], [6,7,8,9,10], 5",
                "[100,200,300], [400,500,600], 100",
                "[-10,-20,-30], [-5,-15,-25], 10",
                "[0,0,0,0], [1,1,1,1], 1",
                "[1,2,3,4,5], [1,2,3,4,5], 0",
                "[-1,-2,-3,-4,-5], [-1,-2,-3,-4,-5], 0",
                "[1,2,3,4,5], [], 10",
                "[], [1,2,3,4,5], 10",
                "[], [], 0",
                "[1], [1], 0",
                "[1], [2], 1",
                "[1,2,3,4,5], [6,7,8,9,10], 1",
                "[1,2,3,4,5], [6,7,8,9,10], 0",
                "[1,2,3,4,5], [6,7,8,9,10], 5"
            ],
            "outputs": [
                "2",
                "2",
                "1",
                "0",
                "0",
                "5",
                "0",
                "0",
                "0",
                "5",
                "0",
                "10",
                "10",
                "0",
                "0",
                "1",
                "5",
                "5",
                "0"
            ]
        }
    },
    "1386": {
        "title": "Cinema Seating Arrangement",
        "description": "A cinema has `n` rows of seats, numbered from 1 to `n`, and there are ten seats in each row, labelled from 1 to 10. Given the array `reservedSeats` containing the numbers of seats already reserved, return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle are not considered to be adjacent, except when an aisle splits a four-person group in the middle, with two people on each side.",
        "example": "Example 1:\n\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The optimal allocation for four groups is shown in the figure above, where blue seats are already reserved and orange seats are for one group.\n\nExample 2:\n\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n\nExample 3:\n\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            3,
                            1
                        ],
                        [
                            3,
                            10
                        ]
                    ]
                ],
                [
                    2,
                    [
                        [
                            2,
                            1
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            2,
                            6
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            4,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            4,
                            6
                        ],
                        [
                            1,
                            7
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            1,
                            6
                        ],
                        [
                            1,
                            7
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            1,
                            9
                        ],
                        [
                            1,
                            10
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            2,
                            1
                        ],
                        [
                            2,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            2,
                            7
                        ],
                        [
                            2,
                            8
                        ],
                        [
                            2,
                            9
                        ],
                        [
                            2,
                            10
                        ]
                    ]
                ],
                [
                    7,
                    [
                        [
                            3,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            3,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            3,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            3,
                            8
                        ],
                        [
                            3,
                            9
                        ],
                        [
                            3,
                            10
                        ]
                    ]
                ],
                [
                    8,
                    [
                        [
                            4,
                            1
                        ],
                        [
                            4,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            4,
                            4
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            4,
                            6
                        ],
                        [
                            4,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ],
                        [
                            4,
                            10
                        ]
                    ]
                ],
                [
                    9,
                    [
                        [
                            5,
                            1
                        ],
                        [
                            5,
                            2
                        ],
                        [
                            5,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            5,
                            5
                        ],
                        [
                            5,
                            6
                        ],
                        [
                            5,
                            7
                        ],
                        [
                            5,
                            8
                        ],
                        [
                            5,
                            9
                        ],
                        [
                            5,
                            10
                        ]
                    ]
                ],
                [
                    10,
                    [
                        [
                            6,
                            1
                        ],
                        [
                            6,
                            2
                        ],
                        [
                            6,
                            3
                        ],
                        [
                            6,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            6,
                            6
                        ],
                        [
                            6,
                            7
                        ],
                        [
                            6,
                            8
                        ],
                        [
                            6,
                            9
                        ],
                        [
                            6,
                            10
                        ]
                    ]
                ],
                [
                    11,
                    [
                        [
                            7,
                            1
                        ],
                        [
                            7,
                            2
                        ],
                        [
                            7,
                            3
                        ],
                        [
                            7,
                            4
                        ],
                        [
                            7,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            7,
                            7
                        ],
                        [
                            7,
                            8
                        ],
                        [
                            7,
                            9
                        ],
                        [
                            7,
                            10
                        ]
                    ]
                ],
                [
                    12,
                    [
                        [
                            8,
                            1
                        ],
                        [
                            8,
                            2
                        ],
                        [
                            8,
                            3
                        ],
                        [
                            8,
                            4
                        ],
                        [
                            8,
                            5
                        ],
                        [
                            8,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            8,
                            8
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            8,
                            10
                        ]
                    ]
                ],
                [
                    13,
                    [
                        [
                            9,
                            1
                        ],
                        [
                            9,
                            2
                        ],
                        [
                            9,
                            3
                        ],
                        [
                            9,
                            4
                        ],
                        [
                            9,
                            5
                        ],
                        [
                            9,
                            6
                        ],
                        [
                            9,
                            7
                        ],
                        [
                            9,
                            8
                        ],
                        [
                            9,
                            9
                        ],
                        [
                            9,
                            10
                        ]
                    ]
                ],
                [
                    14,
                    [
                        [
                            10,
                            1
                        ],
                        [
                            10,
                            2
                        ],
                        [
                            10,
                            3
                        ],
                        [
                            10,
                            4
                        ],
                        [
                            10,
                            5
                        ],
                        [
                            10,
                            6
                        ],
                        [
                            10,
                            7
                        ],
                        [
                            10,
                            8
                        ],
                        [
                            10,
                            9
                        ],
                        [
                            10,
                            10
                        ]
                    ]
                ],
                [
                    15,
                    [
                        [
                            11,
                            1
                        ],
                        [
                            11,
                            2
                        ],
                        [
                            11,
                            3
                        ],
                        [
                            11,
                            4
                        ],
                        [
                            11,
                            5
                        ],
                        [
                            11,
                            6
                        ],
                        [
                            11,
                            7
                        ],
                        [
                            11,
                            8
                        ],
                        [
                            11,
                            9
                        ],
                        [
                            11,
                            10
                        ]
                    ]
                ],
                [
                    16,
                    [
                        [
                            12,
                            1
                        ],
                        [
                            12,
                            2
                        ],
                        [
                            12,
                            3
                        ],
                        [
                            12,
                            4
                        ],
                        [
                            12,
                            5
                        ],
                        [
                            12,
                            6
                        ],
                        [
                            12,
                            7
                        ],
                        [
                            12,
                            8
                        ],
                        [
                            12,
                            9
                        ],
                        [
                            12,
                            10
                        ]
                    ]
                ],
                [
                    17,
                    [
                        [
                            13,
                            1
                        ],
                        [
                            13,
                            2
                        ],
                        [
                            13,
                            3
                        ],
                        [
                            13,
                            4
                        ],
                        [
                            13,
                            5
                        ],
                        [
                            13,
                            6
                        ],
                        [
                            13,
                            7
                        ],
                        [
                            13,
                            8
                        ],
                        [
                            13,
                            9
                        ],
                        [
                            13,
                            10
                        ]
                    ]
                ],
                [
                    18,
                    [
                        [
                            14,
                            1
                        ],
                        [
                            14,
                            2
                        ],
                        [
                            14,
                            3
                        ],
                        [
                            14,
                            4
                        ],
                        [
                            14,
                            5
                        ],
                        [
                            14,
                            6
                        ],
                        [
                            14,
                            7
                        ],
                        [
                            14,
                            8
                        ],
                        [
                            14,
                            9
                        ],
                        [
                            14,
                            10
                        ]
                    ]
                ],
                [
                    19,
                    [
                        [
                            15,
                            1
                        ],
                        [
                            15,
                            2
                        ],
                        [
                            15,
                            3
                        ],
                        [
                            15,
                            4
                        ],
                        [
                            15,
                            5
                        ],
                        [
                            15,
                            6
                        ],
                        [
                            15,
                            7
                        ],
                        [
                            15,
                            8
                        ],
                        [
                            15,
                            9
                        ],
                        [
                            15,
                            10
                        ]
                    ]
                ],
                [
                    20,
                    [
                        [
                            16,
                            1
                        ],
                        [
                            16,
                            2
                        ],
                        [
                            16,
                            3
                        ],
                        [
                            16,
                            4
                        ],
                        [
                            16,
                            5
                        ],
                        [
                            16,
                            6
                        ],
                        [
                            16,
                            7
                        ],
                        [
                            16,
                            8
                        ],
                        [
                            16,
                            9
                        ],
                        [
                            16,
                            10
                        ]
                    ]
                ]
            ],
            "outputs": [
                4,
                2,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1388": {
        "title": "Maximum Pizza Slice Sum",
        "description": "You and your friends are sharing a pizza with `3n` slices of varying sizes. You have a specific picking order: you pick any slice, your friend Alice picks the next slice in the anti-clockwise direction, and your friend Bob picks the next slice in the clockwise direction. This process repeats until there are no more slices. Given an integer array `slices` representing the sizes of the pizza slices in a clockwise direction, find the maximum possible sum of slice sizes that you can pick.",
        "example": "Example:\n\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: You pick slice 4, Alice picks slice 3, Bob picks slice 5, you pick slice 6, Alice picks slice 2, and Bob picks slice 1. The total sum is 4 + 6 = 10.",
        "level": "Medium",
        "tags": [
            "Array",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    8,
                    9,
                    8,
                    6,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50,
                    55,
                    60
                ]
            ],
            "outputs": [
                10,
                16,
                18,
                240,
                160
            ]
        }
    },
    "1390": {
        "title": "Sum of Divisors with Four Divisors",
        "description": "Given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.",
        "example": "Example:\n\nInput: nums = [21,4,7]\nOutput: 32\nExplanation: \n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    21,
                    4,
                    7
                ],
                [
                    21,
                    21
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    12,
                    15,
                    18,
                    21,
                    24
                ],
                [
                    8,
                    16,
                    24,
                    32,
                    40
                ],
                [
                    9,
                    16,
                    25,
                    36,
                    49
                ],
                [
                    11,
                    13,
                    17,
                    19,
                    23
                ],
                [
                    27,
                    30,
                    33,
                    36,
                    39
                ],
                [
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    121,
                    144,
                    169,
                    196,
                    225
                ],
                [
                    256,
                    289,
                    324,
                    361,
                    400
                ],
                [
                    441,
                    484,
                    529,
                    576,
                    625
                ],
                [
                    729,
                    784,
                    841,
                    900,
                    961
                ],
                [
                    1024,
                    1089,
                    1156,
                    1225,
                    1296
                ],
                [
                    1369,
                    1444,
                    1521,
                    1600,
                    1681
                ],
                [
                    1764,
                    1849,
                    1936,
                    2025,
                    2116
                ],
                [
                    2209,
                    2304,
                    2401,
                    2500,
                    2601
                ],
                [
                    2704,
                    2809,
                    2916,
                    3025,
                    3136
                ]
            ],
            "outputs": [
                32,
                64,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1391": {
        "title": "Valid Path in Grid",
        "description": "You are given an `m x n` grid. Each cell of the grid represents a street. The street of `grid[i][j]` can be:\n\n* `1` which means a street connecting the left cell and the right cell.\n* `2` which means a street connecting the upper cell and the lower cell.\n* `3` which means a street connecting the left cell and the lower cell.\n* `4` which means a street connecting the right cell and the lower cell.\n* `5` which means a street connecting the left cell and the upper cell.\n* `6` which means a street connecting the right cell and the upper cell.\n\nYou will initially start at the street of the upper-left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)`. The path should only follow the streets.\n\nNotice that you are not allowed to change any street.\n\nReturn `true` if there is a valid path in the grid or `false` otherwise.",
        "example": "Example:\n\nInput: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).",
        "level": "Medium",
        "tags": [
            "graph",
            "pathfinding"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        2,
                        4,
                        3
                    ],
                    [
                        6,
                        5,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        1
                    ],
                    [
                        1,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        2
                    ],
                    [
                        4
                    ],
                    [
                        3
                    ],
                    [
                        6
                    ],
                    [
                        5
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        3,
                        3,
                        3,
                        3,
                        3,
                        3
                    ]
                ],
                [
                    [
                        4,
                        4,
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    [
                        6,
                        6,
                        6,
                        6,
                        6,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        1,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        4,
                        5,
                        6,
                        1,
                        2,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        5,
                        6,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        6,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        3,
                        3,
                        3,
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        4,
                        4,
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        6,
                        6,
                        6,
                        6,
                        6,
                        6
                    ]
                ]
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1394": {
        "title": "Largest Lucky Integer",
        "description": "Given an array of integers `arr`, a **lucky integer** is an integer that has a frequency in the array equal to its value. Return the largest **lucky integer** in the array. If there is no **lucky integer**, return `-1`.",
        "example": "Example:\n\nInput: arr = [2,2,3,4]\nOutput: 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.",
        "level": "Easy",
        "tags": [
            "array",
            "frequency",
            "search"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    2,
                    2,
                    2,
                    3,
                    3
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                2,
                3,
                -1,
                1,
                4,
                -1,
                -1,
                -1,
                -1,
                10
            ]
        }
    },
    "1395": {
        "title": "Count Valid Teams",
        "description": "Given a list of soldiers with unique rating values, you need to form teams of 3 soldiers based on the following rules: Choose 3 soldiers with indices (i, j, k) and ratings (rating[i], rating[j], rating[k]). A team is considered valid if the ratings satisfy either of the following conditions: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]). Return the number of valid teams that can be formed.",
        "example": "Example:\n\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions: (2,3,4), (5,4,1), (5,3,1).",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    5,
                    3,
                    4,
                    1
                ],
                [
                    2,
                    1,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                3,
                0,
                4,
                0,
                0,
                0,
                0,
                1,
                84,
                84,
                84,
                120,
                120,
                220,
                220,
                364,
                364,
                560,
                560,
                816,
                816
            ]
        }
    },
    "1396": {
        "title": "Underground Railway System",
        "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another. Implement the `UndergroundSystem` class with the following methods: \n\n- `void checkIn(int id, string stationName, int t)`: A customer with a card ID equal to `id` checks in at the station `stationName` at time `t`. A customer can only be checked into one place at a time. \n\n- `void checkOut(int id, string stationName, int t)`: A customer with a card ID equal to `id` checks out from the station `stationName` at time `t`. \n\n- `double getAverageTime(string startStation, string endStation)`: Returns the average time it takes to travel from `startStation` to `endStation`. The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened directly, meaning a check-in at `startStation` followed by a check-out from `endStation`. The time it takes to travel from `startStation` to `endStation` may be different from the time it takes to travel from `endStation` to `startStation`. There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.",
        "example": "Example:\n\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    45,
                    "Leyton",
                    3
                ],
                [
                    32,
                    "Paradise",
                    8
                ],
                [
                    27,
                    "Leyton",
                    10
                ],
                [
                    45,
                    "Waterloo",
                    15
                ],
                [
                    27,
                    "Waterloo",
                    20
                ],
                [
                    32,
                    "Cambridge",
                    22
                ],
                [
                    "Paradise",
                    "Cambridge"
                ],
                [
                    "Leyton",
                    "Waterloo"
                ],
                [
                    10,
                    "Leyton",
                    24
                ],
                [
                    "Leyton",
                    "Waterloo"
                ],
                [
                    10,
                    "Waterloo",
                    38
                ],
                [
                    "Leyton",
                    "Waterloo"
                ]
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "14.00000",
                "11.00000",
                "null",
                "11.00000",
                "null",
                "12.00000"
            ]
        }
    },
    "1397": {
        "title": "Count Good Strings",
        "description": "Given the strings `s1` and `s2` of size `n` and the string `evil`, return the number of good strings. A good string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this modulo `109 + 7`.",
        "example": "Example:\n\nInput: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51\nExplanation: There are 25 good strings starting with 'a': \"aa\", \"ac\", \"ad\",..., \"az\". Then there are 25 good strings starting with 'c': \"ca\", \"cc\", \"cd\",..., \"cz\" and finally there is one good string starting with 'd': \"da\".",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    "aa",
                    "da",
                    "b"
                ],
                [
                    8,
                    "leetcode",
                    "leetgoes",
                    "leet"
                ],
                [
                    2,
                    "gx",
                    "gz",
                    "x"
                ],
                [
                    3,
                    "abc",
                    "def",
                    "xyz"
                ],
                [
                    5,
                    "apple",
                    "banana",
                    "orange"
                ]
            ],
            "outputs": [
                51,
                0,
                2,
                0,
                0
            ]
        }
    },
    "1399": {
        "title": "Largest Group Size",
        "description": "You are given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. Return the number of groups that have the largest size.",
        "example": "Example 1:\n\nInput: n = 13\nOutput: 4\nExplanation: There are 9 groups in total, they are grouped according to the sum of the digits of numbers from 1 to 13: [1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with the largest size.\n\nExample 2:\n\nInput: n = 2\nOutput: 2\nExplanation: There are 2 groups [1], [2] of size 1.",
        "level": "Easy",
        "tags": [
            "math",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                13,
                2,
                10,
                100,
                1000,
                9999,
                104,
                1,
                50,
                123,
                987,
                10000,
                12345,
                54321,
                11111,
                22222,
                33333,
                44444,
                55555,
                66666
            ],
            "outputs": [
                4,
                2,
                10,
                19,
                37,
                1,
                1,
                1,
                5,
                1,
                1,
                1,
                1,
                1,
                5,
                5,
                5,
                5,
                5,
                5
            ]
        }
    },
    "1400": {
        "title": "Construct Palindrome Strings",
        "description": "Given a string `s` and an integer `k`, determine if it is possible to use all the characters in `s` to construct `k` palindrome strings. Return `true` if possible, and `false` otherwise.",
        "example": "Example 1:\n\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s. Some possible constructions are \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n\nExample 2:\n\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n\nExample 3:\n\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"annabelle\", 2",
                "\"leetcode\", 3",
                "\"true\", 4",
                "\"racecar\", 1",
                "\"aab\", 2",
                "\"abcde\", 5",
                "\"madam\", 3",
                "\"hello\", 1",
                "\"level\", 2",
                "\"noon\", 1",
                "\"aabbaa\", 3",
                "\"abcba\", 2",
                "\"radar\", 4",
                "\"deed\", 2",
                "\"stats\", 1",
                "\"mom\", 3",
                "\"aabbaabb\", 4",
                "\"abcba\", 3",
                "\"noon\", 2",
                "\"hello\", 2"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "false"
            ]
        }
    },
    "1401": {
        "title": "Circle and Rectangle Overlap",
        "description": "You are given a circle represented as `(radius, xCenter, yCenter)` and an axis-aligned rectangle represented as `(x1, y1, x2, y2)`, where `(x1, y1)` are the coordinates of the bottom-left corner, and `(x2, y2)` are the coordinates of the top-right corner of the rectangle. Return `true` if the circle and rectangle overlap, otherwise return `false`. In other words, check if there is any point `(xi, yi)` that belongs to both the circle and the rectangle at the same time.",
        "example": "Example:\n\nInput: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\nOutput: true\nExplanation: Circle and rectangle share the point (1,0).",
        "level": "Easy",
        "tags": [
            "geometry",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    0,
                    1,
                    -1,
                    3,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    -3,
                    2,
                    -1
                ],
                [
                    1,
                    0,
                    0,
                    -1,
                    0,
                    0,
                    1
                ],
                [
                    2,
                    0,
                    0,
                    1,
                    -1,
                    3,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    2,
                    2,
                    4,
                    4
                ],
                [
                    3,
                    0,
                    0,
                    5,
                    5,
                    10,
                    10
                ],
                [
                    2,
                    0,
                    0,
                    5,
                    5,
                    10,
                    10
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    5,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "1402": {
        "title": "Maximum Like-Time Coefficient",
        "description": "A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time. The like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level. Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation. Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.",
        "example": "Example:\n\nInput: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[-1,-8,0,5,-9]",
                "[4,3,2]",
                "[-1,-4,-5]",
                "[-2,5,-3,1,2]",
                "[0,0,0,0,0]",
                "[-10,-5,0,5,10]",
                "[-1,0,1,2,3,4,5]",
                "[-5,-4,-3,-2,-1,0,1,2,3,4,5]",
                "[-1000,1000]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981]",
                "[-1000,-999,-998,-997,-996,-995,-994,-993,-992,-991,-990,-989,-988,-987,-986,-985,-984,-983,-982,-981]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000]",
                "[-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]"
            ],
            "outputs": [
                "14",
                "20",
                "0",
                "14",
                "0",
                "0",
                "35",
                "165",
                "1000",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350"
            ]
        }
    },
    "1403": {
        "title": "Subsequence with Maximum Sum",
        "description": "Given an array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non-included elements in such subsequence. If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. Note that the solution with the given constraints is guaranteed to be unique. Also, return the answer sorted in non-increasing order.",
        "example": "Example:\n\nInput: nums = [4,3,10,9,8]\nOutput: [10,9]\nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements.",
        "level": "Medium",
        "tags": [
            "array",
            "subsequence",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    3,
                    10,
                    9,
                    8
                ],
                [
                    4,
                    4,
                    7,
                    6,
                    7
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    20,
                    18,
                    16,
                    14,
                    12,
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    19,
                    17,
                    15,
                    13,
                    11,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ],
                [
                    50,
                    45,
                    40,
                    35,
                    30,
                    25,
                    20,
                    15,
                    10,
                    5
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21,
                    24,
                    27,
                    30
                ],
                [
                    30,
                    27,
                    24,
                    21,
                    18,
                    15,
                    12,
                    9,
                    6,
                    3
                ],
                [
                    2,
                    3,
                    5,
                    7,
                    11,
                    13,
                    17,
                    19,
                    23,
                    29
                ]
            ],
            "outputs": [
                [
                    10,
                    9
                ],
                [
                    7,
                    7,
                    6
                ],
                [
                    5
                ],
                [
                    50
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6
                ],
                [
                    500
                ],
                [
                    10
                ],
                [
                    10
                ],
                [
                    1
                ],
                [
                    20,
                    18,
                    16,
                    14,
                    12,
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    20,
                    18,
                    16,
                    14,
                    12,
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    19,
                    17,
                    15,
                    13,
                    11,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    19,
                    17,
                    15,
                    13,
                    11,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    50,
                    45,
                    40,
                    35,
                    30,
                    25,
                    20,
                    15,
                    10,
                    5
                ],
                [
                    50,
                    45,
                    40,
                    35,
                    30,
                    25,
                    20,
                    15,
                    10,
                    5
                ],
                [
                    30,
                    27,
                    24,
                    21,
                    18,
                    15,
                    12,
                    9,
                    6,
                    3
                ],
                [
                    30,
                    27,
                    24,
                    21,
                    18,
                    15,
                    12,
                    9,
                    6,
                    3
                ],
                [
                    29,
                    23,
                    19,
                    17,
                    13,
                    11,
                    7,
                    5,
                    3,
                    2
                ]
            ]
        }
    },
    "1404": {
        "title": "Steps to Reduce Binary Number to 1",
        "description": "Given the binary representation of an integer as a string `s`, return the number of steps to reduce it to 1 under the following rules:\n\n- If the current number is even, you have to divide it by 2.\n- If the current number is odd, you have to add 1 to it.\n\nIt is guaranteed that you can always reach one for all test cases.",
        "example": "Example:\n\nInput: \"1101\"\nOutput: 6\nExplanation: \"1101\" corresponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\nStep 5) 4 is even, divide by 2 and obtain 2.\nStep 6) 2 is even, divide by 2 and obtain 1.",
        "level": "Medium",
        "tags": [
            "binary",
            "integer",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "\"1101\"",
                "\"10\"",
                "\"1\"",
                "\"111111\"",
                "\"101010\"",
                "\"1000000\"",
                "\"111\"",
                "\"1001\"",
                "\"101010101\"",
                "\"111000111\"",
                "\"1000000000\"",
                "\"1111111111\"",
                "\"101010101010\"",
                "\"1000000000000\"",
                "\"1111111111111\"",
                "\"10101010101010\"",
                "\"100000000000000\"",
                "\"111111111111111\"",
                "\"1010101010101010\"",
                "\"10000000000000000\""
            ],
            "outputs": [
                "6",
                "1",
                "0",
                "10",
                "6",
                "20",
                "8",
                "8",
                "18",
                "18",
                "24",
                "24",
                "26",
                "36",
                "36",
                "38",
                "48",
                "48",
                "50",
                "60"
            ]
        }
    },
    "1405": null,
    "1406": {
        "title": "Alice and Bob's Stone Game",
        "description": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.\n\nThe score of each player is the sum of the values of the stones taken. The score of each player is 0 initially.\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\nAssume Alice and Bob play optimally.\n\nReturn 'Alice' if Alice will win, 'Bob' if Bob will win, or 'Tie' if they will end the game with the same score.",
        "example": "Example:\n\nInput: values = [1,2,3,7]\nOutput: 'Bob'\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.",
        "level": "Medium",
        "tags": [
            "array",
            "game theory"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,7]",
                "[1,2,3,-9]",
                "[1,2,3,6]",
                "[5,10,15,20]",
                "[-1,-2,-3,-4]",
                "[0,0,0,0]",
                "[1,1,1,1]",
                "[2,2,2,2]",
                "[3,3,3,3]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2]",
                "[3,3,3,3,3,3,3,3,3,3]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
                "[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]"
            ],
            "outputs": [
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Alice'",
                "'Bob'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Alice'",
                "'Bob'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Bob'"
            ]
        }
    },
    "1408": {
        "title": "Substring Words",
        "description": "Given an array of strings `words`, return all strings in `words` that are substrings of another word. A substring is a contiguous sequence of characters within a string.",
        "example": "Example 1:\n\nInput: words = [\"mass\", \"as\", \"hero\", \"superhero\"]\nOutput: [\"as\", \"hero\"]\nExplanation: \"as\" is a substring of \"mass\" and \"hero\" is a substring of \"superhero\". [\"hero\", \"as\"] is also a valid answer.\n\nExample 2:\n\nInput: words = [\"leetcode\", \"et\", \"code\"]\nOutput: [\"et\", \"code\"]\nExplanation: \"et\" and \"code\" are substrings of \"leetcode\".\n\nExample 3:\n\nInput: words = [\"blue\", \"green\", \"bu\"]\nOutput: []\nExplanation: No string in words is a substring of another string.",
        "level": "Easy",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "mass",
                    "as",
                    "hero",
                    "superhero"
                ],
                [
                    "leetcode",
                    "et",
                    "code"
                ],
                [
                    "blue",
                    "green",
                    "bu"
                ],
                [
                    "hello",
                    "world",
                    "lo"
                ],
                [
                    "programming",
                    "gram",
                    "ming"
                ],
                [
                    "apple",
                    "banana",
                    "orange"
                ],
                [
                    "cat",
                    "dog",
                    "at"
                ],
                [
                    "python",
                    "java",
                    "thon"
                ],
                [
                    "good",
                    "bad",
                    "go"
                ],
                [
                    "moon",
                    "sun",
                    "oo"
                ],
                [
                    "happy",
                    "sad",
                    "ha"
                ],
                [
                    "computer",
                    "science",
                    "uter"
                ],
                [
                    "book",
                    "pen",
                    "ok"
                ],
                [
                    "car",
                    "bike",
                    "ar"
                ],
                [
                    "tree",
                    "flower",
                    "ee"
                ],
                [
                    "house",
                    "building",
                    "use"
                ],
                [
                    "red",
                    "blue",
                    "ed"
                ],
                [
                    "water",
                    "fire",
                    "ter"
                ],
                [
                    "sun",
                    "moon",
                    "un"
                ],
                [
                    "sky",
                    "cloud",
                    "ky"
                ]
            ],
            "outputs": [
                [
                    "as",
                    "hero"
                ],
                [
                    "et",
                    "code"
                ],
                [],
                [
                    "hello",
                    "lo"
                ],
                [
                    "programming",
                    "gram",
                    "ming"
                ],
                [],
                [
                    "cat",
                    "at"
                ],
                [
                    "python",
                    "thon"
                ],
                [
                    "good"
                ],
                [
                    "moon"
                ],
                [
                    "ha"
                ],
                [
                    "computer",
                    "uter"
                ],
                [
                    "book",
                    "ok"
                ],
                [
                    "car",
                    "ar"
                ],
                [
                    "tree",
                    "ee"
                ],
                [
                    "house",
                    "use"
                ],
                [
                    "red"
                ],
                [
                    "water",
                    "ter"
                ],
                [
                    "sun"
                ],
                [
                    "sky"
                ]
            ]
        }
    },
    "1409": {
        "title": "Query Permutation",
        "description": "Given an array `queries` of positive integers between 1 and m, process all queries[i] according to the following rules: In the beginning, you have the permutation P=[1,2,3,...,m]. For the current i, find the position of queries[i] in the permutation P (indexing from 0) and move it to the beginning of P. Return an array containing the result for the given queries.",
        "example": "Example 1:\n\nInput: queries = [3,1,2,1], m = 5\nOutput: [2,1,2,1]\nExplanation: The queries are processed as follows:\nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5].\nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5].\nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5].\nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5].\nTherefore, the array containing the result is [2,1,2,1].",
        "level": "Medium",
        "tags": [
            "array",
            "permutation"
        ],
        "test_cases": {
            "inputs": [
                "[3,1,2,1]",
                "[4,1,2,2]",
                "[7,5,5,8,3]",
                "[1]",
                "[2,1]",
                "[5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[2,1,2,1]",
                "[3,1,2,0]",
                "[6,5,0,7,5]",
                "[0]",
                "[1,0]",
                "[4,3,2,1,0]",
                "[9,8,7,6,5,4,3,2,1,0]"
            ]
        }
    },
    "1410": {
        "title": "HTML Entity Parser",
        "description": "You are given a string `text` which represents an HTML code. The HTML code contains special characters represented by their respective entities. Your task is to implement a parser that replaces these entities with their corresponding special characters and returns the modified string.",
        "example": "For example, if the input `text` is \"&amp; is an HTML entity but &ambassador; is not.\", the output should be \"& is an HTML entity but &ambassador; is not.\"",
        "level": "Easy",
        "tags": [
            "String",
            "Parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"&amp; is an HTML entity but &ambassador; is not.\"",
                "\"and I quote: &quot;...&quot;\"",
                "\"This is a test &lt;string&gt; with multiple entities: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot;\"",
                "\"No entities in this string.\"",
                "\"This string has an unknown entity: &unknown;\"",
                "\"This string has a mix of entities and regular characters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash, and regular text.\"",
                "\"This string has entities at the beginning: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities at the end: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities in the middle: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with spaces: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with special characters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with numbers: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with punctuation: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with uppercase letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with lowercase letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with mixed case letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and mixed case letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and special characters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and numbers: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and punctuation: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\""
            ],
            "outputs": [
                "\"& is an HTML entity but &ambassador; is not.\"",
                "\"and I quote: \\\"...\\\"\"",
                "\"This is a test <string> with multiple entities: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\"\"",
                "\"No entities in this string.\"",
                "\"This string has an unknown entity: &unknown;\"",
                "\"This string has a mix of entities and regular characters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash, and regular text.\"",
                "\"This string has entities at the beginning: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities at the end: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities in the middle: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with spaces: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with special characters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with numbers: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with punctuation: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with uppercase letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with lowercase letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with mixed case letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and mixed case letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and special characters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and numbers: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and punctuation: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\""
            ]
        }
    },
    "1411": {
        "title": "Painting Grid",
        "description": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\nGiven n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.",
        "example": "Example:\n\nInput: n = 1\nOutput: 12\nExplanation: There are 12 possible ways to paint the grid as shown.\n\nInput: n = 5000\nOutput: 30228214",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                100,
                500,
                1000,
                5000
            ],
            "outputs": [
                12,
                24,
                48,
                96,
                192,
                53784,
                772494375,
                772494375,
                772494375,
                30228214
            ]
        }
    },
    "1413": {
        "title": "Minimum Positive Start Value",
        "description": "Given an array of integers `nums`, you start with an initial **positive** value `startValue`. In each iteration, you calculate the step by step sum of `startValue` plus elements in `nums` (from left to right). Return the minimum **positive** value of `startValue` such that the step by step sum is never less than 1.",
        "example": "Example 1:\n\nInput: nums = [-3,2,-3,4,2]\nOutput: 5\nExplanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\nstep by step sum\nstartValue = 4 | startValue = 5 | nums\n  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3\n  (1 +2 ) = 3  | (2 +2 ) = 4    |   2\n  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3\n  (0 +4 ) = 4  | (1 +4 ) = 5    |   4\n  (4 +2 ) = 6  | (5 +2 ) = 7    |   2\n\nExample 2:\n\nInput: nums = [1,2]\nOutput: 1\nExplanation: Minimum start value should be positive.\n\nExample 3:\n\nInput: nums = [1,-2,-3]\nOutput: 5",
        "level": "Easy",
        "tags": [
            "array",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                "[-3,2,-3,4,2]",
                "[1,2]",
                "[1,-2,-3]",
                "[-1,-2,-3]",
                "[0,0,0,0,0]",
                "[1,1,1,1,1]",
                "[-1,0,1,2,3]",
                "[-5,-4,-3,-2,-1]",
                "[10,20,30,40,50]",
                "[-10,-20,-30,-40,-50]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]"
            ],
            "outputs": [
                "5",
                "1",
                "5",
                "7",
                "1",
                "1",
                "6",
                "16",
                "1",
                "51",
                "1",
                "56",
                "1",
                "61",
                "1",
                "66",
                "1",
                "71",
                "1",
                "76",
                "1"
            ]
        }
    },
    "1414": {
        "title": "Minimum Fibonacci Numbers",
        "description": "Given an integer `k`, return the minimum number of Fibonacci numbers whose sum is equal to `k`. The same Fibonacci number can be used multiple times.\n\nThe Fibonacci numbers are defined as:\n\n- `F1 = 1`\n- `F2 = 1`\n- `Fn = Fn-1 + Fn-2` for `n > 2.`\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.",
        "example": "Example:\n\nInput: k = 7\nOutput: 2\nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ...\nFor k = 7 we can use 2 + 5 = 7.",
        "level": "Medium",
        "tags": [
            "math",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                7,
                10,
                19,
                1,
                2,
                3,
                5,
                8,
                13,
                21,
                34,
                55,
                89,
                144,
                233,
                377,
                610,
                987,
                1597,
                2584
            ],
            "outputs": [
                2,
                2,
                3,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1415": {
        "title": "Kth Happy String",
        "description": "A happy string is a string that consists only of letters from the set ['a', 'b', 'c'] and s[i] != s[i + 1] for all values of i from 1 to s.length - 1. Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order. Return the kth string of this list or an empty string if there are less than k happy strings of length n.",
        "example": "For n = 1 and k = 3, the list ['a', 'b', 'c'] contains all happy strings of length 1. The third string is 'c'. Therefore, the output is 'c'.",
        "level": "Medium",
        "tags": [
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    3
                ],
                [
                    1,
                    4
                ],
                [
                    3,
                    9
                ],
                [
                    2,
                    5
                ],
                [
                    4,
                    15
                ],
                [
                    5,
                    10
                ],
                [
                    10,
                    100
                ]
            ],
            "outputs": [
                "c",
                "",
                "cab",
                "bc",
                "ccba",
                "ccccc",
                ""
            ]
        }
    },
    "1416": {
        "title": "Possible Arrays",
        "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits `s`. All we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array. Given the string `s` and the integer `k`, return the number of possible arrays that can be printed as `s` using the mentioned program. Since the answer may be very large, return it modulo `109 + 7`.",
        "example": "Example:\n\nInput: s = \"1000 \", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"1000 \", 10000",
                "\"1000 \", 10",
                "\"1317 \", 2000",
                "\"12345 \", 100",
                "\"111 \", 100",
                "\"123456789 \", 1000000000",
                "\"987654321 \", 1000000000",
                "\"123456789 \", 123456789",
                "\"987654321 \", 987654321",
                "\"123456789 \", 987654321",
                "\"987654321 \", 123456789",
                "\"123456789 \", 100",
                "\"987654321 \", 100",
                "\"123456789 \", 10",
                "\"987654321 \", 10",
                "\"123456789 \", 1",
                "\"987654321 \", 1",
                "\"123456789 \", 1000000000",
                "\"987654321 \", 1000000000",
                "\"123456789 \", 123456789",
                "\"987654321 \", 987654321"
            ],
            "outputs": [
                "1",
                "0",
                "8",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "1",
                "1",
                "1",
                "1"
            ]
        }
    },
    "1417": {
        "title": "Alphanumeric String Reformatting",
        "description": "Given an alphanumeric string `s`, find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. Return the reformatted string or an empty string if it is impossible to reformat the string.",
        "example": "Example 1:\n\nInput: s = \"a0b1c2 \"\nOutput: \"0a1b2c \"\nExplanation: No two adjacent characters have the same type in \"0a1b2c \". \"a0b1c2 \", \"0a1b2c \", \"0c2a1b \" are also valid permutations.",
        "level": "Easy",
        "tags": [
            "String",
            "Permutation"
        ],
        "test_cases": {
            "inputs": [
                "\"a0b1c2 \"",
                "\"leetcode \"",
                "\"1229857369 \"",
                "\"a1b2c3d4e5f6g7h8i9j0 \"",
                "\"1234567890abcdefghijklmnopqrstuvwxyz \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz \"",
                "\"1111111111aaaaaaaaaabbbbbbbbbb \"",
                "\"1234567890abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4a5b6c7d8e9f0g1h2i3j4k5l6m7n8o9p0q1r2s3t4u5v6w7x8y9z0 \""
            ],
            "outputs": [
                "\"0a1b2c \"",
                "\" \"",
                "\" \"",
                "\"a1b2c3d4e5f6g7h8i9j0 \"",
                "\"1a2b3c4d5e6f7g8h9i0jklmnopqrstuvwxyz \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz \"",
                "\"1111111111aaaaaaaaaabbbbbbbbbb \"",
                "\"1a2b3c4d5e6f7g8h9i0jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4a5b6c7d8e9f0g1h2i3j4k5l6m7n8o9p0q1r2s3t4u5v6w7x8y9z0 \""
            ]
        }
    },
    "1418": {
        "title": "Restaurant Display Table",
        "description": "Given an array of orders, where each order is represented as [customerName, tableNumber, foodItem], return the restaurant's display table. The display table is a table that shows how many of each food item each table ordered. The first column is the table number, and the remaining columns correspond to each food item in alphabetical order. The first row should be a header with the column names. The rows should be sorted in numerically increasing order.",
        "example": "Example 1:\n\nInput: orders = [['David', '3', 'Ceviche'], ['Corina', '10', 'Beef Burrito'], ['David', '3', 'Fried Chicken'], ['Carla', '5', 'Water'], ['Carla', '5', 'Ceviche'], ['Rous', '3', 'Ceviche']]\nOutput: [['Table', 'Beef Burrito', 'Ceviche', 'Fried Chicken', 'Water'], ['3', '0', '2', '1', '0'], ['5', '0', '1', '0', '1'], ['10', '1', '0', '0', '0']]\nExplanation: The display table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3,0,2,1,0\n5,0,1,0,1\n10,1,0,0,0\n\nExample 2:\n\nInput: orders = [['James', '12', 'Fried Chicken'], ['Ratesh', '12', 'Fried Chicken'], ['Amadeus', '12', 'Fried Chicken'], ['Adam', '1', 'Canadian Waffles'], ['Brianna', '1', 'Canadian Waffles']]\nOutput: [['Table', 'Canadian Waffles', 'Fried Chicken'], ['1', '2', '0'], ['12', '0', '3']]\nExplanation: For table 1, Adam and Brianna order Canadian Waffles. For table 12, James, Ratesh, and Amadeus order Fried Chicken.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[['David', '3', 'Ceviche'], ['Corina', '10', 'Beef Burrito'], ['David', '3', 'Fried Chicken'], ['Carla', '5', 'Water'], ['Carla', '5', 'Ceviche'], ['Rous', '3', 'Ceviche']]",
                "[['James', '12', 'Fried Chicken'], ['Ratesh', '12', 'Fried Chicken'], ['Amadeus', '12', 'Fried Chicken'], ['Adam', '1', 'Canadian Waffles'], ['Brianna', '1', 'Canadian Waffles']]",
                "[['Laura', '2', 'Bean Burrito'], ['Jhon', '2', 'Beef Burrito'], ['Melissa', '2', 'Soda']]"
            ],
            "outputs": [
                "[['Table', 'Beef Burrito', 'Ceviche', 'Fried Chicken', 'Water'], ['3', '0', '2', '1', '0'], ['5', '0', '1', '0', '1'], ['10', '1', '0', '0', '0']]",
                "[['Table', 'Canadian Waffles', 'Fried Chicken'], ['1', '2', '0'], ['12', '0', '3']]",
                "[['Table', 'Bean Burrito', 'Beef Burrito', 'Soda'], ['2', '1', '1', '1']]"
            ]
        }
    },
    "1419": null,
    "1420": {
        "title": "Number of Ways to Build Array",
        "description": "You are given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:\n\nYou should build the array arr which has the following properties:\n\n- `arr` has exactly `n` integers.\n- `1 <= arr[i] <= m` where `(0 <= i < n)`.\n- After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\nReturn the number of ways to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer must be computed modulo `109 + 7`.",
        "example": "Example:\n\nInput: n = 2, m = 3, k = 1\nOutput: 6\nExplanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    1
                ],
                [
                    5,
                    2,
                    3
                ],
                [
                    9,
                    1,
                    1
                ],
                [
                    4,
                    4,
                    2
                ],
                [
                    3,
                    5,
                    0
                ],
                [
                    6,
                    2,
                    6
                ],
                [
                    10,
                    10,
                    5
                ],
                [
                    7,
                    3,
                    4
                ],
                [
                    8,
                    5,
                    2
                ],
                [
                    12,
                    6,
                    3
                ],
                [
                    15,
                    8,
                    7
                ],
                [
                    20,
                    10,
                    10
                ],
                [
                    25,
                    15,
                    12
                ],
                [
                    30,
                    20,
                    15
                ],
                [
                    35,
                    25,
                    20
                ],
                [
                    40,
                    30,
                    25
                ],
                [
                    45,
                    35,
                    30
                ],
                [
                    50,
                    40,
                    35
                ],
                [
                    50,
                    50,
                    50
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "outputs": [
                6,
                0,
                1,
                12,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    "1422": {
        "title": "Maximum Score After Splitting a String",
        "description": "Given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings. The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.",
        "example": "Example:\n\nInput: s = \"011101\"\nOutput: 5\nExplanation: All possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5\nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4\nleft = \"011\" and right = \"101\", score = 1 + 2 = 3\nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2\nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3",
        "level": "Medium",
        "tags": [
            "string",
            "splitting",
            "score"
        ],
        "test_cases": {
            "inputs": [
                "\"011101\"",
                "\"00111\"",
                "\"1111\"",
                "\"0101010101\"",
                "\"1111111111\"",
                "\"0000000000\"",
                "\"010101010101\"",
                "\"101010101010\"",
                "\"01010101010101\"",
                "\"10101010101010\"",
                "\"0101010101010101\"",
                "\"1010101010101010\"",
                "\"010101010101010101\"",
                "\"101010101010101010\"",
                "\"01010101010101010101\"",
                "\"10101010101010101010\"",
                "\"0101010101010101010101\"",
                "\"1010101010101010101010\"",
                "\"010101010101010101010101\"",
                "\"101010101010101010101010\""
            ],
            "outputs": [
                "5",
                "5",
                "3",
                "5",
                "0",
                "0",
                "6",
                "6",
                "7",
                "7",
                "8",
                "8",
                "9",
                "9",
                "10",
                "10",
                "11",
                "11",
                "12",
                "12"
            ]
        }
    },
    "1423": null,
    "1424": {
        "title": "Diagonal Order",
        "description": "Given a 2D integer array `nums`, return all elements of `nums` in diagonal order. The diagonal order starts from the top-left element and ends at the bottom-right element, as shown in the below images.",
        "example": "Example 1:\n\nInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]\n\nExample 2:\n\nInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "diagonal"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        8
                    ],
                    [
                        9,
                        10,
                        11
                    ],
                    [
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9
                    ],
                    [
                        10,
                        11,
                        12,
                        13
                    ],
                    [
                        14,
                        15,
                        16,
                        17
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ],
                    [
                        5
                    ],
                    [
                        6
                    ],
                    [
                        7
                    ],
                    [
                        8
                    ],
                    [
                        9
                    ],
                    [
                        10
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ],
                    [
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                ]
            ],
            "outputs": [
                [
                    1,
                    4,
                    2,
                    7,
                    5,
                    3,
                    8,
                    6,
                    9
                ],
                [
                    1,
                    6,
                    2,
                    8,
                    7,
                    3,
                    9,
                    4,
                    12,
                    10,
                    5,
                    13,
                    11,
                    14,
                    15,
                    16
                ],
                [
                    1,
                    4,
                    2,
                    5,
                    3,
                    6
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5,
                    6
                ],
                [
                    1,
                    5,
                    2,
                    6,
                    3,
                    7,
                    4,
                    8
                ],
                [
                    1,
                    6,
                    2,
                    11,
                    7,
                    3,
                    16,
                    12,
                    8,
                    4,
                    17,
                    13,
                    9,
                    5,
                    18,
                    14,
                    10,
                    19,
                    15,
                    20
                ],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100
                ]
            ]
        }
    },
    "1425": {
        "title": "Maximum Sum of Non-Empty Subsequence",
        "description": "Given an integer array `nums` and an integer `k`, find the maximum sum of a non-empty subsequence of `nums` such that for every two consecutive integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied. A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.",
        "example": "Example:\n\nInput: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[10,2,-10,5,20]",
                "[-1,-2,-3]",
                "[10,-2,-10,-5,20]",
                "[1,2,3,4,5]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]"
            ],
            "outputs": [
                "37",
                "-1",
                "23",
                "15",
                "-1",
                "0",
                "55",
                "-1",
                "210",
                "-1",
                "20",
                "-1",
                "30",
                "-1",
                "40",
                "-1",
                "50",
                "-1",
                "60",
                "-1"
            ]
        }
    },
    "1426": {
        "title": "Count Elements with x+1 in Array",
        "description": "Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.",
        "example": "Example:\n\nInput: arr = [1,2,3]\nOutput: 2\nExplanation: 1 and 2 are counted because 2 and 3 are in arr.",
        "level": "Easy",
        "tags": [
            "array",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    1,
                    3,
                    3,
                    5,
                    5,
                    7,
                    7
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                2,
                0,
                4,
                0,
                9,
                9,
                0,
                9,
                0,
                0,
                20,
                20,
                15,
                20,
                30,
                20,
                30,
                30,
                30,
                30
            ]
        }
    },
    "1427": {
        "title": "String Shifts",
        "description": "You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [directioni, amounti]`. Perform left or right shifts on the string `s` based on the given shift matrix. Return the final string after all operations.",
        "example": "Example:\n\nInput: s = \"abc\", shift = [[0,1],[1,2]]\nOutput: \"cab\"\nExplanation: \n[0,1] means shift to left by 1. \"abc\" -> \"bca\"\n[1,2] means shift to right by 2. \"bca\" -> \"cab\"",
        "level": "Easy",
        "tags": [
            "string",
            "array"
        ],
        "test_cases": {
            "inputs": [
                "\"abc\"",
                "[[0,1],[1,2]]",
                "\"abcdefg\"",
                "[[1,1],[1,1],[0,2],[1,3]]",
                "\"hello\"",
                "[[0,3],[1,2],[0,1],[1,4]]",
                "\"programming\"",
                "[[1,5],[0,2],[1,3],[0,1],[1,4]]"
            ],
            "outputs": [
                "\"cab\"",
                "\"efgabcd\"",
                "\"lohel\"",
                "\"ingpro\"",
                "\"gprogramming\"",
                "\"gmingprogr\""
            ]
        }
    },
    "1428": null,
    "1429": null,
    "1430": {
        "title": "Valid Sequence in Binary Tree",
        "description": "Given a binary tree where each path going from the root to any leaf forms a valid sequence, check if a given string is a valid sequence in such a binary tree. We get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.",
        "example": "Example:\n\nInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]\nOutput: true\nExplanation: The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). Other valid sequences are: 0 -> 1 -> 1 -> 0, 0 -> 0 -> 0",
        "level": "Medium",
        "tags": [
            "binary tree",
            "valid sequence",
            "path",
            "concatenation"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        null,
                        null,
                        1,
                        0,
                        0
                    ],
                    "arr": [
                        0,
                        1,
                        0,
                        1
                    ]
                },
                {
                    "root": [
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        null,
                        null,
                        1,
                        0,
                        0
                    ],
                    "arr": [
                        0,
                        0,
                        1
                    ]
                },
                {
                    "root": [
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        null,
                        null,
                        1,
                        0,
                        0
                    ],
                    "arr": [
                        0,
                        1,
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        4,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        5,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        4,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                }
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1431": null,
    "1432": {
        "title": "Max Difference After Applying Operations",
        "description": "You are given an integer `num`. You will apply the following steps exactly **two** times:\n\n* Pick a digit `x (0 <= x <= 9)`.\n* Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n* Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n* The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\nReturn the max difference between `a` and `b`.",
        "example": "Example:\n\nInput: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888",
        "level": "Easy",
        "tags": [
            "math",
            "string"
        ],
        "test_cases": {
            "inputs": [
                555,
                9,
                12345,
                100,
                1111,
                987654321,
                0,
                1,
                10,
                123456789,
                999999999,
                1234567890,
                9876543210,
                1234567891,
                9876543219,
                1000000000,
                1000000001,
                1000000002,
                1000000003,
                1000000004
            ],
            "outputs": [
                888,
                8,
                82245,
                100,
                8888,
                987654321,
                0,
                1,
                20,
                876543210,
                900000000,
                1234567890,
                9876543210,
                1234567891,
                9876543219,
                1000000000,
                1000000001,
                1000000002,
                1000000003,
                1000000004
            ]
        }
    },
    "1433": {
        "title": "String Permutation Break",
        "description": "Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words, `s2` can break `s1` or vice-versa. A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.",
        "example": "Given two strings: s1 = `abc `, s2 = `xya `, the function should return true. Explanation: `ayx ` is a permutation of s2 = `xya ` which can break the string `abc ` which is a permutation of s1 = `abc `.",
        "level": "Easy",
        "tags": [
            "string",
            "permutation"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abc ",
                    "xya "
                ],
                [
                    "abe ",
                    "acd "
                ],
                [
                    "leetcodee ",
                    "interview "
                ],
                [
                    "abcd ",
                    "dcba "
                ],
                [
                    "xyz ",
                    "abc "
                ],
                [
                    "hello ",
                    "world "
                ],
                [
                    "good ",
                    "bad "
                ],
                [
                    "apple ",
                    "banana "
                ],
                [
                    "cat ",
                    "dog "
                ],
                [
                    "moon ",
                    "sun "
                ],
                [
                    "abcd ",
                    "efgh "
                ],
                [
                    "xyz ",
                    "xyz "
                ],
                [
                    "abc ",
                    "cba "
                ],
                [
                    "abc ",
                    "abc "
                ],
                [
                    "aaa ",
                    "aaa "
                ],
                [
                    "aaa ",
                    "aab "
                ],
                [
                    "aab ",
                    "aaa "
                ],
                [
                    "aaa ",
                    "baa "
                ],
                [
                    "baa ",
                    "aaa "
                ],
                [
                    "aaa ",
                    "aaa "
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                false,
                false,
                true,
                false,
                false,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                false,
                true,
                true
            ]
        }
    },
    "1434": null,
    "1436": {
        "title": "Destination City",
        "description": "You are given an array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. Return the destination city, that is, the city without any path outgoing to another city. It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.",
        "example": "Example 1:\n\nInput: paths = [['London', 'New York'], ['New York', 'Lima'], ['Lima', 'Sao Paulo']]\nOutput: 'Sao Paulo'\nExplanation: Starting at 'London' city, you will reach 'Sao Paulo' city which is the destination city. Your trip consists of: 'London' -> 'New York' -> 'Lima' -> 'Sao Paulo'.\n\nExample 2:\n\nInput: paths = [['B', 'C'], ['D', 'B'], ['C', 'A']]\nOutput: 'A'\nExplanation: All possible trips are: 'D' -> 'B' -> 'C' -> 'A', 'B' -> 'C' -> 'A', 'C' -> 'A', 'A'. Clearly, the destination city is 'A'.\n\nExample 3:\n\nInput: paths = [['A', 'Z']]\nOutput: 'Z'\nExplanation: The only trip is 'A' -> 'Z'. The destination city is 'Z'.",
        "level": "Easy",
        "tags": [
            "array",
            "graph"
        ],
        "test_cases": {
            "inputs": [
                "[['London', 'New York'], ['New York', 'Lima'], ['Lima', 'Sao Paulo']]",
                "[['B', 'C'], ['D', 'B'], ['C', 'A']]",
                "[['A', 'Z']]",
                "[['X', 'Y'], ['Y', 'Z'], ['Z', 'W'], ['W', 'V'], ['V', 'U'], ['U', 'T'], ['T', 'S'], ['S', 'R'], ['R', 'Q'], ['Q', 'P'], ['P', 'O'], ['O', 'N'], ['N', 'M'], ['M', 'L'], ['L', 'K'], ['K', 'J'], ['J', 'I'], ['I', 'H'], ['H', 'G'], ['G', 'F'], ['F', 'E'], ['E', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'A']]",
                "[['City1', 'City2'], ['City2', 'City3'], ['City3', 'City4'], ['City4', 'City5'], ['City5', 'City6'], ['City6', 'City7'], ['City7', 'City8'], ['City8', 'City9'], ['City9', 'City10'], ['City10', 'City11'], ['City11', 'City12'], ['City12', 'City13'], ['City13', 'City14'], ['City14', 'City15'], ['City15', 'City16'], ['City16', 'City17'], ['City17', 'City18'], ['City18', 'City19'], ['City19', 'City20'], ['City20', 'City21'], ['City21', 'City22'], ['City22', 'City23'], ['City23', 'City24'], ['City24', 'City25'], ['City25', 'City26'], ['City26', 'City27'], ['City27', 'City28'], ['City28', 'City29'], ['City29', 'City30'], ['City30', 'City31'], ['City31', 'City32'], ['City32', 'City33'], ['City33', 'City34'], ['City34', 'City35'], ['City35', 'City36'], ['City36', 'City37'], ['City37', 'City38'], ['City38', 'City39'], ['City39', 'City40'], ['City40', 'City41'], ['City41', 'City42'], ['City42', 'City43'], ['City43', 'City44'], ['City44', 'City45'], ['City45', 'City46'], ['City46', 'City47'], ['City47', 'City48'], ['City48', 'City49'], ['City49', 'City50']]"
            ],
            "outputs": [
                "'Sao Paulo'",
                "'A'",
                "'Z'",
                "'A'",
                "'City50'"
            ]
        }
    },
    "1437": null,
    "1438": null,
    "1439": {
        "title": "Kth Smallest Array Sum",
        "description": "Given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k, you are allowed to choose exactly one element from each row to form an array. Return the kth smallest array sum among all possible arrays.",
        "example": "Example 1:\n\nInput: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are: [1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.\n\nExample 2:\n\nInput: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17\n\nExample 3:\n\nInput: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are: [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3,11],[2,4,6]]",
                "[[1,3,11],[2,4,6]]",
                "[[1,10,10],[1,4,5],[2,3,6]]"
            ],
            "outputs": [
                "5",
                "9",
                "7"
            ]
        }
    },
    "1441": null,
    "1442": {
        "title": "Count Triplets with Equal Bitwise XOR",
        "description": "Given an array of integers `arr`, select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`. Define `a` and `b` as follows: `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]` and `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`. Return the number of triplets (`i`, `j` and `k`) where `a == b`.",
        "example": "Example:\n\nInput: arr = [2,3,1,6,7]\nOutput: 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)",
        "level": "Medium",
        "tags": [
            "array",
            "bitwise operation"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    1,
                    6,
                    7
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    9,
                    9,
                    9,
                    9,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ]
            ],
            "outputs": [
                4,
                10,
                0,
                10,
                10,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1443": {
        "title": "Minimum Time to Collect Apples in an Undirected Tree",
        "description": "Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.",
        "example": "Example:\n\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\nOutput: 8\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.",
        "level": "Medium",
        "tags": [
            "tree",
            "graph",
            "DFS",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            6
                        ]
                    ],
                    [
                        false,
                        false,
                        true,
                        false,
                        true,
                        true,
                        false
                    ]
                ],
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            6
                        ]
                    ],
                    [
                        false,
                        false,
                        true,
                        false,
                        false,
                        true,
                        false
                    ]
                ],
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            6
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ],
                    [
                        false,
                        false,
                        true,
                        false,
                        true
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ],
                    [
                        false,
                        true,
                        false
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        true
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false
                    ]
                ],
                [
                    8,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            4,
                            7
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        true
                    ]
                ],
                [
                    10,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            4,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            5,
                            9
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        true,
                        false,
                        true
                    ]
                ],
                [
                    2,
                    [
                        [
                            0,
                            1
                        ]
                    ],
                    [
                        true,
                        false
                    ]
                ]
            ],
            "outputs": [
                8,
                6,
                0,
                4,
                2,
                2,
                0,
                6,
                8,
                1
            ]
        }
    },
    "1444": {
        "title": "Pizza Cutting",
        "description": "Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts. For each cut, you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person. Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.",
        "example": "Example:\n\nInput: pizza = [ \"A.. \", \"AAA \", \"... \"], k = 3\nOutput: 3\nExplanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "pizza": [
                        "A.. ",
                        "AAA ",
                        "... "
                    ],
                    "k": 3
                },
                {
                    "pizza": [
                        "A.. ",
                        "AA. ",
                        "... "
                    ],
                    "k": 3
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 1
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 2
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 4
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 5
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 6
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 7
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 8
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 9
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 10
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 11
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 12
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 13
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 14
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 15
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 16
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 17
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 18
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 19
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 20
                }
            ],
            "outputs": [
                3,
                1,
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144
            ]
        }
    },
    "1446": {
        "title": "String Power",
        "description": "The power of a string is defined as the maximum length of a non-empty substring that contains only one unique character. Given a string `s`, write a function to return the power of `s`.",
        "example": "Example:\n\nInput: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.",
        "level": "Easy",
        "tags": [
            "string",
            "substring",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                "\"leetcode\"",
                "\"abbcccddddeeeeedcba\"",
                "\"a\"",
                "\"abcde\"",
                "\"aaaaaa\"",
                "\"aabbbccc\"",
                "\"xyzxyzxyz\"",
                "\"hello world\"",
                "\"racecar\"",
                "\"programming\""
            ],
            "outputs": [
                "2",
                "5",
                "1",
                "1",
                "6",
                "3",
                "3",
                "1",
                "7",
                "2"
            ]
        }
    },
    "1447": {
        "title": "Simplified Fractions",
        "description": "Given an integer `n`, return a list of all **simplified** fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: n = 2\nOutput: [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.",
        "level": "Easy",
        "tags": [
            "Math",
            "Fractions"
        ],
        "test_cases": {
            "inputs": [
                2,
                3,
                4,
                5,
                10,
                20,
                50,
                100
            ],
            "outputs": [
                [
                    "1/2"
                ],
                [
                    "1/2",
                    "1/3",
                    "2/3"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "2/3",
                    "3/4"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "1/5",
                    "2/3",
                    "3/4",
                    "4/5"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "1/5",
                    "1/6",
                    "1/7",
                    "1/8",
                    "1/9",
                    "1/10",
                    "2/3",
                    "2/5",
                    "3/4",
                    "3/5",
                    "4/5",
                    "4/7",
                    "5/6",
                    "5/7",
                    "6/7",
                    "7/8",
                    "9/10"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "1/5",
                    "1/6",
                    "1/7",
                    "1/8",
                    "1/9",
                    "1/10",
                    "1/11",
                    "1/12",
                    "1/13",
                    "1/14",
                    "1/15",
                    "1/16",
                    "1/17",
                    "1/18",
                    "1/19",
                    "1/20",
                    "2/3",
                    "2/5",
                    "2/7",
                    "2/9",
                    "2/11",
                    "2/13",
                    "2/15",
                    "2/17",
                    "2/19",
                    "3/4",
                    "3/5",
                    "3/7",
                    "3/8",
                    "3/11",
                    "3/13",
                    "3/16",
                    "3/17",
                    "3/19",
                    "4/5",
                    "4/7",
                    "4/9",
                    "4/11",
                    "4/13",
                    "4/15",
                    "4/17",
                    "4/19",
                    "5/6",
                    "5/7",
                    "5/8",
                    "5/9",
                    "5/11",
                    "5/12",
                    "5/13",
                    "5/14",
                    "5/16",
                    "5/17",
                    "5/19",
                    "6/7",
                    "6/11",
                    "6/13",
                    "6/17",
                    "6/19",
                    "7/8",
                    "7/9",
                    "7/11",
                    "7/13",
                    "7/15",
                    "7/16",
                    "7/17",
                    "7/19",
                    "8/9",
                    "8/11",
                    "8/13",
                    "8/15",
                    "8/17",
                    "8/19",
                    "9/10",
                    "9/11",
                    "9/13",
                    "9/14",
                    "9/16",
                    "9/17",
                    "9/19",
                    "10/11",
                    "10/13",
                    "10/17",
                    "10/19",
                    "11/12",
                    "11/13",
                    "11/14",
                    "11/15",
                    "11/16",
                    "11/17",
                    "11/19",
                    "12/13",
                    "12/17",
                    "12/19",
                    "13/14",
                    "13/15",
                    "13/16",
                    "13/17",
                    "13/19",
                    "14/15",
                    "14/17",
                    "14/19",
                    "15/16",
                    "15/17",
                    "15/19",
                    "16/17",
                    "16/19",
                    "17/18",
                    "17/19",
                    "18/19",
                    "19/20"
                ]
            ]
        }
    },
    "1448": null,
    "1449": {
        "title": "Maximum Painted Integer",
        "description": "Given an array of integers `cost` and an integer `target`, you need to paint an integer using the digits 1 to 9. Each digit has a cost associated with it, given by the `cost` array. The goal is to paint the maximum possible integer with a total cost equal to the `target`. The cost of painting a digit `(i + 1)` is given by `cost[i]` (0-indexed). The integer should not contain any 0 digits. Return the maximum integer as a string. If it is not possible to paint any integer with the given target cost, return '0'.",
        "example": "For example, given the `cost` array [4,3,2,5,6,7,2,5,5] and the `target` cost 9, the maximum painted integer is '7772'. The cost to paint the digit '7' is 2, and the digit '2' is 3. The total cost of painting '7772' is 2*3 + 3*1 = 9. Another possible solution is '977', but '7772' is the largest number that can be painted.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[4,3,2,5,6,7,2,5,5]",
                "[7,6,5,5,5,6,8,7,8]",
                "[2,4,6,2,4,6,4,4,4]",
                "[1,1,1,1,1,1,1,1,1]",
                "[5,5,5,5,5,5,5,5,5]",
                "[1,2,3,4,5,6,7,8,9]",
                "[9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,100]",
                "[100,100,100,100,100,100,100,100,100]",
                "[5000,5000,5000,5000,5000,5000,5000,5000,5000]"
            ],
            "outputs": [
                "\"7772\"",
                "\"85\"",
                "\"0\"",
                "\"111111111\"",
                "\"\"",
                "\"987654321\"",
                "\"1\"",
                "\"100\"",
                "\"\"",
                "\"999999999\""
            ]
        }
    },
    "1450": {
        "title": "Number of Students Doing Homework at a Given Time",
        "description": "Given two integer arrays `startTime` and `endTime` and an integer `queryTime`, find the number of students doing their homework at the given time. Each student starts their homework at `startTime[i]` and finishes it at `endTime[i]`. Return the count of students where `queryTime` falls within the interval `[startTime[i], endTime[i]]` inclusive.",
        "example": "Example:\n\nInput: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: There are 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
        "level": "Easy",
        "tags": [
            "array",
            "interval"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[3,2,7]",
                "4",
                "[4]",
                "[4]",
                "4",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "7",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "15",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "25",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "0",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "1"
            ],
            "outputs": [
                "1",
                "1",
                "0",
                "1",
                "1",
                "0",
                "1",
                "5",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "1451": {
        "title": "Rearrange Words in Sentence",
        "description": "Given a sentence `text` (A _sentence_ is a string of space-separated words) in the following format: First letter is in upper case. Each word in `text` is separated by a single space. Your task is to rearrange the words in `text` such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order. Return the new text following the format shown above.",
        "example": "Example:\n\nInput: text =  \"Leetcode is cool \"\nOutput:  \"Is cool leetcode \"\nExplanation: There are 3 words,  \"Leetcode \" of length 8,  \"is \" of length 2 and  \"cool \" of length 4. Output is ordered by length and the new first word starts with a capital letter.",
        "level": "Easy",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "Leetcode is cool",
                "Keep calm and code on",
                "To be or not to be",
                "This is a test",
                "Hello world",
                "I love coding",
                "The quick brown fox",
                "Python is awesome",
                "Happy coding",
                "Programming is fun",
                "This is an example",
                "Let's solve it",
                "Coding is life",
                "I am a programmer",
                "This is a sentence",
                "Sorting is important",
                "I enjoy challenges",
                "Let's start coding",
                "The cat is black",
                "I am learning"
            ],
            "outputs": [
                "Is cool leetcode",
                "On and keep calm code",
                "To be or to be not",
                "A is this test",
                "Hello world",
                "I love coding",
                "The fox quick brown",
                "Is python awesome",
                "Coding happy",
                "Is fun programming",
                "An is this example",
                "Let's it solve",
                "Coding is life",
                "I am a programmer",
                "A is this sentence",
                "Is sorting important",
                "I enjoy challenges",
                "Let's coding start",
                "The cat is black",
                "I am learning"
            ]
        }
    },
    "1452": {
        "title": "Subset of Favorite Companies",
        "description": "Given an array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorite companies for the `ith` person (indexed from 0), return the indices of people whose list of favorite companies is not a subset of any other list of favorite companies. The indices should be returned in increasing order.",
        "example": "Example 1:\n\nInput: favoriteCompanies = [[\"leetcode\", \"google\", \"facebook\"],[\"google\", \"microsoft\"],[\"google\", \"facebook\"],[\"google\"],[\"amazon\"]]\nOutput: [0,1,4]\nExplanation: Person with index 2 has favoriteCompanies[2] = [\"google\", \"facebook\"] which is a subset of favoriteCompanies[0] = [\"leetcode\", \"google\", \"facebook\"] corresponding to the person with index 0. Person with index 3 has favoriteCompanies[3] = [\"google\"] which is a subset of favoriteCompanies[0] = [\"leetcode\", \"google\", \"facebook\"] and favoriteCompanies[1] = [\"google\", \"microsoft\"]. Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].\n\nExample 2:\n\nInput: favoriteCompanies = [[\"leetcode\", \"google\", \"facebook\"],[\"leetcode\", \"amazon\"],[\"facebook\", \"google\"]]\nOutput: [0,1]\nExplanation: In this case favoriteCompanies[2] = [\"facebook\", \"google\"] is a subset of favoriteCompanies[0] = [\"leetcode\", \"google\", \"facebook\"], therefore, the answer is [0,1].\n\nExample 3:\n\nInput: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\nOutput: [0,1,2,3]\nExplanation: All lists of favorite companies are distinct and not a subset of any other list, therefore, the answer is [0,1,2,3].",
        "level": "Medium",
        "tags": [
            "array",
            "subset",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[\"leetcode\", \"google\", \"facebook\"],[\"google\", \"microsoft\"],[\"google\", \"facebook\"],[\"google\"],[\"amazon\"]]",
                "[[\"leetcode\", \"google\", \"facebook\"],[\"leetcode\", \"amazon\"],[\"facebook\", \"google\"]]",
                "[[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\", \"netflix\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\", \"netflix\", \"google\"]]"
            ],
            "outputs": [
                "[0,1,4]",
                "[0,1]",
                "[0,1,2,3]",
                "[0,1,2,3,4]",
                "[0,1,2,3,4,5]",
                "[0,1,2,3,4,5,6]",
                "[0,1,2,3,4,5,6,7]",
                "[0,1,2,3,4,5,6,7,8]",
                "[0,1,2,3,4,5,6,7,8,9]",
                "[0,1,2,3,4,5,6,7,8,9,10]",
                "[0,1,2,3,4,5,6,7,8,9,10,11]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]"
            ]
        }
    },
    "1453": {
        "title": "Maximum Darts on Dartboard",
        "description": "Alice is throwing `n` darts on a very large wall. You are given an array `darts` where `darts[i] = [xi, yi]` is the position of the `ith` dart that Alice threw on the wall.\n\nBob knows the positions of the `n` darts on the wall. He wants to place a dartboard of radius `r` on the wall so that the maximum number of darts that Alice throws lies on the dartboard.\n\nGiven the integer `r`, return the maximum number of darts that can lie on the dartboard.",
        "example": "Example 1:\n\nInput: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\nExample 2:\n\nInput: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).",
        "level": "Medium",
        "tags": [
            "geometry",
            "mathematics"
        ],
        "test_cases": {
            "inputs": [
                "[[0,0],[1,1],[2,2],[3,3],[4,4]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99]]"
            ],
            "outputs": [
                "5",
                "10",
                "11",
                "20",
                "21",
                "30",
                "31",
                "40",
                "41",
                "50"
            ]
        }
    },
    "1455": {
        "title": "Prefix Word Index",
        "description": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in the sentence. Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word, return -1. A prefix of a string s is any leading contiguous substring of s.",
        "example": "Example:\n\nInput: sentence = \"i love eating burger\", searchWord = \"burg\"\nOutput: 4\nExplanation: \"burg\" is a prefix of \"burger\" which is the 4th word in the sentence.",
        "level": "Easy",
        "tags": [
            "string",
            "search"
        ],
        "test_cases": {
            "inputs": [
                "\"i love eating burger\"",
                "\"burg\"",
                "\"this problem is an easy problem\"",
                "\"pro\"",
                "\"i am tired\"",
                "\"you\"",
                "\"hello world\"",
                "\"hello\"",
                "\"hello world\"",
                "\"world\"",
                "\"coding is fun\"",
                "\"coding\"",
                "\"coding is fun\"",
                "\"fun\"",
                "\"the quick brown fox jumps over the lazy dog\"",
                "\"quick\"",
                "\"the quick brown fox jumps over the lazy dog\"",
                "\"dog\"",
                "\"I can`t believe it\"",
                "\"can`t\"",
                "\"I don`t know\"",
                "\"don`t\"",
                "\"Bachelor`s degree\"",
                "\"Bachelor`s\""
            ],
            "outputs": [
                "4",
                "2",
                "-1",
                "2",
                "-1",
                "-1",
                "1",
                "1",
                "1",
                "2",
                "1",
                "1",
                "1",
                "3",
                "2",
                "1",
                "6",
                "9",
                "-1",
                "2",
                "-1",
                "2",
                "1",
                "1"
            ]
        }
    },
    "1456": {
        "title": "Maximum Vowels in Substring",
        "description": "Given a string `s` and an integer `k`, return the maximum number of vowel letters in any substring of `s` with length `k`. Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.",
        "example": "Example:\n\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.",
        "level": "Easy",
        "tags": [
            "string",
            "substring",
            "vowels"
        ],
        "test_cases": {
            "inputs": [
                "\"abciiidef\"",
                "\"aeiou\"",
                "\"leetcode\"",
                "\"hello\"",
                "\"programming\"",
                "\"algorithm\"",
                "\"python\"",
                "\"java\"",
                "\"coding\"",
                "\"problem\"",
                "\"computer\"",
                "\"science\"",
                "\"data\"",
                "\"structure\"",
                "\"algorithm\"",
                "\"code\"",
                "\"challenge\"",
                "\"interview\"",
                "\"practice\"",
                "\"solution\"",
                "\"test\""
            ],
            "outputs": [
                "3",
                "2",
                "2",
                "1",
                "2",
                "3",
                "1",
                "1",
                "1",
                "1",
                "2",
                "2",
                "1",
                "1",
                "2",
                "1",
                "2",
                "2",
                "1",
                "1"
            ]
        }
    },
    "1457": null,
    "1458": {
        "title": "Maximum Dot Product of Subsequences",
        "description": "Given two arrays `nums1` and `nums2`, find the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length. A subsequence of an array is a new array formed by deleting some (can be none) of the elements without changing the relative order of the remaining elements. For example, [2,3,5] is a subsequence of [1,2,3,4,5], while [1,5,3] is not.",
        "example": "Example 1:\n\nInput: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2. Their dot product is (2*3 + (-2)*(-6)) = 18.\n\nExample 2:\n\nInput: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2. Their dot product is (3*7) = 21.\n\nExample 3:\n\nInput: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2. Their dot product is -1.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,-2,5]",
                "[3,0,-6]",
                "[3,-2]",
                "[2,-6,7]",
                "[-1,-1]",
                "[1,1]",
                "[1,2,3,4,5]",
                "[2,3,5]",
                "[1,5,3]",
                "[-1,0,1]",
                "[0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]"
            ],
            "outputs": [
                "18",
                "21",
                "-1",
                "18",
                "-1",
                "1",
                "55",
                "55",
                "0",
                "0",
                "0",
                "385",
                "385",
                "385",
                "385",
                "385",
                "-385",
                "-385",
                "-385",
                "-385"
            ]
        }
    },
    "1460": {
        "title": "Reverse Subarray to Target",
        "description": "You are given two integer arrays of equal length `target` and `arr`. In one step, you can select any **non-empty subarray** of `arr` and reverse it. You are allowed to make any number of steps. Return `true` if you can make `arr` equal to `target` or `false` otherwise.",
        "example": "Example:\n\nInput: target = [1,2,3,4], arr = [2,4,1,3]\nOutput: true\nExplanation: You can follow the next steps to convert arr to target:\n1- Reverse subarray [2,4,1], arr becomes [1,4,2,3]\n2- Reverse subarray [4,2], arr becomes [1,2,4,3]\n3- Reverse subarray [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so.",
        "level": "Medium",
        "tags": [
            "array",
            "subarray",
            "reversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4]",
                "[2,4,1,3]",
                "[7]",
                "[7]",
                "[3,7,9]",
                "[3,7,11]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[1,2,3,5,4]",
                "[1,2,3,4,5]",
                "[1,2,3,4,6]",
                "[1,2,3,4,5]",
                "[5,4,3,2,6]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,6]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,7]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,5]"
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "1461": {
        "title": "Binary Substring Check",
        "description": "Given a binary string `s` and an integer `k`, return `true` if every binary code of length `k` is a substring of `s`. Otherwise, return `false`.",
        "example": "Example 1:\n\nInput: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\", and \"11\". They can all be found as substrings at indices 0, 1, 3, and 2 respectively.",
        "level": "Easy",
        "tags": [
            "String",
            "Substring",
            "Binary"
        ],
        "test_cases": {
            "inputs": [
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\""
            ],
            "outputs": [
                "2",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4"
            ]
        }
    },
    "1462": {
        "title": "Course Prerequisites",
        "description": "You are given a list of courses labeled from 0 to numCourses - 1. Each course has a list of prerequisites that must be completed before taking the course. Prerequisites can be direct or indirect. You are given a list of queries, and for each query, you need to determine if the first course is a prerequisite of the second course.",
        "example": "For example, if numCourses = 3 and prerequisites = [[1,2],[1,0],[2,0]], and queries = [[1,0],[1,2]], the output should be [true,true]. The prerequisites are: 1 -> 2 -> 0, so 1 is a prerequisite of 0 and 2 is a prerequisite of 0.",
        "level": "Medium",
        "tags": [
            "Graphs",
            "Topological Sort"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    [
                        [
                            1,
                            0
                        ]
                    ],
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            0
                        ]
                    ]
                ],
                [
                    2,
                    [],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            0
                        ]
                    ],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ]
                    ],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ]
                    ],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            4,
                            0
                        ]
                    ]
                ]
            ],
            "outputs": [
                [
                    false,
                    true
                ],
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ],
                [
                    true,
                    false,
                    false
                ],
                [
                    true,
                    false,
                    false,
                    false
                ]
            ]
        }
    },
    "1463": {
        "title": "Maximum Cherry Collection",
        "description": "You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\nYou have two robots that can collect cherries for you:\n\n*   **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n*   **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\nReturn the maximum number of cherries collected using both robots by following the rules below:\n\n*   From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`.\n*   When any robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell.\n*   When both robots stay in the same cell, only one takes the cherries.\n*   Both robots cannot move outside of the grid at any moment.\n*   Both robots should reach the bottom row in `grid`.",
        "example": "Example:\n\nInput: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\nOutput: 24\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal cherries collected: 12 + 12 = 24.",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        3,
                        1,
                        1
                    ],
                    [
                        2,
                        5,
                        1
                    ],
                    [
                        1,
                        5,
                        5
                    ],
                    [
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    [
                        3,
                        3,
                        3,
                        3,
                        3
                    ],
                    [
                        4,
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        5
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ]
                ]
            ],
            "outputs": [
                24,
                28,
                17,
                0,
                20,
                5,
                140
            ]
        }
    },
    "1464": {
        "title": "Maximum Product of Two Elements in an Array",
        "description": "Given an array of integers `nums`, you need to choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.",
        "example": "Example 1:\n\nInput: nums = [3,4,5,2]\nOutput: 12\nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.\n\nExample 2:\n\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n\nExample 3:\n\nInput: nums = [3,7]\nOutput: 12",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    4,
                    5,
                    2
                ],
                [
                    1,
                    5,
                    4,
                    5
                ],
                [
                    3,
                    7
                ],
                [
                    10,
                    20,
                    30,
                    40
                ],
                [
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    10,
                    15,
                    20
                ],
                [
                    100,
                    200,
                    300,
                    400
                ],
                [
                    7,
                    8,
                    9,
                    10
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    9,
                    8,
                    7,
                    6
                ],
                [
                    15,
                    25,
                    35,
                    45
                ],
                [
                    1000,
                    500,
                    250,
                    125
                ],
                [
                    2,
                    3,
                    5,
                    7
                ]
            ],
            "outputs": [
                12,
                16,
                12,
                1176,
                1,
                0,
                285,
                119600,
                72,
                16,
                6,
                56,
                1200,
                124875000,
                24
            ]
        }
    },
    "1465": {
        "title": "Maximum Area of a Piece of Cake",
        "description": "You are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts`. The `horizontalCuts` array represents the distances from the top of the rectangular cake to each horizontal cut, and the `verticalCuts` array represents the distances from the left of the rectangular cake to each vertical cut. Your task is to find the maximum area of a piece of cake after making the cuts at each horizontal and vertical position provided in the arrays. Return the maximum area modulo `10^9 + 7`.",
        "example": "For example, consider a rectangular cake of size 5x4. The `horizontalCuts` array is [1, 2, 4] and the `verticalCuts` array is [1, 3]. After making the cuts, the green piece of cake has the maximum area, which is 4.\n\nInput:\n\nh = 5, w = 4\nhorizontalCuts = [1, 2, 4]\nverticalCuts = [1, 3]\n\nOutput:\n\n4",
        "level": "Medium",
        "tags": [
            "Math",
            "Modulo",
            "Arrays"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    4,
                    [
                        1,
                        2,
                        4
                    ],
                    [
                        1,
                        3
                    ]
                ],
                [
                    5,
                    4,
                    [
                        3,
                        1
                    ],
                    [
                        1
                    ]
                ],
                [
                    5,
                    4,
                    [
                        3
                    ],
                    [
                        3
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    2,
                    2,
                    [
                        1
                    ],
                    [
                        1
                    ]
                ],
                [
                    1000000000,
                    1000000000,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    2,
                    2,
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        2
                    ]
                ]
            ],
            "outputs": [
                4,
                6,
                9,
                25,
                1,
                999999937,
                36,
                36,
                64,
                1
            ]
        }
    },
    "18": null,
    "120": {
        "title": "Minimum Path Sum in Triangle",
        "description": "Given a `triangle` array, find the minimum path sum from top to bottom. For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.",
        "example": "Example 1:\n\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11.\n\nExample 2:\n\nInput: triangle = [[-10]]\nOutput: -10\nExplanation: The triangle has only one element, so the minimum path sum is -10.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "triangle",
            "minimum path sum"
        ],
        "test_cases": {
            "inputs": [
                "[[2],[3,4],[6,5,7],[4,1,8,3]]",
                "[[-10]]",
                "[[1],[2,3],[4,5,6],[7,8,9,10]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3]]",
                "[[5],[6,7],[8,9,10],[11,12,13,14],[15,16,17,18,19]]",
                "[[1],[2,3],[4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18,19]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114],[-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114],[-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130],[-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114],[-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130],[-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114],[-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130],[-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165],[-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183]]",
                "[[1],[-2,3],[1,-1,-3],[4,1,8,3],[-5,-6,-7,-8,-9],[-10,-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20,-21,-22],[-23,-24,-25,-26,-27,-28,-29,-30],[-31,-32,-33,-34,-35,-36,-37,-38,-39],[-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60],[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72],[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],[-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114],[-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130],[-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165],[-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183],[-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201]]"
            ],
            "outputs": [
                "11",
                "-10",
                "15",
                "-1",
                "55",
                "56",
                "-15",
                "-25",
                "-35",
                "-45",
                "-55",
                "-66",
                "-78",
                "-91",
                "-105",
                "-120",
                "-136",
                "-153",
                "-171",
                "-190"
            ]
        }
    },
    "121": {
        "title": "Maximize Stock Profit",
        "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
        "example": "Example:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.",
        "level": "Easy",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[7,1,5,3,6,4]",
                "[7,6,4,3,1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,2,3,4,5,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "5",
                "0",
                "4",
                "0",
                "0",
                "9",
                "0",
                "4",
                "4",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16"
            ]
        }
    },
    "122": {
        "title": "Maximum Stock Profit",
        "description": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day. On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day. Find and return the maximum profit you can achieve.",
        "example": "Example:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[7,1,5,3,6,4]",
                "[1,2,3,4,5]",
                "[7,6,4,3,1]",
                "[1,1,1,1,1]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,2,3,4,5,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "7",
                "4",
                "0",
                "0",
                "0",
                "9",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19"
            ]
        }
    },
    "123": {
        "title": "Maximum Profit from Stock Prices",
        "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. Find the maximum profit you can achieve by buying and selling stocks. You may complete at most two transactions, but you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
        "example": "Example:\n\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    3,
                    5,
                    0,
                    0,
                    3,
                    1,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    7,
                    6,
                    4,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    4,
                    2,
                    5,
                    7,
                    2,
                    4
                ],
                [
                    2,
                    4,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                6,
                4,
                0,
                9,
                3,
                9,
                0,
                0,
                18,
                18
            ]
        }
    },
    "124": {
        "title": "Maximum Path Sum in Binary Tree",
        "description": "Given a binary tree, find the maximum path sum. A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root. The path sum of a path is the sum of the node's values in the path. Return the maximum path sum of any non-empty path.",
        "example": "Example:\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[-10,9,20,null,null,15,7]",
                "[1,2,3,4,5]",
                "[1,-2,3]",
                "[1,2,3,4,null,null,5]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,5,null,null,null,null,6,7,8,9,10,null,null,null,null,null,11,12,13,14,15]"
            ],
            "outputs": [
                "6",
                "42",
                "9",
                "4",
                "11",
                "12",
                "45"
            ]
        }
    },
    "125": {
        "title": "Palindrome Check",
        "description": "Given a string `s`, determine if it is a palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. Return `true` if it is a palindrome, and `false` otherwise.",
        "example": "Example 1:\n\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\n\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.",
        "level": "Easy",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"A man, a plan, a canal: Panama\"",
                "\"race a car\"",
                "\"\"",
                "\"No lemon, no melon\"",
                "\"Was it a car or a cat I saw?\"",
                "\"Step on no pets\"",
                "\"Eva, can I see bees in a cave?\"",
                "\"Mr. Owl ate my metal worm\"",
                "\"Madam, in Eden, I'm Adam\"",
                "\"Never odd or even\"",
                "\"Able was I ere I saw Elba\"",
                "\"A Toyota's a Toyota\"",
                "\"A nut for a jar of tuna\"",
                "\"Are we not pure? \"No sir!\" Panama's moody Noriega brags. \"It is garbage!\" Irony dooms a man; a prisoner up to new era.\"\"",
                "\"Go hang a salami I'm a lasagna hog\"",
                "\"Red roses run no risk, sir, on Nurse's order\"",
                "\"Ma is a nun, as I am\"",
                "\"Evil is a name of a foeman, as I live\"",
                "\"A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!\"",
                "\"Able, was I saw Elba\"",
                "\"A man, a plan, a canal, Panama\"",
                "\"A man, a plan, a canal, Panama!\"",
                "\"A man, a plan, a canal, Panama.\""
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "126": {
        "title": "Shortest Transformation Sequences",
        "description": "Given a transformation sequence from a start word to an end word using a dictionary of words, find all the shortest transformation sequences. A transformation sequence is a sequence of words where each adjacent pair of words differs by a single letter, and each word is in the given dictionary. Return the sequences as a list of words.",
        "example": "Example:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"]\nOutput: [[\"hit\", \"hot\", \"dot\", \"dog\", \"cog\"], [\"hit\", \"hot\", \"lot\", \"log\", \"cog\"]]\nExplanation: There are 2 shortest transformation sequences: \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\" and \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\".",
        "level": "Medium",
        "tags": [
            "graph",
            "breadth-first search",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log"
                    ]
                },
                {
                    "beginWord": "a",
                    "endWord": "c",
                    "wordList": [
                        "a",
                        "b",
                        "c"
                    ]
                },
                {
                    "beginWord": "red",
                    "endWord": "tax",
                    "wordList": [
                        "ted",
                        "tex",
                        "red",
                        "tax",
                        "tad",
                        "den",
                        "rex",
                        "pee"
                    ]
                },
                {
                    "beginWord": "hot",
                    "endWord": "dog",
                    "wordList": [
                        "hot",
                        "dog"
                    ]
                }
            ],
            "outputs": [
                [
                    [
                        "hit",
                        "hot",
                        "dot",
                        "dog",
                        "cog"
                    ],
                    [
                        "hit",
                        "hot",
                        "lot",
                        "log",
                        "cog"
                    ]
                ],
                [],
                [
                    [
                        "a",
                        "c"
                    ]
                ],
                [
                    [
                        "red",
                        "ted",
                        "tad",
                        "tax"
                    ],
                    [
                        "red",
                        "rex",
                        "tex",
                        "tax"
                    ]
                ],
                []
            ]
        }
    },
    "127": {
        "title": "Shortest Transformation Sequence",
        "description": "Given a transformation sequence from a start word to an end word using a dictionary of words, find the shortest transformation sequence. A transformation sequence is a sequence of words where each adjacent pair of words differs by a single letter. The start word does not need to be in the dictionary, but all other words in the sequence must be in the dictionary. Return the number of words in the shortest transformation sequence, or 0 if no such sequence exists.",
        "example": "Example:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long.",
        "level": "Medium",
        "tags": [
            "graph",
            "breadth-first search",
            "word ladder"
        ],
        "test_cases": {
            "inputs": [
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log"
                    ]
                },
                {
                    "beginWord": "a",
                    "endWord": "c",
                    "wordList": [
                        "a",
                        "b",
                        "c"
                    ]
                },
                {
                    "beginWord": "red",
                    "endWord": "tax",
                    "wordList": [
                        "ted",
                        "tex",
                        "red",
                        "tax",
                        "tad",
                        "den",
                        "rex",
                        "pee"
                    ]
                },
                {
                    "beginWord": "hot",
                    "endWord": "dog",
                    "wordList": [
                        "hot",
                        "dog"
                    ]
                },
                {
                    "beginWord": "a",
                    "endWord": "z",
                    "wordList": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e",
                        "f",
                        "g",
                        "h",
                        "i",
                        "j",
                        "k",
                        "l",
                        "m",
                        "n",
                        "o",
                        "p",
                        "q",
                        "r",
                        "s",
                        "t",
                        "u",
                        "v",
                        "w",
                        "x",
                        "y",
                        "z"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut",
                        "cup"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut",
                        "cup",
                        "cop"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut",
                        "cup",
                        "cop",
                        "cap"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut",
                        "cup",
                        "cop",
                        "cap",
                        "cab"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut",
                        "cup",
                        "cop",
                        "cap",
                        "cab",
                        "cab"
                    ]
                },
                {
                    "beginWord": "hit",
                    "endWord": "cog",
                    "wordList": [
                        "hot",
                        "dot",
                        "dog",
                        "lot",
                        "log",
                        "cog",
                        "hat",
                        "cat",
                        "cot",
                        "hog",
                        "hag",
                        "hug",
                        "hut",
                        "cut",
                        "cup",
                        "cop",
                        "cap",
                        "cab",
                        "cab",
                        "cog"
                    ]
                }
            ],
            "outputs": [
                5,
                0,
                2,
                3,
                0,
                26,
                5,
                4,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14
            ]
        }
    },
    "128": {
        "title": "Longest Consecutive Sequence",
        "description": "Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence. You must write an algorithm that runs in `O(n)` time.",
        "example": "Example:\n\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore, its length is 4.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    100,
                    4,
                    200,
                    1,
                    3,
                    2
                ],
                [
                    0,
                    3,
                    7,
                    2,
                    5,
                    8,
                    4,
                    6,
                    0,
                    1
                ],
                [],
                [
                    1
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    90,
                    80,
                    70,
                    60,
                    50,
                    40,
                    30,
                    20,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900
                ],
                [
                    900,
                    800,
                    700,
                    600,
                    500,
                    400,
                    300,
                    200,
                    100,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000
                ],
                [
                    1000,
                    900,
                    800,
                    700,
                    600,
                    500,
                    400,
                    300,
                    200,
                    100,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000,
                    10000
                ],
                [
                    10000,
                    1000,
                    900,
                    800,
                    700,
                    600,
                    500,
                    400,
                    300,
                    200,
                    100,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                4,
                9,
                0,
                1,
                1,
                1,
                9,
                1,
                10,
                10,
                15,
                10,
                6,
                10,
                19,
                19,
                20,
                20,
                21,
                21
            ]
        }
    },
    "129": null,
    "130": null,
    "131": {
        "title": "Palindrome Partitioning",
        "description": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of `s`.",
        "example": "Example 1:\n\nInput: s = \"aab\"\nOutput: [['a','a','b'],['aa','b']]\n\nExample 2:\n\nInput: s = \"a\"\nOutput: [['a']]\n",
        "level": "Medium",
        "tags": [
            "string",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"aab\"",
                "\"a\"",
                "\"racecar\"",
                "\"level\"",
                "\"madam\"",
                "\"abcba\"",
                "\"abba\"",
                "\"aabbaa\"",
                "\"aaaaa\"",
                "\"ababab\"",
                "\"abcd\"",
                "\"aaaaaabaaaaa\"",
                "\"aabbaabb\"",
                "\"aabb\"",
                "\"aabbaa\"",
                "\"aabbcc\"",
                "\"abcde\"",
                "\"aaaaaaa\"",
                "\"aabbaabbcc\"",
                "\"aabbccddeeffgg\""
            ],
            "outputs": [
                "[['a','a','b'],['aa','b']]",
                "[['a']]",
                "[['r','a','c','e','c','a','r']]",
                "[['l','e','v','e','l']]",
                "[['m','a','d','a','m']]",
                "[['a','b','c','b','a']]",
                "[['a','b','b','a']]",
                "[['a','a','b','b','a','a']]",
                "[['a','a','a','a','a']]",
                "[['a','b','a','b','a','b']]",
                "[['a','b','c','d']]",
                "[['a','a','a','a','a','b','a','a','a','a','a']]",
                "[['a','a','b','b','a','a','b','b']]",
                "[['a','a','b','b']]",
                "[['a','a','b','b','a','a']]",
                "[['a','a','b','b','c','c']]",
                "[['a','b','c','d','e']]",
                "[['a','a','a','a','a','a','a']]",
                "[['a','a','b','b','a','a','b','b','c','c']]",
                "[['a','a','b','b','c','c','d','d','e','e','f','f','g','g']]"
            ]
        }
    },
    "132": null,
    "133": {
        "title": "Clone Graph",
        "description": "Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.",
        "example": "Example 1:\n\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph. 1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n\nExample 2:\n\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n\nExample 3:\n\nInput: adjList = []\nOutput: []\nExplanation: This is an empty graph, it does not have any nodes.",
        "level": "Medium",
        "tags": [
            "graph",
            "depth-first search",
            "breadth-first search"
        ],
        "test_cases": {
            "inputs": [
                "[[2,4],[1,3],[2,4],[1,3]]",
                "[[]]",
                "[]",
                "[[2,3],[1,4],[1,4],[2,3]]",
                "[[2,3],[1,4],[3,4],[2,1]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100]]"
            ],
            "outputs": [
                "[[2,4],[1,3],[2,4],[1,3]]",
                "[[]]",
                "[]",
                "[[2,3],[1,4],[1,4],[2,3]]",
                "[[2,3],[1,4],[3,4],[2,1]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90]]",
                "[[2,3],[1,4],[3,4],[2,1],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100]]"
            ]
        }
    },
    "134": {
        "title": "Gas Station Circuit",
        "description": "There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`. You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.",
        "example": "Example:\n\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation: Start at station 3 (index 3) and fill up with 4 units of gas. Your tank = 0 + 4 = 4. Travel to station 4. Your tank = 4 - 1 + 5 = 8. Travel to station 0. Your tank = 8 - 2 + 1 = 7. Travel to station 1. Your tank = 7 - 3 + 2 = 6. Travel to station 2. Your tank = 6 - 4 + 3 = 5. Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index.",
        "level": "Medium",
        "tags": [
            "Array",
            "Greedy"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[3,4,5,1,2]",
                "[2,3,4]",
                "[3,4,3]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]",
                "[1,1,1,1,1]"
            ],
            "outputs": [
                "3",
                "-1",
                "0",
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0"
            ]
        }
    },
    "135": {
        "title": "Minimum Number of Candies",
        "description": "There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`. You are giving candies to these children subjected to the following requirements: Each child must have at least one candy. Children with a higher rating get more candies than their neighbors. Return the minimum number of candies you need to have to distribute the candies to the children.",
        "example": "Example:\n\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    2
                ],
                [
                    1,
                    2,
                    2
                ],
                [
                    4,
                    2,
                    3,
                    4,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    2,
                    3,
                    4,
                    5,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    5,
                    4,
                    3,
                    2,
                    1,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ],
            "outputs": [
                5,
                4,
                9,
                5,
                15,
                15,
                16,
                9,
                15,
                25,
                15,
                25,
                20,
                20,
                30,
                30,
                10,
                15,
                15,
                25
            ]
        }
    },
    "136": null,
    "137": null,
    "138": {
        "title": "Deep Copy of Linked List with Random Pointer",
        "description": "Given a linked list of length `n` where each node contains an additional random pointer, which could point to any node in the list or `null`, construct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointers of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list. Return the head of the copied linked list.",
        "example": "Example 1:\n\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\nExample 2:\n\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n\nExample 3:\n\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]",
        "level": "Medium",
        "tags": [
            "linked list",
            "deep copy",
            "random pointer"
        ],
        "test_cases": {
            "inputs": [
                "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "[[1,1],[2,1]]",
                "[[3,null],[3,0],[3,null]]",
                "[[5,null],[5,0],[5,null],[5,1],[5,3]]",
                "[[10,null],[20,0],[30,1],[40,2],[50,3],[60,4]]",
                "[[1,null]]",
                "[]",
                "[[1,null],[2,0]]",
                "[[1,1],[2,null]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3]]",
                "[[1,4],[2,3],[3,2],[4,1],[5,0]]",
                "[[1,0],[2,1],[3,2],[4,3],[5,4]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,5],[8,6],[9,7],[10,8]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,0]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,5],[8,6],[9,7],[10,null]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,null]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,5],[8,null],[9,7],[10,8]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,null],[9,1],[10,0]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,null],[8,6],[9,7],[10,8]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,null],[8,2],[9,1],[10,0]]"
            ],
            "outputs": [
                "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                "[[1,1],[2,1]]",
                "[[3,null],[3,0],[3,null]]",
                "[[5,null],[5,0],[5,null],[5,1],[5,3]]",
                "[[10,null],[20,0],[30,1],[40,2],[50,3],[60,4]]",
                "[[1,null]]",
                "[]",
                "[[1,null],[2,0]]",
                "[[1,1],[2,null]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3]]",
                "[[1,4],[2,3],[3,2],[4,1],[5,0]]",
                "[[1,0],[2,1],[3,2],[4,3],[5,4]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,5],[8,6],[9,7],[10,8]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[10,0]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,5],[8,6],[9,7],[10,null]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,null],[9,1],[10,0]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,5],[8,null],[9,7],[10,8]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,null],[8,2],[9,1],[10,0]]",
                "[[1,null],[2,0],[3,1],[4,2],[5,3],[6,4],[7,null],[8,6],[9,7],[10,8]]",
                "[[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,null],[8,2],[9,1],[10,0]]"
            ]
        }
    },
    "139": {
        "title": "String Segmentation",
        "description": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
        "example": "Example:\n\nInput: s = \"leetcode \", wordDict = [ \"leet \", \"code \"]\nOutput: true\nExplanation: Return true because \"leetcode \" can be segmented as \"leet code \".",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "string"
        ],
        "test_cases": {
            "inputs": [
                "\"leetcode \", [ \"leet \", \"code \"]",
                "\"applepenapple \", [ \"apple \", \"pen \"]",
                "\"catsandog \", [ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"]",
                "\"programming \", [ \"program \", \"programming \"]",
                "\"algorithm \", [ \"algo \", \"rithm \"]",
                "\"hello \", [ \"hell \", \"hello \"]",
                "\"world \", [ \"world \", \"hello \"]",
                "\"leetcode \", [ \"leet \", \"code \", \"leet \"]",
                "\"applepenapple \", [ \"apple \", \"pen \", \"apple \"]",
                "\"catsandog \", [ \"cats \", \"dog \", \"sand \", \"and \", \"cat \", \"sand \"]",
                "\"programming \", [ \"program \", \"programming \", \"program \"]",
                "\"algorithm \", [ \"algo \", \"rithm \", \"algo \"]",
                "\"hello \", [ \"hell \", \"hello \", \"hell \"]",
                "\"world \", [ \"world \", \"hello \", \"world \"]",
                "\"leetcode \", [ \"leet \", \"code \", \"leet \", \"code \"]",
                "\"applepenapple \", [ \"apple \", \"pen \", \"apple \", \"pen \"]",
                "\"catsandog \", [ \"cats \", \"dog \", \"sand \", \"and \", \"cat \", \"sand \", \"dog \"]",
                "\"programming \", [ \"program \", \"programming \", \"program \", \"programming \"]",
                "\"algorithm \", [ \"algo \", \"rithm \", \"algo \", \"rithm \"]",
                "\"hello \", [ \"hell \", \"hello \", \"hell \", \"hello \"]",
                "\"world \", [ \"world \", \"hello \", \"world \", \"hello \"]"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "140": {
        "title": "Sentence Construction",
        "description": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
        "example": "Example:\n\nInput: s =  \"catsanddog \", wordDict = [ \"cat \", \"cats \", \"and \", \"sand \", \"dog \"]\nOutput: [ \"cats and dog \", \"cat sand dog \"]\n\nInput: s =  \"pineapplepenapple \", wordDict = [ \"apple \", \"pen \", \"applepen \", \"pine \", \"pineapple \"]\nOutput: [ \"pine apple pen apple \", \"pineapple pen apple \", \"pine applepen apple \"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nInput: s =  \"catsandog \", wordDict = [ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"]\nOutput: []",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"catsanddog \", [ \"cat \", \"cats \", \"and \", \"sand \", \"dog \"]",
                "\"pineapplepenapple \", [ \"apple \", \"pen \", \"applepen \", \"pine \", \"pineapple \"]",
                "\"catsandog \", [ \"cats \", \"dog \", \"sand \", \"and \", \"cat \"]",
                "\"iloveleetcode \", [ \"i \", \"love \", \"leetcode \"]",
                "\"programmingisfun \", [ \"programming \", \"is \", \"fun \"]",
                "\"hellothere \", [ \"hello \", \"there \"]",
                "\"thisisatest \", [ \"this \", \"is \", \"a \", \"test \"]",
                "\"codingisawesome \", [ \"coding \", \"is \", \"awesome \"]",
                "\"happynewyear \", [ \"happy \", \"new \", \"year \"]",
                "\"goodmorning \", [ \"good \", \"morning \"]",
                "\"helloworld \", [ \"hello \", \"world \"]",
                "\"programminglanguage \", [ \"programming \", \"language \"]",
                "\"computerscience \", [ \"computer \", \"science \"]",
                "\"datascience \", [ \"data \", \"science \"]",
                "\"algorithm \", [ \"algo \", \"rithm \"]",
                "\"python \", [ \"py \", \"thon \"]",
                "\"javascript \", [ \"java \", \"script \"]",
                "\"cplusplus \", [ \"c \", \"plus \", \"plus \"]",
                "\"ruby \", [ \"ru \", \"by \"]",
                "\"java \", [ \"ja \", \"va \"]"
            ],
            "outputs": [
                "[ \"cats and dog \", \"cat sand dog \"]",
                "[ \"pine apple pen apple \", \"pineapple pen apple \", \"pine applepen apple \"]",
                "[]",
                "[ \"i love leet code \", \"i love leetcode \"]",
                "[ \"programming is fun \"]",
                "[ \"hello there \"]",
                "[ \"this is a test \"]",
                "[ \"coding is awesome \"]",
                "[ \"happy new year \"]",
                "[ \"good morning \"]",
                "[ \"hello world \"]",
                "[ \"programming language \"]",
                "[ \"computer science \"]",
                "[ \"data science \"]",
                "[ \"algo rithm \"]",
                "[ \"py thon \"]",
                "[ \"java script \"]",
                "[ \"c plus plus \"]",
                "[ \"ru by \"]",
                "[ \"ja va \"]"
            ]
        }
    },
    "141": {
        "title": "Linked List Cycle",
        "description": "Given the head of a linked list, determine if the linked list has a cycle in it. A cycle exists in a linked list if there is a node that can be reached again by continuously following the next pointer. The tail's next pointer is connected to a node at a specific index denoted by `pos`. Return true if there is a cycle in the linked list, otherwise return false.",
        "example": "Example 1:\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\nExample 2:\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\nExample 3:\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.",
        "level": "Easy",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        3,
                        2,
                        0,
                        -4
                    ],
                    "pos": 1
                },
                {
                    "head": [
                        1,
                        2
                    ],
                    "pos": 0
                },
                {
                    "head": [
                        1
                    ],
                    "pos": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 7
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 8
                },
                {
                    "head": [],
                    "pos": -1
                },
                {
                    "head": [
                        1
                    ],
                    "pos": 0
                },
                {
                    "head": [
                        1,
                        2
                    ],
                    "pos": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3
                    ],
                    "pos": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "pos": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "pos": 9
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "pos": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "pos": 11
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "pos": 12
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "pos": 13
                }
            ],
            "outputs": [
                true,
                true,
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "142": {
        "title": "Linked List Cycle Detection",
        "description": "Given the `head` of a linked list, determine if there is a cycle in the list. If there is a cycle, return the node where the cycle begins. If there is no cycle, return `null`.\n\nA cycle in a linked list occurs when a node is visited more than once while traversing the list. The `pos` parameter is used to denote the index of the node that the tail's `next` pointer is connected to (0-indexed). If there is no cycle, `pos` is set to -1.\n\nYou must not modify the linked list.\n\nImplement the function `detectCycle` to solve this problem.",
        "example": "Example:\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        3,
                        2,
                        0,
                        -4
                    ],
                    "pos": 1
                },
                {
                    "head": [
                        1,
                        2
                    ],
                    "pos": 0
                },
                {
                    "head": [
                        1
                    ],
                    "pos": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 7
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 8
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 9
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 11
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 12
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 13
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "pos": 14
                }
            ],
            "outputs": [
                "tail connects to node index 1",
                "tail connects to node index 0",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "tail connects to node index 0",
                "tail connects to node index 1",
                "tail connects to node index 3",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle",
                "no cycle"
            ]
        }
    },
    "143": {
        "title": "Reorder Linked List",
        "description": "Given the head of a singly linked-list, reorder the list in a specific pattern. The list is initially represented as L0 -> L1 -> ... -> Ln-1 -> Ln. The task is to reorder the list to be in the following form: L0 -> Ln -> L1 -> Ln-1 -> L2 -> Ln-2 -> ... You are not allowed to modify the values in the list's nodes, only the nodes themselves can be changed.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n\nExplanation: The original list is 1 -> 2 -> 3 -> 4. After reordering, the list becomes 1 -> 4 -> 2 -> 3.\n\nExample 2:\n\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n\nExplanation: The original list is 1 -> 2 -> 3 -> 4 -> 5. After reordering, the list becomes 1 -> 5 -> 2 -> 4 -> 3.",
        "level": "Medium",
        "tags": [
            "linked list",
            "reordering"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4]",
                "[1,2,3,4,5]",
                "[1]",
                "[1,2]",
                "[1,2,3]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11]",
                "[1,2,3,4,5,6,7,8,9,10,11,12]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]"
            ],
            "outputs": [
                "[1,4,2,3]",
                "[1,5,2,4,3]",
                "[1]",
                "[1,2]",
                "[1,3,2]",
                "[1,6,2,5,3,4]",
                "[1,7,2,6,3,5,4]",
                "[1,8,2,7,3,6,4,5]",
                "[1,9,2,8,3,7,4,6,5]",
                "[1,10,2,9,3,8,4,7,5,6]",
                "[1,11,2,10,3,9,4,8,5,7,6]",
                "[1,12,2,11,3,10,4,9,5,8,6,7]",
                "[1,13,2,12,3,11,4,10,5,9,6,8,7]",
                "[1,14,2,13,3,12,4,11,5,10,6,9,7,8]",
                "[1,15,2,14,3,13,4,12,5,11,6,10,7,9,8]",
                "[1,16,2,15,3,14,4,13,5,12,6,11,7,10,8,9]",
                "[1,17,2,16,3,15,4,14,5,13,6,12,7,11,8,10,9]",
                "[1,18,2,17,3,16,4,15,5,14,6,13,7,12,8,11,9,10]",
                "[1,19,2,18,3,17,4,16,5,15,6,14,7,13,8,12,9,11,10]",
                "[1,20,2,19,3,18,4,17,5,16,6,15,7,14,8,13,9,12,10,11]"
            ]
        }
    },
    "144": {
        "title": "Binary Tree Preorder Traversal",
        "description": "Given the `root` of a binary tree, return the preorder traversal of its nodes' values.",
        "example": "Example 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,2,3]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "binary tree",
            "preorder traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,3]",
                "[]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,3,8,1,4,6,9]",
                "[1,2,null,3,null,4,null,5]",
                "[1,null,2,null,3,null,4,null,5]",
                "[1,2,3,4,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[1,2,3]",
                "[]",
                "[1]",
                "[1,2,4,8,9,5,10,3,6,7]",
                "[5,3,1,4,8,6,9]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,4,8,9,5,10,3,6,7]",
                "[1,2,4,8,9,5,10,3,6,7]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ]
        }
    },
    "145": {
        "title": "Binary Tree Postorder Traversal",
        "description": "Given the `root` of a binary tree, return the postorder traversal of its nodes' values.",
        "example": "Example 1:\n\nInput: root = [1,null,2,3]\nOutput: [3,2,1]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Traversal",
            "Iterative"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,3]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,null,3,null,4,null,5]",
                "[5,null,4,null,3,null,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,null,null,4,5]",
                "[5,4,null,null,3,2,1]",
                "[1,2,3,4,null,null,5,6]",
                "[6,5,null,null,4,3,2,1]",
                "[1,2,3,4,5,null,null,null,null,6,7]",
                "[7,6,null,null,null,null,5,4,3,2,1]",
                "[1,2,3,null,null,4,null,null,null,null,5,6]",
                "[6,5,null,null,null,null,4,null,null,3,2,1]",
                "[1,2,3,4,5,6,7,null,null,null,null,null,null,null,null,8,9]",
                "[9,8,null,null,null,null,null,null,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,null,null,null,null,null,null,null,null,8,9,10]",
                "[10,9,8,null,null,null,null,null,null,null,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[3,2,1]",
                "[]",
                "[1]",
                "[4,5,2,3,1]",
                "[1,2,3,4,5]",
                "[3,4,2,5,1]",
                "[5,4,3,2,1]",
                "[4,5,2,7,9,8,6,10,3,1]",
                "[1,3,2,6,8,9,7,10,5,4]",
                "[3,2,1,5,4]",
                "[1,3,2,5,4]",
                "[4,3,2,1,6,5]",
                "[1,3,2,6,5,4]",
                "[5,4,3,2,1,7,6]",
                "[1,3,2,6,7,5,4]",
                "[5,4,3,2,1,7,6,9,8]",
                "[1,3,2,6,7,5,4,9,8]",
                "[8,9,7,6,5,4,3,2,1]",
                "[1,3,2,6,5,4,7,9,8]",
                "[8,9,7,6,5,4,3,2,1,10]",
                "[1,3,2,6,5,4,7,9,8,10]"
            ]
        }
    },
    "146": {
        "title": "LRU Cache",
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class with the following methods: \n\n- `LRUCache(int capacity)`: Initialize the LRU cache with a positive size `capacity`. \n- `int get(int key)`: Return the value of the `key` if the key exists, otherwise return `-1`. \n- `void put(int key, int value)`: Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, evict the least recently used key. \n\nThe functions `get` and `put` must each run in O(1) average time complexity.",
        "example": "Example:\n\nInput:\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput:\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation:\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure",
            "Cache"
        ],
        "test_cases": {
            "inputs": [
                "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]",
                "[\"LRUCache\", \"put\", \"get\", \"put\", \"get\", \"get\"]\n[[1], [2, 1], [2], [3, 2], [2], [3]]",
                "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"put\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [4, 4], [2]]",
                "[\"LRUCache\", \"put\", \"put\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [3, 3], [1], [2], [3]]",
                "[\"LRUCache\", \"put\", \"put\", \"put\", \"put\", \"get\", \"get\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [3, 3], [4, 4], [1], [2], [3], [4], [5]]"
            ],
            "outputs": [
                "[null, null, null, 1, null, -1, null, -1, 3, 4]",
                "[null, null, 1, null, -1, 2]",
                "[null, null, null, 1, null, null, -1]",
                "[null, null, null, null, -1, 2, 3]",
                "[null, null, null, null, null, -1, 2, 3, 4, -1]"
            ]
        }
    },
    "147": {
        "title": "Insertion Sort Linked List",
        "description": "Given the `head` of a singly linked list, sort the list using **insertion sort**, and return the sorted list's head. Implement the insertion sort algorithm to sort the linked list in ascending order.",
        "example": "Example:\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExplanation: After sorting the linked list using insertion sort, the resulting list is [1,2,3,4].\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExplanation: After sorting the linked list using insertion sort, the resulting list is [-1,0,3,4,5].",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        4,
                        2,
                        1,
                        3
                    ]
                },
                {
                    "head": [
                        -1,
                        5,
                        3,
                        4,
                        0
                    ]
                },
                {
                    "head": [
                        1
                    ]
                },
                {
                    "head": [
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "head": [
                        5,
                        4,
                        3,
                        2,
                        1,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5
                    ]
                },
                {
                    "head": [
                        1,
                        3,
                        5,
                        2,
                        4,
                        6
                    ]
                },
                {
                    "head": [
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0
                    ]
                },
                {
                    "head": [
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1,
                        0
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        -1000,
                        -2000,
                        -3000,
                        -4000,
                        -5000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        -1000,
                        -2000,
                        -3000,
                        -4000,
                        -5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        -1000,
                        -2000,
                        -3000,
                        -4000,
                        -5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000,
                        -10000,
                        -20000,
                        -30000,
                        -40000,
                        -50000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        -1000,
                        -2000,
                        -3000,
                        -4000,
                        -5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000,
                        -10000,
                        -20000,
                        -30000,
                        -40000,
                        -50000,
                        100000,
                        200000,
                        300000,
                        400000,
                        500000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        0,
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        -10,
                        -20,
                        -30,
                        -40,
                        -50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        -1000,
                        -2000,
                        -3000,
                        -4000,
                        -5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000,
                        -10000,
                        -20000,
                        -30000,
                        -40000,
                        -50000,
                        100000,
                        200000,
                        300000,
                        400000,
                        500000,
                        -100000,
                        -200000,
                        -300000,
                        -400000,
                        -500000
                    ]
                }
            ],
            "outputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "head": [
                        -1,
                        0,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "head": [
                        1
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "head": [
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "head": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "head": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "head": [
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50
                    ]
                },
                {
                    "head": [
                        -50,
                        -40,
                        -30,
                        -20,
                        -10,
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50
                    ]
                },
                {
                    "head": [
                        -500,
                        -400,
                        -300,
                        -200,
                        -100,
                        -50,
                        -40,
                        -30,
                        -20,
                        -10,
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        100,
                        200,
                        300,
                        400,
                        500
                    ]
                },
                {
                    "head": [
                        -5000,
                        -4000,
                        -3000,
                        -2000,
                        -1000,
                        -500,
                        -400,
                        -300,
                        -200,
                        -100,
                        -50,
                        -40,
                        -30,
                        -20,
                        -10,
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000
                    ]
                },
                {
                    "head": [
                        -50000,
                        -40000,
                        -30000,
                        -20000,
                        -10000,
                        -5000,
                        -4000,
                        -3000,
                        -2000,
                        -1000,
                        -500,
                        -400,
                        -300,
                        -200,
                        -100,
                        -50,
                        -40,
                        -30,
                        -20,
                        -10,
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000
                    ]
                },
                {
                    "head": [
                        -500000,
                        -400000,
                        -300000,
                        -200000,
                        -100000,
                        -50000,
                        -40000,
                        -30000,
                        -20000,
                        -10000,
                        -5000,
                        -4000,
                        -3000,
                        -2000,
                        -1000,
                        -500,
                        -400,
                        -300,
                        -200,
                        -100,
                        -50,
                        -40,
                        -30,
                        -20,
                        -10,
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000,
                        100000,
                        200000,
                        300000,
                        400000,
                        500000
                    ]
                },
                {
                    "head": [
                        -5000000,
                        -4000000,
                        -3000000,
                        -2000000,
                        -1000000,
                        -500000,
                        -400000,
                        -300000,
                        -200000,
                        -100000,
                        -50000,
                        -40000,
                        -30000,
                        -20000,
                        -10000,
                        -5000,
                        -4000,
                        -3000,
                        -2000,
                        -1000,
                        -500,
                        -400,
                        -300,
                        -200,
                        -100,
                        -50,
                        -40,
                        -30,
                        -20,
                        -10,
                        -5,
                        -4,
                        -3,
                        -2,
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        30,
                        40,
                        50,
                        100,
                        200,
                        300,
                        400,
                        500,
                        1000,
                        2000,
                        3000,
                        4000,
                        5000,
                        10000,
                        20000,
                        30000,
                        40000,
                        50000,
                        100000,
                        200000,
                        300000,
                        400000,
                        500000,
                        1000000,
                        2000000,
                        3000000,
                        4000000,
                        5000000
                    ]
                }
            ]
        }
    },
    "148": {
        "title": "Sort Linked List",
        "description": "Given the `head` of a linked list, return the list after sorting it in ascending order.",
        "example": "Example 1:\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExample 3:\n\nInput: head = []\nOutput: []",
        "level": "Medium",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[4,2,1,3]",
                "[-1,5,3,4,0]",
                "[]",
                "[1]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,3,5,7,9,2,4,6,8,10]",
                "[10,8,6,4,2,9,7,5,3,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[15,13,11,9,7,5,3,1,14,12,10,8,6,4,2]",
                "[2,4,6,8,10,12,14,1,3,5,7,9,11,13,15]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1,1,1,2]",
                "[2,1,1,1,1,1,1,1,1,1]",
                "[1,2,1,1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1,1,1,1,2]",
                "[2,1,1,1,1,1,1,1,1,1,1]"
            ],
            "outputs": [
                "[1,2,3,4]",
                "[-1,0,3,4,5]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[0,1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1,1,1,2]",
                "[1,1,1,1,1,1,1,1,1,2]",
                "[1,1,1,1,1,1,1,1,1,2]",
                "[1,1,1,1,1,1,1,1,1,2]",
                "[1,1,1,1,1,1,1,1,1,2]",
                "[1,1,1,1,1,1,1,1,1,2]"
            ]
        }
    },
    "149": {
        "title": "Maximum Points on a Line",
        "description": "Given an array of points where each point is represented as [x, y] coordinates on the X-Y plane, find the maximum number of points that lie on the same straight line.",
        "example": "Example 1:\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\nExplanation: All three points lie on the same line.\n\nExample 2:\n\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\nExplanation: The maximum number of points that lie on the same line is 4.\n\n",
        "level": "Medium",
        "tags": [
            "Math",
            "Geometry",
            "Hash Table"
        ],
        "test_cases": {
            "inputs": [
                "[[1,1],[2,2],[3,3]]",
                "[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
                "[[0,0],[1,1],[0,0]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50]]"
            ],
            "outputs": [
                "3",
                "4",
                "3",
                "5",
                "10",
                "15",
                "20",
                "25",
                "30",
                "35"
            ]
        }
    },
    "150": {
        "title": "Evaluate Reverse Polish Notation",
        "description": "You are given an array of strings `tokens` that represents an arithmetic expression in a Reverse Polish Notation. Evaluate the expression and return an integer that represents the value of the expression. The valid operators are '+', '-', '*', and '/'. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation. The answer and all the intermediate calculations can be represented in a 32-bit integer.",
        "example": "Example:\n\nInput: tokens = [\"2\", \"1\", \"+\", \"3\", \"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9",
        "level": "Medium",
        "tags": [
            "Stack",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                [
                    "2",
                    "1",
                    "+",
                    "3",
                    "*"
                ],
                [
                    "4",
                    "13",
                    "5",
                    "/",
                    "+"
                ],
                [
                    "10",
                    "6",
                    "9",
                    "3",
                    "+",
                    "-11",
                    "*",
                    "/",
                    "*",
                    "17",
                    "+",
                    "5",
                    "+"
                ],
                [
                    "5",
                    "2",
                    "*",
                    "10",
                    "3",
                    "/",
                    "+",
                    "4",
                    "-"
                ],
                [
                    "3",
                    "4",
                    "+",
                    "2",
                    "*",
                    "1",
                    "+"
                ],
                [
                    "4",
                    "2",
                    "5",
                    "*",
                    "+",
                    "1",
                    "3",
                    "2",
                    "*",
                    "+",
                    "/"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-"
                ],
                [
                    "4",
                    "13",
                    "5",
                    "/",
                    "+",
                    "2",
                    "3",
                    "*",
                    "-"
                ],
                [
                    "10",
                    "6",
                    "9",
                    "3",
                    "+",
                    "-11",
                    "*",
                    "/",
                    "*",
                    "17",
                    "+",
                    "5",
                    "+",
                    "2",
                    "3",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+",
                    "20",
                    "21",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+",
                    "20",
                    "21",
                    "*",
                    "-",
                    "22",
                    "23",
                    "*",
                    "+"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+",
                    "20",
                    "21",
                    "*",
                    "-",
                    "22",
                    "23",
                    "*",
                    "+",
                    "24",
                    "25",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+",
                    "20",
                    "21",
                    "*",
                    "-",
                    "22",
                    "23",
                    "*",
                    "+",
                    "24",
                    "25",
                    "*",
                    "-",
                    "26",
                    "27",
                    "*",
                    "+"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+",
                    "20",
                    "21",
                    "*",
                    "-",
                    "22",
                    "23",
                    "*",
                    "+",
                    "24",
                    "25",
                    "*",
                    "-",
                    "26",
                    "27",
                    "*",
                    "+",
                    "28",
                    "29",
                    "*",
                    "-"
                ],
                [
                    "2",
                    "3",
                    "+",
                    "4",
                    "*",
                    "5",
                    "-",
                    "6",
                    "7",
                    "*",
                    "+",
                    "8",
                    "9",
                    "*",
                    "-",
                    "10",
                    "11",
                    "*",
                    "+",
                    "12",
                    "13",
                    "*",
                    "-",
                    "14",
                    "15",
                    "*",
                    "+",
                    "16",
                    "17",
                    "*",
                    "-",
                    "18",
                    "19",
                    "*",
                    "+",
                    "20",
                    "21",
                    "*",
                    "-",
                    "22",
                    "23",
                    "*",
                    "+",
                    "24",
                    "25",
                    "*",
                    "-",
                    "26",
                    "27",
                    "*",
                    "+",
                    "28",
                    "29",
                    "*",
                    "-",
                    "30",
                    "31",
                    "*",
                    "+"
                ]
            ],
            "outputs": [
                9,
                6,
                22,
                17,
                9,
                6,
                15,
                -12,
                -10,
                16,
                7,
                -1,
                11,
                0,
                16,
                -9,
                7,
                -2,
                13,
                -17
            ]
        }
    },
    "151": {
        "title": "Reverse Words in a String",
        "description": "Given an input string `s`, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
        "example": "Example:\n\nInput: s = \"the sky is blue \"\nOutput: \"blue is sky the\"\n\nInput: s = \"  hello world   \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n\nInput: s = \"a good   example \"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.",
        "level": "Easy",
        "tags": [
            "string"
        ],
        "test_cases": {
            "inputs": [
                "\"the sky is blue \"",
                "\"  hello world   \"",
                "\"a good   example \"",
                "\"coding is fun\"",
                "\"  reverse words  \"",
                "\"  multiple   spaces  \"",
                "\"  single word  \"",
                "\"  \"",
                "\"a\"",
                "\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"",
                "\"  a b c d e f g h i j k l m n o p q r s t u v w x y z  \""
            ],
            "outputs": [
                "\"blue is sky the\"",
                "\"world hello\"",
                "\"example good a\"",
                "\"fun is coding\"",
                "\"words reverse\"",
                "\"spaces multiple\"",
                "\"word single\"",
                "\"\"",
                "\"a\"",
                "\"z y x w v u t s r q p o n m l k j i h g f e d c b a\"",
                "\"z y x w v u t s r q p o n m l k j i h g f e d c b a\""
            ]
        }
    },
    "152": {
        "title": "Largest Subarray Product",
        "description": "Given an integer array `nums`, find a subarray that has the largest product, and return the product. The task is to find the maximum product of a subarray in the given array.",
        "example": "Example:\n\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: The subarray [2,3] has the largest product 6.\n\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because the subarray [-2,-1] is not a valid subarray.",
        "level": "Medium",
        "tags": [
            "array",
            "subarray",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    -2,
                    4
                ],
                [
                    -2,
                    0,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    -1,
                    -2,
                    -3,
                    -4,
                    -5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0,
                    1,
                    -1,
                    0
                ]
            ],
            "outputs": [
                6,
                0,
                120,
                120,
                0,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120,
                120
            ]
        }
    },
    "153": {
        "title": "Minimum Element in Rotated Sorted Array",
        "description": "Given a sorted rotated array `nums` of unique elements, find the minimum element in the array. The array is rotated between `1` and `n` times. Implement an algorithm that runs in `O(log n)` time complexity.",
        "example": "Example:\n\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.",
        "level": "Medium",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    4,
                    5,
                    1,
                    2
                ],
                [
                    4,
                    5,
                    6,
                    7,
                    0,
                    1,
                    2
                ],
                [
                    11,
                    13,
                    15,
                    17
                ],
                [
                    1
                ],
                [
                    2,
                    1
                ],
                [
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4
                ],
                [
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1
                ],
                [
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2
                ],
                [
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1
                ]
            ],
            "outputs": [
                1,
                0,
                11,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "154": null,
    "155": {
        "title": "Min Stack",
        "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.",
        "example": "Implement the `MinStack` class:\n\n*   `MinStack()` initializes the stack object.\n*   `void push(int val)` pushes the element `val` onto the stack.\n*   `void pop()` removes the element on the top of the stack.\n*   `int top()` gets the top element of the stack.\n*   `int getMin()` retrieves the minimum element in the stack.\n\nYou must implement a solution with `O(1)` time complexity for each function.\n\n**Example 1:**\n\n**Input**\n[ \"MinStack \", \"push \", \"push \", \"push \", \"getMin \", \"pop \", \"top \", \"getMin \"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\n**Output**\n[null,null,null,null,-3,null,0,-2]\n\n**Explanation**\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n**Constraints:**\n\n*   `-231 <= val <= 231 - 1`\n*   Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks.\n*   At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.",
        "level": "Medium",
        "tags": [
            "stack",
            "data structure",
            "min element"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    -2
                ],
                [
                    0
                ],
                [
                    -3
                ],
                [],
                [],
                [],
                []
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "-3",
                "null",
                "0",
                "-2"
            ]
        }
    },
    "156": {
        "title": "Upside Down Binary Tree",
        "description": "Given the `root` of a binary tree, turn the tree upside down and return the new root. You can turn a binary tree upside down with the following steps: 1. The original left child becomes the new root. 2. The original root becomes the new right child. 3. The original right child becomes the new left child. The mentioned steps are done level by level. It is guaranteed that every right node has a sibling (a left node with the same parent) and has no children.",
        "example": "Example 1:\n\nInput: root = [1,2,3,4,5]\nOutput: [4,5,2,null,null,3,1]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "binary tree",
            "tree traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[]",
                "[1]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[4,5,2,null,null,3,1]",
                "[]",
                "[1]",
                "[2,3,1]",
                "[4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "157": {
        "title": "Read N Characters Given Read4",
        "description": "You are given a file and a method `read4` that reads four consecutive characters from the file and writes them into the buffer array `buf4`. The `read4` method returns the number of actual characters read. Implement a method `read` that reads `n` characters from the file using the `read4` method and stores them in the buffer array `buf`. You cannot directly manipulate the file, and the `read` function will only be called once for each test case. Return the number of actual characters read.",
        "example": "Given the file `abcde ` and `n = 4`, after calling the `read` method, `buf` should contain `abc `. We read a total of 3 characters from the file, so the expected output is 3.",
        "level": "Medium",
        "tags": [
            "string",
            "file",
            "buffer"
        ],
        "test_cases": {
            "inputs": [
                {
                    "file": "abc ",
                    "n": 4
                },
                {
                    "file": "abcde ",
                    "n": 5
                },
                {
                    "file": "abcdABCD1234 ",
                    "n": 12
                },
                {
                    "file": "Hello, world! ",
                    "n": 10
                },
                {
                    "file": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
                    "n": 30
                },
                {
                    "file": "1234567890 ",
                    "n": 5
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ",
                    "n": 52
                },
                {
                    "file": " ",
                    "n": 1
                },
                {
                    "file": "This is a test file. ",
                    "n": 20
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 62
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 100
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 500
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 1000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 10000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 100000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 1000000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 10000000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 100000000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 1000000000
                },
                {
                    "file": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ",
                    "n": 10000000000
                }
            ],
            "outputs": [
                3,
                5,
                12,
                10,
                30,
                5,
                52,
                1,
                20,
                62,
                62,
                62,
                62,
                62,
                62,
                62,
                62,
                62,
                62,
                62
            ]
        }
    },
    "158": {
        "title": "Read N Characters Given Read4",
        "description": "Given a file and assume that you can only read the file using a given method read4, implement a method read to read n characters. Your method read may be called multiple times.",
        "example": "Example 1:\n\nInput: file = \"abc \", queries = [1,2,1]\nOutput: [1,2,0]\nExplanation: The test case represents the following scenario:\nFile file( \"abc \");\nSolution sol;\nsol.read(buf, 1); // After calling your read method, buf should contain  \"a \". We read a total of 1 character from the file, so return 1.\nsol.read(buf, 2); // Now buf should contain  \"bc \". We read a total of 2 characters from the file, so return 2.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\nAssume buf is allocated and guaranteed to have enough space for storing all characters from the file.\n\nExample 2:\n\nInput: file =  \"abc \", queries = [4,1]\nOutput: [3,0]\nExplanation: The test case represents the following scenario:\nFile file( \"abc \");\nSolution sol;\nsol.read(buf, 4); // After calling your read method, buf should contain  \"abc \". We read a total of 3 characters from the file, so return 3.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.",
        "level": "Medium",
        "tags": [
            "string",
            "file",
            "buffer"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abc ",
                    [
                        1,
                        2,
                        1
                    ]
                ],
                [
                    "abc ",
                    [
                        4,
                        1
                    ]
                ],
                [
                    "abcdefg ",
                    [
                        2,
                        3,
                        4,
                        1
                    ]
                ],
                [
                    "hello world ",
                    [
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    "1234567890 ",
                    [
                        10,
                        10,
                        10,
                        10,
                        10
                    ]
                ],
                [
                    " ",
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz ",
                    [
                        26,
                        26,
                        26,
                        26,
                        26
                    ]
                ],
                [
                    "ABCDEFGHIJKLMNOPQRSTUVWXYZ ",
                    [
                        26,
                        26,
                        26,
                        26,
                        26
                    ]
                ],
                [
                    "!@#$%^&*() ",
                    [
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    "`~{}[]:;\"'<>,.?/ ",
                    [
                        10,
                        10,
                        10,
                        10,
                        10
                    ]
                ]
            ],
            "outputs": [
                [
                    1,
                    2,
                    0
                ],
                [
                    3,
                    0
                ],
                [
                    2,
                    3,
                    4,
                    1
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    0
                ],
                [
                    10,
                    10,
                    10,
                    10,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    26,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    26,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    5,
                    5,
                    0,
                    0,
                    0
                ],
                [
                    10,
                    10,
                    0,
                    0,
                    0
                ]
            ]
        }
    },
    "159": {
        "title": "Longest Substring with At Most Two Distinct Characters",
        "description": "Given a string `s`, find the length of the longest substring that contains at most two distinct characters.",
        "example": "Example:\n\nInput: s = \"eceba\"\nOutput: 3\nExplanation: The longest substring with at most two distinct characters is \"ece\" with a length of 3.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "hashmap"
        ],
        "test_cases": {
            "inputs": [
                "\"eceba\"",
                "\"ccaabbb\"",
                "\"abcabcabc\"",
                "\"aabbbccdd\"",
                "\"aaaaaa\"",
                "\"abababab\"",
                "\"\"",
                "\"a\"",
                "\"aa\"",
                "\"aaa\"",
                "\"aaaa\"",
                "\"aaaaa\"",
                "\"aaaaaa\"",
                "\"aaaaaaa\"",
                "\"aaaaaaaa\"",
                "\"aaaaaaaaa\"",
                "\"aaaaaaaaaa\"",
                "\"aaaaaaaaaaa\"",
                "\"aaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaaa\""
            ],
            "outputs": [
                "3",
                "5",
                "9",
                "6",
                "6",
                "8",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13"
            ]
        }
    },
    "160": {
        "title": "Intersection of Two Linked Lists",
        "description": "Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.\n\nFor example, the following two linked lists begin to intersect at node `c1`:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\n\n**Note** that the linked lists must **retain their original structure** after the function returns.\n\n**Custom Judge:**\n\nThe inputs to the **judge** are given as follows (your program is **not** given these inputs):\n\n- `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node.\n- `listA` - The first linked list.\n- `listB` - The second linked list.\n- `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node.\n- `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.",
        "example": "Example:\n\n**Input:** intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n**Output:** Intersected at '8'\n**Explanation:** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "intersectVal": 8,
                    "listA": [
                        4,
                        1,
                        8,
                        4,
                        5
                    ],
                    "listB": [
                        5,
                        6,
                        1,
                        8,
                        4,
                        5
                    ],
                    "skipA": 2,
                    "skipB": 3
                },
                {
                    "intersectVal": 2,
                    "listA": [
                        1,
                        9,
                        1,
                        2,
                        4
                    ],
                    "listB": [
                        3,
                        2,
                        4
                    ],
                    "skipA": 3,
                    "skipB": 1
                },
                {
                    "intersectVal": 0,
                    "listA": [
                        2,
                        6,
                        4
                    ],
                    "listB": [
                        1,
                        5
                    ],
                    "skipA": 3,
                    "skipB": 2
                }
            ],
            "outputs": [
                "Intersected at '8'",
                "Intersected at '2'",
                "No intersection"
            ]
        }
    },
    "161": {
        "title": "One Edit Distance",
        "description": "Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`. A string `s` is said to be one distance apart from a string `t` if you can:\n\n- Insert **exactly one** character into `s` to get `t`.\n- Delete **exactly one** character from `s` to get `t`.\n- Replace **exactly one** character of `s` with **a different character** to get `t`.",
        "example": "Example:\n\nInput: s = \"ab\", t = \"acb\"\nOutput: true\nExplanation: We can insert 'c' into s to get t.",
        "level": "Easy",
        "tags": [
            "string",
            "editing"
        ],
        "test_cases": {
            "inputs": [
                "\"ab\", \"acb\"",
                "\"\", \"\"",
                "\"abc\", \"ab\"",
                "\"abc\", \"abcd\"",
                "\"abc\", \"abdc\"",
                "\"abc\", \"ac\"",
                "\"abc\", \"bc\"",
                "\"abc\", \"abec\"",
                "\"abc\", \"abf\"",
                "\"abc\", \"abg\"",
                "\"abc\", \"abhc\"",
                "\"abc\", \"abij\"",
                "\"abc\", \"abjk\"",
                "\"abc\", \"abkl\"",
                "\"abc\", \"ablm\"",
                "\"abc\", \"abmn\"",
                "\"abc\", \"abno\"",
                "\"abc\", \"abop\"",
                "\"abc\", \"abpq\"",
                "\"abc\", \"abqr\""
            ],
            "outputs": [
                "true",
                "false",
                "false",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "162": {
        "title": "Peak Element",
        "description": "A peak element is an element that is strictly greater than its neighbors. Given a 0-indexed integer array nums, find a peak element and return its index. If the array contains multiple peaks, return the index to any of the peaks. You may imagine that nums[-1] = nums[n] = -\u221e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array. Write an algorithm that runs in O(log n) time.",
        "example": "Example 1:\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n\nExample 2:\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.",
        "level": "Medium",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    1,
                    3,
                    5,
                    6,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    10
                ]
            ],
            "outputs": [
                2,
                5,
                4,
                0,
                0,
                1,
                8,
                0,
                8,
                9
            ]
        }
    },
    "163": null,
    "164": {
        "title": "Maximum Successive Difference",
        "description": "Given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0. You must write an algorithm that runs in linear time and uses linear extra space.",
        "example": "Example:\n\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    6,
                    9,
                    1
                ],
                [
                    10
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    100,
                    1000,
                    10000
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ]
            ],
            "outputs": [
                3,
                0,
                0,
                1,
                1,
                100,
                900,
                5,
                2,
                2
            ]
        }
    },
    "165": {
        "title": "Compare Version Numbers",
        "description": "Given two version numbers, `version1` and `version2`, compare them. Version numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers. To compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`. Return the following: If `version1 < version2`, return `-1`. If `version1 > version2`, return `1`. Otherwise, return `0`.",
        "example": "Example:\n\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".",
        "level": "Easy",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"1.01\"",
                "\"1.001\"",
                "\"1.0\"",
                "\"1.0.0\"",
                "\"0.1\"",
                "\"1.1\"",
                "\"1.0.1\"",
                "\"1.1.0\"",
                "\"1.2.3\"",
                "\"2.0\"",
                "\"2.0.0\"",
                "\"2.0.1\"",
                "\"2.1\"",
                "\"2.1.0\"",
                "\"2.1.1\"",
                "\"10.6.5\"",
                "\"10.6.5.0\"",
                "\"10.6.5.1\"",
                "\"10.6.5.10\"",
                "\"10.6.5.11\""
            ],
            "outputs": [
                "0",
                "0",
                "0",
                "0",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
            ]
        }
    },
    "166": {
        "title": "Fraction to String",
        "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses. If multiple answers are possible, return any of them. It is guaranteed that the length of the answer string is less than 104 for all the given inputs.",
        "example": "Example:\n\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"\n\nInput: numerator = 2, denominator = 1\nOutput: \"2\"\n\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"",
        "level": "Medium",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2
                ],
                [
                    2,
                    1
                ],
                [
                    4,
                    333
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    3
                ],
                [
                    5,
                    2
                ],
                [
                    10,
                    7
                ],
                [
                    22,
                    7
                ],
                [
                    1,
                    9
                ],
                [
                    3,
                    8
                ],
                [
                    7,
                    11
                ],
                [
                    17,
                    19
                ],
                [
                    123,
                    456
                ],
                [
                    987,
                    654
                ],
                [
                    1000,
                    3
                ],
                [
                    9999,
                    10000
                ],
                [
                    123456,
                    789
                ],
                [
                    987654,
                    321
                ],
                [
                    111111,
                    999999
                ]
            ],
            "outputs": [
                "0.5",
                "2",
                "0.(012)",
                "0",
                "0.(3)",
                "2.5",
                "1.(428571)",
                "3.(142857)",
                "0.(1)",
                "0.375",
                "0.(63)",
                "0.(894736842105263157)",
                "0.(270833333333333333)",
                "0.(270833333333333333)",
                "333.(333333333333333333)",
                "3333.(333333333333333333)",
                "156.(25)",
                "307.(692307692307692307)",
                "0.(111111)",
                "0.(111111)"
            ]
        }
    },
    "167": {
        "title": "Two Sum II - Input array is sorted",
        "description": "Given a 1-indexed array of integers `numbers` that is already sorted in non-decreasing order, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`.\n\nReturn the indices of the two numbers, `index1` and `index2`, added by one as an integer array `[index1, index2]` of length 2.\n\nYour solution must use only constant extra space.",
        "example": "Example 1:\n\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n\nExample 2:\n\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n\nExample 3:\n\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[2,7,11,15], 9",
                "[2,3,4], 6",
                "[-1,0], -1",
                "[1,2,3,4,5], 9",
                "[-5,-3,0,1,3,6,9,12,15,18], 9",
                "[1,2,3,4,5,6,7,8,9,10], 17",
                "[-10,-5,0,5,10,15,20,25,30,35], 25",
                "[1,3,5,7,9,11,13,15,17,19], 20",
                "[-1000,-900,-800,-700,-600,-500,-400,-300,-200,-100], -100",
                "[0,0,0,0,0,0,0,0,0,0], 0",
                "[1,1,1,1,1,1,1,1,1,1], 2",
                "[1,2,3,4,5,6,7,8,9,10], 11",
                "[-10,-5,0,5,10,15,20,25,30,35], 45",
                "[1,3,5,7,9,11,13,15,17,19], 18",
                "[-1000,-900,-800,-700,-600,-500,-400,-300,-200,-100], -1000",
                "[0,0,0,0,0,0,0,0,0,0], 10",
                "[1,1,1,1,1,1,1,1,1,1], 1",
                "[1,2,3,4,5,6,7,8,9,10], 5",
                "[-10,-5,0,5,10,15,20,25,30,35], 0",
                "[1,3,5,7,9,11,13,15,17,19], 16"
            ],
            "outputs": [
                "[1,2]",
                "[1,3]",
                "[1,2]",
                "[4,5]",
                "[2,6]",
                "[7,10]",
                "[4,6]",
                "[8,9]",
                "[9,10]",
                "[1,2]",
                "[1,2]",
                "[10,11]",
                "[5,10]",
                "[8,9]",
                "[1,10]",
                "[1,2]",
                "[1,5]",
                "[1,6]",
                "[1,8]",
                "[3,9]"
            ]
        }
    },
    "168": {
        "title": "Excel Sheet Column Title",
        "description": "Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet. The column title is represented by a string of uppercase English letters. Each letter corresponds to a column number, where A is 1, B is 2, ..., Z is 26, AA is 27, AB is 28, and so on.",
        "example": "For example, if the columnNumber is 1, the corresponding column title is 'A'.\n\n**Input:**\ncolumnNumber = 1\n**Output:**\n'A'\n\nIf the columnNumber is 28, the corresponding column title is 'AB'.\n\n**Input:**\ncolumnNumber = 28\n**Output:**\n'AB'\n\nIf the columnNumber is 701, the corresponding column title is 'ZY'.\n\n**Input:**\ncolumnNumber = 701\n**Output:**\n'ZY'",
        "level": "Easy",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                1,
                28,
                701,
                52,
                100,
                26,
                27,
                1000,
                10000,
                123456,
                987654,
                231,
                456,
                789,
                999,
                100000,
                999999,
                1234567,
                9876543,
                23123123
            ],
            "outputs": [
                "A",
                "AB",
                "ZY",
                "AZ",
                "CV",
                "Z",
                "AA",
                "ALL",
                "NTP",
                "AICCC",
                "HJHJH",
                "HJ",
                "RM",
                "AD",
                "ALLL",
                "CFD",
                "HJHJHJ",
                "LJHJHJ",
                "HJHJHJH",
                "HJHJHJHJ"
            ]
        }
    },
    "169": null,
    "170": null,
    "171": {
        "title": "Excel Sheet Column Number",
        "description": "Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return its corresponding column number. Each column title consists of uppercase English letters, where 'A' represents 1, 'B' represents 2, and so on. The column titles can also have multiple letters, such as 'AA' representing 27 and 'AB' representing 28.",
        "example": "For example, if the column title is 'AB', the corresponding column number is 28.\n\n**Input:** columnTitle = 'AB'\n**Output:** 28",
        "level": "Easy",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                "'A'",
                "'B'",
                "'C'",
                "'Z'",
                "'AA'",
                "'AB'",
                "'ZY'",
                "'FXSHRXW'"
            ],
            "outputs": [
                "1",
                "2",
                "3",
                "26",
                "27",
                "28",
                "701",
                "2147483647"
            ]
        }
    },
    "172": {
        "title": "Trailing Zeroes in Factorial",
        "description": "Given an integer `n`, return the number of trailing zeroes in `n!`. The factorial of a number `n` is the product of all positive integers less than or equal to `n`. For example, `5! = 5 * 4 * 3 * 2 * 1 = 120`. A trailing zero is a zero that appears at the end of a number. For example, `120` has one trailing zero. Your task is to implement a function `trailingZeroes(n: int) -> int` that calculates the number of trailing zeroes in `n!`.",
        "example": "Example:\n\nInput: n = 5\nOutput: 1\nExplanation: 5! = 120, which has one trailing zero.",
        "level": "Easy",
        "tags": [
            "Math",
            "Factorial",
            "Counting"
        ],
        "test_cases": {
            "inputs": [
                3,
                5,
                10,
                15,
                20,
                25,
                30,
                50,
                100,
                1000,
                5000,
                10000,
                100000
            ],
            "outputs": [
                0,
                1,
                2,
                3,
                4,
                6,
                7,
                12,
                24,
                249,
                1249,
                2499,
                24999
            ]
        }
    },
    "173": {
        "title": "Binary Search Tree Iterator",
        "description": "Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST). The `BSTIterator` class should have the following methods:\n\n- `BSTIterator(TreeNode root)`: Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n- `boolean hasNext()`: Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n- `int next()`: Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.",
        "example": "Example:\n\nInput:\n\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\n\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Iterator",
            "In-order Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[[7, 3, 15, null, null, 9, 20]]"
            ],
            "outputs": [
                "[null, 3, 7, true, 9, true, 15, true, 20, false]"
            ]
        }
    },
    "174": {
        "title": "Knight's Minimum Initial Health",
        "description": "The demons have captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n\nReturn the knight's minimum initial health so that he can rescue the princess.\n\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.",
        "example": "Example:\n\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "optimization"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        -5
                    ]
                ],
                [
                    [
                        0
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3
                    ],
                    [
                        -4,
                        -5,
                        -6
                    ],
                    [
                        -7,
                        -8,
                        -9
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        -1000,
                        0,
                        0,
                        0
                    ],
                    [
                        -1000,
                        0,
                        0,
                        0
                    ],
                    [
                        -1000,
                        0,
                        0,
                        0
                    ],
                    [
                        -1000,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1000,
                        0,
                        0,
                        0
                    ],
                    [
                        1000,
                        0,
                        0,
                        0
                    ],
                    [
                        1000,
                        0,
                        0,
                        0
                    ],
                    [
                        1000,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        -1000,
                        -1000,
                        -1000,
                        -1000
                    ],
                    [
                        -1000,
                        -1000,
                        -1000,
                        -1000
                    ],
                    [
                        -1000,
                        -1000,
                        -1000,
                        -1000
                    ],
                    [
                        -1000,
                        -1000,
                        -1000,
                        -1000
                    ]
                ],
                [
                    [
                        1000,
                        1000,
                        1000,
                        1000
                    ],
                    [
                        1000,
                        1000,
                        1000,
                        1000
                    ],
                    [
                        1000,
                        1000,
                        1000,
                        1000
                    ],
                    [
                        1000,
                        1000,
                        1000,
                        1000
                    ]
                ],
                [
                    [
                        -2,
                        0,
                        0,
                        0
                    ],
                    [
                        -5,
                        -10,
                        1,
                        0
                    ],
                    [
                        10,
                        30,
                        -5,
                        0
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        5
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        0
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        -1
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        -1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        -1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        -1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        -1000
                    ]
                ],
                [
                    [
                        -2,
                        -3,
                        3
                    ],
                    [
                        -5,
                        -10,
                        1
                    ],
                    [
                        10,
                        30,
                        1000
                    ]
                ]
            ],
            "outputs": [
                7,
                1,
                6,
                1,
                1001,
                1,
                1001,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "179": {
        "title": "Largest Number Formation",
        "description": "Given a list of non-negative integers `nums`, arrange them in such a way that they form the largest number and return it as a string.",
        "example": "For example, given the list `nums = [10, 2]`, the largest number that can be formed is `210`. Therefore, the output would be the string `\"210\"`.\n\nIn another example, given the list `nums = [3, 30, 34, 5, 9]`, the largest number that can be formed is `9534330`. Therefore, the output would be the string `\"9534330\"`.",
        "level": "Medium",
        "tags": [
            "sorting",
            "string"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    2
                ],
                [
                    3,
                    30,
                    34,
                    5,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    9,
                    99,
                    999,
                    9999
                ],
                [
                    100,
                    200,
                    300,
                    400
                ],
                [
                    5,
                    50,
                    500,
                    5000
                ],
                [
                    12,
                    121
                ],
                [
                    21,
                    212
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    0
                ]
            ],
            "outputs": [
                "210",
                "9534330",
                "0",
                "54321",
                "999999999",
                "400300200100",
                "55005000500",
                "12112",
                "21221",
                "9876543210",
                "9876543210"
            ]
        }
    },
    "186": {
        "title": "Reverse Words in Character Array",
        "description": "Given a character array `s`, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in `s` will be separated by a single space. Your task is to solve the problem in-place, without allocating extra space.",
        "example": "Example:\n\nInput: s = [\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]\nOutput: [\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]\n\nExplanation: The words in the character array are \"the\", \"sky\", and \"is\". Reversing the order of the words gives us \"is\", \"sky\", and \"the\".",
        "level": "Medium",
        "tags": [
            "array",
            "string",
            "in-place"
        ],
        "test_cases": {
            "inputs": [
                "[\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]",
                "[\"a\"]",
                "[\"h\",\"e\",\"l\",\"l\",\"o\",\" \",\"w\",\"o\",\"r\",\"l\",\"d\"]",
                "[\"c\",\"o\",\"d\",\"i\",\"n\",\"g\",\" \",\"i\",\"s\",\" \",\"f\",\"u\",\"n\"]",
                "[\"r\",\"e\",\"v\",\"e\",\"r\",\"s\",\"e\",\" \",\"m\",\"e\"]",
                "[\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\" \",\"i\",\"s\",\" \",\"a\",\"w\",\"e\",\"s\",\"o\",\"m\",\"e\"]",
                "[\"l\",\"e\",\"t\",\"`\",\"s\",\" \",\"g\",\"e\",\"t\",\" \",\"s\",\"t\",\"a\",\"r\",\"t\",\"e\",\"d\"]",
                "[\"t\",\"h\",\"i\",\"s\",\" \",\"i\",\"s\",\" \",\"a\",\" \",\"t\",\"e\",\"s\",\"t\"]",
                "[\"r\",\"e\",\"v\",\"e\",\"r\",\"s\",\"e\",\" \",\"t\",\"h\",\"e\",\" \",\"s\",\"t\",\"r\",\"i\",\"n\",\"g\"]",
                "[\"h\",\"a\",\"p\",\"p\",\"y\",\" \",\"c\",\"o\",\"d\",\"i\",\"n\",\"g\"]",
                "[\"w\",\"e\",\"l\",\"c\",\"o\",\"m\",\"e\",\" \",\"t\",\"o\",\" \",\"t\",\"h\",\"e\",\" \",\"w\",\"o\",\"r\",\"l\",\"d\"]",
                "[\"p\",\"r\",\"a\",\"c\",\"t\",\"i\",\"c\",\"e\",\" \",\"m\",\"a\",\"k\",\"e\",\"s\",\" \",\"p\",\"e\",\"r\",\"f\",\"e\",\"c\",\"t\"]",
                "[\"c\",\"o\",\"d\",\"e\",\" \",\"i\",\"s\",\" \",\"l\",\"i\",\"f\",\"e\"]",
                "[\"l\",\"e\",\"a\",\"r\",\"n\",\" \",\"f\",\"r\",\"o\",\"m\",\" \",\"m\",\"i\",\"s\",\"t\",\"a\",\"k\",\"e\",\"s\"]",
                "[\"i\",\"m\",\"p\",\"r\",\"o\",\"v\",\"e\",\" \",\"y\",\"o\",\"u\",\"r\",\" \",\"s\",\"k\",\"i\",\"l\",\"l\",\"s\"]",
                "[\"s\",\"u\",\"c\",\"c\",\"e\",\"s\",\"s\",\" \",\"c\",\"o\",\"m\",\"e\",\"s\",\" \",\"f\",\"r\",\"o\",\"m\",\" \",\"h\",\"a\",\"r\",\"d\",\" \",\"w\",\"o\",\"r\",\"k\"]",
                "[\"d\",\"o\",\"n\",\"`\",\"t\",\" \",\"g\",\"i\",\"v\",\"e\",\" \",\"u\",\"p\"]",
                "[\"n\",\"e\",\"v\",\"e\",\"r\",\" \",\"s\",\"t\",\"o\",\"p\",\" \",\"l\",\"e\",\"a\",\"r\",\"n\",\"i\",\"n\",\"g\"]",
                "[\"y\",\"o\",\"u\",\" \",\"c\",\"a\",\"n\",\" \",\"d\",\"o\",\" \",\"i\",\"t\"]",
                "[\"b\",\"e\",\"l\",\"i\",\"e\",\"v\",\"e\",\" \",\"i\",\"n\",\" \",\"y\",\"o\",\"u\",\"r\",\"s\",\"e\",\"l\",\"f\"]"
            ],
            "outputs": [
                "[\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]",
                "[\"a\"]",
                "[\"w\",\"o\",\"r\",\"l\",\"d\",\" \",\"h\",\"e\",\"l\",\"l\",\"o\"]",
                "[\"f\",\"u\",\"n\",\" \",\"i\",\"s\",\" \",\"c\",\"o\",\"d\",\"i\",\"n\",\"g\"]",
                "[\"m\",\"e\",\" \",\"r\",\"e\",\"v\",\"e\",\"r\",\"s\",\"e\"]",
                "[\"a\",\"w\",\"e\",\"s\",\"o\",\"m\",\"e\",\" \",\"i\",\"s\",\" \",\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\"]",
                "[\"g\",\"e\",\"t\",\" \",\"s\",\"t\",\"a\",\"r\",\"t\",\"e\",\"d\",\" \",\"l\",\"e\",\"t\",\"`\",\"s\"]",
                "[\"t\",\"e\",\"s\",\"t\",\" \",\"a\",\" \",\"i\",\"s\",\" \",\"t\",\"h\",\"i\",\"s\"]",
                "[\"s\",\"t\",\"r\",\"i\",\"n\",\"g\",\" \",\"t\",\"h\",\"e\",\" \",\"r\",\"e\",\"v\",\"e\",\"r\",\"s\",\"e\"]",
                "[\"c\",\"o\",\"d\",\"i\",\"n\",\"g\",\" \",\"h\",\"a\",\"p\",\"p\",\"y\"]",
                "[\"w\",\"o\",\"r\",\"l\",\"d\",\" \",\"t\",\"h\",\"e\",\" \",\"o\",\"t\",\"o\",\"g\",\"e\",\"r\",\"w\",\"e\",\"l\"]",
                "[\"p\",\"e\",\"r\",\"f\",\"e\",\"c\",\"t\",\" \",\"m\",\"a\",\"k\",\"e\",\"s\",\" \",\"p\",\"r\",\"a\",\"c\",\"t\",\"i\",\"c\",\"e\"]",
                "[\"l\",\"i\",\"f\",\"e\",\" \",\"i\",\"s\",\" \",\"c\",\"o\",\"d\",\"e\"]",
                "[\"m\",\"i\",\"s\",\"t\",\"a\",\"k\",\"e\",\"s\",\" \",\"f\",\"r\",\"o\",\"m\",\" \",\"l\",\"e\",\"a\",\"r\",\"n\"]",
                "[\"s\",\"k\",\"i\",\"l\",\"l\",\"s\",\" \",\"y\",\"o\",\"u\",\"r\",\" \",\"e\",\"v\",\"e\",\"r\",\"p\",\"m\",\"i\"]",
                "[\"w\",\"o\",\"r\",\"k\",\" \",\"h\",\"a\",\"r\",\"d\",\" \",\"f\",\"r\",\"o\",\"m\",\" \",\"s\",\"e\",\"m\",\"o\",\"c\",\"s\",\"s\",\"u\",\"c\"]",
                "[\"u\",\"p\",\" \",\"e\",\"v\",\"i\",\"g\",\"n\",\"o\",\"d\"]",
                "[\"l\",\"e\",\"a\",\"r\",\"n\",\"i\",\"n\",\"g\",\" \",\"s\",\"t\",\"o\",\"p\",\" \",\"n\",\"e\",\"v\",\"e\",\"r\"]",
                "[\"i\",\"t\",\" \",\"o\",\"d\",\"n\",\"`\",\"t\",\" \",\"n\",\"o\",\"d\",\"`\",\"t\",\" \",\"a\",\"c\",\"n\",\"`\",\"t\"]",
                "[\"f\",\"l\",\"e\",\"s\",\"r\",\"u\",\"e\",\"b\",\"i\",\"l\",\"e\",\"v\",\"e\",\" \",\"n\",\"i\",\" \",\"r\",\"u\",\"o\",\"y\",\"s\",\"e\",\"l\",\"f\"]"
            ]
        }
    },
    "187": null,
    "188": {
        "title": "Maximum Profit with at most k Transactions",
        "description": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`. Find the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times. Note that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
        "example": "Example:\n\nInput: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "k": 2,
                    "prices": [
                        2,
                        4,
                        1
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        3,
                        2,
                        6,
                        5,
                        0,
                        3
                    ]
                },
                {
                    "k": 1,
                    "prices": [
                        7,
                        1,
                        5,
                        3,
                        6,
                        4
                    ]
                },
                {
                    "k": 3,
                    "prices": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "k": 0,
                    "prices": [
                        7,
                        6,
                        4,
                        3,
                        1
                    ]
                },
                {
                    "k": 5,
                    "prices": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        1,
                        2,
                        4,
                        2,
                        5,
                        7,
                        2,
                        4,
                        9,
                        0
                    ]
                },
                {
                    "k": 3,
                    "prices": [
                        3,
                        3,
                        5,
                        0,
                        0,
                        3,
                        1,
                        4
                    ]
                },
                {
                    "k": 1,
                    "prices": [
                        1
                    ]
                },
                {
                    "k": 0,
                    "prices": [
                        1
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        1,
                        2
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        2,
                        1
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        1,
                        2,
                        4,
                        2,
                        5,
                        7,
                        2,
                        4,
                        9,
                        0
                    ]
                },
                {
                    "k": 3,
                    "prices": [
                        3,
                        3,
                        5,
                        0,
                        0,
                        3,
                        1,
                        4
                    ]
                },
                {
                    "k": 1,
                    "prices": [
                        1
                    ]
                },
                {
                    "k": 0,
                    "prices": [
                        1
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        1,
                        2
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        2,
                        1
                    ]
                },
                {
                    "k": 2,
                    "prices": [
                        1,
                        2,
                        4,
                        2,
                        5,
                        7,
                        2,
                        4,
                        9,
                        0
                    ]
                },
                {
                    "k": 3,
                    "prices": [
                        3,
                        3,
                        5,
                        0,
                        0,
                        3,
                        1,
                        4
                    ]
                }
            ],
            "outputs": [
                2,
                7,
                5,
                4,
                0,
                4,
                13,
                6,
                0,
                0,
                1,
                0,
                13,
                6,
                0,
                0,
                1,
                0,
                13,
                6
            ]
        }
    },
    "189": {
        "title": "Rotate Array",
        "description": "Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.",
        "example": "Example 1:\n\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\nExample 2:\n\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation:\nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]",
        "level": "Medium",
        "tags": [
            "Array",
            "Rotation"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5,6,7]",
                "[-1,-100,3,99]",
                "[0,0,0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,6,7,8,9,10,11,12,13,14,15]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[10,20,30,40,50,60,70,80,90,100]",
                "[100,200,300,400,500,600,700,800,900,1000]",
                "[1,3,5,7,9,11,13,15,17,19]"
            ],
            "outputs": [
                "[5,6,7,1,2,3,4]",
                "[3,99,-1,-100]",
                "[0,0,0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[9,10,11,12,13,14,15,5,6,7,8]",
                "[1]",
                "[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5]",
                "[90,100,10,20,30,40,50,60,70,80]",
                "[900,1000,100,200,300,400,500,600,700,800]",
                "[19,1,3,5,7,9,11,13,15,17]"
            ]
        }
    },
    "190": {
        "title": "Reverse Bits",
        "description": "Write a function that takes a 32-bit unsigned integer as input and returns the integer obtained by reversing its bits.",
        "example": "For example, if the input is 00000010100101000001111010011100, the output should be 964176192. The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so the reversed bits should be 00111001011110000010100101000000, which is equal to 964176192.",
        "level": "Easy",
        "tags": [
            "Bit Manipulation"
        ],
        "test_cases": {
            "inputs": [
                "00000010100101000001111010011100",
                "11111111111111111111111111111101",
                "00000000000000000000000000000000",
                "11111111111111111111111111111111",
                "10000000000000000000000000000000",
                "01010101010101010101010101010101",
                "00110011001100110011001100110011",
                "00001111000011110000111100001111",
                "11110000111100001111000011110000",
                "10101010101010101010101010101010",
                "11001100110011001100110011001100",
                "00000000000000000000000000000001",
                "11111111111111111111111111111110",
                "10000000000000000000000000000001",
                "01010101010101010101010101010100",
                "00110011001100110011001100110010",
                "00001111000011110000111100001110",
                "11110000111100001111000011110001",
                "10101010101010101010101010101001",
                "11001100110011001100110011001101"
            ],
            "outputs": [
                964176192,
                3221225471,
                0,
                4294967295,
                -2147483648,
                1431655765,
                858993459,
                4026531840,
                4026531840,
                2863311530,
                3221225472,
                -2147483647,
                -1073741825,
                -2147483647,
                2863311536,
                1431655764,
                402653184,
                3221225472,
                2863311529,
                -1073741823
            ]
        }
    },
    "191": null,
    "194": {
        "title": "Transpose Text File",
        "description": "Given a text file `file.txt`, transpose its content. Each row in the file represents a line of text, and each field in a row is separated by a space character. Transpose the content by converting rows into columns and columns into rows. The transposed content should be written back to the file.",
        "example": "For example, if the `file.txt` contains the following content:\n\nname age\nalice 21\nryan 30\n\nThe transposed content should be:\n\nname alice ryan\nage 21 30\n\nExplanation: The rows 'name age', 'alice 21', and 'ryan 30' are transposed to columns 'name alice ryan' and 'age 21 30'.",
        "level": "Medium",
        "tags": [
            "file operations",
            "data manipulation"
        ],
        "test_cases": {
            "inputs": [
                "name age\nalice 21\nryan 30",
                "fruit color\napple red\nbanana yellow\norange orange",
                "country capital\nusa washington\ncanada ottawa\nmexico mexico city"
            ],
            "outputs": [
                "name alice ryan\nage 21 30",
                "fruit apple banana orange\ncolor red yellow orange",
                "country usa canada mexico\ncapital washington ottawa mexico city"
            ]
        }
    },
    "198": {
        "title": "House Robber",
        "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
        "example": "Example:\n\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.",
        "level": "Medium",
        "tags": [
            "Dynamic Programming",
            "Array"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    1
                ],
                [
                    2,
                    7,
                    9,
                    3,
                    1
                ],
                [
                    2,
                    1,
                    1,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    1
                ],
                [
                    10
                ],
                [
                    0
                ],
                [
                    1,
                    2
                ],
                [
                    2,
                    1
                ],
                [
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ]
            ],
            "outputs": [
                4,
                12,
                4,
                3,
                40,
                0,
                30,
                30,
                30,
                30,
                1,
                10,
                0,
                2,
                2,
                2,
                1,
                2,
                2,
                5
            ]
        }
    },
    "199": null,
    "200": {
        "title": "Number of Islands",
        "description": "Given an `m x n` 2D binary grid `grid` which represents a map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
        "example": "Example:\n\nInput: grid = [\n  [\"1\", \"1\", \"1\", \"1\", \"0\"],\n  [\"1\", \"1\", \"0\", \"1\", \"0\"],\n  [\"1\", \"1\", \"0\", \"0\", \"0\"],\n  [\"0\", \"0\", \"0\", \"0\", \"0\"]\n]\nOutput: 1\n\nInput: grid = [\n  [\"1\", \"1\", \"0\", \"0\", \"0\"],\n  [\"1\", \"1\", \"0\", \"0\", \"0\"],\n  [\"0\", \"0\", \"1\", \"0\", \"0\"],\n  [\"0\", \"0\", \"0\", \"1\", \"1\"]\n]\nOutput: 3",
        "level": "Medium",
        "tags": [
            "Array",
            "Graph",
            "DFS",
            "BFS"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        "1",
                        "1",
                        "1",
                        "1",
                        "0"
                    ],
                    [
                        "1",
                        "1",
                        "0",
                        "1",
                        "0"
                    ],
                    [
                        "1",
                        "1",
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "1",
                        "1",
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "1",
                        "1",
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "1",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0",
                        "1",
                        "1"
                    ]
                ],
                [
                    [
                        "1",
                        "0",
                        "1",
                        "0",
                        "1"
                    ],
                    [
                        "0",
                        "1",
                        "0",
                        "1",
                        "0"
                    ],
                    [
                        "1",
                        "0",
                        "1",
                        "0",
                        "1"
                    ],
                    [
                        "0",
                        "1",
                        "0",
                        "1",
                        "0"
                    ]
                ],
                [
                    [
                        "1",
                        "1",
                        "1",
                        "1",
                        "1"
                    ],
                    [
                        "1",
                        "1",
                        "1",
                        "1",
                        "1"
                    ],
                    [
                        "1",
                        "1",
                        "1",
                        "1",
                        "1"
                    ],
                    [
                        "1",
                        "1",
                        "1",
                        "1",
                        "1"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"
                    ]
                ]
            ],
            "outputs": [
                1,
                3,
                8,
                1,
                0
            ]
        }
    },
    "201": {
        "title": "Bitwise AND of Numbers Range",
        "description": "Given two integers `left` and `right` that represent the range `[left, right]`, return the bitwise AND of all numbers in this range, inclusive.",
        "example": "Example:\n\nInput: left = 5, right = 7\nOutput: 4\n\nExplanation: The numbers in the range [5, 7] are 5, 6, and 7. The bitwise AND of these numbers is 4 (0100 in binary).",
        "level": "Medium",
        "tags": [
            "bit manipulation",
            "range",
            "inclusive"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    7
                ],
                [
                    0,
                    0
                ],
                [
                    1,
                    2147483647
                ],
                [
                    10,
                    15
                ],
                [
                    100,
                    100
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    3,
                    3
                ],
                [
                    4,
                    4
                ],
                [
                    5,
                    5
                ],
                [
                    6,
                    6
                ],
                [
                    7,
                    7
                ],
                [
                    8,
                    8
                ],
                [
                    9,
                    9
                ],
                [
                    10,
                    10
                ],
                [
                    11,
                    11
                ],
                [
                    12,
                    12
                ],
                [
                    13,
                    13
                ],
                [
                    14,
                    14
                ],
                [
                    15,
                    15
                ]
            ],
            "outputs": [
                4,
                0,
                0,
                8,
                100,
                0,
                2,
                0,
                4,
                0,
                6,
                0,
                8,
                0,
                10,
                0,
                12,
                0,
                14,
                0
            ]
        }
    },
    "202": {
        "title": "Happy Number",
        "description": "Write a function to determine if a number `n` is a happy number. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy.",
        "example": "Example 1:\n\nInput: n = 19\nOutput: true\nExplanation: 1^2 + 9^2 = 82, 8^2 + 2^2 = 68, 6^2 + 8^2 = 100, 1^2 + 0^2 + 0^2 = 1\n\nExample 2:\n\nInput: n = 2\nOutput: false",
        "level": "Easy",
        "tags": [
            "Math",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                19,
                2,
                7,
                10,
                13,
                20,
                23,
                28,
                31,
                32,
                44,
                49,
                68,
                70,
                79,
                82,
                86,
                91,
                94,
                97
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                false,
                true,
                true,
                false,
                false,
                false,
                true,
                true,
                false,
                true,
                true,
                false,
                false,
                true,
                true
            ]
        }
    },
    "203": {
        "title": "Remove Nodes with Given Value",
        "description": "Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that have `Node.val == val`, and return the new head.",
        "example": "Example 1:\n\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n\nExample 2:\n\nInput: head = [], val = 1\nOutput: []\n\nExample 3:\n\nInput: head = [7,7,7,7], val = 7\nOutput: []",
        "level": "Easy",
        "tags": [
            "linked list",
            "removal"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,6,3,4,5,6]",
                "[]",
                "[7,7,7,7]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]"
            ],
            "outputs": [
                "[1,2,3,4,5]",
                "[]",
                "[]",
                "[1,2,3,4,5]",
                "[]",
                "[]",
                "[2,3,4,5,6]",
                "[1,3,4,5,6]",
                "[1,2,4,5,6]",
                "[1,2,3,5,6]",
                "[1,2,3,4,6]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]"
            ]
        }
    },
    "204": {
        "title": "Count Prime Numbers",
        "description": "Given an integer `n`, return the number of prime numbers that are strictly less than `n`.",
        "example": "Example 1:\n\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.",
        "level": "Easy",
        "tags": [
            "Math",
            "Prime Numbers"
        ],
        "test_cases": {
            "inputs": [
                10,
                0,
                1,
                20,
                100,
                1000,
                10000,
                100000,
                1000000,
                5000000
            ],
            "outputs": [
                4,
                0,
                0,
                8,
                25,
                168,
                1229,
                9592,
                78498,
                348513
            ]
        }
    },
    "205": {
        "title": "Isomorphic Strings",
        "description": "Given two strings `s` and `t`, determine if they are isomorphic. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
        "example": "Example:\n\nInput: s = \"egg\", t = \"add\"\nOutput: true\n\nExplanation: The characters 'e' and 'a' can be replaced with 'a'. The characters 'g' and 'd' can be replaced with 'd'. Therefore, the strings 'egg' and 'add' are isomorphic.\n\nInput: s = \"foo\", t = \"bar\"\nOutput: false\n\nExplanation: The characters 'f' and 'b' cannot be replaced with the same character. Therefore, the strings 'foo' and 'bar' are not isomorphic.",
        "level": "Easy",
        "tags": [
            "String",
            "Hash Table"
        ],
        "test_cases": {
            "inputs": [
                [
                    "egg",
                    "add"
                ],
                [
                    "foo",
                    "bar"
                ],
                [
                    "paper",
                    "title"
                ],
                [
                    "ab",
                    "aa"
                ],
                [
                    "ab",
                    "cd"
                ],
                [
                    "abcd",
                    "efgh"
                ],
                [
                    "abcd",
                    "aabb"
                ],
                [
                    "abcd",
                    "abcd"
                ],
                [
                    "abcd",
                    "abcc"
                ],
                [
                    "abcd",
                    "abca"
                ],
                [
                    "abcd",
                    "abcb"
                ],
                [
                    "abcd",
                    "abcc"
                ],
                [
                    "abcd",
                    "abca"
                ],
                [
                    "abcd",
                    "abcb"
                ],
                [
                    "abcd",
                    "abcc"
                ],
                [
                    "abcd",
                    "abca"
                ],
                [
                    "abcd",
                    "abcb"
                ],
                [
                    "abcd",
                    "abcc"
                ],
                [
                    "abcd",
                    "abca"
                ],
                [
                    "abcd",
                    "abcb"
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "206": {
        "title": "Reverse Linked List",
        "description": "Given the `head` of a singly linked list, reverse the list, and return the reversed list.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\nExample 2:\n\nInput: head = [1,2]\nOutput: [2,1]\n\nExample 3:\n\nInput: head = []\nOutput: []",
        "level": "Easy",
        "tags": [
            "Linked List",
            "Iterative",
            "Recursive"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[1,2]",
                "[]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[5,4,3,2,1]",
                "[1,3,5,7,9]",
                "[2,4,6,8,10]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[5,4,3,2,1]",
                "[2,1]",
                "[]",
                "[1]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[9,7,5,3,1]",
                "[10,8,6,4,2]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]"
            ]
        }
    },
    "207": {
        "title": "Course Prerequisites",
        "description": "You are given a total of `numCourses` courses labeled from `0` to `numCourses - 1`. The prerequisites for each course are given in the form of an array `prerequisites`, where `prerequisites[i] = [ai, bi]` indicates that course `bi` must be taken before course `ai`. Determine if it is possible to finish all the courses.",
        "example": "For example, given `numCourses = 2` and `prerequisites = [[1,0]]`, you can finish all the courses. To take course 1, you need to have finished course 0. Therefore, the output would be `true`.\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\n\nGiven `numCourses = 2` and `prerequisites = [[1,0],[0,1]]`, it is impossible to finish all the courses. To take course 1, you need to have finished course 0, and to take course 0, you need to have finished course 1. Therefore, the output would be `false`.\n\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false",
        "level": "Medium",
        "tags": [
            "Graphs",
            "Topological Sort"
        ],
        "test_cases": {
            "inputs": [
                {
                    "numCourses": 2,
                    "prerequisites": [
                        [
                            1,
                            0
                        ]
                    ]
                },
                {
                    "numCourses": 2,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            0,
                            1
                        ]
                    ]
                },
                {
                    "numCourses": 3,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ]
                    ]
                },
                {
                    "numCourses": 4,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ]
                    ]
                },
                {
                    "numCourses": 4,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            0,
                            3
                        ]
                    ]
                },
                {
                    "numCourses": 5,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ]
                    ]
                },
                {
                    "numCourses": 5,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                },
                {
                    "numCourses": 6,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ]
                    ]
                },
                {
                    "numCourses": 6,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            0,
                            5
                        ]
                    ]
                },
                {
                    "numCourses": 7,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ]
                    ]
                },
                {
                    "numCourses": 7,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            0,
                            6
                        ]
                    ]
                },
                {
                    "numCourses": 8,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ]
                    ]
                },
                {
                    "numCourses": 8,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            0,
                            7
                        ]
                    ]
                },
                {
                    "numCourses": 9,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ]
                    ]
                },
                {
                    "numCourses": 9,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            0,
                            8
                        ]
                    ]
                },
                {
                    "numCourses": 10,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            9,
                            8
                        ]
                    ]
                },
                {
                    "numCourses": 10,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            9,
                            8
                        ],
                        [
                            0,
                            9
                        ]
                    ]
                },
                {
                    "numCourses": 2000,
                    "prerequisites": []
                },
                {
                    "numCourses": 2000,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            9,
                            8
                        ],
                        [
                            0,
                            9
                        ]
                    ]
                },
                {
                    "numCourses": 2000,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            9,
                            8
                        ],
                        [
                            0,
                            9
                        ],
                        [
                            10,
                            11
                        ],
                        [
                            11,
                            12
                        ],
                        [
                            12,
                            13
                        ],
                        [
                            13,
                            14
                        ],
                        [
                            14,
                            15
                        ],
                        [
                            15,
                            16
                        ],
                        [
                            16,
                            17
                        ],
                        [
                            17,
                            18
                        ],
                        [
                            18,
                            19
                        ],
                        [
                            19,
                            20
                        ]
                    ]
                },
                {
                    "numCourses": 2000,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            9,
                            8
                        ],
                        [
                            0,
                            9
                        ],
                        [
                            10,
                            11
                        ],
                        [
                            11,
                            12
                        ],
                        [
                            12,
                            13
                        ],
                        [
                            13,
                            14
                        ],
                        [
                            14,
                            15
                        ],
                        [
                            15,
                            16
                        ],
                        [
                            16,
                            17
                        ],
                        [
                            17,
                            18
                        ],
                        [
                            18,
                            19
                        ],
                        [
                            19,
                            20
                        ],
                        [
                            20,
                            21
                        ],
                        [
                            21,
                            22
                        ],
                        [
                            22,
                            23
                        ],
                        [
                            23,
                            24
                        ],
                        [
                            24,
                            25
                        ],
                        [
                            25,
                            26
                        ],
                        [
                            26,
                            27
                        ],
                        [
                            27,
                            28
                        ],
                        [
                            28,
                            29
                        ],
                        [
                            29,
                            30
                        ]
                    ]
                }
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                true,
                false
            ]
        }
    },
    "208": {
        "title": "Trie Data Structure",
        "description": "Implement a Trie class that represents a prefix tree data structure. The Trie class should have the following methods: \n\n- `Trie()`: Initializes the trie object. \n- `void insert(String word)`: Inserts the string `word` into the trie. \n- `boolean search(String word)`: Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise. \n- `boolean startsWith(String prefix)`: Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise. \n\nA Trie, also known as a prefix tree, is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. It is commonly used in applications such as autocomplete and spellchecker.",
        "example": "Example:\n\nInput:\n['Trie', 'insert', 'search', 'search', 'startsWith', 'insert', 'search']\n[[], ['apple'], ['apple'], ['app'], ['app'], ['app'], ['app']]\n\nOutput:\n[null, null, true, false, true, null, true]\n\nExplanation:\nTrie trie = new Trie();\ntrie.insert('apple');\ntrie.search('apple');   // return True\ntrie.search('app');     // return False\ntrie.startsWith('app'); // return True\ntrie.insert('app');\ntrie.search('app');     // return True",
        "level": "Medium",
        "tags": [
            "Trie",
            "Data Structure",
            "Prefix Tree"
        ],
        "test_cases": {
            "inputs": [
                "Trie",
                "insert",
                "search",
                "search",
                "startsWith",
                "insert",
                "search"
            ],
            "outputs": [
                "null",
                "null",
                "true",
                "false",
                "true",
                "null",
                "true"
            ]
        }
    },
    "209": {
        "title": "Minimal Length of Subarray",
        "description": "Given an array of positive integers `nums` and a positive integer `target`, find the minimal length of a subarray whose sum is greater than or equal to the target. If there is no such subarray, return 0 instead.",
        "example": "Example:\n\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.",
        "level": "Medium",
        "tags": [
            "array",
            "sliding window"
        ],
        "test_cases": {
            "inputs": [
                {
                    "target": 7,
                    "nums": [
                        2,
                        3,
                        1,
                        2,
                        4,
                        3
                    ]
                },
                {
                    "target": 4,
                    "nums": [
                        1,
                        4,
                        4
                    ]
                },
                {
                    "target": 11,
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                },
                {
                    "target": 5,
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "target": 10,
                    "nums": [
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                },
                {
                    "target": 3,
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                },
                {
                    "target": 8,
                    "nums": [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                },
                {
                    "target": 6,
                    "nums": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "target": 9,
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "target": 15,
                    "nums": [
                        10,
                        5,
                        3,
                        2,
                        1
                    ]
                }
            ],
            "outputs": [
                2,
                1,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    "210": {
        "title": "Course Ordering",
        "description": "You are given a total of `numCourses` courses labeled from `0` to `numCourses - 1`. The prerequisites for each course are given in the form of an array `prerequisites`, where `prerequisites[i] = [ai, bi]` indicates that course `bi` must be taken before course `ai`. Return the ordering of courses you should take to finish all courses. If there are multiple valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
        "example": "Example:\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: To take course 1, you should have finished course 0. So the correct course order is [0,1].",
        "level": "Medium",
        "tags": [
            "Graph",
            "Topological Sort"
        ],
        "test_cases": {
            "inputs": [
                {
                    "numCourses": 2,
                    "prerequisites": [
                        [
                            1,
                            0
                        ]
                    ]
                },
                {
                    "numCourses": 4,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            0
                        ],
                        [
                            3,
                            1
                        ],
                        [
                            3,
                            2
                        ]
                    ]
                },
                {
                    "numCourses": 1,
                    "prerequisites": []
                },
                {
                    "numCourses": 3,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ]
                    ]
                },
                {
                    "numCourses": 5,
                    "prerequisites": [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ]
                    ]
                }
            ],
            "outputs": [
                [
                    0,
                    1
                ],
                [
                    0,
                    2,
                    1,
                    3
                ],
                [
                    0
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4
                ]
            ]
        }
    },
    "211": {
        "title": "Word Dictionary",
        "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the `WordDictionary` class with the following methods: \n\n- `WordDictionary()`: Initializes the object. \n- `void addWord(word)`: Adds `word` to the data structure, it can be matched later. \n- `bool search(word)`: Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.",
        "example": "Example:\n\nInput:\nwordDictionary = WordDictionary()\nwordDictionary.addWord('bad')\nwordDictionary.addWord('dad')\nwordDictionary.addWord('mad')\nwordDictionary.search('pad')\nwordDictionary.search('bad')\nwordDictionary.search('.ad')\nwordDictionary.search('b..')\n\nOutput:\n[null, null, null, false, true, true, true]\n\nExplanation:\nWordDictionary wordDictionary = new WordDictionary()\nwordDictionary.addWord('bad')\nwordDictionary.addWord('dad')\nwordDictionary.addWord('mad')\nwordDictionary.search('pad') // return False\nwordDictionary.search('bad') // return True\nwordDictionary.search('.ad') // return True\nwordDictionary.search('b..') // return True",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "WordDictionary",
                    "addWord",
                    "addWord",
                    "addWord",
                    "search",
                    "search",
                    "search",
                    "search"
                ],
                [
                    [],
                    [
                        "bad"
                    ],
                    [
                        "dad"
                    ],
                    [
                        "mad"
                    ],
                    [
                        "pad"
                    ],
                    [
                        "bad"
                    ],
                    [
                        ".ad"
                    ],
                    [
                        "b.."
                    ]
                ]
            ],
            "outputs": [
                [
                    null,
                    null,
                    null,
                    null,
                    false,
                    true,
                    true,
                    true
                ]
            ]
        }
    },
    "212": {
        "title": "Word Search II",
        "description": "Given an `m x n` board of characters and a list of strings `words`, return all words on the board. Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.",
        "example": "Example 1:\n\nInput: board = [['o', 'a', 'a', 'n'], ['e', 't', 'a', 'e'], ['i', 'h', 'k', 'r'], ['i', 'f', 'l', 'v']], words = ['oath', 'pea', 'eat', 'rain']\nOutput: ['eat', 'oath']\n\nExample 2:\n\nInput: board = [['a', 'b'], ['c', 'd']], words = ['abcb']\nOutput: []",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking",
            "Trie"
        ],
        "test_cases": {
            "inputs": [
                "[[['o', 'a', 'a', 'n'], ['e', 't', 'a', 'e'], ['i', 'h', 'k', 'r'], ['i', 'f', 'l', 'v']], ['oath', 'pea', 'eat', 'rain']]",
                "[[['a', 'b'], ['c', 'd']], ['abcb']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['ab', 'de', 'gh']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['ab', 'cd', 'ef', 'gh', 'ij']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg', 'lkj']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg', 'lkj', 'onm']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx', 'zyx']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz', 'cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx', 'zyx']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['xyz', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['xyz', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba', 'zyx', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba']]",
                "[[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz', 'cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx', 'zyx', 'xyz', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba']]"
            ],
            "outputs": [
                "['eat', 'oath']",
                "[]",
                "['abc', 'def', 'ghi']",
                "['ab', 'de', 'gh']",
                "['ab', 'cd', 'ef', 'gh', 'ij']",
                "['abc', 'def', 'ghi', 'jkl']",
                "['abc', 'def', 'ghi', 'jkl', 'mno']",
                "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']",
                "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']",
                "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']",
                "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']",
                "['cba', 'fed', 'ihg']",
                "['cba', 'fed', 'ihg', 'lkj']",
                "['cba', 'fed', 'ihg', 'lkj', 'onm']",
                "['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp']",
                "['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu']",
                "['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx']",
                "['cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx', 'zyx']",
                "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz', 'cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx', 'zyx']",
                "['xyz', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba']",
                "['xyz', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba', 'zyx', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba']",
                "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz', 'cba', 'fed', 'ihg', 'lkj', 'onm', 'qrp', 'tsu', 'wvx', 'zyx', 'xyz', 'wvu', 'tsr', 'pon', 'mlk', 'ihg', 'fed', 'cba']"
            ]
        }
    },
    "213": null,
    "214": {
        "title": "Shortest Palindrome",
        "description": "Given a string `s`, you can convert it to a palindrome by adding characters in front of it. Write a function that returns the shortest palindrome you can find by performing this transformation.",
        "example": "Example 1:\n\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\n\nExample 2:\n\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"aacecaaa\"",
                "\"abcd\"",
                "\"race\"",
                "\"level\"",
                "\"madam\"",
                "\"abc\"",
                "\"a\"",
                "\"\"",
                "\"aaaaa\"",
                "\"aabbaa\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"aaaaaabaaaaa\"",
                "\"abcdeedcbaabcdeedcba\"",
                "\"abcdefghgfedcba\"",
                "\"aaaaaabaaaaaabaaaaa\"",
                "\"abcdeedcbaabcdeedcbaabcdeedcba\"",
                "\"abcdefghgfedcbaabcdefghgfedcba\"",
                "\"aaaaaabaaaaaabaaaaaabaaaaa\"",
                "\"abcdeedcbaabcdeedcbaabcdeedcbaabcdeedcba\""
            ],
            "outputs": [
                "\"aaacecaaa\"",
                "\"dcbabcd\"",
                "\"ecarace\"",
                "\"level\"",
                "\"madam\"",
                "\"cba\"",
                "\"a\"",
                "\"\"",
                "\"aaaaa\"",
                "\"aabbaa\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"aaaaaabaaaaa\"",
                "\"abcdeedcbaabcdeedcba\"",
                "\"abcdefghgfedcba\"",
                "\"aaaaaabaaaaaabaaaaa\"",
                "\"abcdeedcbaabcdeedcbaabcdeedcba\"",
                "\"abcdefghgfedcbaabcdefghgfedcba\"",
                "\"aaaaaabaaaaaabaaaaaabaaaaa\"",
                "\"abcdeedcbaabcdeedcbaabcdeedcbaabcdeedcba\""
            ]
        }
    },
    "215": {
        "title": "Kth Largest Element",
        "description": "Given an integer array `nums` and an integer `k`, return the `kth` largest element in the array. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element. You must solve it in `O(n)` time complexity.",
        "example": "Example:\n\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,1,5,6,4]",
                "[3,2,3,1,2,4,5,5,6]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[5,5,5,5,5,5,5,5,5,5]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[10,20,30,40,50,60,70,80,90,100]",
                "[100,90,80,70,60,50,40,30,20,10]",
                "[1,3,5,7,9,2,4,6,8,10]",
                "[10,8,6,4,2,9,7,5,3,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "5",
                "4",
                "10",
                "1",
                "5",
                "-1",
                "100",
                "10",
                "9",
                "1",
                "1",
                "20",
                "20",
                "1",
                "2",
                "-1",
                "-2",
                "99"
            ]
        }
    },
    "216": {
        "title": "Valid Combinations",
        "description": "Given a positive integer `k` and a target sum `n`, find all valid combinations of `k` numbers that sum up to `n`. The numbers used must be in the range from 1 to 9, and each number can be used at most once. Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.",
        "example": "Example:\n\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation: 1 + 2 + 4 = 7\n\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation: 1 + 2 + 6 = 9, 1 + 3 + 5 = 9, 2 + 3 + 4 = 9\n\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations. Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combinations.",
        "level": "Medium",
        "tags": [
            "backtracking",
            "combinations"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    7
                ],
                [
                    3,
                    9
                ],
                [
                    4,
                    1
                ],
                [
                    2,
                    5
                ],
                [
                    5,
                    15
                ],
                [
                    6,
                    30
                ],
                [
                    7,
                    45
                ],
                [
                    8,
                    60
                ],
                [
                    9,
                    55
                ],
                [
                    3,
                    15
                ],
                [
                    4,
                    20
                ],
                [
                    5,
                    25
                ],
                [
                    6,
                    30
                ],
                [
                    7,
                    35
                ],
                [
                    8,
                    40
                ],
                [
                    9,
                    45
                ],
                [
                    3,
                    18
                ],
                [
                    4,
                    22
                ],
                [
                    5,
                    27
                ],
                [
                    6,
                    33
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        2,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        6
                    ],
                    [
                        1,
                        3,
                        5
                    ],
                    [
                        2,
                        3,
                        4
                    ]
                ],
                [],
                [
                    [
                        2,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        6,
                        9,
                        9
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        17
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        24
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        1,
                        5,
                        9
                    ]
                ],
                [
                    [
                        1,
                        4,
                        6,
                        4,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        5,
                        6,
                        4,
                        4,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        6,
                        7,
                        5,
                        4,
                        2,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        7,
                        8,
                        6,
                        5,
                        3,
                        2,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        8,
                        9,
                        7,
                        6,
                        4,
                        3,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        9,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        2,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        6,
                        11
                    ]
                ],
                [
                    [
                        1,
                        7,
                        14,
                        0
                    ]
                ],
                [
                    [
                        1,
                        8,
                        16,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        9,
                        18,
                        0,
                        0,
                        0
                    ]
                ]
            ]
        }
    },
    "217": {
        "title": "Duplicate Integer Check",
        "description": "Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.",
        "example": "Example:\n\nInput: nums = [1,2,3,1]\nOutput: true\n\nExplanation: The value 1 appears twice in the array.\n\nInput: nums = [1,2,3,4]\nOutput: false\n\nExplanation: Every element in the array is distinct.",
        "level": "Easy",
        "tags": [
            "array",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    3,
                    3,
                    4,
                    3,
                    2,
                    4,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                false,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "218": {
        "title": "City Skyline",
        "description": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively. The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0. The skyline should be represented as a list of key points sorted by their x-coordinate in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour. Note that there must be no consecutive horizontal lines of equal height in the output skyline.",
        "example": "Example:\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation: Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        2,
                        9,
                        10
                    ],
                    [
                        3,
                        7,
                        15
                    ],
                    [
                        5,
                        12,
                        12
                    ],
                    [
                        15,
                        20,
                        10
                    ],
                    [
                        19,
                        24,
                        8
                    ]
                ],
                [
                    [
                        0,
                        2,
                        3
                    ],
                    [
                        2,
                        5,
                        3
                    ]
                ],
                [
                    [
                        1,
                        5,
                        7
                    ],
                    [
                        2,
                        4,
                        6
                    ],
                    [
                        3,
                        6,
                        8
                    ]
                ],
                [
                    [
                        0,
                        1,
                        2
                    ],
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        2
                    ],
                    [
                        3,
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        3,
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        0
                    ],
                    [
                        3,
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        0
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        3,
                        4,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        1
                    ],
                    [
                        2,
                        3,
                        2
                    ],
                    [
                        3,
                        4,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        2
                    ],
                    [
                        2,
                        3,
                        3
                    ],
                    [
                        3,
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        4,
                        5,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        4,
                        5,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        4,
                        5,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        4,
                        5,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        4,
                        5,
                        0
                    ]
                ]
            ],
            "outputs": [
                [
                    [
                        2,
                        10
                    ],
                    [
                        3,
                        15
                    ],
                    [
                        7,
                        12
                    ],
                    [
                        12,
                        0
                    ],
                    [
                        15,
                        10
                    ],
                    [
                        20,
                        8
                    ],
                    [
                        24,
                        0
                    ]
                ],
                [
                    [
                        0,
                        3
                    ],
                    [
                        5,
                        0
                    ]
                ],
                [
                    [
                        1,
                        7
                    ],
                    [
                        7,
                        6
                    ],
                    [
                        6,
                        0
                    ]
                ],
                [
                    [
                        0,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        0
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        2
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        3
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        4
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        3
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        2
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        1
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        0
                    ]
                ]
            ]
        }
    },
    "219": {
        "title": "Duplicate Elements within K Distance",
        "description": "Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.",
        "example": "Given an array `nums = [1,2,3,1]` and `k = 3`, the output should be `true` since there are two distinct indices `i = 0` and `j = 3` such that `nums[i] == nums[j]` and `abs(i - j) <= k`.\n\nGiven an array `nums = [1,0,1,1]` and `k = 1`, the output should be `true` since there are two distinct indices `i = 1` and `j = 2` such that `nums[i] == nums[j]` and `abs(i - j) <= k`.\n\nGiven an array `nums = [1,2,3,1,2,3]` and `k = 2`, the output should be `false` since there are no two distinct indices `i` and `j` such that `nums[i] == nums[j]` and `abs(i - j) <= k`.",
        "level": "Easy",
        "tags": [
            "array",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,1]",
                "[1,0,1,1]",
                "[1,2,3,1,2,3]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,1]",
                "[1,2,3,4,5,6,7,8,9,10,1,2]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11,12]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "220": {
        "title": "Index and Value Difference",
        "description": "Given an integer array `nums` and two integers `indexDiff` and `valueDiff`, find a pair of indices `(i, j)` such that `i != j`, `abs(i - j) <= indexDiff`, and `abs(nums[i] - nums[j]) <= valueDiff`. Return `true` if such a pair exists, or `false` otherwise.",
        "example": "Example:\n\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3). We satisfy the three conditions: i != j --> 0 != 3, abs(i - j) <= indexDiff --> abs(0 - 3) <= 3, abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0",
        "level": "Easy",
        "tags": [
            "array",
            "index",
            "value"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        1,
                        2,
                        3,
                        1
                    ],
                    "indexDiff": 3,
                    "valueDiff": 0
                },
                {
                    "nums": [
                        1,
                        5,
                        9,
                        1,
                        5,
                        9
                    ],
                    "indexDiff": 2,
                    "valueDiff": 3
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "indexDiff": 1,
                    "valueDiff": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "indexDiff": 3,
                    "valueDiff": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "indexDiff": 5,
                    "valueDiff": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "indexDiff": 0,
                    "valueDiff": 0
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 0
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 1
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 2
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 3
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 4
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 5
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 6
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 7
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 8
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 9
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 10
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 11
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 12
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "indexDiff": 2,
                    "valueDiff": 13
                }
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "221": {
        "title": "Largest Square of Ones",
        "description": "Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, find the largest square containing only `1`'s and return its area.",
        "example": "Example:\n\nInput: matrix = [[1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]]\nOutput: 4\n\nExplanation: The largest square containing only `1`'s is:\n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nThe area of this square is 4.",
        "level": "Medium",
        "tags": [
            "Matrix",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        1,
                        0
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        0
                    ]
                ]
            ],
            "outputs": [
                4,
                1,
                0
            ]
        }
    },
    "222": null,
    "223": {
        "title": "Total Area of Rectilinear Rectangles",
        "description": "Given the coordinates of two rectilinear rectangles in a 2D plane, find the total area covered by the two rectangles.",
        "example": "Example:\n\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n\nExplanation: The first rectangle has a width of 6 and a height of 4, resulting in an area of 24. The second rectangle has a width of 9 and a height of 3, resulting in an area of 27. The total area covered by the two rectangles is 24 + 27 = 45.",
        "level": "Easy",
        "tags": [
            "geometry",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    -3,
                    0,
                    3,
                    4,
                    0,
                    -1,
                    9,
                    2
                ],
                [
                    -2,
                    -2,
                    2,
                    2,
                    -2,
                    -2,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    5,
                    5,
                    2,
                    2,
                    4,
                    4
                ],
                [
                    -10,
                    -10,
                    10,
                    10,
                    -5,
                    -5,
                    5,
                    5
                ],
                [
                    -5,
                    -5,
                    5,
                    5,
                    -10,
                    -10,
                    10,
                    10
                ],
                [
                    -1,
                    -1,
                    1,
                    1,
                    -1,
                    -1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    10,
                    10,
                    5,
                    5,
                    15,
                    15
                ],
                [
                    -10,
                    -10,
                    10,
                    10,
                    -10,
                    -10,
                    10,
                    10
                ],
                [
                    -5,
                    -5,
                    5,
                    5,
                    -5,
                    -5,
                    5,
                    5
                ],
                [
                    -1,
                    -1,
                    1,
                    1,
                    -1,
                    -1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    10,
                    10,
                    0,
                    0,
                    10,
                    10
                ],
                [
                    -10,
                    -10,
                    10,
                    10,
                    -5,
                    -5,
                    5,
                    5
                ],
                [
                    -5,
                    -5,
                    5,
                    5,
                    -10,
                    -10,
                    10,
                    10
                ],
                [
                    -1,
                    -1,
                    1,
                    1,
                    -1,
                    -1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    10,
                    10,
                    5,
                    5,
                    15,
                    15
                ],
                [
                    -10,
                    -10,
                    10,
                    10,
                    -10,
                    -10,
                    10,
                    10
                ],
                [
                    -5,
                    -5,
                    5,
                    5,
                    -5,
                    -5,
                    5,
                    5
                ],
                [
                    -1,
                    -1,
                    1,
                    1,
                    -1,
                    -1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    10,
                    10,
                    0,
                    0,
                    10,
                    10
                ]
            ],
            "outputs": [
                45,
                16,
                0,
                4,
                400,
                200,
                4,
                100,
                400,
                100,
                4,
                100,
                400,
                200,
                4,
                100,
                400,
                100,
                4,
                100
            ]
        }
    },
    "224": {
        "title": "Basic Calculator",
        "description": "Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation. You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
        "example": "Example:\n\nInput: s = \"1 + 1\"\nOutput: 2\n\nInput: s = \"2-1 + 2\"\nOutput: 3\n\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23",
        "level": "Medium",
        "tags": [
            "stack",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "\"1 + 1\"",
                "\"2-1 + 2\"",
                "\"(1+(4+5+2)-3)+(6+8)\"",
                "\"10 - 5 + 3\"",
                "\"(2+3) - (4-1)\"",
                "\"(1+2) - (3+4) + (5-6)\"",
                "\"1 + 2 - 3 + 4 - 5 + 6\"",
                "\"10 - (5 + 3)\"",
                "\"(2+3) - (4-1) + (5-6)\"",
                "\"(1+2) - (3+4) + (5-6) + (7-8)\"",
                "\"1 + 2 - 3 + 4 - 5 + 6 - 7\"",
                "\"100 - 50 + 30\"",
                "\"(20+30) - (40-10)\"",
                "\"(10+20) - (30+40) + (50-60)\"",
                "\"1 + 2 - 3 + 4 - 5 + 6 - 7 + 8\"",
                "\"100 - (50 + 30)\"",
                "\"(20+30) - (40-10) + (50-60)\"",
                "\"(10+20) - (30+40) + (50-60) + (70-80)\"",
                "\"1 + 2 - 3 + 4 - 5 + 6 - 7 + 8 - 9\"",
                "\"100 - (50 + 30) + (20-10)\"",
                "\"(20+30) - (40-10) + (50-60) - (70-80)\"",
                "\"(10+20) - (30+40) + (50-60) + (70-80) - (90-100)\""
            ],
            "outputs": [
                "2",
                "3",
                "23",
                "8",
                "2",
                "-1",
                "1",
                "2",
                "0",
                "-1",
                "0",
                "80",
                "20",
                "-10",
                "-1",
                "20",
                "-10",
                "-20",
                "-1",
                "30",
                "-20",
                "-40"
            ]
        }
    },
    "225": {
        "title": "Implement LIFO Stack using Two Queues",
        "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`). You must use only standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid. Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.",
        "example": "Example:\n\nInput:\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\nOutput:\nnull, null, null, 2, 2, false\n\nExplanation:\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False",
        "level": "Medium",
        "tags": [
            "stack",
            "queue",
            "data structure"
        ],
        "test_cases": {
            "inputs": [
                [
                    "MyStack",
                    "push",
                    "push",
                    "top",
                    "pop",
                    "empty"
                ],
                [
                    [],
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [],
                    [],
                    []
                ]
            ],
            "outputs": [
                [
                    "null",
                    "null",
                    "null",
                    "2",
                    "2",
                    "false"
                ]
            ]
        }
    },
    "226": {
        "title": "Invert Binary Tree",
        "description": "Given the `root` of a binary tree, invert the tree by swapping the left and right child of each node, and return the root of the inverted tree.",
        "example": "Example 1:\n\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n\nExample 2:\n\nInput: root = [2,1,3]\nOutput: [2,3,1]\n\nExample 3:\n\nInput: root = []\nOutput: []",
        "level": "Easy",
        "tags": [
            "Binary Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[4,2,7,1,3,6,9]",
                "[2,1,3]",
                "[]",
                "[1]",
                "[5,3,8,2,4,7,9]",
                "[10,5,15,2,7,12,20,1,3,6,8,11,13,18,25]"
            ],
            "outputs": [
                "[4,7,2,9,6,3,1]",
                "[2,3,1]",
                "[]",
                "[1]",
                "[5,8,3,9,7,4,2]",
                "[10,15,5,20,18,13,11,25,6,3,1,8,7,12,2]"
            ]
        }
    },
    "227": {
        "title": "Evaluate Expression",
        "description": "Given a string `s` which represents an expression, evaluate this expression and return its value. The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`. Note that you are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
        "example": "Example 1:\n\nInput: s = \"3+2*2\"\nOutput: 7\n\nExample 2:\n\nInput: s = \" 3/2 \"\nOutput: 1\n\nExample 3:\n\nInput: s = \" 3+5 / 2 \"\nOutput: 5",
        "level": "Medium",
        "tags": [
            "string",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "\"3+2*2\"",
                "\" 3/2 \"",
                "\" 3+5 / 2 \"",
                "\"10-5*2\"",
                "\"100/10+5\"",
                "\"2*3-4/2\"",
                "\"1+2+3+4+5\"",
                "\"10-5-2-1\"",
                "\"100/10/2\"",
                "\"2*3*4*5\"",
                "\"1+2-3+4-5\"",
                "\"10-5+2-1\"",
                "\"100/10*2\"",
                "\"2*3+4/2\"",
                "\"1+2*3-4/2\"",
                "\"10-5*2+1\"",
                "\"100/10+5*2\"",
                "\"2*3-4/2+1\"",
                "\"1+2+3+4+5*2\"",
                "\"10-5-2-1*2\"",
                "\"100/10/2+1\""
            ],
            "outputs": [
                "7",
                "1",
                "5",
                "0",
                "15",
                "4",
                "15",
                "2",
                "10",
                "120",
                "-1",
                "6",
                "40",
                "7",
                "4",
                "0",
                "110",
                "5",
                "20",
                "6",
                "11"
            ]
        }
    },
    "228": {
        "title": "Smallest Sorted Ranges",
        "description": "You are given a sorted unique integer array `nums`. A range `[a,b]` is the set of all integers from `a` to `b` (inclusive). Return the smallest sorted list of ranges that cover all the numbers in the array exactly. Each range `[a,b]` in the list should be output as: 'a->b' if `a != b` or 'a' if `a == b`.",
        "example": "Example:\n\nInput: nums = [0,1,2,4,5,7]\nOutput: ['0->2', '4->5', '7']\nExplanation: The ranges are:\n[0,2] --> '0->2'\n[4,5] --> '4->5'\n[7,7] --> '7'",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1,
                    2,
                    4,
                    5,
                    7
                ],
                [
                    0,
                    2,
                    3,
                    4,
                    6,
                    8,
                    9
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000,
                    1100
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    0,
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ]
            ],
            "outputs": [
                [
                    "0->2",
                    "4->5",
                    "7"
                ],
                [
                    "0",
                    "2->4",
                    "6",
                    "8->9"
                ],
                [],
                [
                    "1"
                ],
                [
                    "1->5"
                ],
                [
                    "10->50"
                ],
                [
                    "100->500"
                ],
                [
                    "1",
                    "3",
                    "5",
                    "7",
                    "9"
                ],
                [
                    "2->10"
                ],
                [
                    "0->9"
                ],
                [
                    "10->100"
                ],
                [
                    "100->1000"
                ],
                [
                    "1->10"
                ],
                [
                    "10->110"
                ],
                [
                    "100->1100"
                ],
                [
                    "1->19"
                ],
                [
                    "2->20"
                ],
                [
                    "0->20"
                ],
                [
                    "1->20"
                ]
            ]
        }
    },
    "229": null,
    "230": {
        "title": "Kth Smallest Element in a BST",
        "description": "Given the `root` of a binary search tree, and an integer `k`, return the `kth` smallest value (1-indexed) of all the values of the nodes in the tree.",
        "example": "Example 1:\n\nInput: root = [3,1,4,null,2]\nOutput: 1\n\nExample 2:\n\nInput: root = [5,3,6,2,4,null,null,1]\nOutput: 3",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "In-order Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        3,
                        1,
                        4,
                        null,
                        2
                    ],
                    "k": 1
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 3
                },
                {
                    "root": [
                        1
                    ],
                    "k": 1
                },
                {
                    "root": [
                        2,
                        1,
                        3
                    ],
                    "k": 2
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 5
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 6
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 7
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 8
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 9
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 10
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 11
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 12
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 13
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 14
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 15
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 16
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 17
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 18
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 19
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "k": 20
                }
            ],
            "outputs": [
                1,
                3,
                1,
                2,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20
            ]
        }
    },
    "231": {
        "title": "Power of Two",
        "description": "Given an integer `n`, determine if it is a power of two. Return `true` if `n` is a power of two, otherwise return `false`. An integer `n` is a power of two if there exists an integer `x` such that `n == 2^x`.",
        "example": "Example 1:\n\nInput: n = 1\nOutput: true\nExplanation: 2^0 = 1\n\nExample 2:\n\nInput: n = 16\nOutput: true\nExplanation: 2^4 = 16\n\nExample 3:\n\nInput: n = 3\nOutput: false",
        "level": "Easy",
        "tags": [
            "Math",
            "Bit Manipulation"
        ],
        "test_cases": {
            "inputs": [
                1,
                16,
                3,
                0,
                2,
                8,
                10,
                32,
                100,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144,
                524288,
                1048576
            ],
            "outputs": [
                true,
                true,
                false,
                false,
                true,
                true,
                false,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "232": {
        "title": "Implement a FIFO Queue using Two Stacks",
        "description": "You are given the task to implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue, which are `push`, `peek`, `pop`, and `empty`. You must use only the standard operations of a stack, which include `push to top`, `peek/pop from top`, `size`, and `is empty`. You can simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.",
        "example": "Example:\n\nInput:\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\nOutput:\nnull, null, null, 1, 1, false\n\nExplanation:\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false",
        "level": "Medium",
        "tags": [
            "stacks",
            "queues",
            "data structures"
        ],
        "test_cases": {
            "inputs": [
                "MyQueue myQueue = new MyQueue();\nmyQueue.push(1);\nmyQueue.push(2);\nmyQueue.push(3);\nmyQueue.push(4);\nmyQueue.push(5);\nmyQueue.push(6);\nmyQueue.push(7);\nmyQueue.push(8);\nmyQueue.push(9);\nmyQueue.push(10);\nmyQueue.push(11);\nmyQueue.push(12);\nmyQueue.push(13);\nmyQueue.push(14);\nmyQueue.push(15);\nmyQueue.push(16);\nmyQueue.push(17);\nmyQueue.push(18);\nmyQueue.push(19);\nmyQueue.push(20)",
                "MyQueue myQueue = new MyQueue();\nmyQueue.push(1);\nmyQueue.push(2);\nmyQueue.pop();\nmyQueue.push(3);\nmyQueue.push(4);\nmyQueue.pop();\nmyQueue.push(5);\nmyQueue.push(6);\nmyQueue.pop();\nmyQueue.push(7);\nmyQueue.push(8);\nmyQueue.pop();\nmyQueue.push(9);\nmyQueue.push(10);\nmyQueue.pop();\nmyQueue.push(11);\nmyQueue.push(12);\nmyQueue.pop();\nmyQueue.push(13);\nmyQueue.push(14);\nmyQueue.pop();\nmyQueue.push(15);\nmyQueue.push(16);\nmyQueue.pop();\nmyQueue.push(17);\nmyQueue.push(18);\nmyQueue.pop();\nmyQueue.push(19);\nmyQueue.push(20)",
                "MyQueue myQueue = new MyQueue();\nmyQueue.push(1);\nmyQueue.push(2);\nmyQueue.push(3);\nmyQueue.pop();\nmyQueue.push(4);\nmyQueue.push(5);\nmyQueue.push(6);\nmyQueue.pop();\nmyQueue.push(7);\nmyQueue.push(8);\nmyQueue.push(9);\nmyQueue.pop();\nmyQueue.push(10);\nmyQueue.push(11);\nmyQueue.push(12);\nmyQueue.pop();\nmyQueue.push(13);\nmyQueue.push(14);\nmyQueue.push(15);\nmyQueue.pop();\nmyQueue.push(16);\nmyQueue.push(17);\nmyQueue.push(18);\nmyQueue.pop();\nmyQueue.push(19);\nmyQueue.push(20)",
                "MyQueue myQueue = new MyQueue();\nmyQueue.push(1);\nmyQueue.push(2);\nmyQueue.push(3);\nmyQueue.push(4);\nmyQueue.pop();\nmyQueue.push(5);\nmyQueue.push(6);\nmyQueue.push(7);\nmyQueue.push(8);\nmyQueue.pop();\nmyQueue.push(9);\nmyQueue.push(10);\nmyQueue.push(11);\nmyQueue.push(12);\nmyQueue.pop();\nmyQueue.push(13);\nmyQueue.push(14);\nmyQueue.push(15);\nmyQueue.push(16);\nmyQueue.pop();\nmyQueue.push(17);\nmyQueue.push(18);\nmyQueue.push(19);\nmyQueue.push(20)",
                "MyQueue myQueue = new MyQueue();\nmyQueue.push(1);\nmyQueue.push(2);\nmyQueue.push(3);\nmyQueue.push(4);\nmyQueue.push(5);\nmyQueue.pop();\nmyQueue.push(6);\nmyQueue.push(7);\nmyQueue.push(8);\nmyQueue.push(9);\nmyQueue.pop();\nmyQueue.push(10);\nmyQueue.push(11);\nmyQueue.push(12);\nmyQueue.push(13);\nmyQueue.pop();\nmyQueue.push(14);\nmyQueue.push(15);\nmyQueue.push(16);\nmyQueue.push(17);\nmyQueue.pop();\nmyQueue.push(18);\nmyQueue.push(19);\nmyQueue.push(20)"
            ],
            "outputs": [
                "null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null",
                "null, null, 1, null, null, 2, null, null, 3, null, null, 4, null, null, 5, null, null, 6, null, null, 7, null, null, 8, null, null, 9, null, null, 10",
                "null, null, null, 2, null, null, 3, null, null, 4, null, null, 5, null, null, 6, null, null, 7, null, null, 8, null, null, 9, null, null, 10",
                "null, null, null, null, 2, null, null, 3, null, null, 4, null, null, 5, null, null, 6, null, null, 7, null, null, 8, null, null, 9, null, null, 10",
                "null, null, null, null, null, 2, null, null, 3, null, null, 4, null, null, 5, null, null, 6, null, null, 7, null, null, 8, null, null, 9, null, null, 10"
            ]
        }
    },
    "233": {
        "title": "Counting Digit 1",
        "description": "Given an integer `n`, count the total number of digit `1` appearing in all non-negative integers less than or equal to `n`.",
        "example": "Example:\n\nInput: n = 13\nOutput: 6\n\nExplanation: The digit 1 appears in the numbers 1, 10, 11, 12, and 13, so the total count is 6.",
        "level": "Easy",
        "tags": [
            "math",
            "counting",
            "digits"
        ],
        "test_cases": {
            "inputs": [
                13,
                0,
                1,
                9,
                10,
                11,
                99,
                100,
                101,
                999,
                1000,
                1001,
                9999,
                10000,
                10001,
                99999,
                100000,
                100001,
                999999,
                1000000
            ],
            "outputs": [
                6,
                0,
                1,
                1,
                2,
                4,
                20,
                21,
                23,
                300,
                400,
                401,
                4000,
                5000,
                5001,
                60000,
                70000,
                70001,
                800000,
                900000
            ]
        }
    },
    "234": {
        "title": "Palindrome Linked List",
        "description": "Given the `head` of a singly linked list, determine whether the linked list is a palindrome or not.",
        "example": "Example 1:\n\nInput: head = [1,2,2,1]\nOutput: true\n\nExplanation: The linked list is a palindrome because it reads the same forward and backward.\n\nExample 2:\n\nInput: head = [1,2]\nOutput: false\n\nExplanation: The linked list is not a palindrome because it does not read the same forward and backward.",
        "level": "Easy",
        "tags": [
            "linked list",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                {
                    "val": [
                        1,
                        2,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "val": [
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        11,
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        11,
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "val": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        12,
                        11,
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                }
            ],
            "outputs": [
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                false,
                false,
                true,
                false,
                false,
                false,
                true,
                false,
                false,
                false,
                true,
                false
            ]
        }
    },
    "235": {
        "title": "Lowest Common Ancestor in Binary Search Tree",
        "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST. The lowest common ancestor is defined as the lowest node in the tree that has both given nodes as descendants. A node can be a descendant of itself. Implement a function `findLCA(root, p, q)` that returns the lowest common ancestor node of nodes `p` and `q` in the BST.",
        "example": "Example:\n\nInput:\nroot = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\nInput:\nroot = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\nInput:\nroot = [2,1], p = 2, q = 1\nOutput: 2",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Recursion",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[6,2,8,0,4,7,9,null,null,3,5]",
                "[6,2,8,0,4,7,9,null,null,3,5]",
                "[2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]",
                "[5,3,7,2,4,6,8,1,9]",
                "[1]",
                "[1,2]",
                "[2,1]",
                "[1,2,3]",
                "[3,2,1]",
                "[1,3,2]",
                "[2,1,3]",
                "[2,3,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105]"
            ],
            "outputs": [
                "6",
                "2",
                "2",
                "4",
                "10",
                "5",
                "1",
                "2",
                "2",
                "3",
                "3",
                "3",
                "2",
                "2",
                "8",
                "1",
                "1",
                "20",
                "1",
                "1"
            ]
        }
    },
    "236": {
        "title": "Lowest Common Ancestor of Binary Tree",
        "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA is defined as the lowest node in the tree that has both given nodes as descendants. A node can be a descendant of itself. Implement a function `lowestCommonAncestor(root, p, q)` that returns the LCA of nodes `p` and `q`.",
        "example": "Example:\n\nInput:\nroot = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\nInput:\nroot = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\nInput:\nroot = [1,2], p = 1, q = 2\nOutput: 1",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[3,5,1,6,2,0,8,null,null,7,4]",
                "[3,5,1,6,2,0,8,null,null,7,4]",
                "[1,2]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ],
            "outputs": [
                "3",
                "5",
                "1",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7"
            ]
        }
    },
    "237": {
        "title": "Delete Node in a Singly Linked List",
        "description": "Given a singly-linked list `head` and a node `node` to be deleted, delete the given node from the linked list. You are not given access to the first node of `head`. All the values in the linked list are unique, and it is guaranteed that the given node `node` is not the last node in the list. Deleting the node means that its value should not exist in the linked list, the number of nodes should decrease by one, and the order of values before and after the node should remain the same.",
        "example": "Example:\n\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.",
        "level": "Easy",
        "tags": [
            "linked list",
            "deletion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        4,
                        5,
                        1,
                        9
                    ],
                    "node": 5
                },
                {
                    "head": [
                        4,
                        5,
                        1,
                        9
                    ],
                    "node": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "node": 2
                },
                {
                    "head": [
                        7,
                        8,
                        9,
                        10
                    ],
                    "node": 8
                },
                {
                    "head": [
                        100,
                        200,
                        300,
                        400
                    ],
                    "node": 300
                },
                {
                    "head": [
                        0,
                        0,
                        0,
                        0
                    ],
                    "node": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "node": 6
                },
                {
                    "head": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "node": 40
                },
                {
                    "head": [
                        1,
                        3,
                        5,
                        7,
                        9
                    ],
                    "node": 3
                },
                {
                    "head": [
                        2,
                        4,
                        6,
                        8,
                        10
                    ],
                    "node": 10
                },
                {
                    "head": [
                        5,
                        10,
                        15,
                        20,
                        25
                    ],
                    "node": 15
                },
                {
                    "head": [
                        1000,
                        2000,
                        3000,
                        4000,
                        5000
                    ],
                    "node": 2000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "node": 5
                },
                {
                    "head": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "node": 12
                },
                {
                    "head": [
                        3,
                        6,
                        9,
                        12,
                        15,
                        18,
                        21,
                        24,
                        27,
                        30
                    ],
                    "node": 9
                },
                {
                    "head": [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                        1000
                    ],
                    "node": 500
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "node": 7
                },
                {
                    "head": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20,
                        22,
                        24,
                        26,
                        28,
                        30
                    ],
                    "node": 24
                },
                {
                    "head": [
                        3,
                        6,
                        9,
                        12,
                        15,
                        18,
                        21,
                        24,
                        27,
                        30,
                        33,
                        36,
                        39,
                        42,
                        45
                    ],
                    "node": 36
                },
                {
                    "head": [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                        1000,
                        1100,
                        1200,
                        1300,
                        1400,
                        1500
                    ],
                    "node": 900
                }
            ],
            "outputs": [
                [
                    4,
                    1,
                    9
                ],
                [
                    4,
                    5,
                    9
                ],
                [
                    1,
                    3,
                    4
                ],
                [
                    7,
                    9,
                    10
                ],
                [
                    100,
                    200,
                    400
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    7,
                    8,
                    9
                ],
                [
                    10,
                    20,
                    30,
                    50
                ],
                [
                    1,
                    5,
                    7,
                    9
                ],
                [
                    2,
                    4,
                    6,
                    8
                ],
                [
                    5,
                    10,
                    20,
                    25
                ],
                [
                    1000,
                    3000,
                    4000,
                    5000
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21,
                    24,
                    30
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    600,
                    700,
                    800,
                    900,
                    1000
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20,
                    22,
                    26,
                    28,
                    30
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21,
                    24,
                    27,
                    30,
                    33,
                    39,
                    42,
                    45
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    1000,
                    1100,
                    1200,
                    1300,
                    1400,
                    1500
                ]
            ]
        }
    },
    "238": null,
    "239": null,
    "240": {
        "title": "Search in Sorted Matrix",
        "description": "You are given an `m x n` matrix where each row and each column is sorted in ascending order. Write a function that efficiently searches for a target value in the matrix. If the target value is found, return true; otherwise, return false.",
        "example": "For example, consider the following matrix:\n\nmatrix = [[1, 4, 7, 11, 15],\n          [2, 5, 8, 12, 19],\n          [3, 6, 9, 16, 22],\n          [10, 13, 14, 17, 24],\n          [18, 21, 23, 26, 30]]\n\nIf we search for the target value 5, the function should return true. However, if we search for the target value 20, the function should return false.",
        "level": "Medium",
        "tags": [
            "matrix",
            "search",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "matrix": [
                        [
                            1,
                            4,
                            7,
                            11,
                            15
                        ],
                        [
                            2,
                            5,
                            8,
                            12,
                            19
                        ],
                        [
                            3,
                            6,
                            9,
                            16,
                            22
                        ],
                        [
                            10,
                            13,
                            14,
                            17,
                            24
                        ],
                        [
                            18,
                            21,
                            23,
                            26,
                            30
                        ]
                    ],
                    "target": 5
                },
                {
                    "matrix": [
                        [
                            1,
                            4,
                            7,
                            11,
                            15
                        ],
                        [
                            2,
                            5,
                            8,
                            12,
                            19
                        ],
                        [
                            3,
                            6,
                            9,
                            16,
                            22
                        ],
                        [
                            10,
                            13,
                            14,
                            17,
                            24
                        ],
                        [
                            18,
                            21,
                            23,
                            26,
                            30
                        ]
                    ],
                    "target": 20
                },
                {
                    "matrix": [
                        [
                            -5,
                            -4,
                            -3,
                            -2
                        ],
                        [
                            -3,
                            -2,
                            -1,
                            0
                        ],
                        [
                            -1,
                            0,
                            1,
                            2
                        ],
                        [
                            0,
                            1,
                            2,
                            3
                        ]
                    ],
                    "target": -2
                },
                {
                    "matrix": [
                        [
                            -5,
                            -4,
                            -3,
                            -2
                        ],
                        [
                            -3,
                            -2,
                            -1,
                            0
                        ],
                        [
                            -1,
                            0,
                            1,
                            2
                        ],
                        [
                            0,
                            1,
                            2,
                            3
                        ]
                    ],
                    "target": 4
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 15
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 21
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 0
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 8
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 25
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": -1
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 6
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 11
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 16
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 1
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 18
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 3
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 13
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 19
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 2
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 7
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            6,
                            7,
                            8,
                            9,
                            10
                        ],
                        [
                            11,
                            12,
                            13,
                            14,
                            15
                        ],
                        [
                            16,
                            17,
                            18,
                            19,
                            20
                        ]
                    ],
                    "target": 12
                }
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                false,
                false,
                true,
                false,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "241": {
        "title": "Expression Evaluation",
        "description": "Given a string `expression` of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.",
        "example": "Example 1:\n\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0\n(2-(1-1)) = 2\n\nExample 2:\n\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34\n((2*3)-(4*5)) = -14\n((2*(3-4))*5) = -10\n(2*((3-4)*5)) = -10\n(((2*3)-4)*5) = 10",
        "level": "Medium",
        "tags": [
            "Math",
            "Recursion",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "\"2-1-1\"",
                "\"2*3-4*5\"",
                "\"1+2+3+4+5\"",
                "\"1*2*3*4*5\"",
                "\"1+2*3-4+5\"",
                "\"1*2+3-4*5\"",
                "\"1+2*3-4*5+6\"",
                "\"1*2+3-4*5+6\"",
                "\"1+2*3-4*5+6-7\"",
                "\"1*2+3-4*5+6-7\"",
                "\"1+2*3-4*5+6-7+8\"",
                "\"1*2+3-4*5+6-7+8\"",
                "\"1+2*3-4*5+6-7+8-9\"",
                "\"1*2+3-4*5+6-7+8-9\"",
                "\"1+2*3-4*5+6-7+8-9+10\"",
                "\"1*2+3-4*5+6-7+8-9+10\"",
                "\"1+2*3-4*5+6-7+8-9+10-11\"",
                "\"1*2+3-4*5+6-7+8-9+10-11\"",
                "\"1+2*3-4*5+6-7+8-9+10-11+12\"",
                "\"1*2+3-4*5+6-7+8-9+10-11+12\""
            ],
            "outputs": [
                "[0,2]",
                "[-34,-14,-10,-10,10]",
                "[15]",
                "[120]",
                "[6,8,10,12,16]",
                "[-14,-10,-2,2,6]",
                "[-7,-1,5,11,17]",
                "[-7,-1,5,11,17,23]",
                "[-14,-8,0,6,12,18,24]",
                "[-14,-8,0,6,12,18,24,32]",
                "[-21,-15,-7,-1,5,11,17,23,31]",
                "[-21,-15,-7,-1,5,11,17,23,31,39]",
                "[-28,-22,-14,-8,0,6,12,18,24,32,40]",
                "[-28,-22,-14,-8,0,6,12,18,24,32,40,50]",
                "[-36,-30,-22,-16,-8,0,6,12,18,24,32,40,50]",
                "[-36,-30,-22,-16,-8,0,6,12,18,24,32,40,50,62]",
                "[-45,-39,-31,-25,-17,-9,-1,5,11,17,23,31,39,49,61]",
                "[-45,-39,-31,-25,-17,-9,-1,5,11,17,23,31,39,49,61,75]",
                "[-55,-49,-41,-35,-27,-19,-11,-3,3,9,15,23,31,41,53,67,83]",
                "[-55,-49,-41,-35,-27,-19,-11,-3,3,9,15,23,31,41,53,67,83,101]"
            ]
        }
    },
    "242": {
        "title": "Anagram Check",
        "description": "Given two strings `s` and `t`, determine if `t` is an anagram of `s`. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, using all the original letters exactly once.",
        "example": "Example:\n\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\n\nExplanation: The word \"nagaram\" is an anagram of \"anagram\".\n\nInput: s = \"rat\", t = \"car\"\nOutput: false\n\nExplanation: The word \"car\" is not an anagram of \"rat\".",
        "level": "Easy",
        "tags": [
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "\"anagram\", \"nagaram\"",
                "\"rat\", \"car\"",
                "\"listen\", \"silent\"",
                "\"hello\", \"world\"",
                "\"abcde\", \"edcba\"",
                "\"\", \"\"",
                "\"a\", \"a\"",
                "\"abcd\", \"dcba\"",
                "\"anagram\", \"nagarama\"",
                "\"rat\", \"tar\"",
                "\"listen\", \"silentt\"",
                "\"hello\", \"hell\"",
                "\"abcde\", \"edcbf\"",
                "\"a\", \"b\"",
                "\"abcd\", \"dcbb\"",
                "\"anagram\", \"nagaramm\"",
                "\"rat\", \"tarr\"",
                "\"listen\", \"silenn\"",
                "\"hello\", \"hella\"",
                "\"abcde\", \"edcbg\""
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "243": {
        "title": "Shortest Distance Between Words",
        "description": "Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, write a function `shortestDistance` to return the shortest distance between these two words in the list.",
        "example": "Example:\n\nInput: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"coding\", word2 = \"practice\"\nOutput: 3\n\nExplanation: The shortest distance between \"coding\" and \"practice\" is 3, as they appear at indices 3 and 0 respectively.\n\nInput: wordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"], word1 = \"makes\", word2 = \"coding\"\nOutput: 1\n\nExplanation: The shortest distance between \"makes\" and \"coding\" is 1, as they appear at indices 1 and 3 respectively.",
        "level": "Easy",
        "tags": [
            "array",
            "string",
            "search"
        ],
        "test_cases": {
            "inputs": [
                {
                    "wordsDict": [
                        "practice",
                        "makes",
                        "perfect",
                        "coding",
                        "makes"
                    ],
                    "word1": "coding",
                    "word2": "practice"
                },
                {
                    "wordsDict": [
                        "practice",
                        "makes",
                        "perfect",
                        "coding",
                        "makes"
                    ],
                    "word1": "makes",
                    "word2": "coding"
                },
                {
                    "wordsDict": [
                        "apple",
                        "banana",
                        "orange",
                        "apple",
                        "grape"
                    ],
                    "word1": "apple",
                    "word2": "grape"
                },
                {
                    "wordsDict": [
                        "hello",
                        "world",
                        "hello",
                        "hello",
                        "world"
                    ],
                    "word1": "hello",
                    "word2": "world"
                },
                {
                    "wordsDict": [
                        "cat",
                        "dog",
                        "cat",
                        "cat",
                        "dog"
                    ],
                    "word1": "dog",
                    "word2": "cat"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "a",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "b",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "c",
                    "word2": "c"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "d",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "e",
                    "word2": "a"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "a",
                    "word2": "a"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "a",
                    "word2": "b"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "b",
                    "word2": "b"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "b",
                    "word2": "c"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "c",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "d",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "e",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "e",
                    "word2": "f"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "f",
                    "word2": "f"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "f",
                    "word2": "g"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "g",
                    "word2": "h"
                }
            ],
            "outputs": [
                3,
                1,
                4,
                1,
                2,
                4,
                2,
                0,
                0,
                4,
                1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            ]
        }
    },
    "244": {
        "title": "Shortest Word Distance",
        "description": "Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\n\nImplement the `WordDistance` class:\n\n*   `WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.\n*   `int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.",
        "example": "Example:\n\nInput:\nwordsDict = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\nOutput:\nnull\n\nExplanation:\nWordDistance wordDistance = new WordDistance([\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]);\nwordDistance.shortest(\"coding\", \"practice\"); // returns 3\nwordDistance.shortest(\"makes\", \"coding\");    // returns 1",
        "level": "Medium",
        "tags": [
            "Array",
            "String",
            "Design"
        ],
        "test_cases": {
            "inputs": [
                "[\"WordDistance\", \"shortest\", \"shortest\"]",
                "[[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]]",
                "[[\"coding\", \"practice\"]]",
                "[[\"makes\", \"coding\"]]"
            ],
            "outputs": [
                "null",
                "3",
                "1"
            ]
        }
    },
    "245": {
        "title": "Shortest Distance Between Words",
        "description": "Given an array of strings `wordsDict` and two strings `word1` and `word2`, find the shortest distance between the occurrences of these two words in the list. Return the minimum number of words between the two occurrences.",
        "example": "For example, given the `wordsDict` array ['practice', 'makes', 'perfect', 'coding', 'makes'], and the words `word1` = 'makes' and `word2` = 'coding', the shortest distance between the occurrences of 'makes' and 'coding' is 1.\n\nInput: wordsDict = ['practice', 'makes', 'perfect', 'coding', 'makes'], word1 = 'makes', word2 = 'coding'\nOutput: 1\n\nGiven the same `wordsDict` array and the words `word1` = 'makes' and `word2` = 'makes', the shortest distance between the occurrences of 'makes' and 'makes' is 3.\n\nInput: wordsDict = ['practice', 'makes', 'perfect', 'coding', 'makes'], word1 = 'makes', word2 = 'makes'\nOutput: 3",
        "level": "Easy",
        "tags": [
            "array",
            "string",
            "search"
        ],
        "test_cases": {
            "inputs": [
                {
                    "wordsDict": [
                        "practice",
                        "makes",
                        "perfect",
                        "coding",
                        "makes"
                    ],
                    "word1": "makes",
                    "word2": "coding"
                },
                {
                    "wordsDict": [
                        "practice",
                        "makes",
                        "perfect",
                        "coding",
                        "makes"
                    ],
                    "word1": "makes",
                    "word2": "makes"
                },
                {
                    "wordsDict": [
                        "hello",
                        "world",
                        "hello",
                        "coding",
                        "world"
                    ],
                    "word1": "hello",
                    "word2": "world"
                },
                {
                    "wordsDict": [
                        "apple",
                        "banana",
                        "orange",
                        "banana",
                        "apple"
                    ],
                    "word1": "banana",
                    "word2": "apple"
                },
                {
                    "wordsDict": [
                        "cat",
                        "dog",
                        "cat",
                        "dog",
                        "cat"
                    ],
                    "word1": "dog",
                    "word2": "cat"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "a",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "b",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "c",
                    "word2": "c"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "d",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e"
                    ],
                    "word1": "e",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "a",
                    "word2": "a"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "a",
                    "word2": "b"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "b",
                    "word2": "b"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "b",
                    "word2": "c"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "c",
                    "word2": "c"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "c",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "d",
                    "word2": "d"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "d",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "e",
                    "word2": "e"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "e",
                    "word2": "f"
                },
                {
                    "wordsDict": [
                        "a",
                        "a",
                        "a",
                        "a",
                        "a"
                    ],
                    "word1": "f",
                    "word2": "f"
                }
            ],
            "outputs": [
                1,
                3,
                1,
                1,
                1,
                4,
                2,
                0,
                0,
                0,
                1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            ]
        }
    },
    "246": {
        "title": "Strobogrammatic Number",
        "description": "Given a string `num` which represents an integer, return `true` if `num` is a strobogrammatic number. A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).",
        "example": "Example 1:\n\nInput: num = \"69\"\nOutput: true\n\nExample 2:\n\nInput: num = \"88\"\nOutput: true\n\nExample 3:\n\nInput: num = \"962\"\nOutput: false",
        "level": "Easy",
        "tags": [
            "String",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "\"69\"",
                "\"88\"",
                "\"962\"",
                "\"0\"",
                "\"1\"",
                "\"11\"",
                "\"101\"",
                "\"121\"",
                "\"609\"",
                "\"808\"",
                "\"906\"",
                "\"1001\"",
                "\"1111\"",
                "\"1234\"",
                "\"6789\"",
                "\"10001\"",
                "\"11111\"",
                "\"12321\"",
                "\"67876\"",
                "\"90009\"",
                "\"91119\""
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "true",
                "false",
                "true",
                "true",
                "false",
                "false"
            ]
        }
    },
    "247": null,
    "248": {
        "title": "Strobogrammatic Number Count",
        "description": "Given two strings `low` and `high` that represent two integers `low` and `high` where `low <= high`, return the number of strobogrammatic numbers in the range `[low, high]`. A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).",
        "example": "Example:\n\nInput: low = \"50\", high = \"100\"\nOutput: 3\n\nExplanation: The strobogrammatic numbers in the range [50, 100] are 69, 88, and 96.\n\nInput: low = \"0\", high = \"0\"\nOutput: 1\n\nExplanation: The only strobogrammatic number in the range [0, 0] is 0.",
        "level": "Medium",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "50",
                    "100"
                ],
                [
                    "0",
                    "0"
                ],
                [
                    "1",
                    "9"
                ],
                [
                    "10",
                    "100"
                ],
                [
                    "100",
                    "1000"
                ],
                [
                    "1000",
                    "10000"
                ],
                [
                    "10000",
                    "100000"
                ],
                [
                    "100000",
                    "1000000"
                ],
                [
                    "1000000",
                    "10000000"
                ],
                [
                    "10000000",
                    "100000000"
                ],
                [
                    "100000000",
                    "1000000000"
                ],
                [
                    "1000000000",
                    "10000000000"
                ],
                [
                    "10000000000",
                    "100000000000"
                ],
                [
                    "100000000000",
                    "1000000000000"
                ],
                [
                    "1000000000000",
                    "10000000000000"
                ],
                [
                    "10000000000000",
                    "100000000000000"
                ],
                [
                    "100000000000000",
                    "1000000000000000"
                ],
                [
                    "1000000000000000",
                    "10000000000000000"
                ],
                [
                    "10000000000000000",
                    "100000000000000000"
                ],
                [
                    "100000000000000000",
                    "1000000000000000000"
                ]
            ],
            "outputs": [
                3,
                1,
                3,
                4,
                12,
                20,
                36,
                60,
                100,
                180,
                300,
                500,
                820,
                1320,
                2120,
                3444,
                5564,
                9004,
                14564,
                23564
            ]
        }
    },
    "249": {
        "title": "Group Strings with Shifting Sequences",
        "description": "Given an array of strings, group all strings that belong to the same shifting sequence. A shifting sequence is formed by shifting each letter of a string to its successive letter. For example, 'abc' can be shifted to 'bcd'. We can keep shifting the string to form a sequence, such as 'abc' -> 'bcd' -> ... -> 'xyz'. Return the grouped strings in any order.",
        "example": "Example:\n\nInput: strings = [\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]\nOutput: [['acef'],['a','z'],['abc','bcd','xyz'],['az','ba']]\n\nExplanation: The strings 'acef' have the same shifting sequence. The strings 'a' and 'z' have the same shifting sequence. The strings 'abc', 'bcd', and 'xyz' have the same shifting sequence. The strings 'az' and 'ba' have the same shifting sequence.",
        "level": "Medium",
        "tags": [
            "string",
            "array"
        ],
        "test_cases": {
            "inputs": [
                "[\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]",
                "[\"a\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\"]",
                "[\"abc\",\"bcd\",\"cde\",\"def\"]",
                "[\"abc\",\"bcd\",\"cde\",\"def\",\"efg\",\"fgh\"]"
            ],
            "outputs": [
                "[['acef'],['a','z'],['abc','bcd','xyz'],['az','ba']]",
                "[['a']]",
                "[['abc','def','ghi','jkl']]",
                "[['abc','bcd','cde','def']]",
                "[['abc','bcd','cde','def','efg','fgh']]"
            ]
        }
    },
    "250": {
        "title": "Count Uni-Value Subtrees",
        "description": "Given the `root` of a binary tree, you need to count the number of **uni-value** subtrees. A **uni-value subtree** is a subtree in which all nodes have the same value.",
        "example": "Example 1:\n\nInput: root = [5,1,5,5,5,null,5]\nOutput: 4\nExplanation: The uni-value subtrees are [5], [5,5,5], [5], and [5].\n\nExample 2:\n\nInput: root = []\nOutput: 0\nExplanation: The tree is empty, so there are no uni-value subtrees.\n\nExample 3:\n\nInput: root = [5,5,5,5,5,null,5]\nOutput: 6\nExplanation: The uni-value subtrees are [5], [5], [5], [5], [5], and [5].",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[5,1,5,5,5,null,5]",
                "[]",
                "[5,5,5,5,5,null,5]",
                "[1]",
                "[1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7]",
                "[1,1,1,1,null,null,1]",
                "[1,1,1,1,null,null,2]",
                "[1,1,1,1,null,null,null]",
                "[1,1,1,1,1,null,null]",
                "[1,1,1,1,1,null,null,1]",
                "[1,1,1,1,1,null,null,2]",
                "[1,1,1,1,1,null,null,null]",
                "[1,1,1,1,1,null,null,null,1]",
                "[1,1,1,1,1,null,null,null,2]",
                "[1,1,1,1,1,null,null,null,null]",
                "[1,1,1,1,1,null,null,null,null,1]",
                "[1,1,1,1,1,null,null,null,null,2]",
                "[1,1,1,1,1,null,null,null,null,null]",
                "[1,1,1,1,1,null,null,null,null,null,1]"
            ],
            "outputs": [
                "4",
                "0",
                "6",
                "1",
                "7",
                "7",
                "2",
                "1",
                "1",
                "2",
                "2",
                "2",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1"
            ]
        }
    },
    "251": {
        "title": "Flatten 2D Vector Iterator",
        "description": "Implement the `Vector2D` class to create an iterator that can flatten a 2D vector. The iterator should support the `next` and `hasNext` operations. The `Vector2D` class should be initialized with a 2D vector `vec`. The `next` function should return the next element from the 2D vector and move the pointer one step forward. The `hasNext` function should return `true` if there are still some elements in the vector, and `false` otherwise.",
        "example": "Example:\n\nInput:\nVector2D([[1, 2], [3], [4]])\nOutput:\n[null, 1, 2, 3, true, true, 4, false]\n\nExplanation:\nVector2D vector2D = new Vector2D([[1, 2], [3], [4]]);\nvector2D.next();    // return 1\nvector2D.next();    // return 2\nvector2D.next();    // return 3\nvector2D.hasNext(); // return True\nvector2D.hasNext(); // return True\nvector2D.next();    // return 4\nvector2D.hasNext(); // return False",
        "level": "Medium",
        "tags": [
            "iterator",
            "2D vector",
            "flattening"
        ],
        "test_cases": {
            "inputs": [
                "[[1, 2], [3], [4]]",
                "[[5, 6, 7], [8], [9, 10]]",
                "[[11], [12, 13], [14, 15, 16]]",
                "[[], [17, 18], [19, 20, 21]]",
                "[[22, 23], [], [24, 25, 26]]",
                "[[], [], []]",
                "[[27], [28], [29]]",
                "[[30, 31], [32, 33], [34, 35]]",
                "[[36, 37, 38], [39, 40], [41]]",
                "[[42], [43, 44, 45], [46, 47]]",
                "[[48, 49], [], [50, 51, 52]]",
                "[[], [53], []]",
                "[[54, 55], [56, 57], [58, 59, 60]]",
                "[[61], [62, 63], [64, 65, 66]]",
                "[[], [67, 68], [69, 70, 71]]",
                "[[72, 73], [], [74, 75, 76]]",
                "[[], [], []]",
                "[[77], [78], [79]]",
                "[[80, 81], [82, 83], [84, 85]]",
                "[[86, 87, 88], [89, 90], [91]]"
            ],
            "outputs": [
                "[null, 1, 2, 3, true, true, 4, false]",
                "[null, 5, 6, 7, true, true, 8, true, 9, 10, false]",
                "[null, 11, true, 12, 13, true, 14, 15, 16, false]",
                "[null, true, 17, 18, true, 19, 20, 21, false]",
                "[null, 22, 23, true, true, 24, 25, 26, false]",
                "[null, false]",
                "[null, 27, true, 28, true, 29, false]",
                "[null, 30, 31, true, 32, 33, true, 34, 35, false]",
                "[null, 36, 37, 38, true, 39, 40, true, 41, false]",
                "[null, 42, true, 43, 44, 45, true, 46, 47, false]",
                "[null, 48, 49, true, true, 50, 51, 52, false]",
                "[null, true, 53, false]",
                "[null, 54, 55, true, 56, 57, true, 58, 59, 60, false]",
                "[null, 61, true, 62, 63, true, 64, 65, 66, false]",
                "[null, true, 67, 68, true, 69, 70, 71, false]",
                "[null, 72, 73, true, true, 74, 75, 76, false]",
                "[null, false]",
                "[null, 77, true, 78, true, 79, false]",
                "[null, 80, 81, true, 82, 83, true, 84, 85, false]",
                "[null, 86, 87, 88, true, 89, 90, true, 91, false]"
            ]
        }
    },
    "252": {
        "title": "Meeting Time Intervals",
        "description": "Given an array of meeting time intervals represented as `intervals`, where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings without any overlap.",
        "example": "For example, given the intervals = [[0,30],[5,10],[15,20]], the person cannot attend all meetings because there is an overlap between the second and third intervals. Therefore, the output would be false.\n\nIn another example, given the intervals = [[7,10],[2,4]], the person can attend all meetings without any overlap. Therefore, the output would be true.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        0,
                        30
                    ],
                    [
                        5,
                        10
                    ],
                    [
                        15,
                        20
                    ]
                ],
                [
                    [
                        7,
                        10
                    ],
                    [
                        2,
                        4
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        6,
                        10
                    ],
                    [
                        11,
                        15
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        2,
                        6
                    ],
                    [
                        3,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ]
                ]
            ],
            "outputs": [
                false,
                true,
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "253": {
        "title": "Minimum Number of Conference Rooms",
        "description": "Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, you need to determine the minimum number of conference rooms required to schedule all the meetings.",
        "example": "For example, given the intervals = [[0,30],[5,10],[15,20]], the minimum number of conference rooms required is 2. The first meeting starts at time 0 and ends at time 30. The second meeting starts at time 5 and ends at time 10. The third meeting starts at time 15 and ends at time 20. Since all the meetings overlap, we need at least 2 conference rooms to schedule them.\n\nInput: [[7,10],[2,4]]\nOutput: 1\n\nIn this case, the first meeting starts at time 7 and ends at time 10. The second meeting starts at time 2 and ends at time 4. Since the meetings do not overlap, only 1 conference room is required.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[0,30],[5,10],[15,20]]",
                "[[7,10],[2,4]]",
                "[[1,5],[2,6],[3,7],[4,8]]",
                "[[1,10],[2,9],[3,8],[4,7],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,3],[2,4],[5,7],[6,8]]",
                "[[1,5],[2,6],[3,7],[4,8],[5,9]]",
                "[[1,10],[2,9],[3,8],[4,7],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21]]"
            ],
            "outputs": [
                "2",
                "1",
                "4",
                "5",
                "1",
                "1",
                "2",
                "2",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20"
            ]
        }
    },
    "254": {
        "title": "Factor Combinations",
        "description": "Given an integer n, return all possible combinations of its factors. Numbers can be regarded as the product of their factors. For example, 8 = 2 x 2 x 2 = 2 x 4. The factors should be in the range [2, n - 1].",
        "example": "Example 1:\n\nInput: n = 1\nOutput: []\n\nExample 2:\n\nInput: n = 12\nOutput: [[2,6],[3,4],[2,2,3]]\n\nExample 3:\n\nInput: n = 37\nOutput: []",
        "level": "Medium",
        "tags": [
            "math",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                1,
                12,
                37,
                8,
                16,
                24,
                100
            ],
            "outputs": [
                [],
                [
                    [
                        2,
                        6
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        2,
                        2,
                        3
                    ]
                ],
                [],
                [
                    [
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        2,
                        2,
                        2,
                        3
                    ],
                    [
                        2,
                        2,
                        6
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        4,
                        6
                    ]
                ],
                [
                    [
                        2,
                        2,
                        5,
                        5
                    ]
                ]
            ]
        }
    },
    "255": {
        "title": "Preorder Traversal of Binary Search Tree",
        "description": "Given an array of unique integers `preorder`, determine if it represents the correct preorder traversal sequence of a binary search tree. Return `true` if it is a valid preorder traversal sequence, and `false` otherwise.",
        "example": "Example 1:\n\nInput: preorder = [5,2,1,3,6]\nOutput: true\n\nExplanation: The given preorder sequence [5,2,1,3,6] can be represented by the following binary search tree:\n\n     5\n    / \\\n   2   6\n  / \\\n 1   3\n\nSince the binary search tree matches the preorder sequence, the output is true.\n\nExample 2:\n\nInput: preorder = [5,2,6,1,3]\nOutput: false\n\nExplanation: The given preorder sequence [5,2,6,1,3] cannot be represented by any binary search tree. Therefore, the output is false.",
        "level": "Medium",
        "tags": [
            "binary search tree",
            "preorder traversal",
            "tree traversal"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    2,
                    1,
                    3,
                    6
                ],
                [
                    5,
                    2,
                    6,
                    1,
                    3
                ],
                [
                    1
                ],
                [
                    2,
                    1
                ],
                [
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    6
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    5,
                    2,
                    1,
                    4,
                    3,
                    6
                ],
                [
                    5,
                    2,
                    1,
                    4,
                    6,
                    3
                ],
                [
                    5,
                    2,
                    1,
                    6,
                    4,
                    3
                ],
                [
                    5,
                    2,
                    6,
                    1,
                    4,
                    3
                ],
                [
                    5,
                    6,
                    2,
                    1,
                    4,
                    3
                ],
                [
                    5,
                    6,
                    2,
                    1,
                    3,
                    4
                ],
                [
                    5,
                    6,
                    2,
                    4,
                    1,
                    3
                ],
                [
                    5,
                    6,
                    2,
                    4,
                    3,
                    1
                ],
                [
                    5,
                    6,
                    4,
                    2,
                    1,
                    3
                ],
                [
                    5,
                    6,
                    4,
                    2,
                    3,
                    1
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                false,
                false,
                true,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "256": null,
    "257": {
        "title": "Binary Tree Paths",
        "description": "Given the `root` of a binary tree, return all root-to-leaf paths in any order. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [1,2,3,null,5]\nOutput: [\"1->2->5\", \"1->3\"]\n\nExample 2:\n\nInput: root = [1]\nOutput: [\"1\"]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "DFS",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,null,5]",
                "[1]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,null,5,null,7]",
                "[1,2,3,4,5,null,7,8,9,10,null,null,13,14]"
            ],
            "outputs": [
                "[\"1->2->5\", \"1->3\"]",
                "[\"1\"]",
                "[\"1->2->4\", \"1->2->5->7\", \"1->3->6\"]",
                "[\"1->2->5->7\"]",
                "[\"1->2->4->8\", \"1->2->4->9->13\", \"1->2->4->9->14\", \"1->2->5->7->10\"]"
            ]
        }
    },
    "258": {
        "title": "Sum of Digits",
        "description": "Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.",
        "example": "Example:\n\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2\nSince 2 has only one digit, return it.",
        "level": "Easy",
        "tags": [
            "math",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                38,
                0,
                9,
                123,
                456,
                789,
                100,
                999,
                123456789
            ],
            "outputs": [
                2,
                0,
                9,
                6,
                6,
                6,
                1,
                9,
                9
            ]
        }
    },
    "259": {
        "title": "Count Triplets with Sum Less than Target",
        "description": "Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.",
        "example": "Example:\n\nInput: nums = [-2,0,1,3], target = 2\nOutput: 2\nExplanation: There are two triplets whose sum is less than 2:\n[-2,0,1]\n[-2,0,3]",
        "level": "Medium",
        "tags": [
            "array",
            "two pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-2,0,1,3]",
                "[]",
                "[0]",
                "[-1,1,2,3,4,5]",
                "[-5,-4,-3,-2,-1,0,1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[-100,-50,0,50,100]",
                "[100,50,0,-50,-100]",
                "[-100,-100,-100,-100,-100]",
                "[100,100,100,100,100]",
                "[-100,0,100]",
                "[0,0,0,0,0]",
                "[1,1,1,1,1]",
                "[-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]"
            ],
            "outputs": [
                "2",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "5",
                "5",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "1140",
                "1140",
                "1140",
                "1140",
                "1140"
            ]
        }
    },
    "260": {
        "title": "Find the Two Elements",
        "description": "Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order. Implement an algorithm that runs in linear runtime complexity and uses only constant extra space.",
        "example": "Example 1:\n\nInput: nums = [1,2,1,3,2,5]\nOutput: [3,5]\nExplanation: [5, 3] is also a valid answer.\n\nExample 2:\n\nInput: nums = [-1,0]\nOutput: [-1,0]\n\nExample 3:\n\nInput: nums = [0,1]\nOutput: [1,0]",
        "level": "Medium",
        "tags": [
            "array",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    1,
                    3,
                    2,
                    5
                ],
                [
                    -1,
                    0
                ],
                [
                    0,
                    1
                ],
                [
                    4,
                    2,
                    4,
                    6,
                    2,
                    1
                ],
                [
                    9,
                    9,
                    8,
                    8,
                    7,
                    7,
                    6,
                    6,
                    5,
                    5,
                    4,
                    4,
                    3,
                    3,
                    2,
                    2,
                    1,
                    0
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000,
                    200,
                    300,
                    400,
                    500,
                    600,
                    700,
                    800,
                    900,
                    1000
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    11,
                    11,
                    12,
                    12,
                    13,
                    13,
                    14,
                    14,
                    15,
                    15,
                    16,
                    16,
                    17,
                    17,
                    18,
                    18,
                    19,
                    19,
                    20,
                    20
                ],
                [
                    1000,
                    2000,
                    3000,
                    4000,
                    5000,
                    6000,
                    7000,
                    8000,
                    9000,
                    10000,
                    2000,
                    3000,
                    4000,
                    5000,
                    6000,
                    7000,
                    8000,
                    9000,
                    10000,
                    1000,
                    2000,
                    3000,
                    4000,
                    5000,
                    6000,
                    7000,
                    8000,
                    9000,
                    10000
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100
                ]
            ],
            "outputs": [
                [
                    3,
                    5
                ],
                [
                    -1,
                    0
                ],
                [
                    1,
                    0
                ],
                [
                    6,
                    1
                ],
                [
                    0,
                    1
                ],
                [
                    100,
                    200
                ],
                [
                    30,
                    40
                ],
                [
                    18,
                    19
                ],
                [
                    16,
                    17
                ],
                [
                    7000,
                    8000
                ],
                [
                    62,
                    63
                ]
            ]
        }
    },
    "261": {
        "title": "Valid Tree",
        "description": "Given a graph with `n` nodes labeled from `0` to `n - 1`, and a list of `edges` where `edges[i] = [ai, bi]` indicates an undirected edge between nodes `ai` and `bi`, determine if the edges form a valid tree.",
        "example": "Example 1:\n\nInput: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]\nOutput: true\n\nExplanation: The given graph has 5 nodes and the edges form a valid tree.\n\nExample 2:\n\nInput: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]\nOutput: false\n\nExplanation: The given graph has 5 nodes but the edges do not form a valid tree.",
        "level": "Medium",
        "tags": [
            "Graph",
            "Tree",
            "DFS",
            "Union Find"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    1,
                    []
                ],
                [
                    2,
                    [
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            0
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            1
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            0,
                            2
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            0,
                            3
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            0
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            0,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            0
                        ]
                    ]
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true,
                true,
                true,
                true
            ]
        }
    },
    "263": {
        "title": "Ugly Number",
        "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return true if n is an ugly number.",
        "example": "Example 1:\n\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 * 3\n\nExample 2:\n\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\nExample 3:\n\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.",
        "level": "Easy",
        "tags": [
            "Math",
            "Prime Numbers"
        ],
        "test_cases": {
            "inputs": [
                6,
                1,
                14,
                8,
                30,
                45,
                100,
                123,
                150,
                200,
                300,
                500,
                1000,
                2000,
                5000,
                10000,
                20000,
                50000,
                100000,
                200000
            ],
            "outputs": [
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "264": {
        "title": "Ugly Number",
        "description": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return the nth ugly number.",
        "example": "Example 1:\n\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n\nExample 2:\n\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.",
        "level": "Medium",
        "tags": [
            "Math",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                1,
                5,
                10,
                15,
                20,
                25,
                30,
                50,
                100,
                150,
                200,
                500,
                1000,
                1500,
                1690
            ],
            "outputs": [
                1,
                5,
                12,
                24,
                36,
                45,
                60,
                150,
                384,
                675,
                960,
                51200000,
                51200000,
                51200000,
                2123366400
            ]
        }
    },
    "265": null,
    "266": {
        "title": "Palindrome Permutation",
        "description": "Given a string `s`, return `true` if a permutation of the string could form a palindrome and `false` otherwise.",
        "example": "Example:\n\nInput: s = \"aab\"\nOutput: true\n\nExplanation: The permutation \"aba\" can form a palindrome.\n\nInput: s = \"code\"\nOutput: false\n\nExplanation: No permutation of the string can form a palindrome.",
        "level": "Easy",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"aab\"",
                "\"code\"",
                "\"carerac\"",
                "\"abc\"",
                "\"a\"",
                "\"aa\"",
                "\"aabbaa\"",
                "\"aabba\"",
                "\"aabb\"",
                "\"aabbcc\"",
                "\"aabbccd\"",
                "\"aabbccdd\"",
                "\"aabbccdde\"",
                "\"aabbccddeeff\"",
                "\"aabbccddeeffgg\"",
                "\"aabbccddeeffgghh\"",
                "\"aabbccddeeffgghhi\"",
                "\"aabbccddeeffgghhii\"",
                "\"aabbccddeeffgghhiijj\"",
                "\"aabbccddeeffgghhiijjkk\""
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "267": null,
    "268": {
        "title": "Missing Number in Range",
        "description": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, find the only number in the range that is missing from the array.",
        "example": "Example:\n\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    0,
                    1
                ],
                [
                    0,
                    1
                ],
                [
                    9,
                    6,
                    4,
                    2,
                    3,
                    5,
                    7,
                    0,
                    1
                ],
                [
                    1
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    20
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19
                ]
            ],
            "outputs": [
                2,
                2,
                8,
                0,
                19,
                19,
                19
            ]
        }
    },
    "269": {
        "title": "Alien Language Order",
        "description": "You are given a list of strings `words` from an alien language's dictionary. The strings in `words` are sorted lexicographically by the rules of this new language. Your task is to determine the order of the unique letters in the alien language and return them in lexicographically increasing order. If there is no valid order, return an empty string.",
        "example": "For example, given the words = [\"wrt\", \"wrf\", \"er\", \"ett\", \"rftt\"], the unique letters in the alien language are 'w', 'r', 't', 'e', 'f'. The correct order is 'wertf', so the output would be 'wertf'.",
        "level": "Medium",
        "tags": [
            "sorting",
            "strings"
        ],
        "test_cases": {
            "inputs": [
                [
                    "wrt",
                    "wrf",
                    "er",
                    "ett",
                    "rftt"
                ],
                [
                    "z",
                    "x"
                ],
                [
                    "z",
                    "x",
                    "z"
                ],
                [
                    "abc",
                    "def",
                    "ghi"
                ],
                [
                    "abc",
                    "bcd",
                    "cde"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn",
                    "mno"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn",
                    "mno",
                    "nop"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn",
                    "mno",
                    "nop",
                    "opq"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn",
                    "mno",
                    "nop",
                    "opq",
                    "pqr"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn",
                    "mno",
                    "nop",
                    "opq",
                    "pqr",
                    "qrs"
                ],
                [
                    "abc",
                    "bcd",
                    "cde",
                    "def",
                    "efg",
                    "fgh",
                    "ghi",
                    "hij",
                    "ijk",
                    "jkl",
                    "klm",
                    "lmn",
                    "mno",
                    "nop",
                    "opq",
                    "pqr",
                    "qrs",
                    "rst"
                ]
            ],
            "outputs": [
                "wertf",
                "zx",
                " ",
                "abcdefghi",
                "abcde",
                "abcdef",
                "abcdefg",
                "abcdefgh",
                "abcdefghi",
                "abcdefghij",
                "abcdefghijk",
                "abcdefghijkl",
                "abcdefghijklm",
                "abcdefghijklmn",
                "abcdefghijklmno",
                "abcdefghijklmnop",
                "abcdefghijklmnopq",
                "abcdefghijklmnopqr",
                "abcdefghijklmnopqrs",
                "abcdefghijklmnopqrst"
            ]
        }
    },
    "270": {
        "title": "Closest Value in Binary Search Tree",
        "description": "Given the `root` of a binary search tree and a `target` value, find the value in the BST that is closest to the `target`. If there are multiple answers, return the smallest value.",
        "example": "Given a binary search tree with root = [4,2,5,1,3] and target = 3.714286, the closest value to the target is 4.\n\nExplanation: The closest value to the target is 4, which is the root value of the tree.",
        "level": "Easy",
        "tags": [
            "Binary Search Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        4,
                        2,
                        5,
                        1,
                        3
                    ],
                    "target": 3.714286
                },
                {
                    "root": [
                        1
                    ],
                    "target": 4.428571
                },
                {
                    "root": [
                        5,
                        3,
                        8,
                        2,
                        4,
                        7,
                        9
                    ],
                    "target": 6.5
                },
                {
                    "root": [
                        10,
                        5,
                        15,
                        3,
                        7,
                        13,
                        18,
                        1,
                        null,
                        6,
                        null,
                        12,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                    ],
                    "target": 9.2
                },
                {
                    "root": [
                        1,
                        null,
                        2
                    ],
                    "target": 3.5
                },
                {
                    "root": [
                        1,
                        null,
                        2
                    ],
                    "target": 0.5
                }
            ],
            "outputs": [
                4,
                1,
                7,
                10,
                2,
                1
            ]
        }
    },
    "271": {
        "title": "String List Encoding and Decoding",
        "description": "You are given a list of strings. Design an algorithm to encode the list of strings into a single string. The encoded string is then sent over the network and needs to be decoded back to the original list of strings. Machine 1 (sender) has the function `encode` which takes a vector of strings as input and returns the encoded string. Machine 2 (receiver) has the function `decode` which takes the encoded string as input and returns the original list of strings. Implement the `encode` and `decode` methods. You are not allowed to use any serialize methods such as `eval`.",
        "example": "Example:\n\nInput:\nstrs = [\"Hello\", \"World\"]\nOutput:\n[\"Hello\", \"World\"]\nExplanation:\nMachine 1:\nCodec encoder = new Codec();\nString encoded_string = encoder.encode(strs);\nMachine 1 ---encoded_string---> Machine 2\n\nMachine 2:\nCodec decoder = new Codec();\nvector<string> decoded_strs = decoder.decode(encoded_string);\n\nThe `decoded_strs` in Machine 2 should be the same as `strs` in Machine 1.",
        "level": "Medium",
        "tags": [
            "String",
            "Encoding",
            "Decoding"
        ],
        "test_cases": {
            "inputs": [
                "[\"Hello\", \"World\"]",
                "[\"\", \"\"]",
                "[\"abc\", \"def\", \"ghi\"]",
                "[\"123\", \"456\", \"789\"]",
                "[\"This is a sentence.\", \"Another sentence.\"]",
                "[\"\", \"Hello\", \"\", \"World\", \"\"]",
                "[\"Hello World!\", \"How are you?\"]",
                "[\"\", \"\", \"\", \"\"]",
                "[\"abc\", \"\", \"def\", \"\", \"ghi\"]",
                "[\"123\", \"\", \"456\", \"\", \"789\"]",
                "[\"This is a sentence.\", \"\", \"Another sentence.\"]",
                "[\"\", \"\", \"Hello\", \"\", \"\", \"World\", \"\", \"\", \"\"]",
                "[\"Hello World!\", \"\", \"How are you?\"]",
                "[\"\", \"\", \"\", \"\", \"\"]"
            ],
            "outputs": [
                "[\"Hello\", \"World\"]",
                "[\"\", \"\"]",
                "[\"abc\", \"def\", \"ghi\"]",
                "[\"123\", \"456\", \"789\"]",
                "[\"This is a sentence.\", \"Another sentence.\"]",
                "[\"\", \"Hello\", \"\", \"World\", \"\"]",
                "[\"Hello World!\", \"How are you?\"]",
                "[\"\", \"\", \"\", \"\"]",
                "[\"abc\", \"\", \"def\", \"\", \"ghi\"]",
                "[\"123\", \"\", \"456\", \"\", \"789\"]",
                "[\"This is a sentence.\", \"\", \"Another sentence.\"]",
                "[\"\", \"\", \"Hello\", \"\", \"\", \"World\", \"\", \"\", \"\"]",
                "[\"Hello World!\", \"\", \"How are you?\"]",
                "[\"\", \"\", \"\", \"\", \"\"]"
            ]
        }
    },
    "272": {
        "title": "Closest Values in Binary Search Tree",
        "description": "Given the `root` of a binary search tree, a `target` value, and an integer `k`, return the `k` values in the BST that are closest to the `target`. You may return the answer in any order. You are guaranteed to have only one unique set of `k` values in the BST that are closest to the `target`.",
        "example": "Example:\n\nInput: root = [4,2,5,1,3], target = 3.714286, k = 2\nOutput: [4,3]\n\nInput: root = [1], target = 0.000000, k = 1\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Recursion",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        4,
                        2,
                        5,
                        1,
                        3
                    ],
                    "target": 3.714286,
                    "k": 2
                },
                {
                    "root": [
                        1
                    ],
                    "target": 0.0,
                    "k": 1
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "target": 2.5,
                    "k": 2
                },
                {
                    "root": [
                        10,
                        5,
                        15,
                        3,
                        7,
                        null,
                        18
                    ],
                    "target": 9,
                    "k": 3
                },
                {
                    "root": [
                        10,
                        5,
                        15,
                        3,
                        7,
                        13,
                        18,
                        1,
                        null,
                        6
                    ],
                    "target": 12,
                    "k": 4
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5.5,
                    "k": 3
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 7.8,
                    "k": 4
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 0,
                    "k": 1
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 11,
                    "k": 1
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 1
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 10
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 5
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 0
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": -1
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 100
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 2
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 4
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 6
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 7
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 8
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "target": 5,
                    "k": 9
                }
            ],
            "outputs": [
                [
                    4,
                    3
                ],
                [
                    1
                ],
                [
                    2,
                    3
                ],
                [
                    7,
                    5,
                    10
                ],
                [
                    6,
                    7,
                    5,
                    4
                ],
                [
                    5,
                    6,
                    4
                ],
                [
                    6,
                    7,
                    4,
                    8
                ],
                [
                    1
                ],
                [
                    10
                ],
                [
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    5
                ],
                [],
                [],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    4,
                    6
                ],
                [
                    4,
                    6,
                    7,
                    8
                ],
                [
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    7,
                    8,
                    9,
                    10
                ],
                [
                    8,
                    9,
                    10
                ],
                [
                    9,
                    10
                ]
            ]
        }
    },
    "273": {
        "title": "Convert Integer to English Words",
        "description": "Write a function that takes a non-negative integer `num` and converts it to its English words representation. The function should return the English words representation of the input number. The input number can be up to 2^31 - 1.",
        "example": "For example, if the input number is 123, the function should return 'One Hundred Twenty Three'.\n\nInput: 123\nOutput: 'One Hundred Twenty Three'\n\nIf the input number is 12345, the function should return 'Twelve Thousand Three Hundred Forty Five'.\n\nInput: 12345\nOutput: 'Twelve Thousand Three Hundred Forty Five'\n\nIf the input number is 1234567, the function should return 'One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven'.\n\nInput: 1234567\nOutput: 'One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven'",
        "level": "Medium",
        "tags": [
            "string",
            "math"
        ],
        "test_cases": {
            "inputs": [
                123,
                12345,
                1234567,
                0,
                1,
                10,
                100,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                2147483647
            ],
            "outputs": [
                "One Hundred Twenty Three",
                "Twelve Thousand Three Hundred Forty Five",
                "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven",
                "Zero",
                "One",
                "Ten",
                "One Hundred",
                "One Thousand",
                "Ten Thousand",
                "One Hundred Thousand",
                "One Million",
                "Ten Million",
                "One Hundred Million",
                "One Billion",
                "Two Billion One Hundred Forty Seven Million Four Hundred Eighty Three Thousand Six Hundred Forty Seven"
            ]
        }
    },
    "274": {
        "title": "Researcher's H-Index",
        "description": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, you need to determine the researcher's h-index. The h-index is defined as the maximum value of `h` such that the researcher has published at least `h` papers that have each been cited at least `h` times.",
        "example": "For example, given the array `citations = [3,0,6,1,5]`, the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    0,
                    6,
                    1,
                    5
                ],
                [
                    1,
                    3,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                3,
                1,
                0,
                5,
                2,
                5,
                5,
                5,
                1,
                10,
                10
            ]
        }
    },
    "275": null,
    "276": {
        "title": "Painting Fence",
        "description": "You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:\n\nEvery post must be painted **exactly one** color.\nThere **cannot** be three or more **consecutive** posts with the same color.\n\nGiven the two integers `n` and `k`, return the **number of ways** you can paint the fence.",
        "example": "Example:\n\nInput: n = 3, k = 2\nOutput: 6\nExplanation: All the possibilities are shown.\nNote that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    7,
                    2
                ],
                [
                    4,
                    3
                ],
                [
                    10,
                    4
                ],
                [
                    2,
                    5
                ],
                [
                    6,
                    1
                ],
                [
                    8,
                    8
                ],
                [
                    12,
                    6
                ],
                [
                    5,
                    10
                ],
                [
                    50,
                    3
                ],
                [
                    20,
                    4
                ],
                [
                    30,
                    5
                ],
                [
                    40,
                    6
                ],
                [
                    50,
                    7
                ],
                [
                    50,
                    10
                ],
                [
                    50,
                    20
                ],
                [
                    50,
                    50
                ],
                [
                    1,
                    105
                ],
                [
                    50,
                    105
                ]
            ],
            "outputs": [
                6,
                1,
                42,
                18,
                312,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "277": {
        "title": "Find the Celebrity",
        "description": "You are at a party with `n` people labeled from 0 to n-1. Among them, there may exist one celebrity. The definition of a celebrity is that all the other n-1 people know the celebrity, but the celebrity does not know any of them. You can ask questions like 'Hi, A. Do you know B?' to get information about whether A knows B. Implement a function `int findCelebrity(n)` to find the celebrity at the party or verify that there is not one. Return the celebrity's label if there is a celebrity, otherwise return -1.",
        "example": "Example:\n\nInput: graph = [[1,1,0],[0,1,0],[1,1,1]]\nOutput: 1\nExplanation: There are three persons labeled with 0, 1, and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.",
        "level": "Medium",
        "tags": [
            "graph",
            "array",
            "celebrity",
            "knowledge"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        1,
                        0
                    ],
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        0,
                        1,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        0,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        1,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            ],
            "outputs": [
                1,
                -1,
                -1,
                -1,
                3,
                -1,
                3,
                -1,
                5,
                -1
            ]
        }
    },
    "278": {
        "title": "First Bad Version",
        "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.",
        "example": "Example:\n\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.",
        "level": "Easy",
        "tags": [
            "binary search",
            "optimization"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    4
                ],
                [
                    10,
                    7
                ],
                [
                    100,
                    50
                ],
                [
                    1,
                    1
                ],
                [
                    20,
                    15
                ],
                [
                    1000,
                    999
                ],
                [
                    50,
                    25
                ],
                [
                    8,
                    3
                ],
                [
                    15,
                    10
                ],
                [
                    100,
                    1
                ],
                [
                    500,
                    250
                ],
                [
                    10000,
                    5000
                ],
                [
                    100000,
                    75000
                ],
                [
                    1000000,
                    500000
                ],
                [
                    10000000,
                    2500000
                ],
                [
                    100000000,
                    75000000
                ],
                [
                    1000000000,
                    500000000
                ],
                [
                    10000000000,
                    2500000000
                ],
                [
                    100000000000,
                    75000000000
                ]
            ],
            "outputs": [
                4,
                7,
                50,
                1,
                15,
                999,
                25,
                3,
                10,
                1,
                250,
                5000,
                75000,
                500000,
                2500000,
                75000000,
                500000000,
                2500000000,
                75000000000
            ]
        }
    },
    "279": {
        "title": "Least Number of Perfect Square Numbers",
        "description": "Given an integer `n`, find the least number of perfect square numbers that sum to `n`.",
        "example": "Example:\n\nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "math"
        ],
        "test_cases": {
            "inputs": [
                12,
                13,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                14,
                15,
                16,
                17,
                18,
                19,
                20
            ],
            "outputs": [
                3,
                2,
                1,
                2,
                3,
                1,
                2,
                3,
                4,
                2,
                1,
                2,
                3,
                2,
                3,
                1,
                2,
                2,
                3,
                2
            ]
        }
    },
    "280": {
        "title": "Reorder Array",
        "description": "Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`. You may assume the input array always has a valid answer.",
        "example": "Example:\n\nInput: nums = [3,5,2,1,6,4]\nOutput: [3,5,1,6,2,4]\nExplanation: [1,6,2,5,3,4] is also accepted.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    5,
                    2,
                    1,
                    6,
                    4
                ],
                [
                    6,
                    6,
                    5,
                    6,
                    3,
                    8
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30
                ],
                [
                    50,
                    40,
                    30,
                    20,
                    10,
                    5
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ],
            "outputs": [
                [
                    3,
                    5,
                    1,
                    6,
                    2,
                    4
                ],
                [
                    6,
                    6,
                    5,
                    6,
                    3,
                    8
                ],
                [
                    1,
                    3,
                    2,
                    5,
                    4,
                    6
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500,
                    600
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30
                ],
                [
                    50,
                    40,
                    30,
                    20,
                    10,
                    5
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ]
            ]
        }
    },
    "281": {
        "title": "Zigzag Iterator",
        "description": "Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately. Implement the `ZigzagIterator` class with the following methods: \n\n- `ZigzagIterator(List<Integer> v1, List<Integer> v2)`: Initializes the object with the two vectors `v1` and `v2`. \n- `boolean hasNext()`: Returns `true` if the iterator still has elements, and `false` otherwise. \n- `int next()`: Returns the current element of the iterator and moves the iterator to the next element.",
        "example": "Example 1:\n\nInput: v1 = [1,2], v2 = [3,4,5,6]\nOutput: [1,3,2,4,5,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].\n\nExample 2:\n\nInput: v1 = [1], v2 = []\nOutput: [1]\n\nExample 3:\n\nInput: v1 = [], v2 = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "Iterator",
            "Array"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2],[3,4,5,6]]",
                "[[1],[2,3,4]]",
                "[[],[]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]"
            ],
            "outputs": [
                "[1,3,2,4,5,6]",
                "[1,2,3,4]",
                "[]",
                "[1,4,7,2,5,8,3,6,9]",
                "[1,6,11,2,7,12,3,8,13,4,9,14,5,10,15]",
                "[1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "282": {
        "title": "Insert Binary Operators",
        "description": "Given a string `num` that contains only digits and an integer `target`, return all possibilities to insert the binary operators '+' , '-' , and/or '*' between the digits of `num` so that the resultant expression evaluates to the `target` value. Note that operands in the returned expressions should not contain leading zeros.",
        "example": "Example:\n\nInput: num = \"123\", target = 6\nOutput: [\"1*2*3\", \"1+2+3\"]\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.",
        "level": "Medium",
        "tags": [
            "string",
            "recursion",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"123\"",
                "\"232\"",
                "\"3456237490\""
            ],
            "outputs": [
                "[\"1*2*3\", \"1+2+3\"]",
                "[\"2*3+2\", \"2+3*2\"]",
                "[]"
            ]
        }
    },
    "283": {
        "title": "Move Zeros to End",
        "description": "Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array.",
        "example": "Example:\n\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n\nExplanation: After moving all the zeros to the end, the array becomes [1,3,12,0,0].",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1,
                    0,
                    3,
                    12
                ],
                [
                    0
                ],
                [
                    1,
                    0,
                    2,
                    0,
                    3
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    2
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    0,
                    1,
                    0,
                    1,
                    0,
                    1
                ]
            ],
            "outputs": [
                [
                    1,
                    3,
                    12,
                    0,
                    0
                ],
                [
                    0
                ],
                [
                    1,
                    2,
                    3,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0,
                    0
                ]
            ]
        }
    },
    "284": {
        "title": "Peeking Iterator",
        "description": "Design an iterator that supports the `peek` operation on an existing iterator in addition to the `hasNext` and the `next` operations. Implement the `PeekingIterator` class with the following methods: `PeekingIterator(Iterator nums)`, `int next()`, `boolean hasNext()`, and `int peek()`. The `PeekingIterator` class should initialize the object with the given integer iterator `nums`. The `next()` method should return the next element in the iterator and move the pointer to the next element. The `hasNext()` method should return `true` if there are still elements in the iterator. The `peek()` method should return the next element in the iterator without moving the pointer.",
        "example": "Example:\n\nInput:\nPeekingIterator([1, 2, 3])\n\nOutput:\nnull, 1, 2, 2, 3, false\n\nExplanation:\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False",
        "level": "Medium",
        "tags": [
            "iterator",
            "peek",
            "hasNext",
            "next"
        ],
        "test_cases": {
            "inputs": [
                "[1, 2, 3]",
                "[4, 5, 6, 7]",
                "[10, 20, 30, 40, 50]",
                "[100, 200, 300, 400, 500, 600]",
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
                "[1]",
                "[2, 4, 6, 8, 10]",
                "[3, 6, 9, 12, 15, 18, 21]",
                "[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
                "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
            ],
            "outputs": [
                "null, 1, 2, 2, 3, false",
                "null, 4, 4, 5, 6, true",
                "null, 10, 10, 20, 30, true",
                "null, 100, 100, 200, 300, true",
                "null, 0, 0, 0, 0, true",
                "null, 1, 1, 1, 1, false",
                "null, 2, 2, 4, 6, true",
                "null, 3, 3, 6, 9, true",
                "null, 1000, 1000, 2000, 3000, true",
                "null, 2, 2, 3, 5, true"
            ]
        }
    },
    "285": {
        "title": "In-order Successor in Binary Search Tree",
        "description": "Given the `root` of a binary search tree and a node `p` in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return `null`.\n\nThe successor of a node `p` is the node with the smallest key greater than `p.val`.",
        "example": "Example:\n\nInput: root = [2,1,3], p = 1\nOutput: 2\nExplanation: The in-order successor of node 1 is node 2.\n\nInput: root = [5,3,6,2,4,null,null,1], p = 6\nOutput: null\nExplanation: There is no in-order successor of node 6, so the answer is `null`.",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "In-order Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        2,
                        1,
                        3
                    ],
                    "p": 1
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 6
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 4
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 5
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 3
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 2
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 1
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 0
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 7
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 8
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": 9
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -1
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -2
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -3
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -4
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -5
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -6
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -7
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -8
                },
                {
                    "root": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "p": -9
                }
            ],
            "outputs": [
                2,
                null,
                5,
                6,
                4,
                3,
                2,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
            ]
        }
    },
    "286": null,
    "287": {
        "title": "Find the Duplicate Number",
        "description": "Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one repeated number in `nums`, return this repeated number. You must solve the problem without modifying the array `nums` and using only constant extra space.",
        "example": "Example:\n\nInput: nums = [1,3,4,2,2]\nOutput: 2\n\nExplanation: The repeated number is 2.\n\nInput: nums = [3,1,3,4,2]\nOutput: 3\n\nExplanation: The repeated number is 3.",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,4,2,2]",
                "[3,1,3,4,2]",
                "[1,1,2,3,4]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,100]"
            ],
            "outputs": [
                "2",
                "3",
                "1",
                "2",
                "100"
            ]
        }
    },
    "288": {
        "title": "Word Abbreviation",
        "description": "You are given a dictionary of words. The abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an abbreviation of itself. Implement the ValidWordAbbr class which has two methods: ValidWordAbbr(String[] dictionary) - Initializes the object with the dictionary of words, and boolean isUnique(String word) - Returns true if either there is no word in the dictionary whose abbreviation is equal to the abbreviation of the given word, or if there is a word in the dictionary whose abbreviation is equal to the abbreviation of the given word and the word itself is the same as the given word.",
        "example": "Example:\n\nValidWordAbbr validWordAbbr = new ValidWordAbbr([\"deer\", \"door\", \"cake\", \"card\"]);\nvalidWordAbbr.isUnique(\"dear\"); // return false, dictionary word \"deer\" and word \"dear\" have the same abbreviation \"d2r\" but are not the same.\nvalidWordAbbr.isUnique(\"cart\"); // return true, no words in the dictionary have the abbreviation \"c2t\".\nvalidWordAbbr.isUnique(\"cane\"); // return false, dictionary word \"cake\" and word \"cane\" have the same abbreviation \"c2e\" but are not the same.\nvalidWordAbbr.isUnique(\"make\"); // return true, no words in the dictionary have the abbreviation \"m2e\".\nvalidWordAbbr.isUnique(\"cake\"); // return true, because \"cake\" is already in the dictionary and no other word in the dictionary has the abbreviation \"c2e\".",
        "level": "Medium",
        "tags": [
            "String",
            "Hash Table"
        ],
        "test_cases": {
            "inputs": [
                [
                    "deer",
                    "door",
                    "cake",
                    "card"
                ],
                [
                    "dear"
                ],
                [
                    "cart"
                ],
                [
                    "cane"
                ],
                [
                    "make"
                ],
                [
                    "cake"
                ]
            ],
            "outputs": [
                "null",
                "false",
                "true",
                "false",
                "true",
                "true"
            ]
        }
    },
    "289": null,
    "290": {
        "title": "Pattern Matching",
        "description": "Given a pattern and a string, determine if the string follows the same pattern. Follow means a full match, such that there is a bijection between a letter in the pattern and a non-empty word in the string.",
        "example": "Example:\n\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true\n\nExplanation: The pattern 'abba' matches the string 'dog cat cat dog' because 'a' corresponds to 'dog' and 'b' corresponds to 'cat'.\n\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false\n\nExplanation: The pattern 'abba' does not match the string 'dog cat cat fish' because the last word in the string is 'fish' which does not correspond to any letter in the pattern.",
        "level": "Easy",
        "tags": [
            "String",
            "Pattern Matching"
        ],
        "test_cases": {
            "inputs": [
                "\"abba\", \"dog cat cat dog\"",
                "\"abba\", \"dog cat cat fish\"",
                "\"aaaa\", \"dog cat cat dog\"",
                "\"abc\", \"apple banana cherry\"",
                "\"aabb\", \"apple apple banana banana\"",
                "\"abab\", \"cat dog cat dog\"",
                "\"abba\", \"dog dog dog dog\"",
                "\"abba\", \"dog cat cat cat\"",
                "\"abba\", \"dog cat cat cat dog\"",
                "\"abba\", \"dog cat cat cat cat\"",
                "\"abba\", \"dog cat cat cat cat dog\"",
                "\"abba\", \"dog cat cat cat cat cat\"",
                "\"abba\", \"dog cat cat cat cat cat dog\"",
                "\"abba\", \"dog cat cat cat cat cat cat\"",
                "\"abba\", \"dog cat cat cat cat cat cat dog\"",
                "\"abba\", \"dog cat cat cat cat cat cat cat\"",
                "\"abba\", \"dog cat cat cat cat cat cat cat dog\"",
                "\"abba\", \"dog cat cat cat cat cat cat cat cat\"",
                "\"abba\", \"dog cat cat cat cat cat cat cat cat dog\"",
                "\"abba\", \"dog cat cat cat cat cat cat cat cat cat\"",
                "\"abba\", \"dog cat cat cat cat cat cat cat cat cat dog\""
            ],
            "outputs": [
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "291": {
        "title": "Pattern Matching",
        "description": "Given a pattern and a string, determine if the string matches the pattern. A string matches the pattern if there is a bijective mapping of single characters to strings such that replacing each character in the pattern with the corresponding string results in the given string. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.",
        "example": "Example:\n\nInput: pattern = \"abab\", s = \"redblueredblue\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"red\"\n'b' -> \"blue\"",
        "level": "Medium",
        "tags": [
            "String",
            "Mapping"
        ],
        "test_cases": {
            "inputs": [
                {
                    "pattern": "abab",
                    "s": "redblueredblue"
                },
                {
                    "pattern": "aaaa",
                    "s": "asdasdasdasd"
                },
                {
                    "pattern": "aabb",
                    "s": "xyzabcxzyabc"
                },
                {
                    "pattern": "abc",
                    "s": "xyz"
                },
                {
                    "pattern": "a",
                    "s": "xyz"
                },
                {
                    "pattern": "ab",
                    "s": "xyz"
                },
                {
                    "pattern": "abc",
                    "s": "xyzxyzxyz"
                },
                {
                    "pattern": "aabb",
                    "s": "redredblueredblue"
                },
                {
                    "pattern": "abab",
                    "s": "redredblueredblue"
                },
                {
                    "pattern": "abab",
                    "s": "redredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredredredredredredred"
                },
                {
                    "pattern": "abab",
                    "s": "redredredredredredredredredredredredred"
                }
            ],
            "outputs": [
                true,
                true,
                false,
                false,
                true,
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "292": {
        "title": "Nim Game",
        "description": "You are playing the Nim Game with your friend. Initially, there is a heap of stones on the table. You and your friend will alternate taking turns, and you go first. On each turn, the person whose turn it is will remove 1 to 3 stones from the heap. The one who removes the last stone is the winner. Given the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.",
        "example": "Example 1:\n\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n\nExample 2:\n\nInput: n = 1\nOutput: true\n\nExample 3:\n\nInput: n = 2\nOutput: true",
        "level": "Easy",
        "tags": [
            "Math",
            "Game Theory"
        ],
        "test_cases": {
            "inputs": [
                4,
                1,
                2,
                5,
                10,
                15,
                20,
                25,
                30,
                100,
                1000,
                10000,
                12345,
                54321,
                99999,
                100000,
                231,
                230,
                229,
                228
            ],
            "outputs": [
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                false,
                false,
                false,
                true
            ]
        }
    },
    "293": {
        "title": "Flip Game",
        "description": "You are playing a Flip Game with your friend. You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `'++'` into `'--'`. The game ends when a person can no longer make a move, and therefore the other person will be the winner. Return all possible states of the string `currentState` after **one valid move**. If there is no valid move, return an empty list `[]`.",
        "example": "Example 1:\n\nInput: currentState =  \"++++ \"\nOutput: [\"--++ \", \"+--+ \", \"++-- \"]\n\nExample 2:\n\nInput: currentState =  \"+ \"\nOutput: []",
        "level": "Easy",
        "tags": [
            "string",
            "game"
        ],
        "test_cases": {
            "inputs": [
                "\"++++ \"",
                "\"+ \"",
                "\"--++ \"",
                "\"-+-+ \"",
                "\"++ \"",
                "\"- \"",
                "\"++-- \"",
                "\"--++-- \"",
                "\"++-+ \"",
                "\"-+- \"",
                "\"++- \"",
                "\"-+ \"",
                "\"-- \"",
                "\"-+-- \"",
                "\"+++- \"",
                "\"-+-++ \"",
                "\"++-+- \"",
                "\"-+-+- \"",
                "\"+++-+ \"",
                "\"-+-+- \""
            ],
            "outputs": [
                "[\"--++ \", \"+--+ \", \"++-- \"]",
                "[]",
                "[\"---- \"]",
                "[\"-+-- \", \"--+- \"]",
                "[\"-- \"]",
                "[]",
                "[\"--++-- \"]",
                "[\"++---- \", \"--++-- \"]",
                "[\"--+- \", \"-+-- \"]",
                "[\"-+-+ \", \"-+-- \"]",
                "[\"--+ \", \"-++ \"]",
                "[\"+- \", \"-+ \"]",
                "[]",
                "[\"-+---- \"]",
                "[\"+++- \", \"-+++ \"]",
                "[\"-+-++ \", \"-++-+ \"]",
                "[\"++-+- \", \"-++-- \"]",
                "[\"-+-+- \", \"-+-- \"]",
                "[\"+++-+ \", \"-++-+ \"]",
                "[\"-+-+- \", \"-+-- \"]"
            ]
        }
    },
    "294": {
        "title": "Flip Game Winner",
        "description": "You are playing a Flip Game with your friend. You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner. Return `true` if the starting player can guarantee a win, and `false` otherwise.",
        "example": "Example:\n\nInput: currentState = \"++++\"\nOutput: true\nExplanation: The starting player can guarantee a win by flipping the middle `++` to become `+--+`.",
        "level": "Medium",
        "tags": [
            "String",
            "Game"
        ],
        "test_cases": {
            "inputs": [
                "\"++++\"",
                "\"+\"",
                "\"++\"",
                "\"--\"",
                "\"+-+-\"",
                "\"-+-+\"",
                "\"++-+\"",
                "\"-++-\"",
                "\"+++-\"",
                "\"-+++\"",
                "\"+++++\"",
                "\"-++++\"",
                "\"++-++\"",
                "\"--++--\"",
                "\"-+-+-+\"",
                "\"-+-+-++\"",
                "\"-+-+-+-\"",
                "\"-+-+-+-+\"",
                "\"-+-+-+-++\"",
                "\"-+-+-+-+++\"",
                "\"-+-+-+-++++\""
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "295": {
        "title": "Median Finder",
        "description": "Implement a MedianFinder class that can find the median of a data stream. The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.",
        "example": "Example:\n\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    "MedianFinder",
                    "addNum",
                    "addNum",
                    "findMedian",
                    "addNum",
                    "findMedian"
                ],
                [
                    [],
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [],
                    [
                        3
                    ],
                    []
                ]
            ],
            "outputs": [
                [
                    "null",
                    "null",
                    "null",
                    "1.5",
                    "null",
                    "2.0"
                ]
            ]
        }
    },
    "296": null,
    "297": {
        "title": "Serialize and Deserialize Binary Tree",
        "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",
        "example": "Example:\n\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Serialization",
            "Deserialization"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,null,null,4,5]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,null,4]",
                "[1,2,3,4,5]",
                "[1,2,3,null,null,4,5,6]",
                "[1,2,3,null,null,4,5,null,6]",
                "[1,2,3,null,null,4,5,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,null,null,null,6]"
            ],
            "outputs": [
                "[1,2,3,null,null,4,5]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,null,4]",
                "[1,2,3,4,5]",
                "[1,2,3,null,null,4,5,6]",
                "[1,2,3,null,null,4,5,null,6]",
                "[1,2,3,null,null,4,5,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,null,null,6]",
                "[1,2,3,null,null,4,5,null,null,null,null,null,null,null,null,null,6]"
            ]
        }
    },
    "298": {
        "title": "Longest Consecutive Sequence Path",
        "description": "Given the `root` of a binary tree, return the length of the longest consecutive sequence path. A consecutive sequence path is a path where the values increase by one along the path. Note that the path can start at any node in the tree, and you cannot go from a node to its parent in the path.",
        "example": "Example 1:\n\nInput: root = [1,null,3,2,4,null,null,null,5]\nOutput: 3\nExplanation: Longest consecutive sequence path is 3-4-5, so return 3.\n\nExample 2:\n\nInput: root = [2,null,3,2,null,1]\nOutput: 2\nExplanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "consecutive sequence",
            "path"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,3,2,4,null,null,null,5]",
                "[2,null,3,2,null,1]",
                "[1,null,2,3,4,null,null,null,5]",
                "[1,null,2,3,4,null,null,null,6]",
                "[1,null,2,3,4,null,null,null,7]",
                "[1,null,2,3,4,null,null,null,8]",
                "[1,null,2,3,4,null,null,null,9]",
                "[1,null,2,3,4,null,null,null,10]",
                "[1,null,2,3,4,null,null,null,11]",
                "[1,null,2,3,4,null,null,null,12]",
                "[1,null,2,3,4,null,null,null,13]",
                "[1,null,2,3,4,null,null,null,14]",
                "[1,null,2,3,4,null,null,null,15]",
                "[1,null,2,3,4,null,null,null,16]",
                "[1,null,2,3,4,null,null,null,17]",
                "[1,null,2,3,4,null,null,null,18]",
                "[1,null,2,3,4,null,null,null,19]",
                "[1,null,2,3,4,null,null,null,20]",
                "[1,null,2,3,4,null,null,null,21]",
                "[1,null,2,3,4,null,null,null,22]"
            ],
            "outputs": [
                "3",
                "2",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19"
            ]
        }
    },
    "299": {
        "title": "Bulls and Cows Game",
        "description": "You are playing the Bulls and Cows game with your friend. You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info: the number of 'bulls', which are digits in the guess that are in the correct position, and the number of 'cows', which are digits in the guess that are in your secret number but are located in the wrong position. Given the secret number 'secret' and your friend's guess 'guess', write a function that returns the hint for your friend's guess.",
        "example": "For example, if the secret number is '1807' and your friend's guess is '7810', the function should return '1A3B' because there is 1 bull (the digit '1' in the correct position) and 3 cows (the digits '8', '0', and '7' are in the secret number but in the wrong position).\n\nInput:\nsecret = '1807'\nguess = '7810'\nOutput:\n'1A3B'",
        "level": "Medium",
        "tags": [
            "string",
            "game"
        ],
        "test_cases": {
            "inputs": [
                "'1807', '7810'",
                "'1123', '0111'",
                "'1234', '5678'",
                "'9876', '6789'",
                "'1111', '1111'",
                "'1234', '4321'",
                "'5678', '8765'",
                "'9999', '9999'",
                "'0000', '0000'",
                "'1234', '5678'",
                "'1234', '1234'",
                "'1234', '4321'",
                "'5678', '8765'",
                "'9999', '9999'",
                "'0000', '0000'",
                "'1234', '5678'",
                "'1234', '1234'",
                "'1234', '4321'",
                "'5678', '8765'",
                "'9999', '9999'"
            ],
            "outputs": [
                "'1A3B'",
                "'1A1B'",
                "'0A0B'",
                "'0A4B'",
                "'4A0B'",
                "'0A4B'",
                "'0A4B'",
                "'4A0B'",
                "'4A0B'",
                "'0A0B'",
                "'4A0B'",
                "'0A4B'",
                "'0A4B'",
                "'4A0B'",
                "'4A0B'",
                "'0A0B'",
                "'4A0B'",
                "'0A4B'",
                "'0A4B'",
                "'4A0B'"
            ]
        }
    },
    "300": {
        "title": "Longest Increasing Subsequence",
        "description": "Given an integer array `nums`, find the length of the longest strictly increasing subsequence.",
        "example": "Example 1:\n\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    9,
                    2,
                    5,
                    3,
                    7,
                    101,
                    18
                ],
                [
                    0,
                    1,
                    0,
                    3,
                    2,
                    3
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    1,
                    2,
                    3,
                    1,
                    2,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ]
            ],
            "outputs": [
                4,
                4,
                1,
                5,
                1,
                4,
                3,
                10,
                1,
                10
            ]
        }
    },
    "301": null,
    "302": null,
    "303": {
        "title": "Sum Range of Integer Array",
        "description": "You are given an integer array `nums` and you need to handle multiple queries of the following type: Calculate the sum of the elements of `nums` between indices `left` and `right` inclusive, where `left <= right`. Implement the `NumArray` class with the following methods: \n\n- `NumArray(int[] nums)`: Initializes the object with the integer array `nums`. \n- `int sumRange(int left, int right)`: Returns the sum of the elements of `nums` between indices `left` and `right` inclusive (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).",
        "example": "Example:\n\nInput:\nNumArray([-2, 0, 3, -5, 2, -1])\nsumRange(0, 2)\nsumRange(2, 5)\nsumRange(0, 5)\n\nOutput:\nnull\n1\n-1\n-3\n\nExplanation:\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // returns (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // returns 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // returns (-2) + 0 + 3 + (-5) + 2 + (-1) = -3",
        "level": "Medium",
        "tags": [
            "Array",
            "Prefix Sum"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        -2,
                        0,
                        3,
                        -5,
                        2,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ]
                ],
                [
                    [
                        -10,
                        -20,
                        -30,
                        -40,
                        -50
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        -1
                    ]
                ],
                [
                    [
                        0
                    ]
                ],
                [
                    [
                        100
                    ]
                ],
                [
                    [
                        -100
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        -6,
                        -7,
                        -8,
                        -9,
                        -10
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                        1000
                    ]
                ],
                [
                    [
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        -600,
                        -700,
                        -800,
                        -900,
                        -1000
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        -6,
                        -7,
                        -8,
                        -9,
                        -10,
                        -11,
                        -12,
                        -13,
                        -14,
                        -15,
                        -16,
                        -17,
                        -18,
                        -19,
                        -20
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900,
                        1000,
                        1100,
                        1200,
                        1300,
                        1400,
                        1500,
                        1600,
                        1700,
                        1800,
                        1900,
                        2000
                    ]
                ],
                [
                    [
                        -100,
                        -200,
                        -300,
                        -400,
                        -500,
                        -600,
                        -700,
                        -800,
                        -900,
                        -1000,
                        -1100,
                        -1200,
                        -1300,
                        -1400,
                        -1500,
                        -1600,
                        -1700,
                        -1800,
                        -1900,
                        -2000
                    ]
                ]
            ],
            "outputs": [
                [
                    null
                ],
                [
                    15
                ],
                [
                    -5
                ],
                [
                    0
                ],
                [
                    150
                ],
                [
                    -150
                ],
                [
                    1
                ],
                [
                    -1
                ],
                [
                    0
                ],
                [
                    100
                ],
                [
                    -100
                ],
                [
                    55
                ],
                [
                    -55
                ],
                [
                    0
                ],
                [
                    5500
                ],
                [
                    -5500
                ],
                [
                    210
                ],
                [
                    -210
                ],
                [
                    0
                ],
                [
                    21000
                ],
                [
                    -21000
                ]
            ]
        }
    },
    "304": {
        "title": "Matrix Sum Region",
        "description": "You are given a 2D matrix `matrix` and you need to handle multiple queries of the following type: Calculate the sum of the elements of `matrix` inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`. Implement the `NumMatrix` class with the following methods: `NumMatrix(int[][] matrix)` to initialize the object with the integer matrix `matrix`, and `int sumRegion(int row1, int col1, int row2, int col2)` to return the sum of the elements of `matrix` inside the specified rectangle. Your implementation should have a time complexity of O(1).",
        "example": "Example:\n\nInput:\nNumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]])\nsumRegion(2, 1, 4, 3) // returns 8\nsumRegion(1, 1, 2, 2) // returns 11\nsumRegion(1, 2, 2, 4) // returns 12",
        "level": "Medium",
        "tags": [
            "Matrix",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]]",
                "[2, 1, 4, 3]",
                "[1, 1, 2, 2]",
                "[1, 2, 2, 4]"
            ],
            "outputs": [
                "null",
                "8",
                "11",
                "12"
            ]
        }
    },
    "305": {
        "title": "Number of Islands",
        "description": "You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s).\n\nWe may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation.\n\nReturn an array of integers `answer` where `answer[i]` is the number of islands after turning the cell `(ri, ci)` into a land.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
        "example": "Example:\n\nInput: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]\nOutput: [1,1,2,3]\nExplanation:\nInitially, the 2d grid is filled with water.\n- Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land. We have 1 island.\n- Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land. We still have 1 island.\n- Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land. We have 2 islands.\n- Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land. We have 3 islands.",
        "level": "Medium",
        "tags": [
            "Array",
            "Graph",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                "[3, 3, [[0,0],[0,1],[1,2],[2,1]]]",
                "[1, 1, [[0,0]]]",
                "[2, 2, [[0,0],[1,1]]]",
                "[4, 4, [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3]]]",
                "[3, 4, [[0,0],[0,1],[1,2],[2,1],[2,3]]]",
                "[5, 5, [[0,0],[0,1],[1,2],[2,1],[2,3],[3,4],[4,3],[4,4]]]",
                "[2, 3, [[0,0],[0,1],[1,2]]]",
                "[3, 2, [[0,0],[1,0],[2,0]]]",
                "[1, 5, [[0,0],[0,1],[0,2],[0,3],[0,4]]]",
                "[5, 1, [[0,0],[1,0],[2,0],[3,0],[4,0]]]",
                "[2, 5, [[0,0],[0,1],[0,2],[0,3],[1,4]]]",
                "[5, 2, [[0,0],[1,0],[2,0],[3,0],[4,1]]]",
                "[3, 3, [[0,0],[0,1],[1,1],[1,2],[2,2]]]",
                "[4, 4, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3]]]",
                "[5, 5, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4]]]",
                "[6, 6, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5]]]",
                "[7, 7, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6]]]",
                "[8, 8, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6],[6,7],[7,7]]]",
                "[9, 9, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6],[6,7],[7,7],[7,8],[8,8]]]",
                "[10, 10, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6],[6,7],[7,7],[7,8],[8,8],[8,9],[9,9]]]",
                "[11, 11, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6],[6,7],[7,7],[7,8],[8,8],[8,9],[9,9],[9,10],[10,10]]]",
                "[12, 12, [[0,0],[0,1],[1,1],[1,2],[2,2],[2,3],[3,3],[3,4],[4,4],[4,5],[5,5],[5,6],[6,6],[6,7],[7,7],[7,8],[8,8],[8,9],[9,9],[9,10],[10,10],[10,11],[11,11]]]"
            ],
            "outputs": [
                "[1, 1, 2, 3]",
                "[1]",
                "[1, 2]",
                "[1, 2, 3, 4]",
                "[1, 1, 2, 3, 4]",
                "[1, 1, 2, 3, 4, 5]",
                "[1, 1, 2]",
                "[1, 1, 1]",
                "[1, 1, 1, 1, 1]",
                "[1, 1, 1, 1, 1]",
                "[1, 1, 1, 1, 2]",
                "[1, 1, 1, 1, 2]",
                "[1, 1, 2, 2, 2]",
                "[1, 1, 2, 2, 3, 3]",
                "[1, 1, 2, 2, 3, 3, 4]",
                "[1, 1, 2, 2, 3, 3, 4, 4]",
                "[1, 1, 2, 2, 3, 3, 4, 4, 5]",
                "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
                "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]",
                "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]",
                "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]"
            ]
        }
    },
    "306": {
        "title": "Additive Number",
        "description": "An additive number is a string whose digits can form an additive sequence. A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. Given a string containing only digits, return true if it is an additive number or false otherwise. Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.",
        "example": "Example:\n\nInput: \"112358\"\nOutput: true\nExplanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8",
        "level": "Medium",
        "tags": [
            "String",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "\"112358\"",
                "\"199100199\"",
                "\"123456789\"",
                "\"101\"",
                "\"111\"",
                "\"123\"",
                "\"100200300\"",
                "\"100100200\"",
                "\"100100200300\"",
                "\"100100200300500\"",
                "\"100100200300500800\"",
                "\"1001002003005008001300\"",
                "\"10010020030050080013002000\"",
                "\"100100200300500800130020003000\"",
                "\"1001002003005008001300200030005000\"",
                "\"10010020030050080013002000300050008000\"",
                "\"1001002003005008001300200030005000800013000\"",
                "\"10010020030050080013002000300050008000130002000\"",
                "\"100100200300500800130020003000500080001300020003000\"",
                "\"1001002003005008001300200030005000800013000200030005000\""
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "307": {
        "title": "NumArray - Update and Sum Range",
        "description": "You are given an integer array `nums` and you need to handle multiple queries of the following types:\n\n1. Update: Update the value of an element in `nums`.\n2. Sum Range: Calculate the sum of the elements of `nums` between indices `left` and `right` inclusive, where `left <= right`.\n\nImplement the `NumArray` class with the following methods:\n\n- `NumArray(int[] nums)`: Initializes the object with the integer array `nums`.\n- `void update(int index, int val)`: Updates the value of `nums[index]` to be `val`.\n- `int sumRange(int left, int right)`: Returns the sum of the elements of `nums` between indices `left` and `right` inclusive (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).",
        "example": "Example:\n\nInput:\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\nOutput:\nnull, 9, null, 8\n\nExplanation:\n- We initialize `numArray` with the array [1, 3, 5].\n- The sum of the elements between indices 0 and 2 is 1 + 3 + 5 = 9.\n- We update the element at index 1 to be 2, so the array becomes [1, 2, 5].\n- The sum of the elements between indices 0 and 2 is 1 + 2 + 5 = 8.",
        "level": "Medium",
        "tags": [
            "Array",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "[[1, 3, 5]]",
                "[0, 2]",
                "[1, 2]",
                "[0, 2]"
            ],
            "outputs": [
                "null",
                "9",
                "null",
                "8"
            ]
        }
    },
    "308": {
        "title": "2D Matrix Query",
        "description": "You are given a 2D matrix `matrix` and you need to handle multiple queries of two types: \n\n1. Update: Update the value of a cell in `matrix`. \n2. Sum Region: Calculate the sum of the elements of `matrix` inside a rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.\n\nImplement the NumMatrix class with the following methods:\n\n- `NumMatrix(int[][] matrix)`: Initializes the object with the integer matrix `matrix`.\n- `void update(int row, int col, int val)`: Updates the value of `matrix[row][col]` to be `val`.\n- `int sumRegion(int row1, int col1, int row2, int col2)`: Returns the sum of the elements of `matrix` inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.",
        "example": "Example:\n\nInput:\nmatrix = [[3, 0, 1, 4, 2],\n          [5, 6, 3, 2, 1],\n          [1, 2, 0, 1, 5],\n          [4, 1, 0, 1, 7],\n          [1, 0, 3, 0, 5]]\n\nOutput:\nnull, 8, null, 10\n\nExplanation:\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // returns 8 (sum of the left red rectangle)\nnumMatrix.update(3, 2, 2);       // matrix changes from left image to right image\nnumMatrix.sumRegion(2, 1, 4, 3); // returns 10 (sum of the right red rectangle)",
        "level": "Medium",
        "tags": [
            "2D Matrix",
            "Queries"
        ],
        "test_cases": {
            "inputs": [
                "[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]]",
                "[2, 1, 4, 3]",
                "[3, 2, 2]",
                "[2, 1, 4, 3]"
            ],
            "outputs": [
                "null",
                "8",
                "null",
                "10"
            ]
        }
    },
    "309": null,
    "310": {
        "title": "Minimum Height Trees",
        "description": "Given a tree with `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` edges where `edges[i] = [ai, bi]` indicates an undirected edge between nodes `ai` and `bi`, find all the root labels of the minimum height trees (MHTs). The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.",
        "example": "Example 1:\n\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: The height of the tree is 1 when the root is the node with label 1, which is the only MHT.\n\nExample 2:\n\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]\nExplanation: The heights of the trees are 2 when the root is the node with label 3, and 2 when the root is the node with label 4, which are the MHTs.",
        "level": "Medium",
        "tags": [
            "Graphs",
            "Trees",
            "BFS",
            "Topological Sort"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    [
                        [
                            1,
                            0
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            3,
                            0
                        ],
                        [
                            3,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            5,
                            4
                        ]
                    ]
                ],
                [
                    1,
                    []
                ],
                [
                    2,
                    [
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ]
            ],
            "outputs": [
                [
                    1
                ],
                [
                    3,
                    4
                ],
                [
                    0
                ],
                [
                    0,
                    1
                ],
                [
                    2
                ]
            ]
        }
    },
    "311": {
        "title": "Sparse Matrix Multiplication",
        "description": "Given two sparse matrices mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.",
        "example": "Example:\n\nInput: mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]\nOutput: [[7,0,0],[-7,0,3]]\n\nInput: mat1 = [[0]], mat2 = [[0]]\nOutput: [[0]]",
        "level": "Medium",
        "tags": [
            "matrix",
            "multiplication"
        ],
        "test_cases": {
            "inputs": [
                "[[1,0,0],[-1,0,3]]",
                "[[0]]",
                "[[1,2,3],[4,5,6]]",
                "[[7,8],[9,10],[11,12]]",
                "[[1,0,0],[0,1,0],[0,0,1]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,0],[0,1]]",
                "[[1,2],[3,4]]",
                "[[1,0,0],[0,1,0]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,0,0,0],[0,1,0,0],[0,0,1,0]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]"
            ],
            "outputs": [
                "[[7,0,0],[-7,0,3]]",
                "[[0]]",
                "[[38,44],[83,98]]",
                "[[43,46],[99,106]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[30,36,42],[66,81,96],[102,126,150]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[90,100,110,120],[202,228,254,280],[314,356,398,440],[426,484,542,600]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2],[3,4]]",
                "[[7,10],[15,22]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]"
            ]
        }
    },
    "312": {
        "title": "Burst Balloons",
        "description": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.\n\nReturn the maximum coins you can collect by bursting the balloons wisely.",
        "example": "Example:\n\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[3,1,5,8]",
                "[1,5]",
                "[2,4,6,8]",
                "[9,2,7,4,5]",
                "[1,2,3,4,5,6,7,8,9]",
                "[9,8,7,6,5,4,3,2,1]",
                "[5,5,5,5,5,5,5,5,5]",
                "[1,1,1,1,1,1,1,1,1]",
                "[0,0,0,0,0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "167",
                "10",
                "240",
                "504",
                "2016",
                "2016",
                "225",
                "9",
                "0",
                "8648640",
                "8648640"
            ]
        }
    },
    "313": {
        "title": "Super Ugly Number",
        "description": "A super ugly number is a positive integer whose prime factors are in the array `primes`. Given an integer `n` and an array of integers `primes`, return the `nth` super ugly number. The `nth` super ugly number is guaranteed to fit in a 32-bit signed integer.",
        "example": "Example:\n\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].",
        "level": "Medium",
        "tags": [
            "Math",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "n": 1,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 5,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 10,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 15,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 20,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 25,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 30,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 35,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 40,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 45,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 50,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 55,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 60,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 65,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 70,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 75,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 80,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 85,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                },
                {
                    "n": 90,
                    "primes": [
                        2,
                        3,
                        5
                    ]
                }
            ],
            "outputs": [
                1,
                5,
                12,
                24,
                32,
                48,
                64,
                80,
                96,
                120,
                128,
                144,
                160,
                192,
                200,
                216,
                240,
                256,
                288,
                320
            ]
        }
    },
    "314": {
        "title": "Vertical Order Traversal of Binary Tree",
        "description": "Given the `root` of a binary tree, return the vertical order traversal of its nodes' values. The vertical order traversal is defined as traversing the tree from top to bottom, column by column. If two nodes are in the same row and column, the order should be from left to right.",
        "example": "Example 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\n\nExample 2:\n\nInput: root = [3,9,8,4,0,1,7]\nOutput: [[4],[9],[3,0,1],[8],[7]]\n\nExample 3:\n\nInput: root = [3,9,8,4,0,1,7,null,null,null,2,5]\nOutput: [[4],[9,5],[3,0,1],[8,2],[7]]",
        "level": "Medium",
        "tags": [
            "binary tree",
            "traversal"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[3,9,8,4,0,1,7]",
                "[3,9,8,4,0,1,7,null,null,null,2,5]",
                "[]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,4,3,2,1]",
                "[1,null,2,null,3,null,4,null,5]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,null,null,5,6,null,null,7,8,null,null,9,10]"
            ],
            "outputs": [
                "[[9],[3,15],[20],[7]]",
                "[[4],[9],[3,0,1],[8],[7]]",
                "[[4],[9,5],[3,0,1],[8,2],[7]]",
                "[]",
                "[[1]]",
                "[[4],[2],[1,5],[3],[6],[7],[8],[9],[10]]",
                "[[2],[4],[3],[1],[5]]",
                "[[1],[2],[3],[4],[5]]",
                "[[2],[1,4],[3,5]]",
                "[[4],[2],[1,5],[3],[6],[7],[8],[9],[10]]"
            ]
        }
    },
    "315": null,
    "316": {
        "title": "Smallest Subsequence of Distinct Characters",
        "description": "Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.",
        "example": "Example:\n\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"",
        "level": "Medium",
        "tags": [
            "string",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "\"bcabc\"",
                "\"cbacdcbc\"",
                "\"leetcode\"",
                "\"aabbbccc\"",
                "\"abcde\"",
                "\"aaaaa\"",
                "\"zyxwvu\"",
                "\"dcba\"",
                "\"hello\"",
                "\"world\"",
                "\"programming\"",
                "\"coding\"",
                "\"algorithm\"",
                "\"leetcode\"",
                "\"python\"",
                "\"java\"",
                "\"javascript\"",
                "\"ruby\"",
                "\"c++\"",
                "\"html\"",
                "\"css\""
            ],
            "outputs": [
                "\"abc\"",
                "\"acdb\"",
                "\"code\"",
                "\"abc\"",
                "\"abcde\"",
                "\"a\"",
                "\"yxwvu\"",
                "\"abcd\"",
                "\"helo\"",
                "\"dlr\"",
                "\"agm\"",
                "\"cdi\"",
                "\"ahilortm\"",
                "\"ceodpy\"",
                "\"ajpv\"",
                "\"acijrstv\"",
                "\"bry\"",
                "\"c++\"",
                "\"ch\"",
                "\"css\""
            ]
        }
    },
    "317": null,
    "318": {
        "title": "Maximum Product of Word Lengths",
        "description": "Given a string array `words`, return the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. If no such two words exist, return 0.",
        "example": "Example 1:\n\nInput: words = [\"abcw \", \"baz \", \"foo \", \"bar \", \"xtfn \", \"abcdef \"]\nOutput: 16\nExplanation: The two words can be \"abcw \", \"xtfn \".\n\nExample 2:\n\nInput: words = [\"a \", \"ab \", \"abc \", \"d \", \"cd \", \"bcd \", \"abcd \"]\nOutput: 4\nExplanation: The two words can be \"ab \", \"cd \".\n\nExample 3:\n\nInput: words = [\"a \", \"aa \", \"aaa \", \"aaaa \"]\nOutput: 0\nExplanation: No such pair of words.",
        "level": "Medium",
        "tags": [
            "array",
            "string"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abcw ",
                    "baz ",
                    "foo ",
                    "bar ",
                    "xtfn ",
                    "abcdef "
                ],
                [
                    "a ",
                    "ab ",
                    "abc ",
                    "d ",
                    "cd ",
                    "bcd ",
                    "abcd "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa "
                ],
                [
                    "abc ",
                    "def ",
                    "ghi ",
                    "jkl "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop "
                ],
                [
                    "abc ",
                    "def ",
                    "ghi ",
                    "jkl ",
                    "mnop "
                ],
                [
                    "a ",
                    "b ",
                    "c ",
                    "d ",
                    "e "
                ],
                [
                    "aa ",
                    "bb ",
                    "cc ",
                    "dd ",
                    "ee "
                ],
                [
                    "aaa ",
                    "bbb ",
                    "ccc ",
                    "ddd ",
                    "eee "
                ],
                [
                    "aaaa ",
                    "bbbb ",
                    "cccc ",
                    "dddd ",
                    "eeee "
                ],
                [
                    "abc ",
                    "def ",
                    "ghi ",
                    "jkl ",
                    "mno ",
                    "pqr ",
                    "stu ",
                    "vwx ",
                    "yz "
                ],
                [
                    "a ",
                    "ab ",
                    "abc ",
                    "abcd ",
                    "abcde ",
                    "abcdef ",
                    "abcdefg ",
                    "abcdefgh ",
                    "abcdefghi "
                ],
                [
                    "a ",
                    "b ",
                    "c ",
                    "d ",
                    "e ",
                    "f ",
                    "g ",
                    "h ",
                    "i ",
                    "j ",
                    "k ",
                    "l ",
                    "m ",
                    "n ",
                    "o ",
                    "p ",
                    "q ",
                    "r ",
                    "s ",
                    "t ",
                    "u ",
                    "v ",
                    "w ",
                    "x ",
                    "y ",
                    "z "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaaaa "
                ],
                [
                    "a ",
                    "aa ",
                    "aaa ",
                    "aaaa ",
                    "aaaaa ",
                    "aaaaaa ",
                    "aaaaaaa ",
                    "aaaaaaaa ",
                    "aaaaaaaaa ",
                    "aaaaaaaaaa ",
                    "aaaaaaaaaaa ",
                    "aaaaaaaaaaaa ",
                    "aaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaaaa ",
                    "aaaaaaaaaaaaaaaaaaaa "
                ]
            ],
            "outputs": [
                16,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "319": {
        "title": "Bulb Switcher",
        "description": "There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb. Return the number of bulbs that are on after `n` rounds.",
        "example": "Example:\n\nInput: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off]. After the first round, the three bulbs are [on, on, on]. After the second round, the three bulbs are [on, off, on]. After the third round, the three bulbs are [on, off, off]. So you should return 1 because there is only one bulb is on.",
        "level": "Easy",
        "tags": [
            "math",
            "number theory"
        ],
        "test_cases": {
            "inputs": [
                0,
                1,
                2,
                3,
                5,
                10,
                100
            ],
            "outputs": [
                0,
                1,
                1,
                1,
                2,
                3,
                10
            ]
        }
    },
    "320": {
        "title": "Generalized Abbreviations",
        "description": "Given a word, create a list of all possible generalized abbreviations of the word. A word's generalized abbreviation can be constructed by taking any number of non-overlapping and non-adjacent substrings and replacing them with their respective lengths. For example, the word 'abcde' can be abbreviated into 'a3e' ( 'bcd' turned into '3' ), '1bcd1' ( 'a' and 'e' both turned into '1' ), '5' ( 'abcde' turned into '5' ), or 'abcde' (no substrings replaced). However, abbreviations like '23' ( 'ab' turned into '2' and 'cde' turned into '3' ) or '22de' ( 'ab' turned into '2' and 'bc' turned into '2' ) are invalid as the substrings chosen are adjacent or overlap.",
        "example": "Example:\n\nInput: word = 'word'\nOutput: ['4','3d','2r1','2rd','1o2','1o1d','1or1','1ord','w3','w2d','w1r1','w1rd','wo2','wo1d','wor1','word']\n\nInput: word = 'a'\nOutput: ['1','a']",
        "level": "Medium",
        "tags": [
            "String",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "word",
                "a",
                "abc",
                "hello",
                "coding",
                "python",
                "leetcode",
                "algorithm",
                "programming",
                "computer",
                "science",
                "data",
                "structure",
                "problem",
                "solution",
                "challenge",
                "interview",
                "practice",
                "knowledge",
                "experience"
            ],
            "outputs": [
                "['4','3d','2r1','2rd','1o2','1o1d','1or1','1ord','w3','w2d','w1r1','w1rd','wo2','wo1d','wor1','word']",
                "['1','a']",
                "['3','2c','1b1','1bc','a2','a1c','a1b','ab1','abc']",
                "['5','4o','3l1','3lo','2h2','2h1o','2he1','2hel','1e3','1e2o','1e1l1','1e1lo','1ehe1','1ehel','he2','he1o','hehel','hello']",
                "['6','5o','4g1','4gi','3d2','3d1n','3do1','3don','2c3','2c2g','2c1d1','2c1di','2co2','2co1g','2cod1','2codi','co3','co2g','co1di','coding']",
                "['6','5n','4h1','4ho','3t2','3t1o','3th1','3tho','2p3','2p2y','2p1t1','2p1to','2py2','2py1t','2pyt1','2python','py3','py2t','py1th','python']",
                "['9','8m','7t1','7th','6l2','6l1e','6le1','6leet','5a3','5a2m','5a1t1','5a1th','5am2','5am1t','5amet','5ameth','am3','am2th','am1eth','algorithm']",
                "['12','11g','10m1','10mi','9r2','9r1i','9ri1','9rit','8o3','8o2g','8o1r1','8o1rg','8og2','8og1r','8ogri','8ogrit','og3','og2ri','og1rit','programming']",
                "['8','7t','6c1','6co','5m2','5m1p','5mp1','5mpu','4u3','4u2t','4u1r1','4u1rt','4ut2','4ut1r','4utru','4utrut','ut3','ut2ru','ut1rut','computer']",
                "['7','6e','5c1','5cs','4i2','4i1e','4ie1','4ies','3s3','3s2c','3s1i1','3s1ic','3sci2','3sci1e','3scie','3scien','sc3','sc2en','sc1ien','science']",
                "['4','3a','2t1','2ta','1d2','1d1a','1da1','1dat','d3','d2at','d1ata','data']",
                "['9','8e','7u1','7ur','6c2','6c1t','6ct1','6ctu','5t3','5t2r','5t1u1','5t1ur','5tr2','5tr1u','5tru1','5truth','tr3','tr2ut','tr1uth','structure']",
                "['7','6m','5e1','5es','4o2','4o1l','4ol1','4olu','3u3','3u2r','3u1c1','3u1co','3ur2','3ur1c','3urc1','3urco','ur3','ur2co','ur1co','problem']",
                "['8','7n','6o1','6ol','5i2','5i1t','5it1','5ite','4e3','4e2s','4e1o1','4e1ol','4es2','4es1o','4esol','4esolu','es3','es2ol','es1olu','solution']",
                "['9','8e','7g1','7ge','6l2','6l1n','6ln1','6lni','5c3','5c2h','5c1a1','5c1al','5ch2','5ch1a','5chal','5chall','ch3','ch2al','ch1all','challenge']",
                "['10','9i','8e1','8ew','7n2','7n1t','7nt1','7nte','6r3','6r2v','6r1i1','6r1iv','6rv2','6rv1i','6rvi1','6rvin','rv3','rv2in','rv1vin','interview']",
                "['8','7e','6c1','6co','5t2','5t1i','5ti1','5tiv','4p3','4p2r','4p1a1','4p1ac','4pr2','4pr1a','4prac','4pract','pr3','pr2ct','pr1act','practice']",
                "['9','8e','7g1','7ge','6l2','6l1l','6ll1','6lln','5k3','5k2n','5k1o1','5k1ow','5kn2','5kn1o','5kno1','5kno2w','kn3','kn2ow','kn1ow','knowledge']",
                "['11','10e','9x1','9xp','8p2','8p1e','8pe1','8per','7i3','7i2e','7i1n1','7i1nt','7ie2','7ie1n','7ient','7ient1','ent3','ent2i','ent1ie','experience']"
            ]
        }
    },
    "321": {
        "title": "Maximum Number from Two Arrays",
        "description": "You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`. Create the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved. Return an array of the `k` digits representing the answer.",
        "example": "Example:\n\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]\n\nExplanation: The maximum number of length 5 that can be created from the digits of nums1 and nums2 is [9,8,6,5,3].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[3,4,6,5], [9,1,2,5,8,3], 5",
                "[6,7], [6,0,4], 5",
                "[3,9], [8,9], 3",
                "[1,2,3,4,5], [6,7,8,9], 9",
                "[0,0,0,0], [1,2,3,4,5], 5",
                "[9,8,7,6,5], [4,3,2,1], 8",
                "[1,2,3,4,5], [5,4,3,2,1], 10",
                "[9,9,9,9,9], [1,1,1,1,1], 10",
                "[1,2,3,4,5], [6,7,8,9], 3",
                "[1,2,3,4,5], [6,7,8,9], 1",
                "[1,2,3,4,5], [6,7,8,9], 0",
                "[1,2,3,4,5], [6,7,8,9], 6",
                "[1,2,3,4,5], [6,7,8,9], 7",
                "[1,2,3,4,5], [6,7,8,9], 8",
                "[1,2,3,4,5], [6,7,8,9], 9",
                "[1,2,3,4,5], [6,7,8,9], 10",
                "[1,2,3,4,5], [6,7,8,9], 11",
                "[1,2,3,4,5], [6,7,8,9], 12",
                "[1,2,3,4,5], [6,7,8,9], 13",
                "[1,2,3,4,5], [6,7,8,9], 14"
            ],
            "outputs": [
                "[9,8,6,5,3]",
                "[6,7,6,0,4]",
                "[9,8,9]",
                "[9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[9,8,7,6,5,4,3,2,1]",
                "[9,8,7,6,5,4,3,2,1,1]",
                "[9,9,9,9,9,1,1,1,1,1]",
                "[5,4,3]",
                "[9]",
                "[]",
                "[9,8,7,6,5,4]",
                "[9,8,7,6,5,4,3]",
                "[9,8,7,6,5,4,3,2]",
                "[9,8,7,6,5,4,3,2,1]",
                "[9,8,7,6,5,4,3,2,1,1]",
                "[9,8,7,6,5,4,3,2,1,1,1]",
                "[9,8,7,6,5,4,3,2,1,1,1,1]",
                "[9,8,7,6,5,4,3,2,1,1,1,1,1]",
                "[9,8,7,6,5,4,3,2,1,1,1,1,1,1]",
                "[9,8,7,6,5,4,3,2,1,1,1,1,1,1,1]"
            ]
        }
    },
    "322": {
        "title": "Fewest Coins",
        "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.",
        "example": "Example:\n\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,5]",
                "[2]",
                "[1]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]",
                "[1,2,5,10,20,50,100,200,500,1000,2000,5000]"
            ],
            "outputs": [
                "3",
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17"
            ]
        }
    },
    "323": {
        "title": "Number of Connected Components in a Graph",
        "description": "You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph. Your task is to return the number of connected components in the graph.",
        "example": "Example:\n\nInput: n = 5, edges = [[0,1],[1,2],[3,4]]\nOutput: 2\n\nExplanation: In this example, there are two connected components: [0, 1, 2] and [3, 4].\n\nInput: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]\nOutput: 1\n\nExplanation: In this example, all nodes are connected and form a single connected component.",
        "level": "Medium",
        "tags": [
            "Graph",
            "Connected Components"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            5
                        ]
                    ]
                ],
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            5,
                            6
                        ]
                    ]
                ],
                [
                    8,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            5,
                            6
                        ],
                        [
                            6,
                            7
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            1
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            2,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4,
                            0
                        ],
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ]
            ],
            "outputs": [
                2,
                1,
                1,
                2,
                2,
                2,
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "324": {
        "title": "Reorder Array",
        "description": "Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`. You may assume the input array always has a valid answer.",
        "example": "Example:\n\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    5,
                    1,
                    1,
                    6,
                    4
                ],
                [
                    1,
                    3,
                    2,
                    2,
                    3,
                    1
                ],
                [
                    4,
                    2,
                    7,
                    1,
                    5,
                    3
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                [
                    1,
                    6,
                    1,
                    5,
                    1,
                    4
                ],
                [
                    2,
                    3,
                    1,
                    3,
                    1,
                    2
                ],
                [
                    2,
                    7,
                    1,
                    5,
                    3,
                    4
                ],
                [
                    20,
                    50,
                    30,
                    60,
                    40,
                    10
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    6,
                    2,
                    5,
                    3,
                    4
                ],
                [
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    6,
                    2,
                    5,
                    3,
                    4,
                    7,
                    9,
                    8,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    1,
                    3,
                    1,
                    2,
                    2,
                    2,
                    3
                ],
                [
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    6,
                    2,
                    5,
                    3,
                    4,
                    7,
                    9,
                    8,
                    10,
                    11
                ],
                [
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    1,
                    3,
                    1,
                    2,
                    2,
                    2,
                    3,
                    2,
                    3
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    6,
                    2,
                    5,
                    3,
                    4,
                    7,
                    9,
                    8,
                    10,
                    11,
                    12
                ],
                [
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ]
        }
    },
    "325": {
        "title": "Maximum Length of Subarray with Sum Equals k",
        "description": "Given an integer array `nums` and an integer `k`, find the maximum length of a subarray that sums to `k`. If there is no such subarray, return `0`.",
        "example": "Example 1:\n\nInput: nums = [1,-1,5,-2,3], k = 3\nOutput: 4\nExplanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.\n\nExample 2:\n\nInput: nums = [-2,-1,2,1], k = 1\nOutput: 2\nExplanation: The subarray [-1, 2] sums to 1 and is the longest.",
        "level": "Medium",
        "tags": [
            "array",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "[1,-1,5,-2,3]",
                "[-2,-1,2,1]",
                "[1,2,3,4,5]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]"
            ],
            "outputs": [
                "4",
                "2",
                "0",
                "0",
                "5",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "326": {
        "title": "Power of Three",
        "description": "Given an integer `n`, determine if it is a power of three. Return `true` if `n` is a power of three, otherwise return `false`.",
        "example": "Example 1:\n\nInput: n = 27\nOutput: true\nExplanation: 27 = 3^3\n\nExample 2:\n\nInput: n = 0\nOutput: false\nExplanation: 0 is not a power of three\n\nExample 3:\n\nInput: n = -1\nOutput: false\nExplanation: -1 is not a power of three",
        "level": "Easy",
        "tags": [
            "math",
            "number theory"
        ],
        "test_cases": {
            "inputs": [
                27,
                0,
                -1,
                1,
                9,
                45,
                81,
                243,
                729,
                19683,
                59049,
                177147,
                531441,
                1594323,
                4782969,
                14348907,
                43046721,
                129140163,
                387420489,
                1162261467
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "327": {
        "title": "Range Sum Count",
        "description": "Given an integer array `nums` and two integers `lower` and `upper`, return the number of range sums that lie in `[lower, upper]` inclusive.\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.",
        "example": "Example:\n\nInput: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.",
        "level": "Medium",
        "tags": [
            "array",
            "prefix sum",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        -2,
                        5,
                        -1
                    ],
                    "lower": -2,
                    "upper": 2
                },
                {
                    "nums": [
                        0
                    ],
                    "lower": 0,
                    "upper": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 5,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 0,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": -5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 15,
                    "upper": 20
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 0,
                    "upper": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 6,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": -5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 0,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 5,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": -5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 0,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 5,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": -5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": -10,
                    "upper": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "lower": 0,
                    "upper": 10
                }
            ],
            "outputs": [
                3,
                1,
                0,
                15,
                15,
                0,
                0,
                0,
                0,
                0,
                15,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "328": {
        "title": "Reorder Linked List",
        "description": "Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem in O(1) extra space complexity and O(n) time complexity.",
        "example": "Example:\n\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]\n\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]",
        "level": "Medium",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[2,1,3,5,6,4,7]",
                "[1,3,5,7,9]",
                "[2,4,6,8,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1]",
                "[]",
                "[1,2]",
                "[2,1]",
                "[1,2,3]",
                "[3,2,1]",
                "[1,2,3,4]",
                "[4,3,2,1]",
                "[1,2,3,4,5,6]",
                "[6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7]",
                "[7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8]",
                "[8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[1,3,5,2,4]",
                "[2,3,6,7,1,5,4]",
                "[1,5,9,3,7]",
                "[2,6,10,4,8]",
                "[1,3,5,7,9,2,4,6,8,10]",
                "[10,8,6,4,2,9,7,5,3,1]",
                "[1]",
                "[]",
                "[1,2]",
                "[2,1]",
                "[1,3,2]",
                "[3,1,2]",
                "[1,3,5,2,4]",
                "[4,2,3,1]",
                "[1,3,5,2,4,6]",
                "[6,4,5,3,2,1]",
                "[1,3,5,7,2,4,6]",
                "[6,4,2,5,3,1,7,8]",
                "[1,3,5,7,2,4,6,8]",
                "[8,6,4,2,5,3,1,7]"
            ]
        }
    },
    "329": {
        "title": "Longest Increasing Path in a Matrix",
        "description": "Given an `m x n` integers matrix, return the length of the longest increasing path in the matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).",
        "example": "Example:\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming",
            "graph"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        9,
                        9,
                        4
                    ],
                    [
                        6,
                        6,
                        8
                    ],
                    [
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        3,
                        4,
                        5
                    ],
                    [
                        3,
                        2,
                        6
                    ],
                    [
                        2,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        9,
                        10,
                        11,
                        12
                    ]
                ],
                [
                    [
                        5,
                        4,
                        3,
                        2
                    ],
                    [
                        6,
                        7,
                        8,
                        1
                    ],
                    [
                        9,
                        10,
                        11,
                        12
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        9,
                        8,
                        7
                    ],
                    [
                        6,
                        5,
                        4
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                ],
                [
                    [
                        15,
                        14,
                        13,
                        12,
                        11
                    ],
                    [
                        10,
                        9,
                        8,
                        7,
                        6
                    ],
                    [
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        9,
                        10
                    ]
                ],
                [
                    [
                        10,
                        9
                    ],
                    [
                        8,
                        7
                    ],
                    [
                        6,
                        5
                    ],
                    [
                        4,
                        3
                    ],
                    [
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        3,
                        5,
                        7,
                        9
                    ],
                    [
                        2,
                        4,
                        6,
                        8,
                        10
                    ]
                ],
                [
                    [
                        10,
                        8,
                        6,
                        4,
                        2
                    ],
                    [
                        9,
                        7,
                        5,
                        3,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ],
                    [
                        5
                    ],
                    [
                        6
                    ],
                    [
                        7
                    ],
                    [
                        8
                    ],
                    [
                        9
                    ],
                    [
                        10
                    ]
                ],
                [
                    [
                        10
                    ],
                    [
                        9
                    ],
                    [
                        8
                    ],
                    [
                        7
                    ],
                    [
                        6
                    ],
                    [
                        5
                    ],
                    [
                        4
                    ],
                    [
                        3
                    ],
                    [
                        2
                    ],
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                ],
                [
                    [
                        20,
                        19,
                        18,
                        17,
                        16,
                        15,
                        14,
                        13,
                        12,
                        11
                    ],
                    [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        20,
                        19,
                        18,
                        17,
                        16,
                        15,
                        14,
                        13,
                        12,
                        11
                    ]
                ],
                [
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ]
            ],
            "outputs": [
                4,
                4,
                1,
                12,
                3,
                8,
                9,
                15,
                15,
                10,
                10,
                2,
                2,
                10,
                10,
                1,
                1,
                20,
                20,
                20,
                20
            ]
        }
    },
    "330": {
        "title": "Minimum Number of Patches",
        "description": "Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.",
        "example": "Example 1:\n\nInput: nums = [1,3], n = 6\nOutput: 1\nExplanation: Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. So we only need 1 patch.\n\nExample 2:\n\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n\nExample 3:\n\nInput: nums = [1,2,2], n = 5\nOutput: 0",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[1,3]",
                "[1,5,10]",
                "[1,2,2]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "1",
                "2",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "331": {
        "title": "Preorder Traversal Serialization",
        "description": "Given a string of comma-separated values representing a preorder traversal of a binary tree, determine if it is a correct serialization. Each non-null node is represented by its value, while null nodes are represented by the sentinel value '#'. You are not allowed to reconstruct the tree.",
        "example": "For example, given the preorder traversal '9,3,4,#,#,1,#,#,2,#,6,#,#', the output should be true. The tree can be serialized as '9,3,4,#,#,1,#,#,2,#,6,#,#', where '#' represents a null node.\n\nTo solve this problem, we can use a stack to simulate the traversal. We iterate through the preorder traversal string and push each value onto the stack. If we encounter a '#', we pop two values from the stack. If both values are '#', we replace them with a '#'. Otherwise, we push a '#' back onto the stack. At the end, if the stack contains only one '#' element, the serialization is correct and we return true; otherwise, we return false.",
        "level": "Medium",
        "tags": [
            "stack",
            "binary tree"
        ],
        "test_cases": {
            "inputs": [
                "9,3,4,#,#,1,#,#,2,#,6,#,#",
                "1,#",
                "9,#,#,1",
                "9,3,4,#,#,1,#,#,2,#,6,#,#,#",
                "9,3,4,#,#,1,#,#,2,#,6,#,#,#,#"
            ],
            "outputs": [
                true,
                false,
                false,
                false,
                false
            ]
        }
    },
    "332": {
        "title": "Reconstruct Itinerary",
        "description": "You are given a list of airline tickets where each ticket is represented as a pair of departure and arrival airports. Your task is to reconstruct the itinerary in order and return it. The itinerary must start with 'JFK' and should have the smallest lexical order when read as a single string.",
        "example": "Example 1:\n\nInput: tickets = [['MUC', 'LHR'], ['JFK', 'MUC'], ['SFO', 'SJC'], ['LHR', 'SFO']]\nOutput: ['JFK', 'MUC', 'LHR', 'SFO', 'SJC']\n\nExample 2:\n\nInput: tickets = [['JFK', 'SFO'], ['JFK', 'ATL'], ['SFO', 'ATL'], ['ATL', 'JFK'], ['ATL', 'SFO']]\nOutput: ['JFK', 'ATL', 'JFK', 'SFO', 'ATL', 'SFO']\nExplanation: Another possible reconstruction is ['JFK', 'SFO', 'ATL', 'JFK', 'ATL', 'SFO'] but it is larger in lexical order.",
        "level": "Medium",
        "tags": [
            "graph",
            "depth-first search",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[['MUC', 'LHR'], ['JFK', 'MUC'], ['SFO', 'SJC'], ['LHR', 'SFO']]",
                "[['JFK', 'SFO'], ['JFK', 'ATL'], ['SFO', 'ATL'], ['ATL', 'JFK'], ['ATL', 'SFO']]",
                "[['JFK', 'LGA'], ['LGA', 'LGB'], ['LGB', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO']]",
                "[['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK'], ['JFK', 'SFO'], ['SFO', 'JFK']]"
            ],
            "outputs": [
                "['JFK', 'MUC', 'LHR', 'SFO', 'SJC']",
                "['JFK', 'ATL', 'JFK', 'SFO', 'ATL', 'SFO']",
                "['JFK', 'LGA', 'LGB', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO']",
                "['JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK', 'SFO', 'JFK']"
            ]
        }
    },
    "333": null,
    "334": {
        "title": "Triplet Indices",
        "description": "Given an integer array `nums`, return `true` if there exists a triple of indices `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. If no such indices exist, return `false`.",
        "example": "Example 1:\n\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i < j < k is valid.\n\nExample 2:\n\nInput: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.\n\nExample 3:\n\nInput: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    5,
                    0,
                    4,
                    6
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    9,
                    8
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    5,
                    4,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    6,
                    5,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    7,
                    6,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    8,
                    7,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    9,
                    8
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                false
            ]
        }
    },
    "335": null,
    "336": {
        "title": "Palindrome Pairs",
        "description": "Given a 0-indexed array of unique strings `words`, find all pairs of indices (i, j) such that words[i] + words[j] is a palindrome. Return an array of all the palindrome pairs.",
        "example": "Example 1:\n\nInput: words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"abcddcba\", \"dcbaabcd\", \"slls\", \"llssssll\"]\n\nExample 2:\n\nInput: words = [\"bat\", \"tab\", \"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\", \"tabbat\"]\n\nExample 3:\n\nInput: words = [\"a\", \"\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"a\", \"a\"]",
        "level": "Medium",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abcd",
                    "dcba",
                    "lls",
                    "s",
                    "sssll"
                ],
                [
                    "bat",
                    "tab",
                    "cat"
                ],
                [
                    "a",
                    ""
                ],
                [
                    "race",
                    "car",
                    "dad",
                    "add"
                ],
                [
                    "abc",
                    "cba",
                    "def",
                    "fed"
                ],
                [
                    "hello",
                    "world",
                    "madam",
                    "racecar"
                ],
                [
                    "",
                    "a",
                    "b",
                    "c"
                ],
                [
                    "abc",
                    "cba",
                    "def",
                    "fed",
                    "a",
                    "aa",
                    "aaa"
                ],
                [
                    "abcd",
                    "dcba",
                    "lls",
                    "s",
                    "sssll",
                    "a",
                    "aa",
                    "aaa"
                ],
                [
                    "abcd",
                    "dcba",
                    "lls",
                    "s",
                    "sssll",
                    "a",
                    "aa",
                    "aaa",
                    "racecar"
                ]
            ],
            "outputs": [
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        2,
                        4
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        0,
                        3
                    ],
                    [
                        1,
                        2
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        4
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        6
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        5
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        7
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        9
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        5
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        7
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        9
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        11
                    ]
                ]
            ]
        }
    },
    "337": {
        "title": "Maximum Amount of Money to Rob Without Alerting Police",
        "description": "A thief has found a new area for his thievery. The area consists of houses arranged in a binary tree structure, with each house having one and only one parent house. The thief cannot rob two directly-linked houses on the same night, as it will alert the police. Given the root of the binary tree, write a function to calculate the maximum amount of money the thief can rob without alerting the police.",
        "example": "Example:\n\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: The maximum amount of money the thief can rob is 3 + 3 + 1 = 7.\n\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: The maximum amount of money the thief can rob is 4 + 5 = 9.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,3,null,3,null,1]",
                "[3,4,5,1,3,null,1]",
                "[4,1,null,2,null,3]",
                "[2,1,3,null,4]",
                "[3,2,1,5,4,null,6]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,null,6,7,8,9,10,null,null,11,12,13,null,null,null,null,14]"
            ],
            "outputs": [
                "7",
                "9",
                "7",
                "7",
                "12",
                "16",
                "48"
            ]
        }
    },
    "338": {
        "title": "Counting Ones in Binary Representation",
        "description": "Given an integer `n`, return an array `ans` of length `n + 1` such that for each `i` (`0 <= i <= n`), `ans[i]` is the number of `1`'s in the binary representation of `i`.",
        "example": "Example 1:\n\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n\nExample 2:\n\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101",
        "level": "Easy",
        "tags": [
            "Array",
            "Bit Manipulation"
        ],
        "test_cases": {
            "inputs": [
                2,
                5,
                0,
                10,
                15,
                100
            ],
            "outputs": [
                [
                    0,
                    1,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    0
                ],
                [
                    0,
                    1,
                    1,
                    2,
                    1,
                    2,
                    2,
                    3,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    1,
                    2,
                    1,
                    2,
                    2,
                    3,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    3,
                    4
                ],
                [
                    0,
                    1,
                    1,
                    2,
                    1,
                    2,
                    2,
                    3,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    3,
                    4,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    3,
                    4,
                    2,
                    3,
                    3,
                    4,
                    3,
                    4,
                    4,
                    5,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    3,
                    4,
                    2,
                    3,
                    3,
                    4,
                    3,
                    4,
                    4,
                    5,
                    2,
                    3,
                    3,
                    4,
                    3,
                    4,
                    4,
                    5,
                    3,
                    4,
                    4,
                    5,
                    4,
                    5,
                    5,
                    6,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    3,
                    4,
                    2,
                    3,
                    3,
                    4,
                    3,
                    4,
                    4,
                    5,
                    2,
                    3,
                    3,
                    4,
                    3,
                    4,
                    4,
                    5,
                    3,
                    4,
                    4,
                    5,
                    4,
                    5,
                    5,
                    6,
                    2,
                    3,
                    3,
                    4,
                    3,
                    4,
                    4,
                    5,
                    3,
                    4,
                    4,
                    5,
                    4,
                    5,
                    5,
                    6,
                    3,
                    4,
                    4,
                    5,
                    4,
                    5,
                    5,
                    6,
                    4,
                    5,
                    5,
                    6,
                    5,
                    6,
                    6,
                    7
                ]
            ]
        }
    },
    "339": {
        "title": "Nested List Depth Sum",
        "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. The depth of an integer is the number of lists that it is inside of. Return the sum of each integer in `nestedList` multiplied by its depth.",
        "example": "Example 1:\n\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: 10\nExplanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.\n\nExample 2:\n\nInput: nestedList = [1,[4,[6]]]\nOutput: 27\nExplanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.\n\nExample 3:\n\nInput: nestedList = [0]\nOutput: 0",
        "level": "Easy",
        "tags": [
            "nested list",
            "depth",
            "sum"
        ],
        "test_cases": {
            "inputs": [
                "[[1,1],2,[1,1]]",
                "[1,[4,[6]]]",
                "[0]",
                "[[1,2],[3,4],[5,6]]",
                "[[1,[2,3]],[4,[5,6]]]",
                "[[1,[2,[3,[4]]]]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3],[[4,5,6],[7,8,9]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33]]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33,[34,35,36]]]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33,[34,35,36,[37,38,39]]]]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33,[34,35,36,[37,38,39,[40,41,42]]]]]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33,[34,35,36,[37,38,39,[40,41,42,[43,44,45]]]]]]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33,[34,35,36,[37,38,39,[40,41,42,[43,44,45,[46,47,48]]]]]]]]]]]]]]]]]",
                "[[1,2,3],[[4,5,6],[[7,8,9],[10,11,12,[13,14,15,[16,17,18,[19,20,21,[22,23,24,[25,26,27,[28,29,30,[31,32,33,[34,35,36,[37,38,39,[40,41,42,[43,44,45,[46,47,48,[49,50,51]]]]]]]]]]]]]]]]]]"
            ],
            "outputs": [
                "10",
                "27",
                "0",
                "44",
                "44",
                "10",
                "45",
                "45",
                "45",
                "75",
                "75",
                "75",
                "125",
                "125",
                "125",
                "175",
                "175",
                "175",
                "225",
                "225",
                "225",
                "275",
                "275",
                "275",
                "325",
                "325"
            ]
        }
    },
    "340": {
        "title": "Longest Substring with At Most K Distinct Characters",
        "description": "Given a string `s` and an integer `k`, find the length of the longest substring of `s` that contains at most `k` distinct characters. Return the length of the longest substring.",
        "example": "Example:\n\nInput: s = \"eceba\", k = 2\nOutput: 3\nExplanation: The longest substring with at most 2 distinct characters is \"ece\" with length 3.\n\nInput: s = \"aa\", k = 1\nOutput: 2\nExplanation: The longest substring with at most 1 distinct character is \"aa\" with length 2.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "\"eceba\", 2",
                "\"aa\", 1",
                "\"\", 0",
                "\"a\", 1",
                "\"abcabcbb\", 2",
                "\"pwwkew\", 3",
                "\"abcdefg\", 1",
                "\"aab\", 1",
                "\"aab\", 2",
                "\"aab\", 3",
                "\"aabbcc\", 1",
                "\"aabbcc\", 2",
                "\"aabbcc\", 3",
                "\"aabbcc\", 4",
                "\"aabbcc\", 5",
                "\"aabbcc\", 6",
                "\"aabbcc\", 7",
                "\"aabbcc\", 8",
                "\"aabbcc\", 9",
                "\"aabbcc\", 10"
            ],
            "outputs": [
                "3",
                "2",
                "0",
                "1",
                "4",
                "3",
                "1",
                "2",
                "3",
                "3",
                "1",
                "2",
                "3",
                "4",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6"
            ]
        }
    },
    "341": {
        "title": "Nested List Iterator",
        "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\nImplement the `NestedIterator` class:\n\n- `NestedIterator(List nestedList)`: Initializes the iterator with the nested list `nestedList`.\n- `int next()`: Returns the next integer in the nested list.\n- `boolean hasNext()`: Returns `true` if there are still some integers in the nested list and `false` otherwise.\n\nYour code will be tested with the following pseudocode:\n\n```\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n```\n\nIf `res` matches the expected flattened list, then your code will be judged as correct.",
        "example": "Example 1:\n\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n\nExample 2:\n\nInput: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].",
        "level": "Medium",
        "tags": [
            "nested list",
            "iterator"
        ],
        "test_cases": {
            "inputs": [
                "[[1,1],2,[1,1]]",
                "[1,[4,[6]]]",
                "[[1,2,3],4,[5,[6,7]]]",
                "[[1,2],3,[4,[5,6,[7,8]]]]",
                "[1,[2,[3,[4,[5,[6,[7,[8,[9,[10]]]]]]]]]]",
                "[[1,2,3,4,5,6,7,8,9,10]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1],[2,3],[4,5,6],[7,8,9,10]]",
                "[[1,2,3,4],[5,6,7,8],[9,10]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1],[2,3],[4,5,6],[7,8,9,10]]",
                "[[1,2,3,4],[5,6,7,8],[9,10]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1],[2,3],[4,5,6],[7,8,9,10]]",
                "[[1,2,3,4],[5,6,7,8],[9,10]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]"
            ],
            "outputs": [
                "[1,1,2,1,1]",
                "[1,4,6]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "342": {
        "title": "Power of Four",
        "description": "Given an integer `n`, determine if it is a power of four. Return `true` if `n` is a power of four, otherwise return `false`. An integer `n` is a power of four if there exists an integer `x` such that `n == 4^x`.",
        "example": "Example 1:\n\nInput: n = 16\nOutput: true\nExplanation: 16 is equal to 4^2, so it is a power of four.\n\nExample 2:\n\nInput: n = 5\nOutput: false\nExplanation: 5 is not a power of four.\n\nExample 3:\n\nInput: n = 1\nOutput: true\nExplanation: 1 is equal to 4^0, so it is a power of four.",
        "level": "Easy",
        "tags": [
            "math",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                16,
                5,
                1,
                0,
                64,
                100,
                256,
                1024,
                10000,
                1048576,
                1073741824,
                2147483647,
                -16,
                -5,
                -1,
                -64,
                -100,
                -256,
                -1024,
                -10000
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                false,
                true,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "343": {
        "title": "Maximum Product of Integer Break",
        "description": "Given an integer `n`, break it into the sum of `k` positive integers, where `k >= 2`, and maximize the product of those integers. Return the maximum product you can get.",
        "example": "Example 1:\n\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 * 1 = 1.\n\nExample 2:\n\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 * 3 * 4 = 36.",
        "level": "Medium",
        "tags": [
            "mathematics",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                2,
                10,
                5,
                15,
                20,
                30,
                58,
                3,
                8,
                12,
                25,
                40,
                50,
                55,
                6,
                18,
                24,
                36,
                45,
                52
            ],
            "outputs": [
                1,
                36,
                6,
                243,
                1458,
                24300,
                1549681956,
                2,
                18,
                81,
                8748,
                4860000,
                40500000,
                23514624000,
                9,
                486,
                8748,
                874800,
                40500000,
                23514624000
            ]
        }
    },
    "344": {
        "title": "Reverse String",
        "description": "Write a function that reverses a string. The input string is given as an array of characters `s`. You must do this by modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) with `O(1)` extra memory.",
        "example": "Example:\n\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
        "level": "Easy",
        "tags": [
            "Array",
            "String",
            "In-place"
        ],
        "test_cases": {
            "inputs": [
                "[\"h\",\"e\",\"l\",\"l\",\"o\"]",
                "[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]",
                "[\"a\",\"b\",\"c\",\"d\",\"e\"]",
                "[\"1\",\"2\",\"3\",\"4\",\"5\"]",
                "[\"a\"]",
                "[\"A\",\"B\",\"C\"]",
                "[\"d\",\"o\",\"g\"]",
                "[\"r\",\"a\",\"c\",\"e\",\"c\",\"a\",\"r\"]",
                "[\"l\",\"e\",\"v\",\"e\",\"l\"]",
                "[\"m\",\"a\",\"d\",\"a\",\"m\"]",
                "[\"r\",\"o\",\"t\",\"a\",\"t\",\"o\",\"r\"]",
                "[\"s\",\"t\",\"a\",\"t\",\"i\",\"o\",\"n\"]",
                "[\"r\",\"e\",\"v\",\"e\",\"r\",\"s\",\"e\"]",
                "[\"p\",\"a\",\"l\",\"i\",\"n\",\"d\",\"r\",\"o\",\"m\",\"e\"]",
                "[\"a\",\"n\",\"a\",\"g\",\"r\",\"a\",\"m\"]",
                "[\"c\",\"o\",\"d\",\"i\",\"n\",\"g\"]",
                "[\"q\",\"u\",\"e\",\"s\",\"t\",\"i\",\"o\",\"n\"]",
                "[\"e\",\"x\",\"a\",\"m\",\"p\",\"l\",\"e\"]",
                "[\"t\",\"e\",\"s\",\"t\"]",
                "[\"i\",\"n\",\"p\",\"u\",\"t\"]"
            ],
            "outputs": [
                "[\"o\",\"l\",\"l\",\"e\",\"h\"]",
                "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]",
                "[\"e\",\"d\",\"c\",\"b\",\"a\"]",
                "[\"5\",\"4\",\"3\",\"2\",\"1\"]",
                "[\"a\"]",
                "[\"C\",\"B\",\"A\"]",
                "[\"g\",\"o\",\"d\"]",
                "[\"r\",\"a\",\"c\",\"e\",\"c\",\"a\",\"r\"]",
                "[\"l\",\"e\",\"v\",\"e\",\"l\"]",
                "[\"m\",\"a\",\"d\",\"a\",\"m\"]",
                "[\"r\",\"o\",\"t\",\"a\",\"t\",\"o\",\"r\"]",
                "[\"n\",\"o\",\"i\",\"t\",\"a\",\"t\",\"s\"]",
                "[\"e\",\"s\",\"r\",\"e\",\"v\",\"e\",\"r\"]",
                "[\"e\",\"m\",\"o\",\"r\",\"d\",\"n\",\"i\",\"l\",\"a\",\"p\"]",
                "[\"m\",\"a\",\"r\",\"g\",\"a\",\"n\",\"a\"]",
                "[\"g\",\"n\",\"i\",\"d\",\"o\",\"c\"]",
                "[\"n\",\"o\",\"i\",\"t\",\"s\",\"u\",\"e\",\"q\"]",
                "[\"e\",\"l\",\"p\",\"m\",\"a\",\"x\",\"e\"]",
                "[\"t\",\"s\",\"e\",\"t\"]",
                "[\"t\",\"u\",\"p\",\"n\",\"i\"]"
            ]
        }
    },
    "345": {
        "title": "Reverse Vowels in a String",
        "description": "Given a string `s`, reverse only all the vowels in the string and return it. The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.",
        "example": "Example:\n\nInput: s = \"hello\"\nOutput: \"holle\"\n\nExplanation: The vowels in the string are 'e' and 'o'. Reversing them gives us the string \"holle\".",
        "level": "Easy",
        "tags": [
            "String",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "\"hello\"",
                "\"leetcode\"",
                "\"aA\"",
                "\"race car\"",
                "\"apple\"",
                "\"banana\"",
                "\"Abcde\"",
                "\"aeiou\"",
                "\"a\"",
                "\"\"",
                "\"AaEeIiOoUu\""
            ],
            "outputs": [
                "\"holle\"",
                "\"leotcede\"",
                "\"Aa\"",
                "\"rec a car\"",
                "\"eppla\"",
                "\"banane\"",
                "\"edcbA\"",
                "\"uoiea\"",
                "\"a\"",
                "\"\"",
                "\"UuOoIiEeAa\""
            ]
        }
    },
    "346": {
        "title": "Moving Average of Sliding Window",
        "description": "Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window. Implement the `MovingAverage` class with the following methods:\n\n- `MovingAverage(int size)`: Initializes the object with the size of the window `size`.\n- `double next(int val)`: Returns the moving average of the last `size` values of the stream.",
        "example": "Example:\n\nInput:\nMovingAverage(3)\nnext(1)\nnext(10)\nnext(3)\nnext(5)\n\nOutput:\nnull\n1.0\n5.5\n4.66667\n6.0\n\nExplanation:\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // return 1.0 = 1 / 1\nmovingAverage.next(10); // return 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3",
        "level": "Medium",
        "tags": [
            "Array",
            "Sliding Window",
            "Design"
        ],
        "test_cases": {
            "inputs": [
                "[3]",
                "[1]",
                "[10]",
                "[3]",
                "[5]",
                "[2]",
                "[4]",
                "[6]",
                "[8]",
                "[10]",
                "[12]",
                "[14]",
                "[16]",
                "[18]",
                "[20]",
                "[22]",
                "[24]",
                "[26]",
                "[28]",
                "[30]"
            ],
            "outputs": [
                "null",
                "1.0",
                "5.5",
                "4.66667",
                "6.0",
                "3.0",
                "5.66667",
                "6.66667",
                "8.66667",
                "10.66667",
                "12.66667",
                "14.66667",
                "16.66667",
                "18.66667",
                "20.66667",
                "22.66667",
                "24.66667",
                "26.66667",
                "28.66667",
                "30.0"
            ]
        }
    },
    "347": null,
    "348": {
        "title": "Tic Tac Toe Game",
        "description": "You are given a Tic Tac Toe game on an `n x n` board between two players. Implement the `TicTacToe` class that allows players to make moves on the board and determines the winner.",
        "example": "TicTacToe ticTacToe = new TicTacToe(3);\n\n// Player 1 makes a move at (0, 0)\nint result1 = ticTacToe.move(0, 0, 1); // returns 0\n\n// Player 2 makes a move at (0, 2)\nint result2 = ticTacToe.move(0, 2, 2); // returns 0\n\n// Player 1 makes a move at (2, 2)\nint result3 = ticTacToe.move(2, 2, 1); // returns 0\n\n// Player 2 makes a move at (1, 1)\nint result4 = ticTacToe.move(1, 1, 2); // returns 0\n\n// Player 1 makes a move at (2, 0)\nint result5 = ticTacToe.move(2, 0, 1); // returns 0\n\n// Player 2 makes a move at (1, 0)\nint result6 = ticTacToe.move(1, 0, 2); // returns 0\n\n// Player 1 makes a move at (2, 1)\nint result7 = ticTacToe.move(2, 1, 1); // returns 1\n",
        "level": "Medium",
        "tags": [
            "Array",
            "Game"
        ],
        "test_cases": {
            "inputs": [
                "[3]",
                "[0, 0, 1]",
                "[0, 2, 2]",
                "[2, 2, 1]",
                "[1, 1, 2]",
                "[2, 0, 1]",
                "[1, 0, 2]",
                "[2, 1, 1]"
            ],
            "outputs": [
                "null",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "1"
            ]
        }
    },
    "349": {
        "title": "Array Intersection",
        "description": "Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.",
        "example": "Example:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.",
        "level": "Easy",
        "tags": [
            "array",
            "intersection"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,2,1], [2,2]",
                "[4,9,5], [9,4,9,8,4]",
                "[1,2,3,4], [5,6,7,8]",
                "[1,1,1,1], [1,1,1,1]",
                "[], []",
                "[1,2,3], []",
                "[], [1,2,3]",
                "[1,2,3], [4,5,6]",
                "[1,2,3,4,5], [5,4,3,2,1]",
                "[1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15,1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10]"
            ],
            "outputs": [
                "[2]",
                "[9,4]",
                "[]",
                "[1]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[1,2,3,4,5]",
                "[]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ]
        }
    },
    "350": {
        "title": "Intersection of Two Arrays II",
        "description": "Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.",
        "example": "Example 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.",
        "level": "Easy",
        "tags": [
            "array",
            "hash table",
            "two pointers",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,2,1], [2,2]",
                "[4,9,5], [9,4,9,8,4]",
                "[1,2,3,4,5], [6,7,8,9,10]",
                "[1,1,1,1,1], [1,1,1,1,1]",
                "[], []",
                "[1,2,3,4,5], []",
                "[1,2,3,4,5], [6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,17,18,19,20]",
                "[1,1,2,2,3,3,4,4,5,5], [1,2,3,4,5]",
                "[1,1,2,2,3,3,4,4,5,5], [5,4,3,2,1]",
                "[1,1,2,2,3,3,4,4,5,5], [6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5], [5,4,3,2,1,6,7,8,9,10]"
            ],
            "outputs": [
                "[2,2]",
                "[4,9]",
                "[]",
                "[1,1,1,1,1]",
                "[]",
                "[]",
                "[]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[]",
                "[]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[]",
                "[]"
            ]
        }
    },
    "351": {
        "title": "Android Unlock Patterns",
        "description": "Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an 'unlock pattern' by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a valid unlock pattern if both of the following are true:\n\n- All the dots in the sequence are distinct.\n- If the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\n\nHere are some example valid and invalid unlock patterns:\n\n- The 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.\n- The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.\n- The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.\n- The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.\n\nGiven two integers `m` and `n`, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least `m` keys and at most `n` keys.\n\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.",
        "example": "Example:\n\nInput: m = 1, n = 1\nOutput: 9\n\nInput: m = 1, n = 2\nOutput: 65",
        "level": "Medium",
        "tags": [
            "grid",
            "sequence",
            "combinations"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    1
                ],
                [
                    1,
                    2
                ],
                [
                    2,
                    2
                ],
                [
                    2,
                    3
                ],
                [
                    3,
                    3
                ],
                [
                    3,
                    4
                ],
                [
                    4,
                    4
                ],
                [
                    4,
                    5
                ],
                [
                    5,
                    5
                ],
                [
                    5,
                    6
                ],
                [
                    6,
                    6
                ],
                [
                    6,
                    7
                ],
                [
                    7,
                    7
                ],
                [
                    7,
                    8
                ],
                [
                    8,
                    8
                ],
                [
                    8,
                    9
                ],
                [
                    9,
                    9
                ],
                [
                    1,
                    9
                ],
                [
                    2,
                    9
                ],
                [
                    3,
                    9
                ]
            ],
            "outputs": [
                9,
                65,
                4,
                64,
                139,
                576,
                1206,
                3364,
                7140,
                14034,
                24640,
                38368,
                56100,
                79120,
                105136,
                135751,
                169344,
                389112,
                963504,
                1988736
            ]
        }
    },
    "352": {
        "title": "Summary Ranges",
        "description": "You are given a data stream of non-negative integers. Implement the `SummaryRanges` class that can summarize the numbers seen so far as a list of disjoint intervals. The class should have the following methods:\n\n- `SummaryRanges()`: Initializes the object with an empty stream.\n- `void addNum(int value)`: Adds the integer `value` to the stream.\n- `int[][] getIntervals()`: Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The intervals should be sorted by `starti`.",
        "example": "Example:\n\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    1
                ],
                [],
                [
                    3
                ],
                [],
                [
                    7
                ],
                [],
                [
                    2
                ],
                [],
                [
                    6
                ]
            ],
            "outputs": [
                "null",
                "null",
                "[[1, 1]]",
                "null",
                "[[1, 1], [3, 3]]",
                "null",
                "[[1, 1], [3, 3], [7, 7]]",
                "null",
                "[[1, 3], [7, 7]]",
                "null",
                "[[1, 3], [6, 7]]"
            ]
        }
    },
    "353": {
        "title": "Snake Game",
        "description": "Design a Snake game that is played on a device with screen size `height x width`. The snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit. You are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`. Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food. When a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake. The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself). Implement the `SnakeGame` class: `SnakeGame(int width, int height, int[][] food)` initializes the object with a screen of size `height x width` and the positions of the `food`. `int move(String direction)` returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.",
        "example": "SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);\nsnakeGame.move(\"R\"); // return 0\nsnakeGame.move(\"D\"); // return 0\nsnakeGame.move(\"R\"); // return 1, snake eats the first piece of food. The second piece of food appears at (0, 1).\nsnakeGame.move(\"U\"); // return 1\nsnakeGame.move(\"L\"); // return 2, snake eats the second food. No more food appears.\nsnakeGame.move(\"U\"); // return -1, game over because snake collides with border",
        "level": "Medium",
        "tags": [
            "Array",
            "Simulation"
        ],
        "test_cases": {
            "inputs": [
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"D\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"U\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"L\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"U\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"D\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"U\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"L\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"U\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"D\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"U\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"L\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"U\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"R\"]",
                "[[3, 2, [[1, 2], [0, 1]]], \"D\"]"
            ],
            "outputs": [
                "0",
                "0",
                "1",
                "1",
                "2",
                "-1",
                "0",
                "0",
                "1",
                "1",
                "2",
                "-1",
                "0",
                "0",
                "1",
                "1",
                "2",
                "-1",
                "0",
                "0"
            ]
        }
    },
    "354": {
        "title": "Russian Doll Envelopes",
        "description": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope. One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height. Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other). Note: You cannot rotate an envelope.",
        "example": "Example:\n\nInput: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[5,4],[6,4],[6,7],[2,3]]",
                "[[1,1],[1,1],[1,1]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,2],[2,1],[3,4],[4,3]]",
                "[[1,1],[2,2],[3,3],[4,4]]",
                "[[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "[[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]",
                "[[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
                "[[8,8],[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
                "[[9,9],[8,8],[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[10,10],[9,9],[8,8],[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11]]",
                "[[11,11],[10,10],[9,9],[8,8],[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12]]",
                "[[12,12],[11,11],[10,10],[9,9],[8,8],[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]]"
            ],
            "outputs": [
                "3",
                "1",
                "4",
                "2",
                "1",
                "1",
                "2",
                "1",
                "2",
                "1",
                "2",
                "1",
                "2",
                "1",
                "2",
                "1",
                "2",
                "1",
                "2",
                "1"
            ]
        }
    },
    "355": {
        "title": "Twitter News Feed",
        "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.",
        "example": "Twitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure",
            "Social Media"
        ],
        "test_cases": {
            "inputs": [
                "Twitter",
                "postTweet",
                "getNewsFeed",
                "follow",
                "postTweet",
                "getNewsFeed",
                "unfollow",
                "getNewsFeed"
            ],
            "outputs": [
                "null",
                "null",
                "[5]",
                "null",
                "null",
                "[6, 5]",
                "null",
                "[5]"
            ]
        }
    },
    "356": {
        "title": "Symmetric Reflection",
        "description": "Given `n` points on a 2D plane, determine if there exists a line parallel to the y-axis that reflects the given points symmetrically. In other words, check if there is a line such that after reflecting all points over the line, the original points' set is the same as the reflected ones. Note that there can be repeated points.",
        "example": "Example:\n\nInput: points = [[1,1],[-1,1]]\nOutput: true\nExplanation: We can choose the line x = 0.",
        "level": "Medium",
        "tags": [
            "geometry",
            "reflection",
            "symmetry"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        1
                    ],
                    [
                        -1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        -1,
                        -1
                    ],
                    [
                        -2,
                        -2
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        3
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        5
                    ]
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "357": {
        "title": "Count of Numbers with Unique Digits",
        "description": "Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`. A number is considered to have unique digits if all the digits in the number are different from each other. For example, the number 123 has unique digits, but the number 122 does not have unique digits.",
        "example": "Example 1:\n\nInput: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 <= x < 100, excluding 11, 22, 33, 44, 55, 66, 77, 88, 99\n\nExample 2:\n\nInput: n = 0\nOutput: 1",
        "level": "Easy",
        "tags": [
            "Math",
            "Numbers"
        ],
        "test_cases": {
            "inputs": [
                2,
                0,
                1,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "outputs": [
                91,
                1,
                10,
                739,
                5275,
                32491,
                168571,
                712891,
                2345851
            ]
        }
    },
    "358": {
        "title": "Rearrange String with Minimum Distance",
        "description": "Given a string `s` and an integer `k`, rearrange `s` such that the same characters are **at least** distance `k` from each other. If it is not possible to rearrange the string, return an empty string `\" \"`.",
        "example": "Example:\n\nInput: s =  \"aabbcc \", k = 3\nOutput:  \"abcabc \"\nExplanation: The same letters are at least a distance of 3 from each other.",
        "level": "Medium",
        "tags": [
            "string",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "\"aabbcc \"",
                "\"aaabc \"",
                "\"aaadbbcc \"",
                "\"abcde \"",
                "\"aabbccdd \"",
                "\"aabbbccdd \"",
                "\"aabbccddeeff \"",
                "\"aabbccddeeffgg \"",
                "\"aabbccddeeffgghh \"",
                "\"aabbccddeeffgghhiijj \"",
                "\"aabbccddeeffgghhiijjkk \"",
                "\"aabbccddeeffgghhiijjkkll \"",
                "\"aabbccddeeffgghhiijjkkllmm \"",
                "\"aabbccddeeffgghhiijjkkllmmnn \"",
                "\"aabbccddeeffgghhiijjkkllmmnnoo \"",
                "\"aabbccddeeffgghhiijjkkllmmnnoopp \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqq \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqqrr \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqqrrss \""
            ],
            "outputs": [
                "\"abcabc \"",
                "\" \"",
                "\"abacabcd \"",
                "\"abcde \"",
                "\"abcdabcd \"",
                "\"ababcdcde \"",
                "\"abcdefabcdef \"",
                "\"abcdefgabcdefg \"",
                "\"abcdefghabcdefgh \"",
                "\"abcdefghiabcdefghi \"",
                "\"abcdefghijabcdefghij \"",
                "\"abcdefghijkabcdefghijk \"",
                "\"abcdefghijklabcdefghijkl \"",
                "\"abcdefghijklmabcdefghijklm \"",
                "\"abcdefghijklmnabcdefghijklmn \"",
                "\"abcdefghijklmnoabcdefghijklmno \"",
                "\"abcdefghijklmnopabcdefghijklmnop \"",
                "\"abcdefghijklmnopqabcdefghijklmnopq \"",
                "\"abcdefghijklmnopqrabcdefghijklmnopqr \"",
                "\"abcdefghijklmnopqrsabcdefghijklmnopqrs \""
            ]
        }
    },
    "359": {
        "title": "Logger System",
        "description": "Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds. Implement the Logger class with the following methods:\n\n- Logger(): Initializes the logger object.\n- shouldPrintMessage(int timestamp, string message): Returns true if the message should be printed in the given timestamp, otherwise returns false.",
        "example": "Example:\n\nInput:\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1, \"foo\");  // return true, next allowed timestamp for \"foo\" is 1 + 10 = 11\nlogger.shouldPrintMessage(2, \"bar\");  // return true, next allowed timestamp for \"bar\" is 2 + 10 = 12\nlogger.shouldPrintMessage(3, \"foo\");  // 3 < 11, return false\nlogger.shouldPrintMessage(8, \"bar\");  // 8 < 12, return false\nlogger.shouldPrintMessage(10, \"foo\"); // 10 < 11, return false\nlogger.shouldPrintMessage(11, \"foo\"); // 11 >= 11, return true, next allowed timestamp for \"foo\" is 11 + 10 = 21",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                "[[], [1, \"foo\"], [2, \"bar\"], [3, \"foo\"], [8, \"bar\"], [10, \"foo\"], [11, \"foo\"]]"
            ],
            "outputs": [
                "[null, true, true, false, false, false, true]"
            ]
        }
    },
    "360": {
        "title": "Quadratic Function Application",
        "description": "Given a sorted integer array `nums` and three integers `a`, `b`, and `c`, apply a quadratic function of the form `f(x) = ax^2 + bx + c` to each element `nums[i]` in the array, and return the array in sorted order.",
        "example": "Example:\n\nInput: nums = [-4,-2,2,4], a = 1, b = 3, c = 5\nOutput: [3,9,15,33]\n\nExplanation: Applying the quadratic function to each element in the array results in [1+3+5, 4+6+5, 16+12+5, 36+12+5] = [9, 15, 33, 53]. Sorting the array gives the final output [3, 9, 15, 33].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        -4,
                        -2,
                        2,
                        4
                    ],
                    "a": 1,
                    "b": 3,
                    "c": 5
                },
                {
                    "nums": [
                        -4,
                        -2,
                        2,
                        4
                    ],
                    "a": -1,
                    "b": 3,
                    "c": 5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 2,
                    "b": 1,
                    "c": 0
                },
                {
                    "nums": [
                        0,
                        0,
                        0,
                        0
                    ],
                    "a": 0,
                    "b": 0,
                    "c": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 0,
                    "b": 0,
                    "c": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 1,
                    "b": 0,
                    "c": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 0,
                    "b": 1,
                    "c": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 1,
                    "b": 1,
                    "c": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": -1,
                    "b": -1,
                    "c": -1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 2,
                    "b": -1,
                    "c": 3
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": -2,
                    "b": 1,
                    "c": -3
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 1,
                    "b": -2,
                    "c": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": -1,
                    "b": 2,
                    "c": -1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 2,
                    "b": 2,
                    "c": 2
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": -2,
                    "b": -2,
                    "c": -2
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 0,
                    "b": 0,
                    "c": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 1,
                    "b": 0,
                    "c": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 0,
                    "b": 1,
                    "c": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": 1,
                    "b": 1,
                    "c": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "a": -1,
                    "b": -1,
                    "c": 0
                }
            ],
            "outputs": [
                [
                    3,
                    9,
                    15,
                    33
                ],
                [
                    -23,
                    -5,
                    1,
                    7
                ],
                [
                    2,
                    5,
                    10,
                    17,
                    26
                ],
                [
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    3,
                    5,
                    7,
                    9,
                    11
                ],
                [
                    -3,
                    -3,
                    -3,
                    -3,
                    -3
                ],
                [
                    1,
                    0,
                    3,
                    10,
                    21
                ],
                [
                    -3,
                    -1,
                    1,
                    5,
                    11
                ],
                [
                    1,
                    0,
                    1,
                    4,
                    9
                ],
                [
                    -3,
                    -1,
                    1,
                    5,
                    11
                ],
                [
                    6,
                    8,
                    12,
                    20,
                    30
                ],
                [
                    -6,
                    -8,
                    -12,
                    -20,
                    -30
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ]
        }
    },
    "361": {
        "title": "Maximum Enemies to Kill",
        "description": "Given an `m x n` matrix `grid` where each cell is either a wall 'W', an enemy 'E' or empty '0', return the maximum enemies you can kill using one bomb. You can only place the bomb in an empty cell.\n\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.",
        "example": "Example:\n\nInput: grid = [['0', 'E', '0', '0'], ['E', '0', 'W', 'E'], ['0', 'E', '0', '0']]\nOutput: 3\n\nExplanation: The bomb can be placed at (1, 2) to kill 3 enemies in the same row and column.\n\nInput: grid = [['W', 'W', 'W'], ['0', '0', '0'], ['E', 'E', 'E']]\nOutput: 1\n\nExplanation: The bomb can be placed at (1, 1) to kill 1 enemy in the same row and column.",
        "level": "Medium",
        "tags": [
            "matrix",
            "grid",
            "bomb",
            "maximum",
            "enemies"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        "0",
                        "E",
                        "0",
                        "0"
                    ],
                    [
                        "E",
                        "0",
                        "W",
                        "E"
                    ],
                    [
                        "0",
                        "E",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "E",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "0",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "0",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "E",
                        "0"
                    ]
                ],
                [
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "0",
                        "E"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "0",
                        "W"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "E"
                    ]
                ],
                [
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "0",
                        "E",
                        "E"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "0",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "E",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "0",
                        "0"
                    ]
                ],
                [
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "0"
                    ],
                    [
                        "0",
                        "0",
                        "W"
                    ]
                ],
                [
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "E"
                    ],
                    [
                        "E",
                        "E",
                        "0"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "0"
                    ]
                ]
            ],
            "outputs": [
                3,
                1,
                0,
                9,
                0,
                1,
                8,
                0,
                1,
                7,
                0,
                1,
                6,
                0,
                1,
                5,
                0,
                1,
                4,
                0
            ]
        }
    },
    "362": {
        "title": "Hit Counter",
        "description": "Design a hit counter which counts the number of hits received in the past 5 minutes (i.e., the past 300 seconds). Your system should accept a timestamp parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., timestamp is monotonically increasing). Several hits may arrive roughly at the same time. Implement the HitCounter class with the following methods: HitCounter() Initializes the object of the hit counter system. void hit(int timestamp) Records a hit that happened at timestamp (in seconds). Several hits may happen at the same timestamp. int getHits(int timestamp) Returns the number of hits in the past 5 minutes from timestamp (i.e., the past 300 seconds).",
        "example": "HitCounter hitCounter = new HitCounter();\nhitCounter.hit(1);       // hit at timestamp 1.\nhitCounter.hit(2);       // hit at timestamp 2.\nhitCounter.hit(3);       // hit at timestamp 3.\nhitCounter.getHits(4);   // get hits at timestamp 4, return 3.\nhitCounter.hit(300);     // hit at timestamp 300.\nhitCounter.getHits(300); // get hits at timestamp 300, return 4.\nhitCounter.getHits(301); // get hits at timestamp 301, return 3.",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                "HitCounter",
                "hit",
                "hit",
                "hit",
                "getHits",
                "hit",
                "getHits",
                "getHits"
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "3",
                "null",
                "4",
                "3"
            ]
        }
    },
    "363": {
        "title": "Max Sum of Rectangle No Larger Than K",
        "description": "Given an `m x n` matrix `matrix` and an integer `k`, find the maximum sum of a rectangle in the matrix such that its sum is no larger than `k`. Return the maximum sum.",
        "example": "Example:\n\nInput: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: The sum of the blue rectangle [[0, 1], [-2, 3]] is 2, which is the maximum sum no larger than k (k = 2).",
        "level": "Medium",
        "tags": [
            "matrix",
            "subarray",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "matrix": [
                        [
                            1,
                            0,
                            1
                        ],
                        [
                            0,
                            -2,
                            3
                        ]
                    ],
                    "k": 2
                },
                {
                    "matrix": [
                        [
                            2,
                            2,
                            -1
                        ]
                    ],
                    "k": 3
                },
                {
                    "matrix": [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ],
                    "k": -5
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 10
                },
                {
                    "matrix": [
                        [
                            -1,
                            -2,
                            -3,
                            -4,
                            -5
                        ]
                    ],
                    "k": 0
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 0
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 15
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 5
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 6
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 7
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 8
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 9
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 11
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 12
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 13
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 14
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 16
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 17
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 18
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 19
                },
                {
                    "matrix": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    ],
                    "k": 20
                }
            ],
            "outputs": [
                2,
                3,
                -5,
                10,
                0,
                0,
                15,
                5,
                6,
                7,
                8,
                9,
                11,
                12,
                13,
                14,
                16,
                17,
                18,
                19,
                20
            ]
        }
    },
    "364": {
        "title": "Nested List Weight Sum",
        "description": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. Let `maxDepth` be the maximum depth of any integer.\n\nThe weight of an integer is `maxDepth - (the depth of the integer) + 1`.\n\nReturn the sum of each integer in `nestedList` multiplied by its weight.",
        "example": "Example:\n\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: 8\nExplanation: Four 1's with a weight of 1, one 2 with a weight of 2.\n1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8",
        "level": "Medium",
        "tags": [
            "nested list",
            "depth",
            "weight",
            "sum"
        ],
        "test_cases": {
            "inputs": [
                "[[1,1],2,[1,1]]",
                "[1,[4,[6]]]",
                "[[1,2,3],4,[5,[6,7]]]",
                "[[1,[2,[3,[4]]]],5]",
                "[[1,2,3],4,[5,[6,[7,[8]]]]]",
                "[[1,[2,[3,[4,[5]]]]],6]",
                "[[1,[2,[3,[4,[5,[6]]]]]],7]",
                "[[1,[2,[3,[4,[5,[6,[7]]]]]]],8]",
                "[[1,[2,[3,[4,[5,[6,[7,[8]]]]]]]],9]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9]]]]]]]]],10]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10]]]]]]]]]],11]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11]]]]]]]]]]],12]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12]]]]]]]]]]]],13]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13]]]]]]]]]]]]],14]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13,[14]]]]]]]]]]]]]],15]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13,[14,[15]]]]]]]]]]]]]]],16]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13,[14,[15,[16]]]]]]]]]]]]]]]],17]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13,[14,[15,[16,[17]]]]]]]]]]]]]]]]],18]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13,[14,[15,[16,[17,[18]]]]]]]]]]]]]]]]]],19]",
                "[[1,[2,[3,[4,[5,[6,[7,[8,[9,[10,[11,[12,[13,[14,[15,[16,[17,[18,[19]]]]]]]]]]]]]]]]]]],20]"
            ],
            "outputs": [
                "8",
                "17",
                "55",
                "15",
                "110",
                "21",
                "140",
                "36",
                "220",
                "55",
                "286",
                "78",
                "455",
                "105",
                "650",
                "153",
                "880",
                "210",
                "1155",
                "276"
            ]
        }
    },
    "365": {
        "title": "Measuring Water with Two Jugs",
        "description": "You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.\n\nIf `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained **within one or both buckets** by the end.\n\nOperations allowed:\n\n* Fill any of the jugs with water.\n* Empty any of the jugs.\n* Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.",
        "example": "Example:\n\nInput: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\nOutput: true\nExplanation: The famous [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example",
        "level": "Medium",
        "tags": [
            "math",
            "puzzle"
        ],
        "test_cases": {
            "inputs": [
                {
                    "jug1Capacity": 3,
                    "jug2Capacity": 5,
                    "targetCapacity": 4
                },
                {
                    "jug1Capacity": 2,
                    "jug2Capacity": 6,
                    "targetCapacity": 5
                },
                {
                    "jug1Capacity": 1,
                    "jug2Capacity": 2,
                    "targetCapacity": 3
                },
                {
                    "jug1Capacity": 7,
                    "jug2Capacity": 11,
                    "targetCapacity": 10
                },
                {
                    "jug1Capacity": 4,
                    "jug2Capacity": 9,
                    "targetCapacity": 7
                },
                {
                    "jug1Capacity": 6,
                    "jug2Capacity": 8,
                    "targetCapacity": 7
                },
                {
                    "jug1Capacity": 10,
                    "jug2Capacity": 10,
                    "targetCapacity": 20
                },
                {
                    "jug1Capacity": 1,
                    "jug2Capacity": 1,
                    "targetCapacity": 1
                },
                {
                    "jug1Capacity": 5,
                    "jug2Capacity": 5,
                    "targetCapacity": 10
                },
                {
                    "jug1Capacity": 2,
                    "jug2Capacity": 3,
                    "targetCapacity": 4
                },
                {
                    "jug1Capacity": 8,
                    "jug2Capacity": 12,
                    "targetCapacity": 16
                },
                {
                    "jug1Capacity": 7,
                    "jug2Capacity": 7,
                    "targetCapacity": 14
                },
                {
                    "jug1Capacity": 3,
                    "jug2Capacity": 4,
                    "targetCapacity": 5
                },
                {
                    "jug1Capacity": 6,
                    "jug2Capacity": 9,
                    "targetCapacity": 15
                },
                {
                    "jug1Capacity": 2,
                    "jug2Capacity": 5,
                    "targetCapacity": 7
                },
                {
                    "jug1Capacity": 10,
                    "jug2Capacity": 15,
                    "targetCapacity": 25
                },
                {
                    "jug1Capacity": 1,
                    "jug2Capacity": 3,
                    "targetCapacity": 2
                },
                {
                    "jug1Capacity": 4,
                    "jug2Capacity": 7,
                    "targetCapacity": 11
                },
                {
                    "jug1Capacity": 5,
                    "jug2Capacity": 8,
                    "targetCapacity": 13
                },
                {
                    "jug1Capacity": 9,
                    "jug2Capacity": 12,
                    "targetCapacity": 21
                }
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                false,
                true,
                true,
                true
            ]
        }
    },
    "366": {
        "title": "Collect Leaf Nodes of Binary Tree",
        "description": "Given the `root` of a binary tree, collect all the leaf nodes and remove them from the tree. Repeat this process until the tree is empty. Return the collected leaf nodes in the order they were removed.",
        "example": "Example:\n\nInput: root = [1,2,3,4,5]\nOutput: [[4,5,3],[2],[1]]\nExplanation: The leaf nodes are [4,5,3] at level 0, [2] at level 1, and [1] at level 2. The order of the leaf nodes at each level does not matter.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,null,null,5,6,null,null,7,8]"
            ],
            "outputs": [
                "[[4,5,3],[2],[1]]",
                "[[1]]",
                "[[8,9,10,6,7,4,5,3,2,1]]",
                "[[4,5,3],[2,1]]",
                "[[7,8,5,6,3,4,2,1]]"
            ]
        }
    },
    "367": {
        "title": "Perfect Square",
        "description": "Given a positive integer num, determine if it is a perfect square.",
        "example": "Example 1:\n\nInput: num = 16\nOutput: true\nExplanation: 4 * 4 = 16\n\nExample 2:\n\nInput: num = 14\nOutput: false\nExplanation: There is no integer whose square is equal to 14.",
        "level": "Easy",
        "tags": [
            "math",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                16,
                14,
                1,
                2,
                3,
                4,
                9,
                10,
                11,
                12,
                13,
                15,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "368": {
        "title": "Largest Divisible Subset",
        "description": "Given a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n\n*   `answer[i] % answer[j] == 0`, or\n*   `answer[j] % answer[i] == 0`\n\nIf there are multiple solutions, return any of them.",
        "example": "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.\n\nExample 2:\n\nInput: nums = [1,2,4,8]\nOutput: [1,2,4,8]",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    2,
                    4,
                    8
                ],
                [
                    2,
                    3,
                    5,
                    7,
                    11
                ],
                [
                    4,
                    8,
                    12,
                    16,
                    20
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21,
                    24,
                    27,
                    30
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ]
            ],
            "outputs": [
                [
                    1,
                    2
                ],
                [
                    1,
                    2,
                    4,
                    8
                ],
                [
                    2,
                    5
                ],
                [
                    4,
                    8,
                    12,
                    16,
                    20
                ],
                [
                    1,
                    3,
                    9
                ],
                [
                    2,
                    4,
                    8,
                    16,
                    20
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21,
                    24,
                    27,
                    30
                ],
                [
                    5,
                    10,
                    20
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512
                ]
            ]
        }
    },
    "369": null,
    "370": {
        "title": "Array Updates",
        "description": "You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`. You have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`. Return `arr` after applying all the `updates`.",
        "example": "Example:\n\nInput: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]\nOutput: [-2,0,3,5,3]\n\nExplanation: Initially, arr = [0,0,0,0,0]. After the first update, arr = [0,2,2,2,0]. After the second update, arr = [0,2,5,5,3]. After the third update, arr = [-2,0,3,5,3].",
        "level": "Medium",
        "tags": [
            "array",
            "updating",
            "increment"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    [
                        [
                            1,
                            3,
                            2
                        ],
                        [
                            2,
                            4,
                            3
                        ],
                        [
                            0,
                            2,
                            -2
                        ]
                    ]
                ],
                [
                    10,
                    [
                        [
                            2,
                            4,
                            6
                        ],
                        [
                            5,
                            6,
                            8
                        ],
                        [
                            1,
                            9,
                            -4
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            2,
                            1
                        ],
                        [
                            1,
                            1,
                            5
                        ]
                    ]
                ],
                [
                    7,
                    [
                        [
                            0,
                            6,
                            3
                        ],
                        [
                            2,
                            4,
                            -2
                        ]
                    ]
                ],
                [
                    4,
                    []
                ]
            ],
            "outputs": [
                [
                    -2,
                    0,
                    3,
                    5,
                    3
                ],
                [
                    0,
                    -4,
                    2,
                    2,
                    2,
                    4,
                    4,
                    -4,
                    -4,
                    -4
                ],
                [
                    1,
                    6,
                    5
                ],
                [
                    3,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0
                ]
            ]
        }
    },
    "371": {
        "title": "Sum of Two Integers without + and - Operators",
        "description": "Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`. You can assume that the input integers `a` and `b` will be within the range of -1000 to 1000.",
        "example": "Example:\n\nInput: a = 1, b = 2\nOutput: 3\n\nInput: a = 2, b = 3\nOutput: 5",
        "level": "Easy",
        "tags": [
            "math",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                "1, 2",
                "2, 3",
                "0, 0",
                "5, -3",
                "-10, 10",
                "1000, -1000",
                "-1000, -1000",
                "999, 1",
                "-999, -1",
                "1000, 0",
                "0, -1000",
                "1, -1",
                "-1, 1",
                "123, 456",
                "-789, 123",
                "987, -654",
                "-321, -654",
                "1000, 1000",
                "-1000, 1000",
                "1000, -1000"
            ],
            "outputs": [
                "3",
                "5",
                "0",
                "2",
                "0",
                "0",
                "-2000",
                "1000",
                "-1000",
                "1000",
                "-1000",
                "0",
                "0",
                "579",
                "-666",
                "333",
                "-975",
                "2000",
                "0",
                "0"
            ]
        }
    },
    "373": {
        "title": "Smallest K Pairs",
        "description": "You are given two integer arrays `nums1` and `nums2` sorted in ascending order and an integer `k`. Define a pair `(u, v)` which consists of one element from the first array and one element from the second array. Return the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.",
        "example": "Example 1:\n\nInput: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\nOutput: [[1,2],[1,4],[1,6]]\nExplanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n\nExample 2:\n\nInput: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\nOutput: [[1,1],[1,1]]\nExplanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n\nExample 3:\n\nInput: nums1 = [1,2], nums2 = [3], k = 3\nOutput: [[1,3],[2,3]]\nExplanation: All possible pairs are returned from the sequence: [1,3],[2,3]",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,7,11]",
                "[2,4,6]",
                "3",
                "[1,1,2]",
                "[1,2,3]",
                "2",
                "[1,2]",
                "[3]",
                "3"
            ],
            "outputs": [
                "[[1,2],[1,4],[1,6]]",
                "[[1,1],[1,1]]",
                "[[1,3],[2,3]]"
            ]
        }
    },
    "374": {
        "title": "Guess the Number",
        "description": "You are playing a game where you have to guess a number picked by the computer. The computer picks a number between 1 and n. You need to guess which number the computer has picked. After each guess, the computer will tell you if the picked number is higher or lower than your guess. You have access to a pre-defined API `int guess(int num)` which returns -1 if your guess is higher, 1 if your guess is lower, and 0 if your guess is correct. Your task is to return the number that the computer has picked.",
        "example": "For example, if n = 10 and the computer has picked 6, you need to guess the number 6. If you guess 4 and the computer returns 1, it means the picked number is higher than 4. If you guess 8 and the computer returns -1, it means the picked number is lower than 8. By making appropriate guesses, you can eventually determine the picked number.",
        "level": "Medium",
        "tags": [
            "binary search",
            "game"
        ],
        "test_cases": {
            "inputs": [
                {
                    "n": 10,
                    "pick": 6
                },
                {
                    "n": 1,
                    "pick": 1
                },
                {
                    "n": 2,
                    "pick": 1
                },
                {
                    "n": 100,
                    "pick": 50
                },
                {
                    "n": 1000,
                    "pick": 999
                },
                {
                    "n": 50,
                    "pick": 25
                },
                {
                    "n": 500,
                    "pick": 250
                },
                {
                    "n": 10000,
                    "pick": 5000
                },
                {
                    "n": 100000,
                    "pick": 75000
                },
                {
                    "n": 1000000,
                    "pick": 500000
                },
                {
                    "n": 10000000,
                    "pick": 1000000
                },
                {
                    "n": 100000000,
                    "pick": 50000000
                },
                {
                    "n": 1000000000,
                    "pick": 250000000
                },
                {
                    "n": 10000000000,
                    "pick": 1000000000
                },
                {
                    "n": 100000000000,
                    "pick": 50000000000
                },
                {
                    "n": 1000000000000,
                    "pick": 250000000000
                },
                {
                    "n": 10000000000000,
                    "pick": 1000000000000
                },
                {
                    "n": 100000000000000,
                    "pick": 50000000000000
                },
                {
                    "n": 1000000000000000,
                    "pick": 250000000000000
                },
                {
                    "n": 10000000000000000,
                    "pick": 1000000000000000
                }
            ],
            "outputs": [
                6,
                1,
                1,
                50,
                999,
                25,
                250,
                5000,
                75000,
                500000,
                1000000,
                50000000,
                250000000,
                1000000000,
                50000000000,
                250000000000,
                1000000000000,
                50000000000000,
                250000000000000,
                1000000000000000
            ]
        }
    },
    "375": {
        "title": "Minimum Money to Guarantee a Win",
        "description": "You are playing the Guessing Game. The game works as follows: I pick a number between 1 and n. You guess a number. If you guess the right number, you win the game. If you guess the wrong number, I will tell you whether the number I picked is higher or lower, and you will continue guessing. Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game. Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.",
        "example": "Example:\n\nInput: n = 10\nOutput: 16\nExplanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n    - If this is my number, your total is $0. Otherwise, you pay $7.\n    - If my number is higher, the range is [8,10]. Guess 9.\n        - If this is my number, your total is $7. Otherwise, you pay $9.\n        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n    - If my number is lower, the range is [1,6]. Guess 3.\n        - If this is my number, your total is $7. Otherwise, you pay $3.\n        - If my number is higher, the range is [4,6]. Guess 5.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n        - If my number is lower, the range is [1,2]. Guess 1.\n            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "game theory"
        ],
        "test_cases": {
            "inputs": [
                10,
                1,
                2,
                5,
                15,
                20,
                50,
                100,
                150,
                200,
                7,
                12,
                25,
                30,
                75,
                125,
                175,
                180,
                190,
                195
            ],
            "outputs": [
                16,
                0,
                1,
                6,
                56,
                190,
                625,
                2550,
                5625,
                10100,
                10,
                35,
                175,
                266,
                1125,
                3125,
                6875,
                7426,
                9025,
                10100
            ]
        }
    },
    "376": {
        "title": "Longest Wiggle Subsequence",
        "description": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences. Given an integer array nums, return the length of the longest wiggle subsequence of nums.",
        "example": "Example:\n\nInput: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    7,
                    4,
                    9,
                    2,
                    5
                ],
                [
                    1,
                    17,
                    5,
                    10,
                    13,
                    15,
                    10,
                    5,
                    16,
                    8
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5,
                    7,
                    6,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                6,
                7,
                2,
                1,
                10,
                10,
                6,
                19,
                20,
                40
            ]
        }
    },
    "377": {
        "title": "Combination Sum",
        "description": "Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`. You need to find all the unique combinations of `nums` elements that sum up to `target`. Each element in `nums` can be used multiple times in a combination. Return the count of all possible combinations.",
        "example": "Example 1:\n\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation: The possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n\nExample 2:\n\nInput: nums = [9], target = 3\nOutput: 0\n\n",
        "level": "Medium",
        "tags": [
            "Array",
            "Dynamic Programming",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[9]",
                "[2,3,5]",
                "[4,5,6]",
                "[1,2,3,4,5]",
                "[10,20,30,40,50]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,10,15,20,25,30,35,40,45,50]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
                "[1000,900,800,700,600,500,400,300,200,100]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "7",
                "0",
                "5",
                "7",
                "111",
                "48620",
                "1",
                "16",
                "1022",
                "10077696",
                "0",
                "0",
                "190",
                "190"
            ]
        }
    },
    "378": {
        "title": "Kth Smallest Element in a Sorted Matrix",
        "description": "Given an `n x n` matrix where each of the rows and columns is sorted in ascending order, find the `kth` smallest element in the matrix. Return the `kth` smallest element in the sorted order.",
        "example": "Example:\n\nInput: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\nOutput: 13\nExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13",
        "level": "Medium",
        "tags": [
            "matrix",
            "sorting",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                "[[1,5,9],[10,11,13],[12,13,15]]",
                "[[-5]]",
                "[[1,2],[3,4]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,3,5],[2,4,6],[7,8,9]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22],[23,24,25,26,27,28,29,30,31,32,33],[34,35,36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53,54,55],[56,57,58,59,60,61,62,63,64,65,66],[67,68,69,70,71,72,73,74,75,76,77],[78,79,80,81,82,83,84,85,86,87,88],[89,90,91,92,93,94,95,96,97,98,99],[100,101,102,103,104,105,106,107,108,109,110],[111,112,113,114,115,116,117,118,119,120,121]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45,46,47],[48,49,50,51,52,53,54,55,56,57,58],[59,60,61,62,63,64,65,66,67,68,69],[70,71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90,91],[92,93,94,95,96,97,98,99,100,101,102],[103,104,105,106,107,108,109,110,111,112,113],[114,115,116,117,118,119,120,121,122,123,124],[125,126,127,128,129,130,131,132,133,134,135]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35,36,37,38,39],[40,41,42,43,44,45,46,47,48,49,50,51,52],[53,54,55,56,57,58,59,60,61,62,63,64,65],[66,67,68,69,70,71,72,73,74,75,76,77,78],[79,80,81,82,83,84,85,86,87,88,89,90,91],[92,93,94,95,96,97,98,99,100,101,102,103,104],[105,106,107,108,109,110,111,112,113,114,115,116,117],[118,119,120,121,122,123,124,125,126,127,128,129,130],[131,132,133,134,135,136,137,138,139,140,141,142,143],[144,145,146,147,148,149,150,151,152,153,154,155,156],[157,158,159,160,161,162,163,164,165,166,167,168,169]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27,28],[29,30,31,32,33,34,35,36,37,38,39,40,41,42],[43,44,45,46,47,48,49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80,81,82,83,84],[85,86,87,88,89,90,91,92,93,94,95,96,97,98],[99,100,101,102,103,104,105,106,107,108,109,110,111,112],[113,114,115,116,117,118,119,120,121,122,123,124,125,126],[127,128,129,130,131,132,133,134,135,136,137,138,139,140],[141,142,143,144,145,146,147,148,149,150,151,152,153,154],[155,156,157,158,159,160,161,162,163,164,165,166,167,168,169],[170,171,172,173,174,175,176,177,178,179,180,181,182,183,184],[185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],[200,201,202,203,204,205,206,207,208,209,210,211,212,213,214]]"
            ],
            "outputs": [
                "13",
                "-5",
                "1",
                "1",
                "2",
                "1",
                "5",
                "6",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20"
            ]
        }
    },
    "379": {
        "title": "Phone Directory",
        "description": "Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.",
        "example": "PhoneDirectory phoneDirectory = new PhoneDirectory(3);\nphoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.\nphoneDirectory.get();      // Assume it returns 1.\nphoneDirectory.check(2);   // The number 2 is available, so return true.\nphoneDirectory.get();      // It returns 2, the only number that is left.\nphoneDirectory.check(2);   // The number 2 is no longer available, so return false.\nphoneDirectory.release(2); // Release number 2 back to the pool.\nphoneDirectory.check(2);   // Number 2 is available again, return true.",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                "[3]",
                "[]",
                "[]",
                "[2]",
                "[]",
                "[2]",
                "[2]",
                "[2]"
            ],
            "outputs": [
                "null",
                "0",
                "1",
                "true",
                "2",
                "false",
                "null",
                "true"
            ]
        }
    },
    "380": {
        "title": "Randomized Set",
        "description": "Implement the `RandomizedSet` class that supports insert, remove, and getRandom operations in average O(1) time complexity. The `RandomizedSet` class should have the following methods:\n\n- `RandomizedSet()`: Initializes the `RandomizedSet` object.\n- `bool insert(int val)`: Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n- `bool remove(int val)`: Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n- `int getRandom()`: Returns a random element from the current set of elements. Each element must have the same probability of being returned.\n\nNote: It is guaranteed that at least one element exists when `getRandom` is called.",
        "example": "Example:\n\nInput\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.",
        "level": "Medium",
        "tags": [
            "Array",
            "Design"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    1
                ],
                [
                    2
                ],
                [
                    2
                ],
                [],
                [
                    1
                ],
                [
                    2
                ],
                []
            ],
            "outputs": [
                "null",
                "true",
                "false",
                "true",
                "2",
                "true",
                "false",
                "2"
            ]
        }
    },
    "381": {
        "title": "Randomized Collection",
        "description": "Implement the `RandomizedCollection` class that supports inserting and removing specific elements from a multiset, as well as reporting a random element. The `RandomizedCollection` should be able to handle duplicate elements. The `insert` function should insert an item into the multiset, even if the item is already present. It should return `true` if the item is not present in the multiset, and `false` otherwise. The `remove` function should remove an item from the multiset if it is present. It should return `true` if the item is present in the multiset, and `false` otherwise. Note that if an item has multiple occurrences in the multiset, only one occurrence should be removed. The `getRandom` function should return a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of occurrences of that element in the multiset.",
        "example": "```python\n# Example usage\nrandomizedCollection = RandomizedCollection()\nrandomizedCollection.insert(1)   # return True\nrandomizedCollection.insert(1)   # return False\nrandomizedCollection.insert(2)   # return True\nrandomizedCollection.getRandom() # return 1 or 2\nrandomizedCollection.remove(1)   # return True\nrandomizedCollection.getRandom() # return 1 or 2\n```",
        "level": "Medium",
        "tags": [
            "data structure",
            "random",
            "multiset"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    1
                ],
                [
                    1
                ],
                [
                    2
                ],
                [],
                [
                    1
                ],
                []
            ],
            "outputs": [
                "null",
                "true",
                "false",
                "true",
                "2",
                "true",
                "1"
            ]
        }
    },
    "382": {
        "title": "Random Node from Singly Linked List",
        "description": "You are given a singly linked list. You need to implement the `Solution` class which has two methods: `Solution(ListNode head)` to initialize the object with the head of the linked list, and `int getRandom()` to choose a node randomly from the list and return its value. Each node in the list should have the same probability of being chosen.",
        "example": "Example:\n\nInput:\nSolution([[1, 2, 3]]), getRandom(), getRandom(), getRandom(), getRandom(), getRandom()\nOutput:\n[null, 1, 3, 2, 2, 3]\n\nExplanation:\nSolution solution = new Solution([1, 2, 3])\nsolution.getRandom() // return 1\nsolution.getRandom() // return 3\nsolution.getRandom() // return 2\nsolution.getRandom() // return 2\nsolution.getRandom() // return 3\n\nNote: getRandom() should return either 1, 2, or 3 randomly. Each element should have an equal probability of returning.",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Randomization"
        ],
        "test_cases": {
            "inputs": [
                "[[1, 2, 3]]",
                "[[4, 5, 6, 7]]",
                "[[10, 20, 30, 40, 50]]",
                "[[100, 200, 300, 400, 500, 600]]",
                "[[1]]",
                "[[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]",
                "[[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]]",
                "[[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]]",
                "[[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189, 196, 203, 210]]",
                "[[9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225, 234, 243, 252, 261, 270, 279, 288, 297, 306, 315, 324, 333, 342, 351, 360, 369, 378, 387, 396, 405, 414, 423, 432, 441, 450, 459, 468, 477, 486, 495, 504, 513, 522, 531, 540, 549, 558, 567, 576, 585, 594, 603, 612, 621, 630, 639, 648, 657, 666, 675, 684, 693, 702, 711, 720, 729, 738, 747, 756, 765, 774, 783, 792, 801, 810, 819, 828, 837, 846, 855, 864, 873, 882, 891, 900, 909, 918, 927, 936, 945, 954, 963, 972, 981, 990, 999]]"
            ],
            "outputs": [
                "[null, 1, 3, 2, 2, 3]",
                "[null, 4, 7, 5, 4, 6]",
                "[null, 10, 30, 20, 40, 50]",
                "[null, 100, 600, 400, 300, 200]",
                "[null, 1, 1, 1, 1, 1]",
                "[null, 2, 10, 4, 12, 6]",
                "[null, 3, 33, 6, 57, 60]",
                "[null, 5, 95, 75, 70, 100]",
                "[null, 7, 161, 147, 140, 210]",
                "[null, 9, 999, 981, 972, 990]"
            ]
        }
    },
    "383": {
        "title": "Ransom Note Construction",
        "description": "Given two strings `ransomNote` and `magazine`, determine if `ransomNote` can be constructed using the letters from `magazine`. Each letter in `magazine` can only be used once in `ransomNote`.",
        "example": "For example, given `ransomNote = \"aa\"` and `magazine = \"aab\"`, we can construct `ransomNote` using the letters from `magazine`. Therefore, the output would be `true`.",
        "level": "Easy",
        "tags": [
            "string",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                [
                    "a",
                    "b"
                ],
                [
                    "aa",
                    "ab"
                ],
                [
                    "aa",
                    "aab"
                ],
                [
                    "abc",
                    "def"
                ],
                [
                    "",
                    ""
                ],
                [
                    "abc",
                    ""
                ],
                [
                    "",
                    "abc"
                ],
                [
                    "hello",
                    "world"
                ],
                [
                    "apple",
                    "banana"
                ],
                [
                    "programming",
                    "coding"
                ],
                [
                    "python",
                    "java"
                ],
                [
                    "leetcode",
                    "leet"
                ],
                [
                    "algorithm",
                    "logarithm"
                ],
                [
                    "abcd",
                    "dcba"
                ],
                [
                    "xyz",
                    "zyx"
                ],
                [
                    "hello",
                    "hello"
                ],
                [
                    "goodbye",
                    "goodbye"
                ],
                [
                    "hello",
                    "world"
                ],
                [
                    "abcde",
                    "edcba"
                ]
            ],
            "outputs": [
                false,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true
            ]
        }
    },
    "384": {
        "title": "Randomly Shuffle Array",
        "description": "Given an integer array `nums`, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling. Implement the `Solution` class with the following methods: \n\n- `Solution(int[] nums)`: Initializes the object with the integer array `nums`. \n- `int[] reset()`: Resets the array to its original configuration and returns it. \n- `int[] shuffle()`: Returns a random shuffling of the array.",
        "example": "Example:\n\nInput:\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();\n\nOutput:\n[3, 1, 2]\n\nExplanation:\nShuffling the array [1, 2, 3] should result in any permutation of the array being equally likely. In this example, the shuffled array is [3, 1, 2].",
        "level": "Medium",
        "tags": [
            "Array",
            "Randomization"
        ],
        "test_cases": {
            "inputs": [
                "[1, 2, 3]",
                "[4, 5, 6, 7]",
                "[10, 20, 30, 40, 50]",
                "[100, 200, 300, 400, 500, 600]",
                "[7, 8, 9, 10, 11, 12, 13]",
                "[15, 25, 35, 45, 55, 65, 75, 85]",
                "[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]",
                "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
                "[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]",
                "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]",
                "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]",
                "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
                "[1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43]",
                "[2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47]",
                "[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51]",
                "[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72]",
                "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]",
                "[6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120]",
                "[7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140]",
                "[8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160]"
            ],
            "outputs": [
                "[2, 1, 3]",
                "[7, 4, 5, 6]",
                "[40, 10, 30, 20, 50]",
                "[600, 100, 400, 300, 500, 200]",
                "[11, 9, 8, 10, 12, 13, 7]",
                "[55, 65, 25, 15, 35, 75, 45, 85]",
                "[2000, 9000, 1000, 3000, 4000, 6000, 7000, 5000, 8000]",
                "[4, 2, 20, 10, 12, 6, 8, 14, 18, 16]",
                "[9, 33, 6, 15, 12, 27, 24, 21, 3, 30, 18]",
                "[10, 60, 20, 45, 35, 50, 30, 55, 25, 15, 5, 65]",
                "[5, 3, 13, 7, 1, 11, 9, 19, 15, 21, 17, 23, 25]",
                "[4, 2, 6, 10, 26, 12, 14, 16, 18, 20, 22, 24, 28]",
                "[34, 25, 7, 37, 10, 40, 43, 16, 22, 19, 13, 1, 31, 28, 22]",
                "[26, 5, 14, 8, 20, 11, 44, 23, 26, 32, 41, 17, 35, 29, 38, 2]",
                "[15, 9, 3, 21, 12, 27, 24, 33, 51, 18, 45, 6, 39, 42, 30, 36, 48]",
                "[72, 16, 20, 36, 56, 40, 24, 60, 44, 52, 64, 68, 72, 32, 48, 8, 28, 68, 12]",
                "[10, 75, 20, 90, 30, 80, 95, 45, 55, 60, 70, 85, 65, 35, 50, 5, 90, 15, 25]",
                "[72, 114, 18, 36, 78, 66, 120, 96, 48, 72, 120, 60, 30, 90, 42, 84, 54, 6, 108, 24]",
                "[140, 21, 133, 28, 126, 70, 98, 56, 112, 84, 119, 42, 49, 112, 35, 56, 7, 140, 63, 105]",
                "[144, 16, 152, 24, 80, 88, 120, 136, 72, 40, 64, 56, 112, 120, 32, 136, 144, 48, 160, 128]"
            ]
        }
    },
    "385": null,
    "386": {
        "title": "Lexicographical Order",
        "description": "Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order. Implement an algorithm that runs in `O(n)` time and uses `O(1)` extra space.",
        "example": "Example:\n\nInput: n = 13\nOutput: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n\nExplanation: The numbers from 1 to 13 are sorted in lexicographical order.\n\nInput: n = 2\nOutput: [1,2]\n\nExplanation: The numbers from 1 to 2 are already sorted in lexicographical order.",
        "level": "Medium",
        "tags": [
            "sorting",
            "lexicographical order"
        ],
        "test_cases": {
            "inputs": [
                13,
                2,
                5,
                20,
                1,
                100,
                50,
                10,
                3,
                7,
                15,
                30,
                8,
                25,
                4,
                6,
                12,
                18,
                9,
                11
            ],
            "outputs": [
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    1,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    1
                ],
                [
                    1,
                    10,
                    100,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50
                ],
                [
                    1,
                    10,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                [
                    1,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    2,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    3,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    4,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    5,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    6,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    7,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    8,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    9,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ]
            ]
        }
    },
    "387": null,
    "388": {
        "title": "Longest Absolute File Path",
        "description": "You are given a file system that stores both files and directories. Each file and directory has a unique absolute path in the file system. Your task is to find the length of the longest absolute path to a file in the file system.",
        "example": "Example:\n\ninput = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\nOutput: 20\nExplanation: The longest absolute path to a file is \"dir/subdir2/file.ext\" with a length of 20.",
        "level": "Medium",
        "tags": [
            "string",
            "file system",
            "path"
        ],
        "test_cases": {
            "inputs": [
                "\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"",
                "\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"",
                "\"a\""
            ],
            "outputs": [
                "20",
                "32",
                "0"
            ]
        }
    },
    "389": {
        "title": "Added Letter in Shuffled String",
        "description": "You are given two strings `s` and `t`. String `t` is generated by randomly shuffling string `s` and then adding one more letter at a random position. Return the letter that was added to `t`.",
        "example": "Example 1:\n\nInput: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.\n\nExample 2:\n\nInput: s = \"\", t = \"y\"\nOutput: \"y\"\nExplanation: 'y' is the letter that was added.",
        "level": "Easy",
        "tags": [
            "string",
            "random"
        ],
        "test_cases": {
            "inputs": [
                "\"abcd\"",
                "\"\"",
                "\"abc\"",
                "\"a\"",
                "\"hello\"",
                "\"world\"",
                "\"coding\"",
                "\"question\"",
                "\"random\"",
                "\"shuffling\"",
                "\"string\"",
                "\"added\"",
                "\"letter\"",
                "\"position\"",
                "\"return\"",
                "\"example\"",
                "\"output\"",
                "\"constraint\"",
                "\"test\"",
                "\"case\""
            ],
            "outputs": [
                "\"e\"",
                "\"y\"",
                "\"c\"",
                "\"a\"",
                "\"o\"",
                "\"d\"",
                "\"g\"",
                "\"n\"",
                "\"s\"",
                "\"h\"",
                "\"l\"",
                "\"t\"",
                "\"p\"",
                "\"r\"",
                "\"u\"",
                "\"x\"",
                "\"m\"",
                "\"i\"",
                "\"q\"",
                "\"e\""
            ]
        }
    },
    "390": {
        "title": "Last Remaining Number",
        "description": "You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`: Starting from left to right, remove the first number and every other number afterward until you reach the end of the list. Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. Keep repeating the steps again, alternating left to right and right to left, until a single number remains. Given the integer `n`, return the last number that remains in `arr`.",
        "example": "Example:\n\nInput: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                9,
                1,
                5,
                10,
                15,
                20,
                100,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                999999999,
                123456789,
                987654321,
                1234567890,
                9876543210,
                12345678910
            ],
            "outputs": [
                6,
                1,
                2,
                6,
                8,
                10,
                54,
                512,
                512,
                512,
                512,
                512,
                512,
                512,
                7828354,
                732674608,
                732674608,
                732674608,
                732674608,
                732674608
            ]
        }
    },
    "391": null,
    "392": null,
    "393": {
        "title": "UTF-8 Encoding Validation",
        "description": "Given an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n\nA character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules:\n\n1.  For a **1-byte** character, the first bit is a `0`, followed by its Unicode code.\n2.  For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\nThis is how the UTF-8 encoding would work:\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n`x` denotes a bit in the binary form of a byte that may be either `0` or `1`.\n\n**Note:** The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.",
        "example": "Example:\n\n**Input:** data = [197,130,1]\n**Output:** true\n**Explanation:** data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.",
        "level": "Medium",
        "tags": [
            "array",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                "[197,130,1]",
                "[235,140,4]",
                "[240,144,128,128]",
                "[255,255,255,255]",
                "[192,168,1,1]",
                "[0,0,0,0]",
                "[128,128,128,128]",
                "[193,128,128,128]",
                "[225,128,128,128]",
                "[240,128,128,128]",
                "[255,128,128,128]",
                "[197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]",
                "[197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1,197,130,1]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "394": {
        "title": "Decoded String",
        "description": "Given an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there will not be input like `3a` or `2[4]`. The test cases are generated so that the length of the output will never exceed `105`.",
        "example": "For example, given the input string `3[a]2[bc]`, the output should be `aaabcbc`. The string `a` is repeated 3 times and the string `bc` is repeated 2 times.",
        "level": "Easy",
        "tags": [
            "string",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "\"3[a]2[bc]\"",
                "\"3[a2[c]]\"",
                "\"2[abc]3[cd]ef\"",
                "\"4[x]5[y]6[z]\"",
                "\"2[hello]3[world]\"",
                "\"10[a]\"",
                "\"2[ab]3[cd]\"",
                "\"5[a2[b]3[c]]\"",
                "\"2[xyz]4[abc]\"",
                "\"3[hello]2[world]\"",
                "\"1[a]\"",
                "\"2[ab]\"",
                "\"3[abc]\"",
                "\"4[abcd]\"",
                "\"5[abcde]\"",
                "\"6[abcdef]\"",
                "\"7[abcdefg]\"",
                "\"8[abcdefgh]\"",
                "\"9[abcdefghi]\"",
                "\"10[abcdefghij]\""
            ],
            "outputs": [
                "\"aaabcbc\"",
                "\"accaccacc\"",
                "\"abcabccdcdcdef\"",
                "\"xxxxyyyyyzzzzzz\"",
                "\"hellohelloworldworldworld\"",
                "\"aaaaaaaaaa\"",
                "\"ababcdcdcdbcdcdbcdcdbcd\"",
                "\"abbbcccabbbcccabbbccc\"",
                "\"xyzxyzabcxyzxyzabcxyzxyzabcxyzxyzabc\"",
                "\"hellohellohelloworldworldworld\"",
                "\"a\"",
                "\"abab\"",
                "\"abcabcabc\"",
                "\"abcdabcdabcdabcd\"",
                "\"abcdeabcdeabcdeabcdeabcde\"",
                "\"abcdefabcdefabcdefabcdefabcdef\"",
                "\"abcdefgabcdefgabcdefgabcdefgabcdefg\"",
                "\"abcdefghabcdefghabcdefghabcdefghabcdefgh\"",
                "\"abcdefghiabcdefghiabcdefghiabcdefghiabcdefghi\"",
                "\"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\""
            ]
        }
    },
    "395": {
        "title": "Longest Substring with At Least K Repeating Characters",
        "description": "Given a string `s` and an integer `k`, find the length of the longest substring in `s` such that the frequency of each character in this substring is greater than or equal to `k`.",
        "example": "Example:\n\nInput: s = \"aaabb\", k = 3\nOutput: 3\nExplanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n\nInput: s = \"ababbc\", k = 2\nOutput: 5\nExplanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.",
        "level": "Medium",
        "tags": [
            "string",
            "substring",
            "frequency"
        ],
        "test_cases": {
            "inputs": [
                "\"aaabb\"",
                "\"ababbc\"",
                "\"aabbcc\"",
                "\"abcabc\"",
                "\"aabbbccc\"",
                "\"aaabbbccc\"",
                "\"aabbbcccddd\"",
                "\"aabbccddeeff\"",
                "\"aabbccddeeffgg\"",
                "\"aabbccddeeffgghh\"",
                "\"aabbccddeeffgghhi\"",
                "\"aabbccddeeffgghhii\"",
                "\"aabbccddeeffgghhiijj\"",
                "\"aabbccddeeffgghhiijjkk\"",
                "\"aabbccddeeffgghhiijjkkll\"",
                "\"aabbccddeeffgghhiijjkkllmm\"",
                "\"aabbccddeeffgghhiijjkkllmmnn\"",
                "\"aabbccddeeffgghhiijjkkllmmnnoo\"",
                "\"aabbccddeeffgghhiijjkkllmmnnoopp\"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqq\""
            ],
            "outputs": [
                "3",
                "5",
                "6",
                "6",
                "6",
                "9",
                "9",
                "12",
                "14",
                "16",
                "18",
                "20",
                "22",
                "24",
                "26",
                "28",
                "30",
                "32",
                "34",
                "36"
            ]
        }
    },
    "396": null,
    "397": {
        "title": "Minimum Operations to Reach One",
        "description": "Given a positive integer `n`, you can apply one of the following operations:\n\n1. If `n` is even, replace `n` with `n / 2`.\n2. If `n` is odd, replace `n` with either `n + 1` or `n - 1`.\n\nReturn the minimum number of operations needed for `n` to become 1.",
        "example": "Example:\n\nInput: n = 8\nOutput: 3\nExplanation: 8 -> 4 -> 2 -> 1",
        "level": "Easy",
        "tags": [
            "math",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                8,
                7,
                4,
                1,
                15,
                100,
                231
            ],
            "outputs": [
                3,
                4,
                2,
                0,
                5,
                7,
                9
            ]
        }
    },
    "398": {
        "title": "Random Index of Target Number",
        "description": "You are given an integer array `nums` with possible duplicates. Your task is to implement the `Solution` class that will randomly output the index of a given `target` number. You can assume that the given target number must exist in the array. The `Solution` class should have two methods: `Solution(int[] nums)` to initialize the object with the array `nums`, and `int pick(int target)` to pick a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid indices, each index should have an equal probability of returning.",
        "example": "Example:\n\nInput:\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3);\n\nOutput:\n2 or 3 or 4\n\nExplanation:\nSince the target number is 3, the pick method should return either index 2, 3, or 4 randomly. Each index should have an equal probability of returning.",
        "level": "Medium",
        "tags": [
            "Array",
            "Random",
            "Probability"
        ],
        "test_cases": {
            "inputs": [
                "[1, 2, 3, 3, 3]",
                "[4, 4, 4, 4, 4]",
                "[1, 2, 3, 4, 5]",
                "[1, 1, 1, 1, 1]",
                "[1, 2, 2, 2, 3]",
                "[5, 5, 5, 5, 5]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
                "[1, 1, 1, 2, 2, 2, 3, 3, 3]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10]"
            ],
            "outputs": [
                "2 or 3 or 4",
                "0 or 1 or 2 or 3 or 4",
                "2 or 3 or 4",
                "0 or 1 or 2 or 3 or 4",
                "1 or 2 or 3",
                "0 or 1 or 2 or 3 or 4",
                "0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9",
                "0 or 1 or 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9",
                "3 or 4 or 5 or 6 or 7 or 8",
                "9 or 10 or 11 or 12 or 13"
            ]
        }
    },
    "399": {
        "title": "Variable Equations and Queries",
        "description": "You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.\n\nYou are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.\n\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\n\n**Note:** The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.",
        "example": "Given equations = [['a', 'b'], ['b', 'c']], values = [2.0, 3.0], queries = [['a', 'c'], ['b', 'a'], ['a', 'e'], ['a', 'a'], ['x', 'x']]\n\nThe given equations are a / b = 2.0 and b / c = 3.0.\n\nThe queries are a / c = ?, b / a = ?, a / e = ?, a / a = ?, and x / x = ?.\n\nThe expected output is [6.0, 0.5, -1.0, 1.0, -1.0].",
        "level": "Medium",
        "tags": [
            "Graph",
            "DFS",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "[['a', 'b'], ['b', 'c']]",
                "[1.5, 2.5, 5.0]",
                "[['a', 'c'], ['c', 'b'], ['bc', 'cd'], ['cd', 'bc']]",
                "[0.5]",
                "[['a', 'b'], ['b', 'a'], ['a', 'c'], ['x', 'y']]"
            ],
            "outputs": [
                "[6.0, 0.5, -1.0, 1.0, -1.0]",
                "[3.75, 0.4, 5.0, 0.2]",
                "[0.5, 2.0, -1.0, -1.0]",
                "[2.0]",
                "[1.0, 1.0, -1.0, -1.0]"
            ]
        }
    },
    "400": {
        "title": "Nth Digit of Infinite Integer Sequence",
        "description": "Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`. The sequence starts from 1 and continues indefinitely by concatenating the next integer to the previous one. For example, the first 10 digits of the sequence are 1234567891. Write a function that takes an integer `n` as input and returns the `nth` digit of the sequence.",
        "example": "Example:\n\nInput: n = 3\nOutput: 3\n\nInput: n = 11\nOutput: 0\nExplanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.",
        "level": "Easy",
        "tags": [
            "Math",
            "Sequence"
        ],
        "test_cases": {
            "inputs": [
                3,
                11,
                15,
                25,
                100,
                123,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                10000000000,
                100000000000,
                1000000000000,
                10000000000000,
                100000000000000,
                1000000000000000,
                10000000000000000
            ],
            "outputs": [
                3,
                0,
                2,
                7,
                5,
                1,
                1,
                7,
                5,
                1,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "401": {
        "title": "Binary Watch Time Combinations",
        "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right. Given an integer `turnedOn` which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. The hour must not contain a leading zero. The minute must consist of two digits and may contain a leading zero.",
        "example": "For example, if the `turnedOn` is 1, the possible times the watch could represent are ['0:01', '0:02', '0:04', '0:08', '0:16', '0:32', '1:00', '2:00', '4:00', '8:00'].",
        "level": "Medium",
        "tags": [
            "bit manipulation",
            "combinations"
        ],
        "test_cases": {
            "inputs": [
                1,
                9,
                0,
                2,
                5
            ],
            "outputs": [
                [
                    "0:01",
                    "0:02",
                    "0:04",
                    "0:08",
                    "0:16",
                    "0:32",
                    "1:00",
                    "2:00",
                    "4:00",
                    "8:00"
                ],
                [],
                [
                    "0:00"
                ],
                [
                    "0:03",
                    "0:05",
                    "0:09",
                    "0:06",
                    "0:10",
                    "0:18",
                    "0:33",
                    "0:17",
                    "0:34",
                    "0:20",
                    "0:36",
                    "0:24",
                    "0:40",
                    "0:48",
                    "1:01",
                    "1:02",
                    "1:04",
                    "1:08",
                    "1:16",
                    "1:32",
                    "2:01",
                    "2:02",
                    "2:04",
                    "2:08",
                    "2:16",
                    "2:32",
                    "4:01",
                    "4:02",
                    "4:04",
                    "4:08",
                    "4:16",
                    "4:32",
                    "8:01",
                    "8:02",
                    "8:04",
                    "8:08",
                    "8:16",
                    "8:32"
                ],
                [
                    "0:31",
                    "0:47",
                    "0:55",
                    "0:59",
                    "1:30",
                    "1:46",
                    "1:54",
                    "1:58",
                    "2:30",
                    "2:46",
                    "2:54",
                    "2:58",
                    "3:30",
                    "3:46",
                    "3:54",
                    "3:58",
                    "4:30",
                    "4:46",
                    "4:54",
                    "4:58",
                    "5:30",
                    "5:46",
                    "5:54",
                    "5:58",
                    "6:30",
                    "6:46",
                    "6:54",
                    "6:58",
                    "7:30",
                    "7:46",
                    "7:54",
                    "7:58",
                    "8:30",
                    "8:46",
                    "8:54",
                    "8:58",
                    "9:30",
                    "9:46",
                    "9:54",
                    "9:58",
                    "10:30",
                    "10:46",
                    "10:54",
                    "10:58",
                    "11:30",
                    "11:46",
                    "11:54",
                    "11:58"
                ]
            ]
        }
    },
    "402": {
        "title": "Smallest Possible Integer",
        "description": "Given a non-negative integer `num` and an integer `k`, remove `k` digits from `num` to form the smallest possible integer. Return the resulting integer.",
        "example": "Example 1:\n\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
        "level": "Medium",
        "tags": [
            "string",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "\"1432219\"",
                "\"10200\"",
                "\"10\"",
                "\"987654321\"",
                "\"54321\"",
                "\"11111\"",
                "\"999999999\"",
                "\"123456789\"",
                "\"1000000000\"",
                "\"1000000001\"",
                "\"1000000002\"",
                "\"1000000003\"",
                "\"1000000004\"",
                "\"1000000005\"",
                "\"1000000006\"",
                "\"1000000007\"",
                "\"1000000008\"",
                "\"1000000009\"",
                "\"1000000010\"",
                "\"1000000011\""
            ],
            "outputs": [
                "\"1219\"",
                "\"200\"",
                "\"0\"",
                "\"123456\"",
                "\"21\"",
                "\"0\"",
                "\"0\"",
                "\"123456789\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\"",
                "\"0\""
            ]
        }
    },
    "403": {
        "title": "Frog River Crossing",
        "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of `stones`' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit. If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.",
        "example": "Example:\n\nInput: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[0,1,3,5,6,8,12,17]",
                "[0,1,2,3,4,8,9,11]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "false"
            ]
        }
    },
    "404": {
        "title": "Sum of Left Leaves",
        "description": "Given the `root` of a binary tree, return the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.",
        "example": "Example 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n\nExample 2:\n\nInput: root = [1]\nOutput: 0",
        "level": "Easy",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,null,null,4,5]",
                "[1,null,2,null,3,null,4,null,5]",
                "[1,2,3,4,null,null,5,null,null,6,7,null,null,8,9]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "24",
                "0",
                "24",
                "4",
                "6",
                "20",
                "2550"
            ]
        }
    },
    "405": {
        "title": "Hexadecimal Representation",
        "description": "Given an integer `num`, return a string representing its hexadecimal representation. For negative integers, two's complement method is used. All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.",
        "example": "Example:\n\nInput: num = 26\nOutput: \"1a\"\n\nInput: num = -1\nOutput: \"ffffffff\"",
        "level": "Easy",
        "tags": [
            "math",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                26,
                -1,
                0,
                15,
                16,
                255,
                -255,
                1000,
                -1000,
                2147483647,
                -2147483648
            ],
            "outputs": [
                "1a",
                "ffffffff",
                "0",
                "f",
                "10",
                "ff",
                "ffffff01",
                "3e8",
                "fffffc18",
                "7fffffff",
                "80000000"
            ]
        }
    },
    "406": {
        "title": "Reconstruct Queue",
        "description": "You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`. Reconstruct and return the queue that is represented by the input array `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).",
        "example": "Example:\n\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
                "[[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]",
                "[[1,0],[2,0],[3,0],[4,0],[5,0]]",
                "[[5,0],[4,0],[3,0],[2,0],[1,0]]",
                "[[1,0],[1,1],[1,2],[1,3],[1,4]]",
                "[[1,4],[1,3],[1,2],[1,1],[1,0]]",
                "[[1,0],[2,1],[3,2],[4,3],[5,4]]",
                "[[5,4],[4,3],[3,2],[2,1],[1,0]]",
                "[[1,0],[2,0],[3,0],[4,0],[5,1]]",
                "[[5,1],[4,0],[3,0],[2,0],[1,0]]",
                "[[1,0],[2,0],[3,0],[4,1],[5,0]]",
                "[[5,0],[4,1],[3,0],[2,0],[1,0]]",
                "[[1,0],[2,0],[3,1],[4,0],[5,0]]",
                "[[5,0],[4,0],[3,1],[2,0],[1,0]]",
                "[[1,0],[2,1],[3,0],[4,0],[5,0]]",
                "[[5,0],[4,0],[3,0],[2,1],[1,0]]",
                "[[1,1],[2,0],[3,0],[4,0],[5,0]]",
                "[[5,0],[4,0],[3,0],[2,0],[1,1]]",
                "[[1,0],[1,0],[1,0],[1,0],[1,0]]",
                "[[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0]]"
            ],
            "outputs": [
                "[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]",
                "[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",
                "[[1,0],[2,0],[3,0],[4,0],[5,0]]",
                "[[1,0],[2,0],[3,0],[4,0],[5,0]]",
                "[[1,0],[1,1],[1,2],[1,3],[1,4]]",
                "[[1,0],[1,1],[1,2],[1,3],[1,4]]",
                "[[1,0],[2,1],[3,2],[4,3],[5,4]]",
                "[[1,0],[2,1],[3,2],[4,3],[5,4]]",
                "[[1,0],[2,0],[3,0],[4,0],[5,1]]",
                "[[1,0],[2,0],[3,0],[4,0],[5,1]]",
                "[[1,0],[2,0],[3,0],[4,1],[5,0]]",
                "[[1,0],[2,0],[3,0],[4,1],[5,0]]",
                "[[1,0],[2,0],[3,1],[4,0],[5,0]]",
                "[[1,0],[2,0],[3,1],[4,0],[5,0]]",
                "[[1,0],[2,1],[3,0],[4,0],[5,0]]",
                "[[1,0],[2,1],[3,0],[4,0],[5,0]]",
                "[[1,1],[2,0],[3,0],[4,0],[5,0]]",
                "[[1,1],[2,0],[3,0],[4,0],[5,0]]",
                "[[1,0],[1,0],[1,0],[1,0],[1,0]]",
                "[[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0]]"
            ]
        }
    },
    "407": null,
    "408": {
        "title": "String Abbreviation Matching",
        "description": "Given a string `word` and an abbreviation `abbr`, determine whether the string matches the given abbreviation. A string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros. Return true if the string matches the abbreviation, and false otherwise.",
        "example": "Example 1:\n\nInput: word = \"internationalization\", abbr = \"i12iz4n\"\nOutput: true\nExplanation: The word \"internationalization\" can be abbreviated as \"i12iz4n\" (\"i nternational iz atio n\").\n\nExample 2:\n\nInput: word = \"apple\", abbr = \"a2e\"\nOutput: false\nExplanation: The word \"apple\" cannot be abbreviated as \"a2e\".",
        "level": "Medium",
        "tags": [
            "string",
            "substring",
            "matching"
        ],
        "test_cases": {
            "inputs": [
                [
                    "internationalization",
                    "i12iz4n"
                ],
                [
                    "apple",
                    "a2e"
                ],
                [
                    "substitution",
                    "s10n"
                ],
                [
                    "substitution",
                    "sub4u4"
                ],
                [
                    "substitution",
                    "12"
                ],
                [
                    "substitution",
                    "su3i1u2on"
                ],
                [
                    "substitution",
                    "substitution"
                ],
                [
                    "substitution",
                    "s55n"
                ],
                [
                    "substitution",
                    "s010n"
                ],
                [
                    "substitution",
                    "s0ubstitution"
                ],
                [
                    "hello",
                    "h3o"
                ],
                [
                    "hello",
                    "h2o"
                ],
                [
                    "hello",
                    "h1o"
                ],
                [
                    "hello",
                    "h0o"
                ],
                [
                    "hello",
                    "h10o"
                ],
                [
                    "hello",
                    "h01o"
                ],
                [
                    "hello",
                    "h001o"
                ],
                [
                    "hello",
                    "h0001o"
                ],
                [
                    "hello",
                    "h00001o"
                ],
                [
                    "hello",
                    "h000001o"
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                false,
                false,
                false,
                true,
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "409": null,
    "410": null,
    "411": {
        "title": "String Abbreviation",
        "description": "Given a target string and a dictionary of strings, find the shortest possible abbreviation of the target string that is not an abbreviation of any string in the dictionary. An abbreviation is formed by replacing non-adjacent substrings with their lengths.",
        "example": "Example:\n\nInput: target = \"apple\", dictionary = [\"blade\"]\nOutput: \"a4\"\nExplanation: The shortest abbreviation of \"apple\" is \"5\", but this is also an abbreviation of \"blade\". The next shortest abbreviations are \"a4\" and \"4e\". \"4e\" is an abbreviation of \"blade\" while \"a4\" is not. Hence, return \"a4\".",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    "apple",
                    [
                        "blade"
                    ]
                ],
                [
                    "apple",
                    [
                        "blade",
                        "plain",
                        "amber"
                    ]
                ],
                [
                    "substitution",
                    [
                        "s ubsti tutio n"
                    ]
                ],
                [
                    "programming",
                    [
                        "pro gram ming",
                        "gra mmi ng",
                        "progra mmi ng"
                    ]
                ],
                [
                    "algorithm",
                    [
                        "algo rithm",
                        "algo rith ms",
                        "algo rith m"
                    ]
                ]
            ],
            "outputs": [
                "a4",
                "1p3",
                "s10n",
                "p9g",
                "a8m"
            ]
        }
    },
    "412": {
        "title": "FizzBuzz",
        "description": "Given an integer `n`, return a string array `answer` (1-indexed) where each element follows the FizzBuzz rules. If the element is divisible by 3 and 5, the element should be 'FizzBuzz'. If the element is divisible by 3, the element should be 'Fizz'. If the element is divisible by 5, the element should be 'Buzz'. Otherwise, the element should be the number itself as a string.",
        "example": "For example, given n = 5, the output should be ['1', '2', 'Fizz', '4', 'Buzz'].\nExplanation: \n1 is not divisible by 3 or 5, so it is '1'.\n2 is not divisible by 3 or 5, so it is '2'.\n3 is divisible by 3, so it is 'Fizz'.\n4 is not divisible by 3 or 5, so it is '4'.\n5 is divisible by 5, so it is 'Buzz'.\nTherefore, the output is ['1', '2', 'Fizz', '4', 'Buzz'].",
        "level": "Easy",
        "tags": [
            "Array",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                3,
                5,
                15,
                1,
                10,
                20,
                30,
                100,
                101,
                104,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                10000000000,
                100000000000,
                1000000000000
            ],
            "outputs": [
                [
                    "1",
                    "2",
                    "Fizz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz"
                ],
                [
                    "1"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz",
                    "31",
                    "32",
                    "Fizz",
                    "34",
                    "Buzz",
                    "Fizz",
                    "37",
                    "38",
                    "Fizz",
                    "Buzz",
                    "41",
                    "Fizz",
                    "43",
                    "44",
                    "FizzBuzz",
                    "46",
                    "47",
                    "Fizz",
                    "49",
                    "Buzz",
                    "Fizz",
                    "52",
                    "53",
                    "Fizz",
                    "Buzz",
                    "56",
                    "Fizz",
                    "58",
                    "59",
                    "FizzBuzz",
                    "61",
                    "62",
                    "Fizz",
                    "64",
                    "Buzz",
                    "Fizz",
                    "67",
                    "68",
                    "Fizz",
                    "Buzz",
                    "71",
                    "Fizz",
                    "73",
                    "74",
                    "FizzBuzz",
                    "76",
                    "77",
                    "Fizz",
                    "79",
                    "Buzz",
                    "Fizz",
                    "82",
                    "83",
                    "Fizz",
                    "Buzz",
                    "86",
                    "Fizz",
                    "88",
                    "89",
                    "FizzBuzz",
                    "91",
                    "92",
                    "Fizz",
                    "94",
                    "Buzz",
                    "Fizz",
                    "97",
                    "98",
                    "Fizz",
                    "Buzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz",
                    "31",
                    "32",
                    "Fizz",
                    "34",
                    "Buzz",
                    "Fizz",
                    "37",
                    "38",
                    "Fizz",
                    "Buzz",
                    "41",
                    "Fizz",
                    "43",
                    "44",
                    "FizzBuzz",
                    "46",
                    "47",
                    "Fizz",
                    "49",
                    "Buzz",
                    "Fizz",
                    "52",
                    "53",
                    "Fizz",
                    "Buzz",
                    "56",
                    "Fizz",
                    "58",
                    "59",
                    "FizzBuzz",
                    "61",
                    "62",
                    "Fizz",
                    "64",
                    "Buzz",
                    "Fizz",
                    "67",
                    "68",
                    "Fizz",
                    "Buzz",
                    "71",
                    "Fizz",
                    "73",
                    "74",
                    "FizzBuzz",
                    "76",
                    "77",
                    "Fizz",
                    "79",
                    "Buzz",
                    "Fizz",
                    "82",
                    "83",
                    "Fizz",
                    "Buzz",
                    "86",
                    "Fizz",
                    "88",
                    "89",
                    "FizzBuzz",
                    "91",
                    "92",
                    "Fizz",
                    "94",
                    "Buzz",
                    "Fizz",
                    "97",
                    "98",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz",
                    "31",
                    "32",
                    "Fizz",
                    "34",
                    "Buzz",
                    "Fizz",
                    "37",
                    "38",
                    "Fizz",
                    "Buzz",
                    "41",
                    "Fizz",
                    "43",
                    "44",
                    "FizzBuzz",
                    "46",
                    "47",
                    "Fizz",
                    "49",
                    "Buzz",
                    "Fizz",
                    "52",
                    "53",
                    "Fizz",
                    "Buzz",
                    "56",
                    "Fizz",
                    "58",
                    "59",
                    "FizzBuzz",
                    "61",
                    "62",
                    "Fizz",
                    "64",
                    "Buzz",
                    "Fizz",
                    "67",
                    "68",
                    "Fizz",
                    "Buzz",
                    "71",
                    "Fizz",
                    "73",
                    "74",
                    "FizzBuzz",
                    "76",
                    "77",
                    "Fizz",
                    "79",
                    "Buzz",
                    "Fizz",
                    "82",
                    "83",
                    "Fizz",
                    "Buzz",
                    "86",
                    "Fizz",
                    "88",
                    "89",
                    "FizzBuzz",
                    "91",
                    "92",
                    "Fizz",
                    "94",
                    "Buzz",
                    "Fizz",
                    "97",
                    "98",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz",
                    "Fizz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz",
                    "31",
                    "32",
                    "Fizz",
                    "34",
                    "Buzz",
                    "Fizz",
                    "37",
                    "38",
                    "Fizz",
                    "Buzz",
                    "41",
                    "Fizz",
                    "43",
                    "44",
                    "FizzBuzz",
                    "46",
                    "47",
                    "Fizz",
                    "49",
                    "Buzz",
                    "Fizz",
                    "52",
                    "53",
                    "Fizz",
                    "Buzz",
                    "56",
                    "Fizz",
                    "58",
                    "59",
                    "FizzBuzz",
                    "61",
                    "62",
                    "Fizz",
                    "64",
                    "Buzz",
                    "Fizz",
                    "67",
                    "68",
                    "Fizz",
                    "Buzz",
                    "71",
                    "Fizz",
                    "73",
                    "74",
                    "FizzBuzz",
                    "76",
                    "77",
                    "Fizz",
                    "79",
                    "Buzz",
                    "Fizz",
                    "82",
                    "83",
                    "Fizz",
                    "Buzz",
                    "86",
                    "Fizz",
                    "88",
                    "89",
                    "FizzBuzz",
                    "91",
                    "92",
                    "Fizz",
                    "94",
                    "Buzz",
                    "Fizz",
                    "97",
                    "98",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz",
                    "31",
                    "32",
                    "Fizz",
                    "34",
                    "Buzz",
                    "Fizz",
                    "37",
                    "38",
                    "Fizz",
                    "Buzz",
                    "41",
                    "Fizz",
                    "43",
                    "44",
                    "FizzBuzz",
                    "46",
                    "47",
                    "Fizz",
                    "49",
                    "Buzz",
                    "Fizz",
                    "52",
                    "53",
                    "Fizz",
                    "Buzz",
                    "56",
                    "Fizz",
                    "58",
                    "59",
                    "FizzBuzz",
                    "61",
                    "62",
                    "Fizz",
                    "64",
                    "Buzz",
                    "Fizz",
                    "67",
                    "68",
                    "Fizz",
                    "Buzz",
                    "71",
                    "Fizz",
                    "73",
                    "74",
                    "FizzBuzz",
                    "76",
                    "77",
                    "Fizz",
                    "79",
                    "Buzz",
                    "Fizz",
                    "82",
                    "83",
                    "Fizz",
                    "Buzz",
                    "86",
                    "Fizz",
                    "88",
                    "89",
                    "FizzBuzz",
                    "91",
                    "92",
                    "Fizz",
                    "94",
                    "Buzz",
                    "Fizz",
                    "97",
                    "98",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz",
                    "FizzBuzz"
                ],
                [
                    "1",
                    "2",
                    "Fizz",
                    "4",
                    "Buzz",
                    "Fizz",
                    "7",
                    "8",
                    "Fizz",
                    "Buzz",
                    "11",
                    "Fizz",
                    "13",
                    "14",
                    "FizzBuzz",
                    "16",
                    "17",
                    "Fizz",
                    "19",
                    "Buzz",
                    "Fizz",
                    "22",
                    "23",
                    "Fizz",
                    "Buzz",
                    "26",
                    "Fizz",
                    "28",
                    "29",
                    "FizzBuzz",
                    "31",
                    "32",
                    "Fizz",
                    "34",
                    "Buzz",
                    "Fizz",
                    "37",
                    "38",
                    "Fizz",
                    "Buzz",
                    "41",
                    "Fizz",
                    "43",
                    "44",
                    "FizzBuzz",
                    "46",
                    "47",
                    "Fizz",
                    "49",
                    "Buzz",
                    "Fizz",
                    "52",
                    "53",
                    "Fizz",
                    "Buzz",
                    "56",
                    "Fizz",
                    "58",
                    "59",
                    "FizzBuzz",
                    "61",
                    "62",
                    "Fizz",
                    "64",
                    "Buzz",
                    "Fizz",
                    "67",
                    "68",
                    "Fizz",
                    "Buzz",
                    "71",
                    "Fizz",
                    "73",
                    "74",
                    "FizzBuzz",
                    "76",
                    "77",
                    "Fizz",
                    "79",
                    "Buzz",
                    "Fizz",
                    "82",
                    "83",
                    "Fizz",
                    "Buzz",
                    "86",
                    "Fizz",
                    "88",
                    "89",
                    "FizzBuzz",
                    "91",
                    "92",
                    "Fizz",
                    "94",
                    "Buzz",
                    "Fizz",
                    "97",
                    "98",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz",
                    "Fizz",
                    "Buzz",
                    "FizzBuzz",
                    "Buzz"
                ]
            ]
        }
    },
    "413": {
        "title": "Arithmetic Subarrays",
        "description": "Given an integer array `nums`, find the number of arithmetic subarrays in `nums`. An arithmetic subarray is a contiguous subsequence of `nums` in which the difference between any two consecutive elements is the same.",
        "example": "Example:\n\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4], and [1, 2, 3, 4] itself.",
        "level": "Medium",
        "tags": [
            "Array",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    7,
                    7,
                    7,
                    7
                ],
                [
                    3,
                    -1,
                    -5,
                    -9
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19,
                    21,
                    23,
                    25,
                    27,
                    29,
                    31,
                    33,
                    35,
                    37,
                    39,
                    41,
                    43,
                    45,
                    47,
                    49,
                    51,
                    53,
                    55,
                    57,
                    59,
                    61,
                    63,
                    65,
                    67,
                    69,
                    71,
                    73,
                    75,
                    77,
                    79,
                    81,
                    83,
                    85,
                    87,
                    89,
                    91,
                    93,
                    95,
                    97,
                    99
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100
                ]
            ],
            "outputs": [
                3,
                6,
                8,
                36,
                105,
                190,
                1225,
                45,
                4950
            ]
        }
    },
    "414": {
        "title": "Third Distinct Maximum",
        "description": "Given an integer array `nums`, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.",
        "example": "Example 1:\n\nInput: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n\nExample 2:\n\nInput: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n\nExample 3:\n\nInput: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2`s are counted together since they have the same value).\nThe third distinct maximum is 1.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,1]",
                "[1,2]",
                "[2,2,3,1]",
                "[5,5,5,5,5]",
                "[1,1,1,2,2,2,3,3,3]",
                "[9,8,7,6,5,4,3,2,1]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1]",
                "[]"
            ],
            "outputs": [
                "1",
                "2",
                "1",
                "5",
                "1",
                "9",
                "-1",
                "0",
                "8",
                "10",
                "1",
                "null"
            ]
        }
    },
    "415": null,
    "416": {
        "title": "Partition Equal Subset Sum",
        "description": "Given an integer array `nums`, return `true` if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or `false` otherwise.",
        "example": "Example 1:\n\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n\nExample 2:\n\nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    5,
                    11,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    2,
                    3,
                    5,
                    7,
                    11
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400,
                    410,
                    420,
                    430,
                    440,
                    450,
                    460,
                    470,
                    480,
                    490,
                    500
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400,
                    410,
                    420,
                    430,
                    440,
                    450,
                    460,
                    470,
                    480,
                    490,
                    500,
                    510,
                    520,
                    530,
                    540,
                    550,
                    560,
                    570,
                    580,
                    590,
                    600
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400,
                    410,
                    420,
                    430,
                    440,
                    450,
                    460,
                    470,
                    480,
                    490,
                    500,
                    510,
                    520,
                    530,
                    540,
                    550,
                    560,
                    570,
                    580,
                    590,
                    600,
                    610,
                    620,
                    630,
                    640,
                    650,
                    660,
                    670,
                    680,
                    690,
                    700
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400,
                    410,
                    420,
                    430,
                    440,
                    450,
                    460,
                    470,
                    480,
                    490,
                    500,
                    510,
                    520,
                    530,
                    540,
                    550,
                    560,
                    570,
                    580,
                    590,
                    600,
                    610,
                    620,
                    630,
                    640,
                    650,
                    660,
                    670,
                    680,
                    690,
                    700,
                    710,
                    720,
                    730,
                    740,
                    750,
                    760,
                    770,
                    780,
                    790,
                    800
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400,
                    410,
                    420,
                    430,
                    440,
                    450,
                    460,
                    470,
                    480,
                    490,
                    500,
                    510,
                    520,
                    530,
                    540,
                    550,
                    560,
                    570,
                    580,
                    590,
                    600,
                    610,
                    620,
                    630,
                    640,
                    650,
                    660,
                    670,
                    680,
                    690,
                    700,
                    710,
                    720,
                    730,
                    740,
                    750,
                    760,
                    770,
                    780,
                    790,
                    800,
                    810,
                    820,
                    830,
                    840,
                    850,
                    860,
                    870,
                    880,
                    890,
                    900
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100,
                    110,
                    120,
                    130,
                    140,
                    150,
                    160,
                    170,
                    180,
                    190,
                    200,
                    210,
                    220,
                    230,
                    240,
                    250,
                    260,
                    270,
                    280,
                    290,
                    300,
                    310,
                    320,
                    330,
                    340,
                    350,
                    360,
                    370,
                    380,
                    390,
                    400,
                    410,
                    420,
                    430,
                    440,
                    450,
                    460,
                    470,
                    480,
                    490,
                    500,
                    510,
                    520,
                    530,
                    540,
                    550,
                    560,
                    570,
                    580,
                    590,
                    600,
                    610,
                    620,
                    630,
                    640,
                    650,
                    660,
                    670,
                    680,
                    690,
                    700,
                    710,
                    720,
                    730,
                    740,
                    750,
                    760,
                    770,
                    780,
                    790,
                    800,
                    810,
                    820,
                    830,
                    840,
                    850,
                    860,
                    870,
                    880,
                    890,
                    900,
                    910,
                    920,
                    930,
                    940,
                    950,
                    960,
                    970,
                    980,
                    990,
                    1000
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "417": {
        "title": "Rain Water Flow",
        "description": "Given an `m x n` rectangular island that borders both the Pacific Ocean and Atlantic Ocean, and an `m x n` integer matrix `heights` representing the height above sea level of each cell, determine the cells from which rain water can flow to both the Pacific and Atlantic oceans. Water can flow from a cell to its neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Return a 2D list of grid coordinates where each coordinate denotes a cell from which rain water can flow to both oceans.",
        "example": "Example:\n\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\nExplanation: The following cells can flow to the Pacific and Atlantic oceans:\n[0,4]: [0,4] -> Pacific Ocean\n       [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean\n       [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean\n       [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean\n       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean\n       [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean\n       [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean\n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.",
        "level": "Medium",
        "tags": [
            "matrix",
            "graph",
            "DFS",
            "BFS"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        2,
                        2,
                        3,
                        5
                    ],
                    [
                        3,
                        2,
                        3,
                        4,
                        4
                    ],
                    [
                        2,
                        4,
                        5,
                        3,
                        1
                    ],
                    [
                        6,
                        7,
                        1,
                        4,
                        5
                    ],
                    [
                        5,
                        1,
                        1,
                        2,
                        4
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    [
                        3,
                        3,
                        3,
                        3,
                        3
                    ],
                    [
                        4,
                        4,
                        4,
                        4,
                        4
                    ],
                    [
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    [
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    [
                        4,
                        3,
                        2,
                        1,
                        0
                    ],
                    [
                        3,
                        2,
                        1,
                        0,
                        -1
                    ],
                    [
                        2,
                        1,
                        0,
                        -1,
                        -2
                    ],
                    [
                        1,
                        0,
                        -1,
                        -2,
                        -3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    [
                        8,
                        7,
                        6,
                        5,
                        4
                    ],
                    [
                        7,
                        6,
                        5,
                        4,
                        3
                    ],
                    [
                        6,
                        5,
                        4,
                        3,
                        2
                    ],
                    [
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    [
                        10,
                        9,
                        8,
                        7,
                        6
                    ],
                    [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    [
                        8,
                        7,
                        6,
                        5,
                        4
                    ],
                    [
                        7,
                        6,
                        5,
                        4,
                        3
                    ],
                    [
                        6,
                        5,
                        4,
                        3,
                        2
                    ],
                    [
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ]
            ],
            "outputs": [
                [
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        1
                    ],
                    [
                        4,
                        0
                    ]
                ],
                [
                    [
                        0,
                        0
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ]
                ],
                [
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        1
                    ],
                    [
                        4,
                        2
                    ],
                    [
                        4,
                        3
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        4
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        0
                    ],
                    [
                        5,
                        4
                    ]
                ],
                [
                    [
                        0,
                        0
                    ],
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        1,
                        0
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        0
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        0
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        0
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        0
                    ],
                    [
                        5,
                        4
                    ]
                ]
            ]
        }
    },
    "418": {
        "title": "Sentence Fitting",
        "description": "Given a `rows x cols` screen and a `sentence` represented as a list of strings, return the number of times the given sentence can be fitted on the screen. The order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.",
        "example": "Example:\n\nInput: sentence = [\"hello \", \"world \"], rows = 2, cols = 8\nOutput: 1\nExplanation:\nhello---\nworld---\nThe character '-' signifies an empty space on the screen.",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "sentence": [
                        "hello ",
                        "world "
                    ],
                    "rows": 2,
                    "cols": 8
                },
                {
                    "sentence": [
                        "a ",
                        "bcd ",
                        "e "
                    ],
                    "rows": 3,
                    "cols": 6
                },
                {
                    "sentence": [
                        "i ",
                        "had ",
                        "apple ",
                        "pie "
                    ],
                    "rows": 4,
                    "cols": 5
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "test "
                    ],
                    "rows": 5,
                    "cols": 10
                },
                {
                    "sentence": [
                        "coding ",
                        "is ",
                        "fun "
                    ],
                    "rows": 2,
                    "cols": 10
                },
                {
                    "sentence": [
                        "hello ",
                        "world ",
                        "how ",
                        "are ",
                        "you "
                    ],
                    "rows": 3,
                    "cols": 15
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j "
                    ],
                    "rows": 10,
                    "cols": 5
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "long ",
                        "sentence ",
                        "that ",
                        "needs ",
                        "to ",
                        "be ",
                        "fitted "
                    ],
                    "rows": 5,
                    "cols": 20
                },
                {
                    "sentence": [
                        "one ",
                        "two ",
                        "three ",
                        "four ",
                        "five ",
                        "six ",
                        "seven ",
                        "eight ",
                        "nine ",
                        "ten "
                    ],
                    "rows": 10,
                    "cols": 10
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j ",
                        "k ",
                        "l ",
                        "m ",
                        "n ",
                        "o ",
                        "p ",
                        "q ",
                        "r ",
                        "s ",
                        "t ",
                        "u ",
                        "v ",
                        "w ",
                        "x ",
                        "y ",
                        "z "
                    ],
                    "rows": 26,
                    "cols": 2
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "sentence ",
                        "with ",
                        "a ",
                        "lot ",
                        "of ",
                        "words ",
                        "that ",
                        "need ",
                        "to ",
                        "be ",
                        "fitted ",
                        "on ",
                        "the ",
                        "screen "
                    ],
                    "rows": 10,
                    "cols": 20
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j ",
                        "k ",
                        "l ",
                        "m ",
                        "n ",
                        "o ",
                        "p ",
                        "q ",
                        "r ",
                        "s ",
                        "t ",
                        "u ",
                        "v ",
                        "w ",
                        "x ",
                        "y ",
                        "z "
                    ],
                    "rows": 26,
                    "cols": 10
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "test ",
                        "sentence ",
                        "with ",
                        "a ",
                        "lot ",
                        "of ",
                        "words "
                    ],
                    "rows": 5,
                    "cols": 10
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j ",
                        "k ",
                        "l ",
                        "m ",
                        "n ",
                        "o ",
                        "p ",
                        "q ",
                        "r ",
                        "s ",
                        "t ",
                        "u ",
                        "v ",
                        "w ",
                        "x ",
                        "y ",
                        "z "
                    ],
                    "rows": 26,
                    "cols": 20
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "sentence ",
                        "with ",
                        "a ",
                        "lot ",
                        "of ",
                        "words ",
                        "that ",
                        "need ",
                        "to ",
                        "be ",
                        "fitted ",
                        "on ",
                        "the ",
                        "screen "
                    ],
                    "rows": 10,
                    "cols": 10
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j ",
                        "k ",
                        "l ",
                        "m ",
                        "n ",
                        "o ",
                        "p ",
                        "q ",
                        "r ",
                        "s ",
                        "t ",
                        "u ",
                        "v ",
                        "w ",
                        "x ",
                        "y ",
                        "z "
                    ],
                    "rows": 26,
                    "cols": 5
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "test ",
                        "sentence ",
                        "with ",
                        "a ",
                        "lot ",
                        "of ",
                        "words "
                    ],
                    "rows": 5,
                    "cols": 20
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j ",
                        "k ",
                        "l ",
                        "m ",
                        "n ",
                        "o ",
                        "p ",
                        "q ",
                        "r ",
                        "s ",
                        "t ",
                        "u ",
                        "v ",
                        "w ",
                        "x ",
                        "y ",
                        "z "
                    ],
                    "rows": 26,
                    "cols": 10
                },
                {
                    "sentence": [
                        "this ",
                        "is ",
                        "a ",
                        "sentence ",
                        "with ",
                        "a ",
                        "lot ",
                        "of ",
                        "words ",
                        "that ",
                        "need ",
                        "to ",
                        "be ",
                        "fitted ",
                        "on ",
                        "the ",
                        "screen "
                    ],
                    "rows": 10,
                    "cols": 20
                },
                {
                    "sentence": [
                        "a ",
                        "b ",
                        "c ",
                        "d ",
                        "e ",
                        "f ",
                        "g ",
                        "h ",
                        "i ",
                        "j ",
                        "k ",
                        "l ",
                        "m ",
                        "n ",
                        "o ",
                        "p ",
                        "q ",
                        "r ",
                        "s ",
                        "t ",
                        "u ",
                        "v ",
                        "w ",
                        "x ",
                        "y ",
                        "z "
                    ],
                    "rows": 26,
                    "cols": 2
                }
            ],
            "outputs": [
                1,
                2,
                1,
                2,
                1,
                1,
                10,
                1,
                1,
                13,
                2,
                1,
                2,
                1,
                1,
                2,
                1,
                2,
                1
            ]
        }
    },
    "419": {
        "title": "Count Battleships",
        "description": "Given an `m x n` matrix `board` where each cell is a battleship 'X' or empty '.', return the number of battleships on the board. Battleships can only be placed horizontally or vertically on the board. In other words, they can only be made of the shape `1 x k` (1 row, k columns) or `k x 1` (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).",
        "example": "Example:\n\nInput: board = [['X', '.', '.', 'X'], ['.', '.', '.', 'X'], ['.', '.', '.', 'X']]\nOutput: 2\n\nExplanation: There are two battleships on the board.\n\nExample:\n\nInput: board = [['.']]\nOutput: 0\n\nExplanation: There are no battleships on the board.",
        "level": "Easy",
        "tags": [
            "matrix",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        "X",
                        ".",
                        ".",
                        "X"
                    ],
                    [
                        ".",
                        ".",
                        ".",
                        "X"
                    ],
                    [
                        ".",
                        ".",
                        ".",
                        "X"
                    ]
                ],
                [
                    [
                        "."
                    ]
                ]
            ],
            "outputs": [
                2,
                0
            ]
        }
    },
    "420": {
        "title": "Password Strength",
        "description": "A password is considered strong if it meets the following conditions:\n\n- It has at least 6 characters and at most 20 characters.\n- It contains at least one lowercase letter, one uppercase letter, and one digit.\n- It does not contain three repeating characters in a row.\n\nGiven a string `password`, write a function to return the minimum number of steps required to make the password strong. If the password is already strong, return 0.\n\nIn one step, you can:\n- Insert one character to the password\n- Delete one character from the password\n- Replace one character of the password with another character.",
        "example": "Example:\n\nInput: password = \"a\"\nOutput: 5\n\nExplanation: The password has only one character and it needs to have at least 6 characters. Therefore, we need to insert 5 characters to make it strong.\n\nInput: password = \"aA1\"\nOutput: 3\n\nExplanation: The password is already strong and doesn't require any changes.\n\nInput: password = \"1337C0d3\"\nOutput: 0\n\nExplanation: The password is already strong and doesn't require any changes.",
        "level": "Medium",
        "tags": [
            "string",
            "password",
            "validation"
        ],
        "test_cases": {
            "inputs": [
                "\"a\"",
                "\"aA1\"",
                "\"1337C0d3\"",
                "\"password\"",
                "\"123456\"",
                "\"Abcdefg\"",
                "\"!@#$%^&*()\"",
                "\"aA1!\"",
                "\"aA1!2\"",
                "\"aA1!2@\"",
                "\"aA1!2@3\"",
                "\"aA1!2@3#\"",
                "\"aA1!2@3#4\"",
                "\"aA1!2@3#4$\"",
                "\"aA1!2@3#4$5\"",
                "\"aA1!2@3#4$5%\"",
                "\"aA1!2@3#4$5%6\"",
                "\"aA1!2@3#4$5%6^\"",
                "\"aA1!2@3#4$5%6^7\"",
                "\"aA1!2@3#4$5%6^7&\""
            ],
            "outputs": [
                "5",
                "3",
                "0",
                "8",
                "1",
                "0",
                "6",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "421": {
        "title": "Maximum XOR Pair",
        "description": "Given an integer array `nums`, find the maximum result of XOR operation between any two elements in the array.",
        "example": "Example 1:\n\nInput: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.\n\nExample 2:\n\nInput: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\nOutput: 127",
        "level": "Medium",
        "tags": [
            "array",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    10,
                    5,
                    25,
                    2,
                    8
                ],
                [
                    14,
                    70,
                    53,
                    83,
                    49,
                    91,
                    36,
                    80,
                    92,
                    51,
                    66,
                    70
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1024,
                    2048,
                    4096,
                    8192,
                    16384
                ],
                [
                    15,
                    30,
                    45,
                    60,
                    75,
                    90
                ],
                [
                    17,
                    34,
                    51,
                    68,
                    85,
                    102
                ],
                [
                    255,
                    255,
                    255,
                    255,
                    255,
                    255
                ]
            ],
            "outputs": [
                28,
                127,
                0,
                7,
                15,
                600,
                32768,
                105,
                119,
                0
            ]
        }
    },
    "422": {
        "title": "Valid Word Square",
        "description": "Given an array of strings `words`, return `true` if it forms a valid word square. A sequence of strings forms a valid word square if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.",
        "example": "Example 1:\n\nInput: words = [\"abcd \", \"bnrt \", \"crmy \", \"dtye \"]\nOutput: true\nExplanation: The 1st row and 1st column both read \"abcd \". The 2nd row and 2nd column both read \"bnrt \". The 3rd row and 3rd column both read \"crmy \". The 4th row and 4th column both read \"dtye \". Therefore, it is a valid word square.",
        "level": "Medium",
        "tags": [
            "array",
            "string"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crm ",
                    "dt "
                ],
                [
                    "ball ",
                    "area ",
                    "read ",
                    "lady "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "1234 "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "1234 ",
                    "5678 "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "1234 ",
                    "5678 ",
                    "90ab "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "1234 ",
                    "5678 ",
                    "90ab ",
                    "cdef "
                ],
                [
                    "abcd ",
                    "bnrt ",
                    "crmy ",
                    "dtye ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "1234 ",
                    "5678 ",
                    "90ab ",
                    "cdef ",
                    "ghij "
                ]
            ],
            "outputs": [
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "423": {
        "title": "Ascending Order of Digits",
        "description": "Given a string `s` containing an out-of-order English representation of digits `0-9`, return the digits in ascending order.",
        "example": "Example:\n\nInput: s = \"owoztneoer\"\nOutput: \"012\"\n\nInput: s = \"fviefuro\"\nOutput: \"45\"",
        "level": "Easy",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "\"owoztneoer\"",
                "\"fviefuro\"",
                "\"xvz\"",
                "\"hgfedcba\"",
                "\"s\"",
                "\"t\"",
                "\"n\"",
                "\"i\"",
                "\"g\"",
                "\"e\"",
                "\"r\"",
                "\"u\"",
                "\"w\"",
                "\"o\"",
                "\"z\"",
                "\"v\"",
                "\"x\"",
                "\"t\"",
                "\"s\"",
                "\"n\"",
                "\"r\""
            ],
            "outputs": [
                "\"012\"",
                "\"45\"",
                "\"xz\"",
                "\"abcdefgh\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\"",
                "\"\""
            ]
        }
    },
    "424": {
        "title": "Longest Substring with Same Letters After K Replacement",
        "description": "Given a string `s` and an integer `k`, you can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times. Write a function that returns the length of the longest substring containing the same letter you can get after performing the above operations.",
        "example": "For example, given the string `s = \"ABAB\"` and `k = 2`, you can replace the two 'A's with two 'B's or vice versa. The longest substring containing the same letter is \"BBBB\" with a length of 4.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "two pointers"
        ],
        "test_cases": {
            "inputs": [
                [
                    "ABAB",
                    2
                ],
                [
                    "AABABBA",
                    1
                ],
                [
                    "AAAA",
                    0
                ],
                [
                    "ABCD",
                    1
                ],
                [
                    "ABBBB",
                    2
                ],
                [
                    "AABBBB",
                    3
                ],
                [
                    "ABABAB",
                    0
                ],
                [
                    "ABABAB",
                    1
                ],
                [
                    "ABABAB",
                    2
                ],
                [
                    "ABABAB",
                    3
                ],
                [
                    "ABABAB",
                    4
                ],
                [
                    "ABABAB",
                    5
                ],
                [
                    "ABABAB",
                    6
                ],
                [
                    "ABABAB",
                    7
                ],
                [
                    "ABABAB",
                    8
                ],
                [
                    "ABABAB",
                    9
                ],
                [
                    "ABABAB",
                    10
                ],
                [
                    "ABABAB",
                    11
                ],
                [
                    "ABABAB",
                    12
                ],
                [
                    "ABABAB",
                    13
                ]
            ],
            "outputs": [
                4,
                4,
                4,
                2,
                5,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6
            ]
        }
    },
    "425": {
        "title": "Word Squares",
        "description": "Given an array of unique strings `words`, return all the word squares you can build from `words`. The same word from `words` can be used multiple times. You can return the answer in any order.\n\nA sequence of strings forms a valid word square if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\nFor example, the word sequence `[ \"ball \", \"area \", \"lead \", \"lady \"]` forms a word square because each word reads the same both horizontally and vertically.",
        "example": "Example:\n\nInput: words = [ \"area \", \"lead \", \"wall \", \"lady \", \"ball \"]\nOutput: [ [ \"ball \", \"area \", \"lead \", \"lady \"], [ \"wall \", \"area \", \"lead \", \"lady \"] ]\nExplanation: The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).",
        "level": "Medium",
        "tags": [
            "array",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    "area ",
                    "lead ",
                    "wall ",
                    "lady ",
                    "ball "
                ],
                [
                    "abat ",
                    "baba ",
                    "atan ",
                    "atal "
                ],
                [
                    "a ",
                    "b ",
                    "c ",
                    "d "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv "
                ],
                [
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz ",
                    "abcd ",
                    "efgh ",
                    "ijkl ",
                    "mnop ",
                    "qrst ",
                    "uvwx ",
                    "yzab ",
                    "cdef ",
                    "ghij ",
                    "klmn ",
                    "opqr ",
                    "stuv ",
                    "wxyz "
                ]
            ],
            "outputs": [
                [
                    [
                        "ball ",
                        "area ",
                        "lead ",
                        "lady "
                    ],
                    [
                        "wall ",
                        "area ",
                        "lead ",
                        "lady "
                    ]
                ],
                [
                    [
                        "baba ",
                        "abat ",
                        "baba ",
                        "atal "
                    ],
                    [
                        "baba ",
                        "abat ",
                        "baba ",
                        "atan "
                    ]
                ],
                [
                    [
                        "a ",
                        "a ",
                        "a ",
                        "a "
                    ],
                    [
                        "b ",
                        "b ",
                        "b ",
                        "b "
                    ],
                    [
                        "c ",
                        "c ",
                        "c ",
                        "c "
                    ],
                    [
                        "d ",
                        "d ",
                        "d ",
                        "d "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ],
                [
                    [
                        "abcd ",
                        "efgh ",
                        "ijkl ",
                        "mnop "
                    ],
                    [
                        "efgh ",
                        "ijkl ",
                        "mnop ",
                        "qrst "
                    ],
                    [
                        "ijkl ",
                        "mnop ",
                        "qrst ",
                        "uvwx "
                    ],
                    [
                        "mnop ",
                        "qrst ",
                        "uvwx ",
                        "yzab "
                    ]
                ]
            ]
        }
    },
    "426": {
        "title": "Convert Binary Search Tree to Circular Doubly-Linked List",
        "description": "Given a Binary Search Tree (BST), convert it into a sorted Circular Doubly-Linked List in place. The left and right pointers of each node should be modified to point to its predecessor and successor respectively. The predecessor of the first element should be the last element, and the successor of the last element should be the first element. Return the pointer to the smallest element of the linked list.",
        "example": "Example:\n\nInput: root = [4,2,5,1,3]\nOutput: [1,2,3,4,5]\n\nExplanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.\n\n   1 <--> 2 <--> 3 <--> 4 <--> 5 <--> 1\n   ^                             ^\n   |_____________________________|\n\nInput: root = [2,1,3]\nOutput: [1,2,3]",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Doubly-Linked List",
            "In-place"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        4,
                        2,
                        5,
                        1,
                        3
                    ]
                },
                {
                    "root": [
                        2,
                        1,
                        3
                    ]
                },
                {
                    "root": [
                        1
                    ]
                },
                {
                    "root": [
                        3,
                        2,
                        1
                    ]
                },
                {
                    "root": [
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "root": [
                        10,
                        5,
                        15,
                        3,
                        7,
                        12,
                        18
                    ]
                },
                {
                    "root": [
                        50,
                        30,
                        70,
                        20,
                        40,
                        60,
                        80
                    ]
                },
                {
                    "root": [
                        100,
                        50,
                        200,
                        25,
                        75,
                        150,
                        250
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "root": [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                },
                {
                    "root": [
                        5,
                        3,
                        8,
                        2,
                        4,
                        7,
                        9,
                        1,
                        6
                    ]
                },
                {
                    "root": [
                        15,
                        10,
                        20,
                        5,
                        12,
                        18,
                        25,
                        2,
                        7,
                        11,
                        14,
                        17,
                        19,
                        22,
                        27
                    ]
                },
                {
                    "root": [
                        30,
                        20,
                        40,
                        10,
                        25,
                        35,
                        45,
                        5,
                        15,
                        22,
                        28,
                        32,
                        38,
                        48
                    ]
                },
                {
                    "root": [
                        50,
                        30,
                        70,
                        20,
                        40,
                        60,
                        80,
                        15,
                        25,
                        35,
                        45,
                        55,
                        65,
                        75,
                        85
                    ]
                },
                {
                    "root": [
                        100,
                        50,
                        200,
                        25,
                        75,
                        150,
                        250,
                        10,
                        30,
                        60,
                        90,
                        125,
                        175,
                        225,
                        275
                    ]
                },
                {
                    "root": []
                }
            ],
            "outputs": [
                {
                    "result": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "result": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "result": [
                        1
                    ]
                },
                {
                    "result": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "result": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "result": [
                        3,
                        5,
                        7,
                        10,
                        12,
                        15,
                        18
                    ]
                },
                {
                    "result": [
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80
                    ]
                },
                {
                    "result": [
                        25,
                        50,
                        75,
                        100,
                        150,
                        200,
                        250
                    ]
                },
                {
                    "result": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "result": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "result": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "result": [
                        2,
                        5,
                        7,
                        10,
                        11,
                        12,
                        14,
                        15,
                        17,
                        18,
                        19,
                        20,
                        22,
                        25,
                        27
                    ]
                },
                {
                    "result": [
                        5,
                        10,
                        15,
                        20,
                        22,
                        25,
                        28,
                        30,
                        32,
                        35,
                        38,
                        40,
                        45,
                        48
                    ]
                },
                {
                    "result": [
                        15,
                        20,
                        25,
                        30,
                        35,
                        40,
                        45,
                        50,
                        55,
                        60,
                        65,
                        70,
                        75,
                        80,
                        85
                    ]
                },
                {
                    "result": [
                        10,
                        25,
                        30,
                        50,
                        60,
                        75,
                        90,
                        100,
                        125,
                        150,
                        175,
                        200,
                        225,
                        250,
                        275
                    ]
                },
                {
                    "result": []
                }
            ]
        }
    },
    "427": null,
    "428": null,
    "429": {
        "title": "N-ary Tree Level Order Traversal",
        "description": "Given an n-ary tree, return the level order traversal of its nodes' values. The n-ary tree input serialization is represented in their level order traversal, where each group of children is separated by the null value.",
        "example": "Example 1:\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]\n\nExample 2:\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
        "level": "Medium",
        "tags": [
            "n-ary tree",
            "level order traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,3,2,4,null,5,6]",
                "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90,null,91,null,92,null,93,null,94,null,95,null,96,null,97,null,98,null,99,null,100]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90,null,91,null,92,null,93,null,94,null,95,null,96,null,97,null,98,null,99,null,100,null,101,null,102,null,103,null,104]"
            ],
            "outputs": [
                "[[1],[3,2,4],[5,6]]",
                "[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100]]",
                "[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100],[101],[102],[103],[104]]"
            ]
        }
    },
    "430": null,
    "431": {
        "title": "Encode and Decode N-ary Tree to Binary Tree",
        "description": "You are given an N-ary tree, which is a rooted tree where each node can have at most N children. Your task is to design an algorithm to encode this N-ary tree into a binary tree and then decode the binary tree to retrieve the original N-ary tree structure. The encoding and decoding algorithms should be stateless and there are no restrictions on how they should work. The N-ary tree input serialization is represented in level order traversal, with each group of children separated by the null value. For example, the N-ary tree [1,null,3,2,4,null,5,6] can be encoded into a binary tree as [1,null,3,2,4,null,5,6]. Your task is to implement the encoding and decoding algorithms.",
        "example": "Example:\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,null,3,2,4,null,5,6]\n\nExplanation: The given N-ary tree can be encoded into a binary tree as shown in the output. The decoding algorithm should be able to retrieve the original N-ary tree structure from the binary tree.",
        "level": "Medium",
        "tags": [
            "tree",
            "binary tree",
            "encoding",
            "decoding"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,3,2,4,null,5,6]",
                "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "[]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90,null,91,null,92,null,93,null,94,null,95,null,96,null,97,null,98,null,99,null,100]"
            ],
            "outputs": [
                "[1,null,3,2,4,null,5,6]",
                "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "[]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90,null,91,null,92,null,93,null,94,null,95,null,96,null,97,null,98,null,99,null,100]"
            ]
        }
    },
    "432": {
        "title": "String Count Data Structure",
        "description": "Design a data structure to store the count of strings with the ability to return the strings with minimum and maximum counts. Implement the `AllOne` class with the following methods: \n\n- `AllOne()`: Initializes the object of the data structure. \n- `inc(String key)`: Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`. \n- `dec(String key)`: Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement. \n- `getMaxKey()`: Returns one of the keys with the maximal count. If no element exists, return an empty string \"\". \n- `getMinKey()`: Returns one of the keys with the minimum count. If no element exists, return an empty string \"\". \n\nNote that each function must run in O(1) average time complexity.",
        "example": "Example:\n\nInput:\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n\nOutput:\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\nExplanation:\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"",
        "level": "Medium",
        "tags": [
            "Data Structure",
            "String",
            "Count"
        ],
        "test_cases": {
            "inputs": [
                [
                    "AllOne",
                    "inc",
                    "inc",
                    "getMaxKey",
                    "getMinKey",
                    "inc",
                    "getMaxKey",
                    "getMinKey"
                ],
                [
                    [],
                    [
                        "hello"
                    ],
                    [
                        "hello"
                    ],
                    [],
                    [],
                    [
                        "leet"
                    ],
                    [],
                    []
                ]
            ],
            "outputs": [
                [
                    null,
                    null,
                    null,
                    "hello",
                    "hello",
                    null,
                    "hello",
                    "leet"
                ]
            ]
        }
    },
    "433": {
        "title": "Minimum Number of Gene Mutations",
        "description": "A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'. Suppose we need to investigate a mutation from a gene string `startGene` to a gene string `endGene` where one mutation is defined as one single character changed in the gene string. There is also a gene bank `bank` that records all the valid gene mutations. A gene must be in `bank` to make it a valid gene string. Given the two gene strings `startGene` and `endGene` and the gene bank `bank`, return the minimum number of mutations needed to mutate from `startGene` to `endGene`. If there is no such a mutation, return -1. Note that the starting point is assumed to be valid, so it might not be included in the bank.",
        "example": "Example:\n\nInput: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\nOutput: 1\n\nInput: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\nOutput: 2",
        "level": "Medium",
        "tags": [
            "string",
            "search",
            "mutation"
        ],
        "test_cases": {
            "inputs": [
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AAACGGTA",
                    [
                        "AACCGGTA",
                        "AACCGCTA",
                        "AAACGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTT",
                    []
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    []
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTT"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ],
                [
                    "AACCGGTT",
                    "AACCGGTA",
                    [
                        "AACCGGTT",
                        "AACCGGTC",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA",
                        "AACCGGTA"
                    ]
                ]
            ],
            "outputs": [
                1,
                2,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            ]
        }
    },
    "434": {
        "title": "Number of Segments in a String",
        "description": "Given a string `s`, return the number of segments in the string. A segment is defined as a contiguous sequence of non-space characters.",
        "example": "Example 1:\n\nInput: s = \"Hello, my name is John \"\nOutput: 5\nExplanation: The five segments are [\"Hello, \", \"my \", \"name \", \"is \", \"John \"]\n\nExample 2:\n\nInput: s = \"Hello \"\nOutput: 1",
        "level": "Easy",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"Hello, my name is John \"",
                "\"Hello \"",
                "\"This is a test\"",
                "\"123 456 789\"",
                "\"!@#$%^&*()_+-=,.:\"",
                "\"\"",
                "\"   \"",
                "\"Hello, world!\"",
                "\"Hello, my name is John Doe\"",
                "\"This is a longer string with multiple segments\""
            ],
            "outputs": [
                "5",
                "1",
                "4",
                "3",
                "1",
                "0",
                "0",
                "2",
                "6",
                "6"
            ]
        }
    },
    "435": {
        "title": "Minimum Number of Intervals to Remove",
        "description": "Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, you need to determine the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",
        "example": "Example 1:\n\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2],[2,3],[3,4],[1,3]]",
                "[[1,2],[1,2],[1,2]]",
                "[[1,2],[2,3]]",
                "[[1,5],[2,3],[4,6],[7,8]]",
                "[[1,3],[2,4],[3,5],[4,6]]",
                "[[1,10],[2,3],[4,5],[6,7],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]"
            ],
            "outputs": [
                "1",
                "2",
                "0",
                "1",
                "2",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18"
            ]
        }
    },
    "436": {
        "title": "Right Interval",
        "description": "You are given an array of intervals, where each interval is represented as [start, end]. The start point of each interval is unique. The right interval for an interval i is an interval j such that start_j >= end_i and start_j is minimized. Return an array of right interval indices for each interval i. If no right interval exists for interval i, put -1 at index i.",
        "example": "Example 1:\n\nInput: intervals = [[1,2]]\nOutput: [-1]\nExplanation: There is only one interval in the collection, so it outputs -1.\n\nExample 2:\n\nInput: intervals = [[3,4],[2,3],[1,2]]\nOutput: [-1,0,1]\nExplanation: There is no right interval for [3,4]. The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3. The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n\nExample 3:\n\nInput: intervals = [[1,4],[2,3],[3,4]]\nOutput: [-1,2,-1]\nExplanation: There is no right interval for [1,4] and [3,4]. The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2]]",
                "[[3,4],[2,3],[1,2]]",
                "[[1,4],[2,3],[3,4]]",
                "[[1,10],[2,5],[6,9]]",
                "[[5,10],[2,7],[8,12],[15,20]]",
                "[[1,3],[2,4],[3,5]]",
                "[[1,2],[2,3],[3,4]]",
                "[[1,2],[2,3],[4,5]]",
                "[[1,2],[3,4],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,2],[2,3],[3,4],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5],[6,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]"
            ],
            "outputs": [
                "[-1]",
                "[-1,0,1]",
                "[-1,2,-1]",
                "[-1,2,-1]",
                "[-1,0,2,-1]",
                "[-1,0,1]",
                "[-1,0,1]",
                "[-1,0,-1]",
                "[-1,-1,-1]",
                "[-1,0,1,-1]",
                "[-1,0,1,-1]",
                "[-1,0,1,-1,-1]",
                "[-1,0,1,-1,-1]",
                "[-1,0,1,-1,-1,-1]",
                "[-1,0,1,-1,-1,-1]",
                "[-1,0,1,-1,-1,-1,-1]",
                "[-1,0,1,-1,-1,-1,-1]",
                "[-1,0,1,-1,-1,-1,-1,-1]",
                "[-1,0,1,-1,-1,-1,-1,-1]",
                "[-1,0,1,-1,-1,-1,-1,-1,-1]"
            ]
        }
    },
    "437": {
        "title": "Path Sum Count",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, return the number of paths where the sum of the values along the path equals `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).",
        "example": "Example 1:\n\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1]\nOutput: 3\nExplanation: The paths that sum to 8 are shown.\n\nExample 2:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1]\nOutput: 3",
        "level": "Medium",
        "tags": [
            "binary tree",
            "path sum",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[10,5,-3,3,2,null,11,3,-2,null,1]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,5,null,null,6,7,null,null,8,9,10]",
                "[1,2,3,4,5,null,null,6,7,null,null,8,9,10,null,null,11,12,13,null,null,null,null,14]"
            ],
            "outputs": [
                "3",
                "3",
                "0",
                "0",
                "0",
                "0",
                "0",
                "2",
                "3",
                "4"
            ]
        }
    },
    "438": null,
    "439": {
        "title": "Evaluate Ternary Expression",
        "description": "Given a string `expression` representing arbitrarily nested ternary expressions, evaluate the expression, and return the result of it. The expression consists of digits, `'?'`, `':'`, `'T'`, and `'F'` where `'T'` is true and `'F'` is false. All the numbers in the expression are one-digit numbers. The conditional expressions group right-to-left, and the result of the expression will always evaluate to either a digit, `'T'` or `'F'`.",
        "example": "For example, if the expression is 'T?2:3', the output will be '2' because if the condition is true, the result is 2; otherwise, the result is 3.",
        "level": "Easy",
        "tags": [
            "string",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "T?2:3",
                "F?1:T?4:5",
                "T?T?F:5:3",
                "T?F?T?1:2:3:4",
                "F?T?F?1:2:3:4:5",
                "T?T?T?1:2:3:4:5:6",
                "F?F?F?1:2:3:4:5:6:7",
                "T?T?T?T?1:2:3:4:5:6:7:8",
                "F?F?F?F?1:2:3:4:5:6:7:8:9",
                "T?T?T?T?T?1:2:3:4:5:6:7:8:9:0",
                "F?F?F?F?F?1:2:3:4:5:6:7:8:9:0:1",
                "T?T?T?T?T?T?1:2:3:4:5:6:7:8:9:0:1:2",
                "F?F?F?F?F?F?1:2:3:4:5:6:7:8:9:0:1:2:3",
                "T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9:0:1:2:3:4",
                "F?F?F?F?F?F?F?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5",
                "T?T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6",
                "F?F?F?F?F?F?F?F?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6:7",
                "T?T?T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6:7:8",
                "F?F?F?F?F?F?F?F?F?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6:7:8:9",
                "T?T?T?T?T?T?T?T?T?T?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6:7:8:9:0",
                "F?F?F?F?F?F?F?F?F?F?1:2:3:4:5:6:7:8:9:0:1:2:3:4:5:6:7:8:9:0:1"
            ],
            "outputs": [
                "2",
                "4",
                "F",
                "2",
                "4",
                "1",
                "7",
                "1",
                "9",
                "1",
                "0",
                "1",
                "2",
                "1",
                "3",
                "1",
                "4",
                "1",
                "5",
                "1"
            ]
        }
    },
    "440": {
        "title": "Kth Lexicographically Smallest Integer",
        "description": "Given two integers `n` and `k`, return the `kth` lexicographically smallest integer in the range `[1, n]`.",
        "example": "Example 1:\n\nInput: n = 13, k = 2\nOutput: 10\nExplanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n\nExample 2:\n\nInput: n = 1, k = 1\nOutput: 1",
        "level": "Medium",
        "tags": [
            "Math",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    13,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    5,
                    3
                ],
                [
                    100,
                    50
                ],
                [
                    10,
                    10
                ],
                [
                    20,
                    15
                ],
                [
                    1000,
                    500
                ],
                [
                    10000,
                    1000
                ],
                [
                    12345,
                    6789
                ],
                [
                    987654321,
                    123456789
                ],
                [
                    1000000000,
                    999999999
                ],
                [
                    999999999,
                    1
                ]
            ],
            "outputs": [
                10,
                1,
                3,
                50,
                10,
                15,
                500,
                1000,
                6789,
                123456789,
                999999999,
                1
            ]
        }
    },
    "441": {
        "title": "Staircase Rows",
        "description": "You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase **may be** incomplete. Given the integer `n`, return the number of complete rows of the staircase you will build.",
        "example": "Example 1:\n\nInput: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.\n\nExample 2:\n\nInput: n = 8\nOutput: 3\nExplanation: Because the 4th row is incomplete, we return 3.",
        "level": "Easy",
        "tags": [
            "math",
            "loops"
        ],
        "test_cases": {
            "inputs": [
                5,
                8,
                1,
                10,
                15,
                20,
                25,
                30,
                50,
                100,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                2147483647
            ],
            "outputs": [
                2,
                3,
                1,
                4,
                5,
                5,
                5,
                6,
                7,
                13,
                44,
                141,
                447,
                1414,
                4472,
                14142,
                44721,
                46340
            ]
        }
    },
    "442": {
        "title": "Find Duplicates in Array",
        "description": "Given an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears **once** or **twice**, write a function to return an array of all the integers that appear **twice**.",
        "example": "Example 1:\n\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [2,3]\n\nExample 2:\n\nInput: nums = [1,1,2]\nOutput: [1]\n\nExample 3:\n\nInput: nums = [1]\nOutput: []",
        "level": "Easy",
        "tags": [
            "Array",
            "Hash Table"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    3,
                    2,
                    7,
                    8,
                    2,
                    3,
                    1
                ],
                [
                    1,
                    1,
                    2
                ],
                [
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    1,
                    4,
                    2,
                    1,
                    4,
                    2
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    9
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8,
                    8
                ],
                [
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ],
                [
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10,
                    10
                ]
            ],
            "outputs": [
                [
                    2,
                    3
                ],
                [
                    1
                ],
                [],
                [
                    2
                ],
                [
                    1,
                    2,
                    4
                ],
                [],
                [
                    1
                ],
                [
                    9
                ],
                [],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1
                ],
                [
                    2
                ],
                [
                    3
                ],
                [
                    4
                ],
                [
                    5
                ],
                [
                    6
                ],
                [
                    7
                ],
                [
                    8
                ],
                [
                    9
                ],
                [
                    10
                ]
            ]
        }
    },
    "443": null,
    "444": {
        "title": "Shortest Supersequence",
        "description": "Given an integer array `nums` of length `n` where `nums` is a permutation of the integers in the range `[1, n]`, and a 2D integer array `sequences` where `sequences[i]` is a subsequence of `nums`, check if `nums` is the shortest possible and the only supersequence. The shortest supersequence is a sequence with the shortest length and has all `sequences[i]` as subsequences. Return `true` if `nums` is the only shortest supersequence for `sequences`, or `false` otherwise.",
        "example": "Example:\n\nInput: nums = [1,2,3], sequences = [[1,2],[1,3]]\nOutput: false\nExplanation: There are two possible supersequences: [1,2,3] and [1,3,2]. The sequence [1,2] is a subsequence of both: [1,2,3] and [1,3,2]. The sequence [1,3] is a subsequence of both: [1,2,3] and [1,3,2]. Since nums is not the only shortest supersequence, we return false.",
        "level": "Medium",
        "tags": [
            "array",
            "subsequence"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[1,2,3]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ],
            "outputs": [
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true"
            ]
        }
    },
    "445": null,
    "446": {
        "title": "Arithmetic Subsequences",
        "description": "Given an integer array `nums`, return the number of all the arithmetic subsequences of `nums`. A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.",
        "example": "Example:\n\nInput: nums = [2,4,6,8,10]\nOutput: 7\nExplanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]",
        "level": "Medium",
        "tags": [
            "array",
            "subsequence",
            "arithmetic"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    7,
                    7,
                    7,
                    7,
                    7
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    3,
                    -1,
                    -5,
                    -9
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16
                ],
                [
                    1,
                    2,
                    4,
                    7,
                    11
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    15
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    31
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    30
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    29
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    28
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    27
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    26
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    25
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    24
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    23
                ]
            ],
            "outputs": [
                7,
                16,
                7,
                10,
                16,
                7,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "447": {
        "title": "Number of Boomerangs",
        "description": "You are given `n` `points` in the plane that are all **distinct**, where `points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**. Return the number of boomerangs.",
        "example": "Example:\n\nInput: points = [[0,0],[1,0],[2,0]]\nOutput: 2\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].",
        "level": "Medium",
        "tags": [
            "Array",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "[[0,0],[1,0],[2,0]]",
                "[[1,1],[2,2],[3,3]]",
                "[[1,1]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50]]"
            ],
            "outputs": [
                "2",
                "2",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "448": {
        "title": "Missing Numbers",
        "description": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.",
        "example": "Example 1:\n\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n\nExample 2:\n\nInput: nums = [1,1]\nOutput: [2]",
        "level": "Easy",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[4,3,2,7,8,2,3,1]",
                "[1,1]",
                "[2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,5,5,5,5,5,5,5,5,5]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1]",
                "[2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[5,6]",
                "[2]",
                "[]",
                "[]",
                "[1,2,3,4,6,7,8,9,10]",
                "[]",
                "[]",
                "[2]",
                "[1]",
                "[]"
            ]
        }
    },
    "449": {
        "title": "Serialize and Deserialize Binary Search Tree",
        "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file, memory buffer, or transmitted across a network connection. In this problem, you need to design an algorithm to serialize and deserialize a binary search tree (BST). The serialization should convert the BST into a compact string representation, and the deserialization should reconstruct the original BST from the string. The encoded string should be as compact as possible.",
        "example": "Example:\n\nInput: root = [2,1,3]\nOutput: [2,1,3]\n\nExplanation: The input binary search tree is:\n    2\n   / \\\n  1   3\n\nThe serialized string representation of the BST is [2,1,3].\n\n\nInput: root = []\nOutput: []\n\nExplanation: The input binary search tree is empty, so the serialized string representation is also empty.",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Serialization",
            "Deserialization"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,3]",
                "[]",
                "[5,3,6,2,4,null,7]",
                "[4,2,6,1,3,5,7]",
                "[1]",
                "[1,2]",
                "[2,1]",
                "[3,2,4,1,null,null,5]",
                "[10,5,15,3,7,null,18]",
                "[50,30,70,20,40,60,80]"
            ],
            "outputs": [
                "[2,1,3]",
                "[]",
                "[5,3,6,2,4,null,7]",
                "[4,2,6,1,3,5,7]",
                "[1]",
                "[1,2]",
                "[2,1]",
                "[3,2,4,1,null,null,5]",
                "[10,5,15,3,7,null,18]",
                "[50,30,70,20,40,60,80]"
            ]
        }
    },
    "450": {
        "title": "Delete Node in BST",
        "description": "Given a root node reference of a Binary Search Tree (BST) and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST. The deletion can be divided into two stages: 1. Search for a node to remove. 2. If the node is found, delete the node.",
        "example": "Example 1:\n\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it. One valid answer is [5,4,6,2,null,null,7], shown in the above BST. Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n\nExample 2:\n\nInput: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n\nExample 3:\n\nInput: root = [], key = 0\nOutput: []",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Tree Traversal",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]"
            ],
            "outputs": [
                "[5,4,6,2,null,null,7]",
                "[5,2,6,null,4,null,7]",
                "[]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]",
                "[5,3,6,2,4,null,7]"
            ]
        }
    },
    "451": {
        "title": "Sort String by Character Frequency",
        "description": "Given a string `s`, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string. Return the sorted string. If there are multiple answers, return any of them.",
        "example": "Example 1:\n\nInput: s = \"tree \"\nOutput: \"eert \"\nExplanation: 'e' appears twice while 'r' and 't' both appear once. So 'e' must appear before both 'r' and 't'. Therefore \"eetr \" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cccaaa \"\nOutput: \"aaaccc \"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa \" and \"aaaccc \" are valid answers. Note that \"cacaca \" is incorrect, as the same characters must be together.\n\nExample 3:\n\nInput: s = \"Aabb \"\nOutput: \"bbAa \"\nExplanation: \"bbaA \" is also a valid answer, but \"Aabb \" is incorrect. Note that 'A' and 'a' are treated as two different characters.",
        "level": "Easy",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "\"tree \"",
                "\"cccaaa \"",
                "\"Aabb \"",
                "\"hello world\"",
                "\"aabbbcccdddeeefff\"",
                "\"abcde\"",
                "\"aaaaa\"",
                "\"bbbbb\"",
                "\"ccccc\"",
                "\"ddddd\"",
                "\"eeeee\"",
                "\"ffffff\"",
                "\"gggggg\"",
                "\"hhhhhh\"",
                "\"iiiiii\"",
                "\"jjjjjj\"",
                "\"kkkkkk\"",
                "\"llllll\"",
                "\"mmmmmm\"",
                "\"nnnnnn\"",
                "\"oooooo\"",
                "\"pppppp\"",
                "\"qqqqqq\"",
                "\"rrrrrr\"",
                "\"ssssss\"",
                "\"tttttt\"",
                "\"uuuuuu\"",
                "\"vvvvvv\"",
                "\"wwwwww\"",
                "\"xxxxxx\"",
                "\"yyyyyy\"",
                "\"zzzzzz\""
            ],
            "outputs": [
                "\"eert \"",
                "\"aaaccc \"",
                "\"bbAa \"",
                "\"llllldeohrw \"",
                "\"eeefffdddbbbccc \"",
                "\"edcba\"",
                "\"aaaaa\"",
                "\"bbbbb\"",
                "\"ccccc\"",
                "\"ddddd\"",
                "\"eeeee\"",
                "\"ffffff\"",
                "\"gggggg\"",
                "\"hhhhhh\"",
                "\"iiiiii\"",
                "\"jjjjjj\"",
                "\"kkkkkk\"",
                "\"llllll\"",
                "\"mmmmmm\"",
                "\"nnnnnn\"",
                "\"oooooo\"",
                "\"pppppp\"",
                "\"qqqqqq\"",
                "\"rrrrrr\"",
                "\"ssssss\"",
                "\"tttttt\"",
                "\"uuuuuu\"",
                "\"vvvvvv\"",
                "\"wwwwww\"",
                "\"xxxxxx\"",
                "\"yyyyyy\"",
                "\"zzzzzz\""
            ]
        }
    },
    "452": {
        "title": "Minimum Number of Arrows to Burst Balloons",
        "description": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons.\n\nArrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\nGiven the array `points`, return the **minimum** number of arrows that must be shot to burst all balloons.",
        "example": "Example:\n\nInput: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [[2,8]] and [[1,6]].\n- Shoot an arrow at x = 11, bursting the balloons [[10,16]] and [[7,12]].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[10,16],[2,8],[1,6],[7,12]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,5],[2,4],[3,6],[7,8]]",
                "[[1,10],[2,9],[3,8],[4,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]"
            ],
            "outputs": [
                "2",
                "4",
                "2",
                "2",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2"
            ]
        }
    },
    "453": {
        "title": "Minimum Moves to Equal Array Elements",
        "description": "Given an integer array `nums` of size `n`, you need to find the minimum number of moves required to make all array elements equal. In one move, you can increment `n - 1` elements of the array by `1`.",
        "example": "Example:\n\nInput: nums = [1,2,3]\nOutput: 3\nExplanation: Only three moves are needed (remember each move increments two elements):\n[1,2,3] => [2,3,3] => [3,4,3] => [4,4,4]",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    2,
                    4,
                    6,
                    8
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    -1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    -2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    100
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1000
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    10000
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    100000
                ]
            ],
            "outputs": [
                3,
                0,
                0,
                12,
                0,
                20,
                120,
                1200,
                45,
                45,
                0,
                0,
                1,
                1,
                2,
                2,
                99,
                999,
                9999,
                99999
            ]
        }
    },
    "454": null,
    "455": {
        "title": "Maximize Content Children",
        "description": "You are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.",
        "example": "Example:\n\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1.",
        "level": "Easy",
        "tags": [
            "greedy",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[1,1]",
                "[1,2]",
                "[1,2,3]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]"
            ],
            "outputs": [
                "1",
                "1",
                "2",
                "2",
                "5",
                "5",
                "1",
                "2",
                "5",
                "5",
                "1",
                "2",
                "5",
                "5",
                "1",
                "2",
                "5",
                "5",
                "1",
                "2"
            ]
        }
    },
    "456": {
        "title": "132 Pattern",
        "description": "Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`. Return `true` if there is a 132 pattern in `nums`, otherwise, return `false`.",
        "example": "Example:\n\nInput: nums = [1,2,3,4]\nOutput: false\nExplanation: There is no 132 pattern in the sequence.",
        "level": "Medium",
        "tags": [
            "array",
            "subsequence"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4]",
                "[3,1,4,2]",
                "[-1,3,2,0]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,5,2,4,3]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,10,2,9,3,8,4,7,5,6]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,20,2,19,3,18,4,17,5,16,6,15,7,14,8,13,9,12,10,11]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,30,2,29,3,28,4,27,5,26,6,25,7,24,8,23,9,22,10,21,11,20,12,19,13,18,14,17,15,16]",
                "[-1,-2,-3,-4,-5]",
                "[-5,-4,-3,-2,-1]",
                "[-1,-5,-2,-4,-3]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
                "[-1,-10,-2,-9,-3,-8,-4,-7,-5,-6]"
            ],
            "outputs": [
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "false",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "true",
                "false",
                "false",
                "true",
                "false",
                "true"
            ]
        }
    },
    "457": {
        "title": "Circular Array Cycle",
        "description": "You are given a circular array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`. If `nums[i]` is positive, move `nums[i]` steps forward, and if `nums[i]` is negative, move `nums[i]` steps backward. Since the array is circular, moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. A cycle in the array consists of a sequence of indices `seq` of length `k` where following the movement rules results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`. Every `nums[seq[j]]` is either all positive or all negative, and `k > 1`. Write a function that returns `true` if there is a cycle in `nums`, or `false` otherwise.",
        "example": "Example:\n\nInput: nums = [2,-1,1,2,2]\nOutput: true\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).",
        "level": "Medium",
        "tags": [
            "Array",
            "Graph"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    -1,
                    1,
                    2,
                    2
                ],
                [
                    -1,
                    -2,
                    -3,
                    -4,
                    -5,
                    6
                ],
                [
                    1,
                    -1,
                    5,
                    1,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    -1,
                    -1,
                    -1,
                    -1,
                    -1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    -1,
                    -2,
                    -3,
                    -4,
                    -5
                ],
                [
                    1,
                    -2,
                    3,
                    -4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    -5
                ],
                [
                    1,
                    -2,
                    3,
                    4,
                    -5
                ],
                [
                    1,
                    2,
                    3,
                    -4,
                    -5
                ],
                [
                    1,
                    -2,
                    3,
                    -4,
                    -5
                ],
                [
                    1,
                    2,
                    -3,
                    4,
                    5
                ],
                [
                    1,
                    -2,
                    -3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    -3,
                    -4,
                    5
                ],
                [
                    1,
                    -2,
                    -3,
                    -4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    -1,
                    -2,
                    -3,
                    -4,
                    -5,
                    -6,
                    -7,
                    -8,
                    -9,
                    -10
                ],
                [
                    1,
                    -1,
                    1,
                    -1,
                    1,
                    -1,
                    1,
                    -1,
                    1,
                    -1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "458": {
        "title": "Minimum Number of Pigs",
        "description": "There are `buckets` buckets of liquid, where **exactly one** of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\n\n1. Choose some live pigs to feed.\n2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n3. Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time.\n4. After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n5. Repeat this process until you run out of time.\n\nGiven `buckets`, `minutesToDie`, and `minutesToTest`, return the **minimum** number of pigs needed to figure out which bucket is poisonous within the allotted time.",
        "example": "Example:\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.",
        "level": "Medium",
        "tags": [
            "math",
            "logic"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    15,
                    15
                ],
                [
                    4,
                    15,
                    30
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    10,
                    5,
                    10
                ],
                [
                    100,
                    10,
                    100
                ],
                [
                    1000,
                    100,
                    100
                ],
                [
                    5,
                    10,
                    10
                ],
                [
                    2,
                    5,
                    5
                ],
                [
                    3,
                    5,
                    10
                ],
                [
                    7,
                    7,
                    7
                ],
                [
                    20,
                    10,
                    20
                ],
                [
                    50,
                    5,
                    50
                ],
                [
                    100,
                    1,
                    100
                ],
                [
                    1000,
                    100,
                    1000
                ],
                [
                    10,
                    10,
                    10
                ],
                [
                    3,
                    1,
                    3
                ],
                [
                    5,
                    5,
                    5
                ],
                [
                    2,
                    2,
                    2
                ],
                [
                    1,
                    100,
                    100
                ],
                [
                    1000,
                    1000,
                    1000
                ]
            ],
            "outputs": [
                2,
                2,
                1,
                2,
                10,
                10,
                2,
                2,
                2,
                2,
                4,
                5,
                100,
                10,
                2,
                1,
                2,
                1,
                1,
                10
            ]
        }
    },
    "459": null,
    "460": {
        "title": "LFU Cache",
        "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache. Implement the LFUCache class with the following methods: \n\n- LFUCache(int capacity): Initializes the object with the capacity of the data structure. \n- int get(int key): Gets the value of the key if it exists in the cache. Otherwise, returns -1. \n- void put(int key, int value): Updates the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated. \n\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key. When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented whenever a get or put operation is called on it. The get and put methods must each run in O(1) average time complexity.",
        "example": "Example:\n\nInput:\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                 // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure",
            "Cache"
        ],
        "test_cases": {
            "inputs": [
                "[2]",
                "[1, 1]",
                "[2, 2]",
                "[1]",
                "[3, 3]",
                "[2]",
                "[3]",
                "[4, 4]",
                "[1]",
                "[3]",
                "[4]"
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "1",
                "null",
                "-1",
                "3",
                "null",
                "-1",
                "3",
                "4"
            ]
        }
    },
    "461": {
        "title": "Hamming Distance",
        "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, write a function to return the Hamming distance between them.",
        "example": "Example:\n\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       -->   -->\nThe above arrows point to positions where the corresponding bits are different.",
        "level": "Easy",
        "tags": [
            "bit manipulation",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    4
                ],
                [
                    3,
                    1
                ],
                [
                    0,
                    0
                ],
                [
                    7,
                    7
                ],
                [
                    10,
                    5
                ],
                [
                    15,
                    0
                ],
                [
                    255,
                    0
                ],
                [
                    255,
                    255
                ],
                [
                    231,
                    231
                ],
                [
                    231,
                    0
                ],
                [
                    0,
                    231
                ],
                [
                    2147483647,
                    0
                ],
                [
                    0,
                    2147483647
                ],
                [
                    2147483647,
                    2147483647
                ],
                [
                    2147483647,
                    1
                ],
                [
                    1,
                    2147483647
                ]
            ],
            "outputs": [
                2,
                1,
                0,
                0,
                4,
                4,
                8,
                0,
                0,
                8,
                8,
                31,
                31,
                0,
                31,
                31
            ]
        }
    },
    "462": {
        "title": "Minimum Moves to Equal Array Elements",
        "description": "Given an integer array `nums` of size `n`, you need to find the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement an element of the array by `1`. Return the minimum number of moves required.",
        "example": "Example:\n\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: Only two moves are needed (remember each move increments or decrements one element):\n[1,2,3] => [2,2,3] => [2,2,2]",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    10,
                    2,
                    9
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    100,
                    1000,
                    10000
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100
                ]
            ],
            "outputs": [
                2,
                16,
                0,
                0,
                0,
                10,
                100,
                1000,
                9999,
                550
            ]
        }
    },
    "463": {
        "title": "Island Perimeter",
        "description": "You are given a grid representing a map where 1 represents land and 0 represents water. The grid is completely surrounded by water, and there is exactly one island. Determine the perimeter of the island.",
        "example": "Example:\n\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.",
        "level": "Easy",
        "tags": [
            "array",
            "grid",
            "perimeter"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        0,
                        1,
                        0
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        0,
                        0,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        1,
                        1,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        1,
                        1,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0,
                        1
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            ],
            "outputs": [
                16,
                4,
                4,
                16,
                0,
                8,
                24,
                40,
                84
            ]
        }
    },
    "464": {
        "title": "Winning the Game",
        "description": "In the '100 game', two players take turns adding any integer from 1 to 10 to a running total. The player who first causes the running total to reach or exceed 100 wins. Now, let's change the game so that players cannot reuse integers. For example, two players take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total greater than or equal to 100. Given two integers maxChoosableInteger and desiredTotal, determine if the first player to move can force a win. Return true if the first player can force a win, otherwise return false. Assume both players play optimally.",
        "example": "Example:\n\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation: No matter which integer the first player chooses, they will lose. The second player can always choose the remaining integers to reach or exceed the desired total.\n\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true",
        "level": "Medium",
        "tags": [
            "game theory",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    11
                ],
                [
                    10,
                    0
                ],
                [
                    10,
                    1
                ],
                [
                    5,
                    10
                ],
                [
                    15,
                    100
                ],
                [
                    20,
                    200
                ],
                [
                    20,
                    300
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    3
                ],
                [
                    3,
                    5
                ],
                [
                    4,
                    7
                ],
                [
                    5,
                    9
                ],
                [
                    6,
                    11
                ],
                [
                    7,
                    13
                ],
                [
                    8,
                    15
                ],
                [
                    9,
                    17
                ],
                [
                    10,
                    19
                ],
                [
                    15,
                    25
                ],
                [
                    20,
                    30
                ],
                [
                    20,
                    40
                ]
            ],
            "outputs": [
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "465": {
        "title": "Minimum Number of Transactions",
        "description": "You are given an array of transactions `transactions` where `transactions[i] = [fromi, toi, amounti]` indicates that the person with `ID = fromi` gave `amounti $` to the person with `ID = toi`. Return the minimum number of transactions required to settle the debt.",
        "example": "Example 1:\n\nInput: transactions = [[0,1,10],[2,0,5]]\nOutput: 2\nExplanation: Person #0 gave person #1 $10. Person #2 gave person #0 $5. Two transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.\n\nExample 2:\n\nInput: transactions = [[0,1,10],[1,0,1],[1,2,5],[2,0,5]]\nOutput: 1\nExplanation: Person #0 gave person #1 $10. Person #1 gave person #0 $1. Person #1 gave person #2 $5. Person #2 gave person #0 $5. Therefore, person #1 only need to give person #0 $4, and all debt is settled.",
        "level": "Medium",
        "tags": [
            "array",
            "graph",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[[0,1,10],[2,0,5]]",
                "[[0,1,10],[1,0,1],[1,2,5],[2,0,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[9,10,5]]",
                "[[0,1,10],[1,0,5],[2,0,5],[3,0,5],[4,0,5],[5,0,5],[6,0,5],[7,0,5],[8,0,5],[9,0,5],[10,0,5],[11,0,5],[0,2,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[9,10,5],[10,11,5]]"
            ],
            "outputs": [
                "2",
                "1",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25"
            ]
        }
    },
    "466": {
        "title": "Maximum String Concatenation",
        "description": "Given two strings `s1` and `s2` and two integers `n1` and `n2`, we define `str = [s, n]` as the string `str` which consists of the string `s` concatenated `n` times. For example, `str == [\"abc \", 3] == \"abcabcabc \"`. We define that string `s1` can be obtained from string `s2` if we can remove some characters from `s2` such that it becomes `s1`. For example, `s1 = \"abc \"` can be obtained from `s2 = \"ab**dbe**c \"` based on our definition by removing the bolded characters. Return the maximum integer `m` such that `str = [str2, m]` can be obtained from `str1`.",
        "example": "Example:\n\nInput: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\nOutput: 2\n\nExplanation: The string `str1` is \"acbacbacbacb\" and the string `str2` is \"abab\". We can obtain `str2` from `str1` by removing the characters 'c' and 'c' from `str1` twice.\n\nInput: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\nOutput: 1\n\nExplanation: The string `str1` is \"acb\" and the string `str2` is \"acb\". We can obtain `str2` from `str1` without removing any characters.",
        "level": "Medium",
        "tags": [
            "string",
            "concatenation"
        ],
        "test_cases": {
            "inputs": [
                [
                    "acb",
                    4,
                    "ab",
                    2
                ],
                [
                    "acb",
                    1,
                    "acb",
                    1
                ],
                [
                    "abc",
                    3,
                    "ab",
                    2
                ],
                [
                    "abc",
                    1,
                    "abc",
                    1
                ],
                [
                    "abc",
                    2,
                    "abc",
                    2
                ],
                [
                    "abc",
                    2,
                    "ab",
                    1
                ],
                [
                    "abc",
                    1,
                    "ab",
                    2
                ],
                [
                    "abc",
                    0,
                    "ab",
                    2
                ],
                [
                    "abc",
                    2,
                    "ab",
                    0
                ],
                [
                    "",
                    0,
                    "",
                    0
                ],
                [
                    "a",
                    1,
                    "",
                    0
                ],
                [
                    "",
                    0,
                    "a",
                    1
                ],
                [
                    "a",
                    1,
                    "a",
                    1
                ],
                [
                    "a",
                    2,
                    "a",
                    1
                ],
                [
                    "a",
                    1,
                    "a",
                    2
                ],
                [
                    "a",
                    2,
                    "a",
                    2
                ],
                [
                    "a",
                    3,
                    "a",
                    2
                ],
                [
                    "a",
                    2,
                    "a",
                    3
                ],
                [
                    "a",
                    3,
                    "a",
                    3
                ]
            ],
            "outputs": [
                2,
                1,
                0,
                1,
                2,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3
            ]
        }
    },
    "467": null,
    "468": {
        "title": "Validate IP Address",
        "description": "Given a string `queryIP`, determine if it is a valid IPv4 or IPv6 address. Return 'IPv4' if it is a valid IPv4 address, 'IPv6' if it is a valid IPv6 address, or 'Neither' if it is not a correct IP of any type.",
        "example": "Example 1:\n\nInput: queryIP = '172.16.254.1'\nOutput: 'IPv4'\nExplanation: This is a valid IPv4 address, so the output is 'IPv4'.\n\nExample 2:\n\nInput: queryIP = '2001:0db8:85a3:0:0:8A2E:0370:7334'\nOutput: 'IPv6'\nExplanation: This is a valid IPv6 address, so the output is 'IPv6'.\n\nExample 3:\n\nInput: queryIP = '256.256.256.256'\nOutput: 'Neither'\nExplanation: This is neither a valid IPv4 address nor a valid IPv6 address, so the output is 'Neither'.",
        "level": "Easy",
        "tags": [
            "string",
            "validation"
        ],
        "test_cases": {
            "inputs": [
                "'172.16.254.1'",
                "'2001:0db8:85a3:0:0:8A2E:0370:7334'",
                "'256.256.256.256'",
                "'192.168.1.1'",
                "'192.168.1.0'",
                "'192.168.01.1'",
                "'192.168.1.00'",
                "'192.168@1.1'",
                "'2001:0db8:85a3::8A2E:037j:7334'",
                "'02001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:db8:85a3:0:0:8A2E:0370:7334'",
                "'2001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:db8:85a3:0:0:8A2E:0370:7334'",
                "'2001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:db8:85a3:0:0:8A2E:0370:7334'",
                "'2001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:db8:85a3:0:0:8A2E:0370:7334'",
                "'2001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:db8:85a3:0:0:8A2E:0370:7334'",
                "'2001:0db8:85a3:0000:0000:8a2e:0370:7334'",
                "'2001:db8:85a3:0:0:8A2E:0370:7334'"
            ],
            "outputs": [
                "'IPv4'",
                "'IPv6'",
                "'Neither'",
                "'IPv4'",
                "'IPv4'",
                "'Neither'",
                "'Neither'",
                "'Neither'",
                "'Neither'",
                "'Neither'",
                "'IPv6'",
                "'Neither'",
                "'IPv6'",
                "'Neither'",
                "'IPv6'",
                "'Neither'",
                "'IPv6'",
                "'Neither'",
                "'IPv6'",
                "'Neither'",
                "'IPv6'",
                "'Neither'"
            ]
        }
    },
    "469": null,
    "470": {
        "title": "Uniform Random Integer Generator",
        "description": "You are given an API `rand7()` that generates a uniform random integer in the range `[1, 7]`. Your task is to implement a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()` and you should not call any other API. Please do not use a language's built-in random API.",
        "example": "Example:\n\nInput: n = 1\nOutput: [2]\n\nExplanation: Calling `rand10()` once will generate a random integer between 1 and 10, inclusive. In this case, the output is [2].",
        "level": "Medium",
        "tags": [
            "random",
            "probability"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                100
            ],
            "outputs": [
                [
                    2
                ],
                [
                    2,
                    8
                ],
                [
                    3,
                    8,
                    10
                ],
                [
                    1,
                    4,
                    7,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ]
            ]
        }
    },
    "471": {
        "title": "String Encoding",
        "description": "Given a string `s`, encode the string such that its encoded length is the shortest. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. `k` should be a positive integer. If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.",
        "example": "Example:\n\nInput: s =  \"aaa \"\nOutput:  \"aaa \"\nExplanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.",
        "level": "Medium",
        "tags": [
            "string",
            "encoding"
        ],
        "test_cases": {
            "inputs": [
                "\"aaa \"",
                "\"aaaaa \"",
                "\"aaaaaaaaaa \"",
                "\"abcde \"",
                "\"aabbaabbaabb \"",
                "\"hello world \"",
                "\"aaaaaabbbbbccccc \"",
                "\"abbcccddddeeeeeffffff \"",
                "\"a \"",
                "\"ab \"",
                "\"abc \"",
                "\"abcd \"",
                "\"abcde \"",
                "\"abcdef \"",
                "\"abcdefg \"",
                "\"abcdefgh \"",
                "\"abcdefghi \"",
                "\"abcdefghij \"",
                "\"abcdefghijk \"",
                "\"abcdefghijkl \"",
                "\"abcdefghijklm \""
            ],
            "outputs": [
                "\"aaa \"",
                "\"5[a] \"",
                "\"10[a] \"",
                "\"abcde \"",
                "\"3[a2[b]] \"",
                "\"hello world \"",
                "\"6[a5[b]5[c]] \"",
                "\"1[a2[b3[c4[d5[e6[f]]]]]] \"",
                "\"a \"",
                "\"ab \"",
                "\"abc \"",
                "\"abcd \"",
                "\"abcde \"",
                "\"abcdef \"",
                "\"abcdefg \"",
                "\"abcdefgh \"",
                "\"abcdefghi \"",
                "\"abcdefghij \"",
                "\"abcdefghijk \"",
                "\"abcdefghijkl \"",
                "\"abcdefghijklm \""
            ]
        }
    },
    "472": {
        "title": "Concatenated Words",
        "description": "Given an array of strings `words` (without duplicates), return all the concatenated words in the given list of words. A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array.",
        "example": "Example 1:\n\nInput: words = [\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"]\nOutput: [\"catsdogcats\", \"dogcatsdog\", \"ratcatdogcat\"]\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\", and \"cats\"; \"dogcatsdog\" can be concatenated by \"dog\", \"cats\", and \"dog\"; \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\", and \"cat\".\n\nExample 2:\n\nInput: words = [\"cat\", \"dog\", \"catdog\"]\nOutput: [\"catdog\"]",
        "level": "Medium",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "cat",
                    "cats",
                    "catsdogcats",
                    "dog",
                    "dogcatsdog",
                    "hippopotamuses",
                    "rat",
                    "ratcatdogcat"
                ],
                [
                    "cat",
                    "dog",
                    "catdog"
                ],
                [
                    "apple",
                    "banana",
                    "pineapple"
                ],
                [
                    "hello",
                    "world",
                    "helloworld"
                ],
                [
                    "programming",
                    "code",
                    "coding",
                    "programmingcode"
                ],
                [
                    "a",
                    "b",
                    "c",
                    "ab",
                    "bc",
                    "abc"
                ],
                [
                    "cat",
                    "cats",
                    "dog",
                    "dogs",
                    "catdog",
                    "dogcat"
                ],
                [
                    "cat",
                    "cats",
                    "dog",
                    "dogs",
                    "catdog",
                    "dogcat",
                    "catdogcats"
                ]
            ],
            "outputs": [
                [
                    "catsdogcats",
                    "dogcatsdog",
                    "ratcatdogcat"
                ],
                [
                    "catdog"
                ],
                [],
                [
                    "helloworld"
                ],
                [
                    "programmingcode"
                ],
                [
                    "ab",
                    "bc",
                    "abc"
                ],
                [
                    "catdog"
                ],
                [
                    "catdogcats"
                ]
            ]
        }
    },
    "473": {
        "title": "Matchstick Square",
        "description": "You are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**. Return `true` if you can make this square and `false` otherwise.",
        "example": "Example:\n\nInput: matchsticks = [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.",
        "level": "Medium",
        "tags": [
            "array",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[1,1,2,2,2]",
                "[3,3,3,3,4]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,17]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,18]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,19]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,21]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,22]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,23]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,24]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,26]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,27]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,28]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,29]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,31]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "474": {
        "title": "Largest Subset of Binary Strings",
        "description": "Given an array of binary strings `strs` and two integers `m` and `n`, find the size of the largest subset of `strs` such that there are at most `m` 0's and `n` 1's in the subset. A set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.",
        "example": "Example:\n\nInput: strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3\nOutput: 4\nExplanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4. Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}. {\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "strs": [
                        "10",
                        "0001",
                        "111001",
                        "1",
                        "0"
                    ],
                    "m": 5,
                    "n": 3
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 1,
                    "n": 1
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 0,
                    "n": 0
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 2,
                    "n": 2
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 3,
                    "n": 1
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 1,
                    "n": 3
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 0,
                    "n": 1
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 1,
                    "n": 0
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 2,
                    "n": 1
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 1,
                    "n": 2
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 3,
                    "n": 0
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 0,
                    "n": 3
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 2,
                    "n": 0
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 0,
                    "n": 2
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 1,
                    "n": 1
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 2,
                    "n": 2
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 3,
                    "n": 3
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 4,
                    "n": 4
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 5,
                    "n": 5
                },
                {
                    "strs": [
                        "10",
                        "0",
                        "1"
                    ],
                    "m": 6,
                    "n": 6
                }
            ],
            "outputs": [
                4,
                2,
                3,
                3,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ]
        }
    },
    "475": {
        "title": "Minimum Radius Standard of Heaters",
        "description": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. Every house can be warmed, as long as the house is within the heater's warm radius range. Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses. Notice that all the heaters follow your radius standard, and the warm radius will be the same.",
        "example": "Example:\n\nInput: houses = [1,2,3], heaters = [2]\nOutput: 1\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[2]",
                "[1,2,3,4]",
                "[1,4]",
                "[1,5]",
                "[2]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10]",
                "[1,3,5,7,9]",
                "[2,4,6,8,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ],
            "outputs": [
                "1",
                "1",
                "1",
                "1",
                "3",
                "3",
                "5",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4"
            ]
        }
    },
    "476": {
        "title": "Binary Complement",
        "description": "Given an integer `num`, find its complement by flipping all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.",
        "example": "Example:\n\nInput: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So the output is 2.",
        "level": "Easy",
        "tags": [
            "bit manipulation",
            "binary representation"
        ],
        "test_cases": {
            "inputs": [
                5,
                1,
                0,
                10,
                15,
                100,
                255,
                1023,
                2047,
                4095,
                8191,
                16383,
                32767,
                65535,
                131071,
                262143,
                524287,
                1048575,
                2097151,
                4194303
            ],
            "outputs": [
                2,
                0,
                1,
                5,
                0,
                27,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "477": {
        "title": "Hamming Distance Sum",
        "description": "Given an integer array `nums`, return the sum of Hamming distances between all the pairs of the integers in `nums`. The Hamming distance between two integers is the number of positions at which the corresponding bits are different.",
        "example": "Example:\n\nInput: nums = [4,14,2]\nOutput: 6\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case). The answer will be: HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.",
        "level": "Medium",
        "tags": [
            "bit manipulation",
            "array"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    14,
                    2
                ],
                [
                    4,
                    14,
                    4
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1024,
                    2048,
                    4096,
                    8192
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    15,
                    15,
                    15,
                    15,
                    15
                ],
                [
                    16,
                    16,
                    16,
                    16,
                    16
                ]
            ],
            "outputs": [
                6,
                4,
                0,
                10,
                40,
                80,
                48,
                90,
                0,
                0
            ]
        }
    },
    "478": {
        "title": "Random Point Inside Circle",
        "description": "You are given the radius and the position of the center of a circle. Implement the function `randPoint` which generates a uniform random point inside the circle.\n\nImplement the `Solution` class:\n\n- `Solution(double radius, double x_center, double y_center)`: Initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.\n- `randPoint()`: Returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.",
        "example": "Example:\n\nInput:\nSolution(1.0, 0.0, 0.0)\n\nOutput:\nnull\n\nExplanation:\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]",
        "level": "Medium",
        "tags": [
            "Math",
            "Geometry"
        ],
        "test_cases": {
            "inputs": [
                "[1.0, 0.0, 0.0]",
                "[2.5, 1.0, -2.0]",
                "[0.5, 3.0, 4.0]",
                "[10.0, -5.0, 5.0]",
                "[7.5, 0.0, 0.0]",
                "[3.0, 2.0, 2.0]",
                "[1.5, -3.0, -3.0]",
                "[4.0, 1.0, 1.0]",
                "[2.0, 0.0, 0.0]",
                "[6.0, 2.5, -1.5]",
                "[0.75, 3.5, 2.5]",
                "[8.0, -4.0, 4.0]",
                "[5.5, 0.0, 0.0]",
                "[2.5, 1.5, 1.5]",
                "[1.25, -2.5, -2.5]",
                "[3.5, 1.0, 1.0]",
                "[1.0, 0.0, 0.0]",
                "[2.5, 1.0, -2.0]",
                "[0.5, 3.0, 4.0]",
                "[10.0, -5.0, 5.0]"
            ],
            "outputs": [
                "null",
                "[-0.02493, -0.38077]",
                "[0.82314, 0.38945]",
                "[0.36572, 0.17248]",
                "[6.12345, -0.98765]",
                "[2.0, 2.0]",
                "[-2.0, -2.0]",
                "[1.0, 1.0]",
                "[0.0, 0.0]",
                "[3.53553, -0.70711]",
                "[3.0, 3.0]",
                "[-4.0, -4.0]",
                "[3.53553, 0.70711]",
                "[1.5, 1.5]",
                "[-1.5, -1.5]",
                "[2.0, 1.0]",
                "[0.0, 0.0]",
                "[2.5, -0.5]",
                "[4.0, 1.0]",
                "[0.5, 0.5]",
                "[-5.0, -5.0]"
            ]
        }
    },
    "479": {
        "title": "Largest Palindromic Integer",
        "description": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digit integers. Since the answer can be very large, return it modulo 1337.",
        "example": "Example:\n\nInput: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987",
        "level": "Medium",
        "tags": [
            "Math",
            "Palindrome"
        ],
        "test_cases": {
            "inputs": [
                2,
                1,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "outputs": [
                987,
                9,
                12321,
                597795,
                9009,
                906609,
                99000099,
                9966006699
            ]
        }
    },
    "480": {
        "title": "Sliding Window Median",
        "description": "Given an integer array `nums` and an integer `k`, find the median of each sliding window of size `k` as it moves from left to right. If the size of the window is even, return the average of the two middle elements.",
        "example": "Example 1:\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\nExplanation: \nWindow position                Median\n---------------                -----\n[1  3  -1] -3  5  3  6  7        1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7        3\n 1  3  -1  -3 [5  3  6] 7        5\n 1  3  -1  -3  5 [3  6  7]       6\n\nExample 2:\n\nInput: nums = [1,2,3,4,2,3,1,4,2], k = 3\nOutput: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]",
        "level": "Medium",
        "tags": [
            "array",
            "sliding window",
            "median"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,-1,-3,5,3,6,7]",
                "[1,2,3,4,2,3,1,4,2]",
                "[1,2,3,4,5,6,7,8,9]",
                "[9,8,7,6,5,4,3,2,1]",
                "[5,5,5,5,5,5,5,5,5]",
                "[1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11]",
                "[11,10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12]",
                "[12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]",
                "[2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000]",
                "[7.00000,6.00000,5.00000,4.00000,3.00000,2.00000,1.00000]",
                "[5.00000,5.00000,5.00000,5.00000,5.00000,5.00000,5.00000]",
                "[1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000,9.00000]",
                "[9.00000,8.00000,7.00000,6.00000,5.00000,4.00000,3.00000,2.00000]",
                "[1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000,9.00000,10.00000]",
                "[10.00000,9.00000,8.00000,7.00000,6.00000,5.00000,4.00000,3.00000,2.00000,1.00000]",
                "[1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000,9.00000,10.00000,11.00000]",
                "[11.00000,10.00000,9.00000,8.00000,7.00000,6.00000,5.00000,4.00000,3.00000,2.00000,1.00000]",
                "[1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000,9.00000,10.00000,11.00000,12.00000]",
                "[12.00000,11.00000,10.00000,9.00000,8.00000,7.00000,6.00000,5.00000,4.00000,3.00000,2.00000,1.00000]",
                "[1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000,9.00000,10.00000,11.00000,12.00000,13.00000]",
                "[13.00000,12.00000,11.00000,10.00000,9.00000,8.00000,7.00000,6.00000,5.00000,4.00000,3.00000,2.00000,1.00000]",
                "[1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000,1.00000]",
                "[2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000,9.00000,10.00000,11.00000,12.00000,13.00000,14.00000]",
                "[14.00000,13.00000,12.00000,11.00000,10.00000,9.00000,8.00000,7.00000,6.00000,5.00000,4.00000,3.00000,2.00000,1.00000]"
            ]
        }
    },
    "481": {
        "title": "Count of 1's in Magical String",
        "description": "A magical string `s` consists of only '1' and '2' and obeys the following rules:\n\nThe string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n\nThe first few elements of s is s = \"1221121221221121122...... \". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ...... \" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ...... \". You can see that the occurrence sequence is s itself.\n\nGiven an integer n, return the number of 1's in the first n number in the magical string s.",
        "example": "Example:\n\nInput: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.",
        "level": "Easy",
        "tags": [
            "string",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                6,
                1,
                10,
                15,
                20,
                25,
                30,
                50,
                100,
                1000,
                10000,
                50000,
                100000,
                105,
                500,
                10000,
                50000,
                100000,
                1000000,
                10000000
            ],
            "outputs": [
                3,
                1,
                4,
                7,
                9,
                12,
                15,
                26,
                53,
                504,
                5004,
                25004,
                50004,
                52,
                252,
                5004,
                25004,
                50004,
                500004,
                5000004
            ]
        }
    },
    "482": {
        "title": "Reformat License Key",
        "description": "You are given a license key represented as a string `s` that consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`. We want to reformat the string `s` such that each group contains exactly `k` characters, except for the first group, which could be shorter than `k` but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return the reformatted license key.",
        "example": "Example:\n\nInput: s = \"5F3Z-2e-9-w\", k = 4\nOutput: \"5F3Z-2E9W\"\nExplanation: The string s has been split into two parts, each part has 4 characters. Note that the two extra dashes are not needed and can be removed.",
        "level": "Easy",
        "tags": [
            "string",
            "formatting"
        ],
        "test_cases": {
            "inputs": [
                "\"5F3Z-2e-9-w\"",
                "\"2-5g-3-J\"",
                "\"a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\"",
                "\"1234567890\"",
                "\"A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\"",
                "\"1-2-3-4-5-6-7-8-9-0\"",
                "\"a1-b2-c3-d4-e5-f6-g7-h8-i9-j0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"a1b2c3d4e5f6g7h8i9j0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\"",
                "\"-a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-\"",
                "\"-1-2-3-4-5-6-7-8-9-0-\"",
                "\"-a1-b2-c3-d4-e5-f6-g7-h8-i9-j0-\"",
                "\"-A1-B2-C3-D4-E5-F6-G7-H8-I9-J0-\"",
                "\"-a1b2c3d4e5f6g7h8i9j0-\"",
                "\"-A1B2C3D4E5F6G7H8I9J0-\"",
                "\"-a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\"",
                "\"-1-2-3-4-5-6-7-8-9-0\"",
                "\"-a1-b2-c3-d4-e5-f6-g7-h8-i9-j0\"",
                "\"-A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"-a1b2c3d4e5f6g7h8i9j0\"",
                "\"-A1B2C3D4E5F6G7H8I9J0\""
            ],
            "outputs": [
                "\"5F3Z-2E9W\"",
                "\"2-5G-3J\"",
                "\"A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\"",
                "\"1234567890\"",
                "\"A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\"",
                "\"1-2-3-4-5-6-7-8-9-0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\"",
                "\"A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\"",
                "\"1-2-3-4-5-6-7-8-9-0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\"",
                "\"A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z\"",
                "\"1-2-3-4-5-6-7-8-9-0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"A1-B2-C3-D4-E5-F6-G7-H8-I9-J0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\"",
                "\"A1B2C3D4E5F6G7H8I9J0\""
            ]
        }
    },
    "483": null,
    "484": null,
    "485": {
        "title": "Maximum Consecutive Ones",
        "description": "Given a binary array `nums`, find the maximum number of consecutive `1`'s in the array.",
        "example": "Example 1:\n\nInput: nums = [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n\nExample 2:\n\nInput: nums = [1,0,1,1,0,1]\nOutput: 2",
        "level": "Easy",
        "tags": [
            "array",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    1,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    0,
                    1,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    1,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    0,
                    1,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    1,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    1,
                    0
                ],
                [
                    0,
                    1,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    0,
                    1,
                    1,
                    1,
                    0
                ]
            ],
            "outputs": [
                3,
                2,
                6,
                0,
                1,
                2,
                3,
                1,
                3,
                3,
                2,
                2,
                2,
                4,
                2,
                2,
                2,
                1,
                1,
                3
            ]
        }
    },
    "486": {
        "title": "Player 1 Winning Game",
        "description": "You are given an integer array `nums`. Two players are playing a game with this array: player 1 and player 2.\n\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of `0`. At each turn, the player takes one of the numbers from either end of the array (i.e., `nums[0]` or `nums[nums.length - 1]`) which reduces the size of the array by `1`. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n\nReturn `true` if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return `true`. You may assume that both players are playing optimally.",
        "example": "Example:\n\nInput: nums = [1,5,2]\nOutput: false\nExplanation: Initially, player 1 can choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. Hence, player 1 will never be the winner and you need to return false.",
        "level": "Medium",
        "tags": [
            "array",
            "game"
        ],
        "test_cases": {
            "inputs": [
                "[1,5,2]",
                "[1,5,233,7]",
                "[1,2,3,4,5]",
                "[10,20,30,40,50]",
                "[5,10,15,20,25,30,35,40,45,50]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,100]"
            ],
            "outputs": [
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "487": null,
    "488": {
        "title": "Zuma Game",
        "description": "You are playing a variation of the game Zuma. In this variation, there is a single row of colored balls on a board, where each ball can be colored red \"R\", yellow \"Y\", blue \"B\", green \"G\", or white \"W\". Your goal is to clear all of the balls from the board. On each turn, you can pick any ball from your hand and insert it in between two balls in the row or on either end of the row. If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board. If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left. If there are no more balls on the board, then you win the game. Repeat this process until you either win or do not have any more balls in your hand. Given a string board representing the row of balls on the board, and a string hand representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.",
        "example": "Example:\n\nInput: board = \"WRRBBW\", hand = \"RB\"\nOutput: -1\nExplanation: It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert.",
        "level": "Medium",
        "tags": [
            "string",
            "recursion",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    "WRRBBW",
                    "RB"
                ],
                [
                    "WWRRBBWW",
                    "WRBRW"
                ],
                [
                    "G",
                    "GGGGG"
                ],
                [
                    "RRRR",
                    "RR"
                ],
                [
                    "RRRR",
                    "RRR"
                ],
                [
                    "RRRR",
                    "RRRR"
                ],
                [
                    "RRRR",
                    "RRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRRRRRRR"
                ],
                [
                    "RRRR",
                    "RRRRRRRRRRRRRRRRRR"
                ]
            ],
            "outputs": [
                -1,
                2,
                2,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "489": null,
    "490": null,
    "491": null,
    "492": {
        "title": "Web Page Design",
        "description": "A web developer needs to know how to design a web page's size. Given a specific rectangular web page's area, your task is to design a rectangular web page with length L and width W that satisfy the following requirements:\n\n1. The area of the rectangular web page you design must be equal to the given target area.\n2. The width `W` should not be larger than the length `L`, which means `L >= W`.\n3. The difference between length `L` and width `W` should be as small as possible.\n\nReturn an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence.",
        "example": "Example:\n\nInput: area = 4\nOutput: [2,2]\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. But according to requirement 2, [1,4] is illegal; according to requirement 3, [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.",
        "level": "Easy",
        "tags": [
            "Math",
            "Geometry"
        ],
        "test_cases": {
            "inputs": [
                4,
                37,
                122122,
                1,
                100,
                999999,
                107,
                50,
                25,
                64,
                81,
                121,
                144,
                169,
                196,
                225,
                256,
                289,
                324,
                361
            ],
            "outputs": [
                [
                    2,
                    2
                ],
                [
                    37,
                    1
                ],
                [
                    427,
                    286
                ],
                [
                    1,
                    1
                ],
                [
                    10,
                    10
                ],
                [
                    999,
                    999
                ],
                [
                    107,
                    1
                ],
                [
                    10,
                    5
                ],
                [
                    5,
                    5
                ],
                [
                    8,
                    8
                ],
                [
                    9,
                    9
                ],
                [
                    11,
                    11
                ],
                [
                    12,
                    12
                ],
                [
                    13,
                    13
                ],
                [
                    14,
                    14
                ],
                [
                    15,
                    15
                ],
                [
                    16,
                    16
                ],
                [
                    17,
                    17
                ],
                [
                    18,
                    18
                ],
                [
                    19,
                    19
                ]
            ]
        }
    },
    "493": {
        "title": "Reverse Pairs in Array",
        "description": "Given an integer array `nums`, return the number of reverse pairs in the array. A reverse pair is a pair `(i, j)` where `0 <= i < j < nums.length` and `nums[i] > 2 * nums[j]`.",
        "example": "Example 1:\n\nInput: nums = [1,3,2,3,1]\nOutput: 2\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n\nExample 2:\n\nInput: nums = [2,4,3,5,1]\nOutput: 3\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    3,
                    2,
                    3,
                    1
                ],
                [
                    2,
                    4,
                    3,
                    5,
                    1
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    50,
                    40,
                    30,
                    20,
                    10
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    5,
                    5,
                    4,
                    4,
                    4,
                    3,
                    3,
                    3
                ]
            ],
            "outputs": [
                2,
                3,
                0,
                0,
                0,
                10,
                0,
                10,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                6,
                6,
                9
            ]
        }
    },
    "494": {
        "title": "Expression Builder",
        "description": "You are given an integer array `nums` and an integer `target`. You want to build an **expression** out of nums by adding one of the symbols `'+'` and `'-'` before each integer in nums and then concatenate them to build the expression. Return the number of different **expressions** that you can build, which evaluates to `target`.",
        "example": "Example:\n\nInput: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "target": 3
                },
                {
                    "nums": [
                        1
                    ],
                    "target": 1
                },
                {
                    "nums": [
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 0
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 15
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": -5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 100
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": -100
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 1
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 2
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 3
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 4
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 5
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 7
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 8
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 11
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 12
                }
            ],
            "outputs": [
                5,
                1,
                2,
                0,
                2,
                2,
                0,
                0,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ]
        }
    },
    "495": {
        "title": "Teemo's Poison Attacks",
        "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack.\n\nYou are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`.\n\nReturn the **total** number of seconds that Ashe is poisoned.",
        "example": "Example:\n\nInput: timeSeries = [1,4], duration = 2\nOutput: 4\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.",
        "level": "Easy",
        "tags": [
            "array",
            "simulation"
        ],
        "test_cases": {
            "inputs": [
                "[1,4]",
                "[1,2]",
                "[2,3,4,5,6]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,3,5,7,9,11,13,15,17,19]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,2,2,3,3,3,4,4,4,4]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "4",
                "3",
                "10",
                "5",
                "20",
                "20",
                "10",
                "10",
                "20",
                "30",
                "40",
                "50",
                "60",
                "100"
            ]
        }
    },
    "496": {
        "title": "Next Greater Element",
        "description": "Given two distinct 0-indexed integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`, find the next greater element for each value of `nums1` in `nums2`. The next greater element of some element `x` in an array is the first greater element that is to the right of `x` in the same array. If there is no next greater element, the answer is -1.",
        "example": "Example 1:\n\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n\nExample 2:\n\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.",
        "level": "Medium",
        "tags": [
            "array",
            "stack"
        ],
        "test_cases": {
            "inputs": [
                "[4,1,2], [1,3,4,2]",
                "[2,4], [1,2,3,4]",
                "[1,3,5,7], [2,4,6,8]",
                "[9,8,7,6], [1,2,3,4]",
                "[5,10,15], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4], [4,3,2,1]",
                "[1,2,3,4], [5,6,7,8]",
                "[1,2,3,4], [1,2,3,4]",
                "[1,2,3,4], [4,3,2,1]",
                "[1,2,3,4], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4], [5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,21,22,23,24,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,25,24,23,22,21,20,19,18,17,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,25,24,23,22,21,20,19,18,17,16,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,31,32,33,34,35]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16]"
            ],
            "outputs": [
                "[-1,3,-1]",
                "[3,-1]",
                "[3,6,8,-1]",
                "[-1,-1,-1,-1]",
                "[10,15,-1]",
                "[-1,-1,-1,-1]",
                "[-1,-1,-1,-1]",
                "[2,3,4,-1]",
                "[-1,-1,-1,-1]",
                "[6,7,8,9,10,11,12,13,14,-1,-1,-1,-1,-1,-1]",
                "[6,7,8,9,10,11,12,13,14,-1,-1,-1,-1,-1,-1]",
                "[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[20,25,30,35,40,45,50,55,60,65,70,75,-1,-1,-1]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
                "[35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "497": {
        "title": "Random Point in Non-Overlapping Rectangles",
        "description": "You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n\n**Note** that an integer point is a point that has integer coordinates.\n\nImplement the `Solution` class:\n\n*   `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`.\n*   `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles.",
        "example": "Example:\n\nInput:\nSolution solution = new Solution([[1, 1, 3, 3], [4, 4, 6, 6]]);\nsolution.pick(); // return [2, 2]\nsolution.pick(); // return [5, 5]\nsolution.pick(); // return [4, 4]\n\nExplanation:\n\nThe given rectangles are [[1, 1, 3, 3], [4, 4, 6, 6]].\n\nFor the first pick(), the random point [2, 2] is inside the rectangle [1, 1, 3, 3].\n\nFor the second pick(), the random point [5, 5] is inside the rectangle [4, 4, 6, 6].\n\nFor the third pick(), the random point [4, 4] is on the perimeter of the rectangle [4, 4, 6, 6].",
        "level": "Medium",
        "tags": [
            "Array",
            "Math",
            "Random"
        ],
        "test_cases": {
            "inputs": [
                "[[1, 1, 3, 3], [4, 4, 6, 6]]",
                "[[0, 0, 1, 1], [2, 2, 3, 3], [4, 4, 5, 5]]",
                "[[-10, -10, 10, 10]]",
                "[[-100, -100, 100, 100], [200, 200, 300, 300], [400, 400, 500, 500], [600, 600, 700, 700]]",
                "[[1, 1, 2, 2], [3, 3, 4, 4], [5, 5, 6, 6], [7, 7, 8, 8], [9, 9, 10, 10], [11, 11, 12, 12], [13, 13, 14, 14], [15, 15, 16, 16], [17, 17, 18, 18], [19, 19, 20, 20], [21, 21, 22, 22], [23, 23, 24, 24], [25, 25, 26, 26], [27, 27, 28, 28], [29, 29, 30, 30], [31, 31, 32, 32], [33, 33, 34, 34], [35, 35, 36, 36], [37, 37, 38, 38], [39, 39, 40, 40]]"
            ],
            "outputs": [
                "[2, 2]",
                "[0, 0]",
                "[-5, -5]",
                "[250, 250]",
                "[19, 19]"
            ]
        }
    },
    "498": {
        "title": "Diagonal Order",
        "description": "Given an `m x n` matrix `mat`, return an array of all the elements of the array in a diagonal order.",
        "example": "Example 1:\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,4,7,5,3,6,8,9]\n\nExample 2:\n\nInput: mat = [[1,2],[3,4]]\nOutput: [1,2,3,4]",
        "level": "Easy",
        "tags": [
            "array",
            "matrix"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2],[3,4]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28],[29,30,31,32]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28],[29,30,31,32],[33,34,35,36]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28],[29,30,31,32],[33,34,35,36],[37,38,39,40]]"
            ],
            "outputs": [
                "[1,2,4,7,5,3,6,8,9]",
                "[1,2,3,4]",
                "[1,2,5,9,6,3,4,7,10,11,8,12]",
                "[1,2,4,5,3,6]",
                "[1,2,6,11,7,3,4,8,12,13,9,5,10,14,15]",
                "[1,2,3,4,5,6,7,8]",
                "[1,2,7,12,8,3,4,9,13,14,10,5,6,11,15]",
                "[1,2,4,7,5,3,8,11,9,6,10,12]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,16,11,14,15]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,17,14,11,15,18,19,16,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,17,14,11,15,18,21,19,16,20,22,23]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,17,14,11,15,18,21,19,16,20,22,25,23,26,27]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,17,14,11,15,18,21,19,16,20,22,25,23,26,27,29,30,28,31,32]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,17,14,11,15,18,21,19,16,20,22,25,23,26,27,29,30,28,31,32,33,34,35,36]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,4,7,5,3,8,12,9,6,10,13,17,14,11,15,18,21,19,16,20,22,25,23,26,27,29,30,28,31,32,33,34,35,36,37,38,39,40]"
            ]
        }
    },
    "499": {
        "title": "Ball Maze Instructions",
        "description": "You are given a maze represented as a 2D array, where 0 represents an empty space and 1 represents a wall. There is a ball in the maze that can roll in four directions: up, down, left, and right. The ball will continue rolling in a given direction until it hits a wall. The maze also contains a hole, and the ball will drop into the hole if it rolls onto it. Given the maze, the ball's starting position, and the hole's position, your task is to return a string of instructions that the ball should follow to reach the hole with the shortest distance possible. If there are multiple valid instructions, return the lexicographically smallest one. If the ball cannot reach the hole, return 'impossible'.",
        "example": "Example:\n\nInput:\nmaze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]\nOutput: 'lul'\nExplanation: The ball can reach the hole by moving left, up, and then left again. The total distance traveled is 6, and 'lul' is the lexicographically smallest instruction sequence.",
        "level": "Medium",
        "tags": [
            "maze",
            "graph",
            "shortest path"
        ],
        "test_cases": {
            "inputs": [
                {
                    "maze": [
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0,
                            0,
                            1
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            0,
                            0,
                            1
                        ],
                        [
                            0,
                            1,
                            0,
                            0,
                            0
                        ]
                    ],
                    "ball": [
                        4,
                        3
                    ],
                    "hole": [
                        0,
                        1
                    ]
                },
                {
                    "maze": [
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0,
                            0,
                            1
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            0,
                            0,
                            1
                        ],
                        [
                            0,
                            1,
                            0,
                            0,
                            0
                        ]
                    ],
                    "ball": [
                        4,
                        3
                    ],
                    "hole": [
                        3,
                        0
                    ]
                },
                {
                    "maze": [
                        [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            0,
                            1,
                            0,
                            0,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1
                        ]
                    ],
                    "ball": [
                        0,
                        4
                    ],
                    "hole": [
                        3,
                        5
                    ]
                }
            ],
            "outputs": [
                "lul",
                "impossible",
                "dldr"
            ]
        }
    },
    "500": {
        "title": "Words in One Row",
        "description": "Given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of American keyboard. The American keyboard has three rows of characters: the first row consists of the characters \"qwertyuiop \", the second row consists of the characters \"asdfghjkl \", and the third row consists of the characters \"zxcvbnm \".",
        "example": "Example 1:\n\nInput: words = [\"Hello \", \"Alaska \", \"Dad \", \"Peace \"]\nOutput: [\"Alaska \", \"Dad \"]\n\nExample 2:\n\nInput: words = [\"omk \"]\nOutput: []\n\nExample 3:\n\nInput: words = [\"adsdf \", \"sfd \"]\nOutput: [\"adsdf \", \"sfd \"]",
        "level": "Easy",
        "tags": [
            "array",
            "string"
        ],
        "test_cases": {
            "inputs": [
                "[\"Hello \", \"Alaska \", \"Dad \", \"Peace \"]",
                "[\"omk \"]",
                "[\"adsdf \", \"sfd \"]",
                "[\"qwerty \", \"asdf \", \"zxcvbnm \"]",
                "[\"abc \", \"def \", \"ghi \"]",
                "[\"qaz \", \"wsx \", \"edc \"]",
                "[\"qazwsx \", \"edcrfv \", \"tgb \"]",
                "[\"qaz \", \"wsx \", \"edc \", \"rfv \", \"tgb \", \"yhn \", \"ujm \"]",
                "[\"qwertyuiop \", \"asdfghjkl \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]"
            ],
            "outputs": [
                "[\"Alaska \", \"Dad \"]",
                "[]",
                "[\"adsdf \", \"sfd \"]",
                "[\"qwerty \", \"asdf \", \"zxcvbnm \"]",
                "[\"abc \", \"def \", \"ghi \"]",
                "[\"qaz \", \"wsx \", \"edc \"]",
                "[\"qazwsx \", \"edcrfv \", \"tgb \"]",
                "[\"qaz \", \"wsx \", \"edc \", \"rfv \", \"tgb \", \"yhn \", \"ujm \"]",
                "[\"qwertyuiop \", \"asdfghjkl \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \"]",
                "[\"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \", \"asdfghjklqwertyuiop \", \"zxcvbnm \", \"qazwsxedcrfvtgbyhnujmikolp \"]"
            ]
        }
    },
    "501": {
        "title": "Mode of Binary Search Tree",
        "description": "Given the `root` of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it. If the tree has more than one mode, return them in any order. Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys less than or equal to the node's key. The right subtree of a node contains only nodes with keys greater than or equal to the node's key. Both the left and right subtrees must also be binary search trees.",
        "example": "Example:\n\nInput: root = [1,null,2,2]\nOutput: [2]\n\nInput: root = [0]\nOutput: [0]",
        "level": "Medium",
        "tags": [
            "binary search tree",
            "mode",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,2]",
                "[0]",
                "[3,2,4,2,3,null,4,null,null,null,null,null,null,null,5]",
                "[5,5,5,5,5,null,6,null,null,null,null,null,null,null,7]",
                "[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]"
            ],
            "outputs": [
                "[2]",
                "[0]",
                "[2,3,4]",
                "[5]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "502": {
        "title": "Maximize Capital",
        "description": "LeetCode is planning to start its IPO and wants to work on some projects to increase its capital before the IPO. However, there is a limit on the number of projects they can finish before the IPO. LeetCode needs your help to design the best way to maximize its total capital after finishing at most `k` distinct projects. You are given `n` projects, each with a pure profit `profits[i]` and a minimum capital `capital[i]` needed to start it. Initially, you have `w` capital. When you finish a project, you obtain its pure profit, which is added to your total capital. Pick a list of at most `k` distinct projects to maximize your final capital and return the final maximized capital. The answer is guaranteed to fit in a 32-bit signed integer.",
        "example": "Example:\n\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\nOutput: 4\nExplanation: Since your initial capital is 0, you can only start the project indexed 0. After finishing it, you will obtain profit 1 and your capital becomes 1. With capital 1, you can either start the project indexed 1 or the project indexed 2. Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital. Therefore, the final maximized capital is 0 + 1 + 3 = 4.",
        "level": "Medium",
        "tags": [
            "Greedy",
            "Heap",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    0,
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        0,
                        1,
                        1
                    ]
                ],
                [
                    3,
                    0,
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        0,
                        1,
                        2
                    ]
                ],
                [
                    1,
                    10,
                    [
                        5,
                        10,
                        15
                    ],
                    [
                        0,
                        5,
                        10
                    ]
                ],
                [
                    5,
                    100,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    4,
                    5,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    2,
                    1000,
                    [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    [
                        0,
                        100,
                        200,
                        300,
                        400
                    ]
                ],
                [
                    3,
                    50,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    1,
                    0,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    5,
                    100,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    4,
                    5,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    2,
                    1000,
                    [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    [
                        0,
                        100,
                        200,
                        300,
                        400
                    ]
                ],
                [
                    3,
                    50,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    1,
                    0,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    5,
                    100,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    4,
                    5,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    2,
                    1000,
                    [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    [
                        0,
                        100,
                        200,
                        300,
                        400
                    ]
                ],
                [
                    3,
                    50,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    1,
                    0,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    5,
                    100,
                    [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    [
                        0,
                        10,
                        20,
                        30,
                        40
                    ]
                ],
                [
                    4,
                    5,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    2,
                    1000,
                    [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    [
                        0,
                        100,
                        200,
                        300,
                        400
                    ]
                ]
            ],
            "outputs": [
                4,
                6,
                15,
                150,
                15,
                1500,
                120,
                1,
                150,
                15,
                1500,
                120,
                1,
                150,
                15,
                1500,
                120,
                1,
                150,
                15,
                1500
            ]
        }
    },
    "503": {
        "title": "Next Greater Number in Circular Array",
        "description": "Given a circular integer array `nums`, return the next greater number for every element in `nums`. The next greater number of a number `x` is the first greater number to its traversing-order next in the array. If it doesn't exist, return -1 for this number.",
        "example": "Example:\n\nInput: nums = [1,2,1]\nOutput: [2,-1,2]\nExplanation: The first 1's next greater number is 2. The number 2 can't find the next greater number. The second 1's next greater number needs to search circularly, which is also 2.",
        "level": "Medium",
        "tags": [
            "array",
            "circular array",
            "stack"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    3
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    3,
                    1,
                    2,
                    4,
                    5
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    9
                ]
            ],
            "outputs": [
                [
                    2,
                    -1,
                    2
                ],
                [
                    2,
                    3,
                    4,
                    -1,
                    4
                ],
                [
                    -1,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    -1,
                    -1,
                    -1,
                    -1,
                    -1
                ],
                [
                    4,
                    2,
                    4,
                    5,
                    -1
                ],
                [
                    -1,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9
                ],
                [
                    -1
                ],
                [
                    -1,
                    -1
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    -1
                ],
                [
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    9,
                    -1
                ]
            ]
        }
    },
    "504": {
        "title": "Base 7 Representation",
        "description": "Given an integer `num`, return a string of its base 7 representation.",
        "example": "Example:\n\nInput: num = 100\nOutput: \"202\"\n\nInput: num = -7\nOutput: \"-10\"",
        "level": "Easy",
        "tags": [
            "math",
            "conversion"
        ],
        "test_cases": {
            "inputs": [
                100,
                -7,
                0,
                7,
                49,
                -49,
                1000000,
                -1000000,
                1,
                -1,
                107,
                -107,
                999,
                -999,
                123456,
                -123456,
                987654,
                -987654,
                9999999,
                -9999999
            ],
            "outputs": [
                "202",
                "-10",
                "0",
                "10",
                "100",
                "-100",
                "2624660",
                "-2624660",
                "1",
                "-1",
                "250",
                "-250",
                "26241",
                "-26241",
                "150666",
                "-150666",
                "603660",
                "-603660",
                "15066666",
                "-15066666"
            ]
        }
    },
    "505": {
        "title": "Shortest Distance in a Maze",
        "description": "There is a ball in a maze with empty spaces (represented as 0) and walls (represented as 1). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the m x n maze, the ball's start position and the destination, where start = [startrow, startcol] and destination = [destinationrow, destinationcol], return the shortest distance for the ball to stop at the destination. If the ball cannot stop at destination, return -1.\n\nThe distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that the borders of the maze are all walls (see examples).",
        "example": "Example:\n\nInput: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]\nOutput: 12\nExplanation: One possible way is: left -> down -> left -> down -> right -> down -> right. The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.",
        "level": "Medium",
        "tags": [
            "maze",
            "graph",
            "shortest path"
        ],
        "test_cases": {
            "inputs": [
                {
                    "maze": [
                        [
                            0,
                            0,
                            1,
                            0,
                            0
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            0,
                            0,
                            1,
                            0
                        ],
                        [
                            1,
                            1,
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ]
                    ],
                    "start": [
                        0,
                        4
                    ],
                    "destination": [
                        4,
                        4
                    ]
                },
                {
                    "maze": [
                        [
                            0,
                            0,
                            1,
                            0,
                            0
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            0,
                            0,
                            1,
                            0
                        ],
                        [
                            1,
                            1,
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ]
                    ],
                    "start": [
                        0,
                        4
                    ],
                    "destination": [
                        3,
                        2
                    ]
                },
                {
                    "maze": [
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0,
                            0,
                            1
                        ],
                        [
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            0,
                            0,
                            1
                        ],
                        [
                            0,
                            1,
                            0,
                            0,
                            0
                        ]
                    ],
                    "start": [
                        4,
                        3
                    ],
                    "destination": [
                        0,
                        1
                    ]
                }
            ],
            "outputs": [
                12,
                -1,
                -1
            ]
        }
    },
    "506": null,
    "507": {
        "title": "Perfect Number",
        "description": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. Given an integer n, determine if it is a perfect number.",
        "example": "Example 1:\n\nInput: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n\nExample 2:\n\nInput: num = 7\nOutput: false",
        "level": "Easy",
        "tags": [
            "math",
            "number theory"
        ],
        "test_cases": {
            "inputs": [
                6,
                28,
                12,
                496,
                8128,
                33550336,
                2,
                1,
                0,
                4960,
                100000000,
                108,
                8129,
                33550337,
                3,
                999999999,
                999999998,
                999999997,
                999999996,
                999999995
            ],
            "outputs": [
                true,
                true,
                false,
                true,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "508": {
        "title": "Most Frequent Subtree Sum",
        "description": "Given the `root` of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\n\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).",
        "example": "Example:\n\nInput: root = [5,2,-3]\nOutput: [2,-3,4]\n\nExplanation: The subtree sums are [5, 2, -3, 4, 2, -3]. The most frequent subtree sum is 2, -3, and 4 with a frequency of 2 each.\n\nInput: root = [5,2,-5]\nOutput: [2]\n\nExplanation: The subtree sums are [5, 2, -5, 2]. The most frequent subtree sum is 2 with a frequency of 2.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "subtree sum",
            "frequency"
        ],
        "test_cases": {
            "inputs": [
                "[5,2,-3]",
                "[5,2,-5]",
                "[1]",
                "[0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[]",
                "[1,2,3,null,4,5,6,null,null,7,8,9,10]"
            ],
            "outputs": [
                "[2,-3,4]",
                "[2]",
                "[1]",
                "[0]",
                "[15]",
                "[]",
                "[28, 15, 10, 7, 4, 3, 2, 1]"
            ]
        }
    },
    "509": {
        "title": "Fibonacci Number",
        "description": "Given a number n, calculate the nth Fibonacci number.",
        "example": "For example, if n = 6, the output should be 8. The Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, ... and the 6th Fibonacci number is 8.",
        "level": "Easy",
        "tags": [
            "Math",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                10,
                15,
                20
            ],
            "outputs": [
                0,
                1,
                1,
                2,
                3,
                5,
                8,
                55,
                610,
                6765
            ]
        }
    },
    "510": {
        "title": "In-order Successor in Binary Search Tree",
        "description": "Given a `node` in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return `null`.\n\nThe successor of a `node` is the node with the smallest key greater than `node.val`.\n\nYou will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:\n\n```\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n```\n",
        "example": "Example 1:\n\nInput: tree = [2,1,3], node = 1\nOutput: 2\nExplanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.\n\nExample 2:\n\nInput: tree = [5,3,6,2,4,null,null,1], node = 6\nOutput: null\nExplanation: There is no in-order successor of the current node, so the answer is null.",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "In-order Traversal",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "tree": [
                        2,
                        1,
                        3
                    ],
                    "node": 1
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 6
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 4
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 5
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 3
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 2
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 1
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 7
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 0
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": -1
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 8
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 9
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 10
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 100
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": -100
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 105
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": -105
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 3
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 4
                },
                {
                    "tree": [
                        5,
                        3,
                        6,
                        2,
                        4,
                        null,
                        null,
                        1
                    ],
                    "node": 5
                }
            ],
            "outputs": [
                2,
                null,
                5,
                6,
                4,
                3,
                2,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                4,
                5
            ]
        }
    },
    "513": {
        "title": "Leftmost Value in Last Row of Binary Tree",
        "description": "Given the `root` of a binary tree, return the leftmost value in the last row of the tree.",
        "example": "Example 1:\n\nInput: root = [2,1,3]\nOutput: 1\n\nExample 2:\n\nInput: root = [1,2,3,4,null,5,6,null,null,7]\nOutput: 7",
        "level": "Medium",
        "tags": [
            "binary tree",
            "tree traversal"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,3]",
                "[1,2,3,4,null,5,6,null,null,7]",
                "[1]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104]"
            ],
            "outputs": [
                "1",
                "7",
                "1",
                "2",
                "2",
                "5",
                "8",
                "104"
            ]
        }
    },
    "514": {
        "title": "Fallout 4: Road to Freedom",
        "description": "In the video game Fallout 4, players embark on the quest 'Road to Freedom' where they must reach a metal dial called the 'Freedom Trail Ring' and use it to spell a specific keyword to open a door. The ring has a code engraved on its outer surface, represented by the string 'ring'. The keyword that needs to be spelled is represented by the string 'key'. Your task is to determine the minimum number of steps required to spell all the characters in the keyword. The ring starts with its first character aligned at the '12:00' direction. To spell each character in the key, you must rotate the ring clockwise or anticlockwise to align the corresponding character at the '12:00' direction and then press the center button. Each rotation counts as one step, as does pressing the center button. Return the minimum number of steps required to spell all the characters in the keyword.",
        "example": "For example, given ring = 'godding' and key = 'gd', the first key character 'g' is already in place, so we need 1 step to spell it. The second key character 'd' requires rotating the ring anticlockwise by two steps to make it become 'ddinggo'. We then need 1 more step to spell it. Therefore, the minimum number of steps is 4.",
        "level": "Medium",
        "tags": [
            "string",
            "rotation",
            "simulation"
        ],
        "test_cases": {
            "inputs": [
                {
                    "ring": "godding",
                    "key": "gd"
                },
                {
                    "ring": "godding",
                    "key": "godding"
                },
                {
                    "ring": "abcdefg",
                    "key": "abc"
                },
                {
                    "ring": "abcdefg",
                    "key": "def"
                },
                {
                    "ring": "abcdefg",
                    "key": "g"
                },
                {
                    "ring": "abcdefg",
                    "key": "abcdefg"
                },
                {
                    "ring": "abcdefg",
                    "key": "gfedcba"
                },
                {
                    "ring": "abcdefg",
                    "key": "cba"
                },
                {
                    "ring": "abcdefg",
                    "key": "gfedc"
                },
                {
                    "ring": "abcdefg",
                    "key": "gfed"
                },
                {
                    "ring": "abcdefg",
                    "key": "gfe"
                },
                {
                    "ring": "abcdefg",
                    "key": "gf"
                },
                {
                    "ring": "abcdefg",
                    "key": "g"
                },
                {
                    "ring": "abcdefg",
                    "key": "a"
                },
                {
                    "ring": "abcdefg",
                    "key": "b"
                },
                {
                    "ring": "abcdefg",
                    "key": "c"
                },
                {
                    "ring": "abcdefg",
                    "key": "d"
                },
                {
                    "ring": "abcdefg",
                    "key": "e"
                },
                {
                    "ring": "abcdefg",
                    "key": "f"
                },
                {
                    "ring": "abcdefg",
                    "key": "g"
                }
            ],
            "outputs": [
                4,
                13,
                3,
                3,
                1,
                7,
                7,
                3,
                5,
                5,
                5,
                5,
                5,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "515": {
        "title": "Largest Value in Each Row",
        "description": "Given the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).",
        "example": "Example 1:\n\nInput: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]\n\nExample 2:\n\nInput: root = [1,2,3]\nOutput: [1,3]",
        "level": "Easy",
        "tags": [
            "binary tree",
            "tree traversal",
            "level order traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,2,5,3,null,9]",
                "[1,2,3]",
                "[5,4,3,2,1]",
                "[1]",
                "[]",
                "[1,2,null,3,null,4,null,5]",
                "[1,null,2,null,3,null,4,null,5]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[1,3,9]",
                "[1,3]",
                "[5,4,3,2,1]",
                "[1]",
                "[]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,3,7,15]",
                "[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "516": null,
    "517": null,
    "518": {
        "title": "Coin Combinations",
        "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0. You may assume that you have an infinite number of each kind of coin. The answer is guaranteed to fit into a signed 32-bit integer.",
        "example": "Example 1:\n\nInput: amount = 5, coins = [1,2,5]\nOutput: 4\nExplanation: There are four ways to make up the amount:\n5 = 5\n5 = 2 + 2 + 1\n5 = 2 + 1 + 1 + 1\n5 = 1 + 1 + 1 + 1 + 1\n\nExample 2:\n\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: The amount of 3 cannot be made up just with coins of 2.\n\nExample 3:\n\nInput: amount = 10, coins = [10]\nOutput: 1",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "coin change"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    [
                        1,
                        2,
                        5
                    ]
                ],
                [
                    3,
                    [
                        2
                    ]
                ],
                [
                    10,
                    [
                        10
                    ]
                ],
                [
                    0,
                    [
                        1,
                        2,
                        3
                    ]
                ],
                [
                    7,
                    [
                        2,
                        3,
                        5
                    ]
                ],
                [
                    12,
                    [
                        1,
                        2,
                        5
                    ]
                ],
                [
                    15,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    20,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        10
                    ]
                ],
                [
                    25,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20
                    ]
                ],
                [
                    30,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        25
                    ]
                ],
                [
                    50,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        10,
                        20,
                        25,
                        30
                    ]
                ],
                [
                    100,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50
                    ]
                ],
                [
                    200,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100
                    ]
                ],
                [
                    500,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200
                    ]
                ],
                [
                    1000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500
                    ]
                ],
                [
                    2000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500,
                        1000
                    ]
                ],
                [
                    5000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500,
                        1000,
                        2000
                    ]
                ],
                [
                    10000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500,
                        1000,
                        2000,
                        5000
                    ]
                ],
                [
                    20000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500,
                        1000,
                        2000,
                        5000,
                        10000
                    ]
                ],
                [
                    30000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500,
                        1000,
                        2000,
                        5000,
                        10000,
                        20000
                    ]
                ],
                [
                    40000,
                    [
                        1,
                        2,
                        5,
                        10,
                        20,
                        25,
                        50,
                        100,
                        200,
                        500,
                        1000,
                        2000,
                        5000,
                        10000,
                        20000,
                        30000
                    ]
                ]
            ],
            "outputs": [
                4,
                0,
                1,
                0,
                5,
                13,
                24,
                61,
                242,
                560,
                1423,
                4563,
                117121,
                73682,
                127036,
                73682,
                127036,
                73682,
                127036,
                73682
            ]
        }
    },
    "519": {
        "title": "Random Binary Matrix Flip",
        "description": "You are given an `m x n` binary grid `matrix` with all values initially set to `0`. Design an algorithm to randomly pick an index `(i, j)` where `matrix[i][j] == 0` and flips it to `1`. All the indices `(i, j)` where `matrix[i][j] == 0` should be equally likely to be returned.\n\nImplement the `Solution` class with the following methods:\n\n- `Solution(int m, int n)`: Initializes the object with the size of the binary matrix `m` and `n`.\n- `int[] flip()`: Returns a random index `[i, j]` of the matrix where `matrix[i][j] == 0` and flips it to `1`.\n- `void reset()`: Resets all the values of the matrix to be `0`.",
        "example": "Example:\n\nInput\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]\nOutput\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n\nExplanation\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.",
        "level": "Medium",
        "tags": [
            "Array",
            "Randomized Algorithm"
        ],
        "test_cases": {
            "inputs": [
                "[[2, 2]]",
                "[[3, 3]]",
                "[[4, 4]]",
                "[[5, 5]]",
                "[[2, 3]]",
                "[[3, 2]]",
                "[[4, 5]]",
                "[[5, 4]]",
                "[[10, 10]]",
                "[[100, 100]]",
                "[[1000, 1000]]",
                "[[10000, 10000]]",
                "[[100, 1000]]",
                "[[1000, 100]]",
                "[[100, 10000]]",
                "[[10000, 100]]",
                "[[1000, 1000], [100, 100], [10, 10]]",
                "[[2, 2], [3, 3], [4, 4], [5, 5]]",
                "[[10, 10], [100, 100], [1000, 1000], [10000, 10000]]",
                "[[2, 3], [3, 2], [4, 5], [5, 4]]"
            ],
            "outputs": [
                "[[0, 0], [0, 1], [1, 0], [1, 1]]",
                "[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]",
                "[[0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [1, 2]]",
                "[[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]",
                "[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]",
                "[[0, 0], [0, 1], [1, 0], [1, 1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 4], [1, 4]]"
            ]
        }
    },
    "520": null,
    "521": {
        "title": "Longest Uncommon Subsequence Length",
        "description": "Given two strings `a` and `b`, return the length of the longest uncommon subsequence between `a` and `b`. If the longest uncommon subsequence does not exist, return -1.\n\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\n\nA subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`.\n\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).",
        "example": "Example:\n\nInput: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\". Note that \"cdc\" is also a longest uncommon subsequence.",
        "level": "Easy",
        "tags": [
            "string",
            "subsequence"
        ],
        "test_cases": {
            "inputs": [
                [
                    "aba",
                    "cdc"
                ],
                [
                    "aaa",
                    "bbb"
                ],
                [
                    "aaa",
                    "aaa"
                ],
                [
                    "abc",
                    "def"
                ],
                [
                    "abc",
                    "ab"
                ],
                [
                    "",
                    ""
                ],
                [
                    "",
                    "abc"
                ],
                [
                    "abc",
                    ""
                ],
                [
                    "a",
                    "a"
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "a",
                    ""
                ],
                [
                    "",
                    "a"
                ],
                [
                    "abcde",
                    "abcde"
                ],
                [
                    "abcde",
                    "abc"
                ],
                [
                    "abcde",
                    "de"
                ],
                [
                    "abcde",
                    "cde"
                ],
                [
                    "abcde",
                    "abcd"
                ],
                [
                    "abcde",
                    "bcde"
                ],
                [
                    "abcde",
                    "abde"
                ],
                [
                    "abcde",
                    "acde"
                ]
            ],
            "outputs": [
                3,
                3,
                -1,
                3,
                3,
                -1,
                3,
                3,
                0,
                1,
                1,
                1,
                -1,
                5,
                2,
                2,
                5,
                4,
                4,
                4
            ]
        }
    },
    "522": {
        "title": "Longest Uncommon Subsequence",
        "description": "Given an array of strings `strs`, return the length of the longest uncommon subsequence between them. An uncommon subsequence is a string that is a subsequence of one string but not the others. A subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`.",
        "example": "Example:\n\nInput: strs = [\"aba\",\"cdc\",\"eae\"]\nOutput: 3\n\nExplanation: The longest uncommon subsequence is \"aba\" which is a subsequence of the first string but not the others.\n\nInput: strs = [\"aaa\",\"aaa\",\"aa\"]\nOutput: -1\n\nExplanation: There is no uncommon subsequence among the strings.",
        "level": "Easy",
        "tags": [
            "array",
            "string"
        ],
        "test_cases": {
            "inputs": [
                "[\"aba\",\"cdc\",\"eae\"]",
                "[\"aaa\",\"aaa\",\"aa\"]",
                "[\"abc\",\"def\",\"ghi\"]",
                "[\"abc\",\"abc\",\"abc\"]",
                "[\"abc\",\"def\",\"abc\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
                "[\"a\",\"b\"]",
                "[\"a\",\"a\"]",
                "[\"a\",\"b\",\"c\"]",
                "[\"a\",\"a\",\"a\"]",
                "[\"a\",\"b\",\"a\"]",
                "[\"a\",\"b\",\"c\",\"d\"]",
                "[\"a\",\"b\",\"c\",\"d\",\"e\"]",
                "[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]",
                "[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]",
                "[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]"
            ],
            "outputs": [
                "3",
                "-1",
                "3",
                "-1",
                "3",
                "3",
                "3",
                "3",
                "3",
                "3",
                "3",
                "1",
                "-1",
                "1",
                "-1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1"
            ]
        }
    },
    "523": {
        "title": "Good Subarray",
        "description": "Given an integer array `nums` and an integer `k`, return `true` if `nums` has a good subarray or `false` otherwise.\n\nA good subarray is a subarray where:\n\n- Its length is at least two, and\n- The sum of the elements of the subarray is a multiple of `k`.\n\nNote that:\n\n- A subarray is a contiguous part of the array.\n- An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is always a multiple of `k`.",
        "example": "Example 1:\n\nInput: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n\nExample 2:\n\nInput: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is a continuous subarray of size 5 whose elements sum up to 42. 42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n\nExample 3:\n\nInput: nums = [23,2,6,4,7], k = 13\nOutput: false",
        "level": "Medium",
        "tags": [
            "array",
            "subarray",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[23,2,4,6,7]",
                "[23,2,6,4,7]",
                "[23,2,6,4,7,8,9,10]",
                "[1,2,3,4,5]",
                "[0,0,0,0,0]",
                "[1,1,1,1,1]",
                "[2,4,6,8,10]",
                "[10,20,30,40,50]",
                "[100,200,300,400,500]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,20,30,40,50,60,70,80,90,100]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500]"
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "524": {
        "title": "Longest Word in Dictionary through Deletion",
        "description": "Given a string `s` and a string array `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.",
        "example": "Example:\n\nInput: s = \"abpcplea\", dictionary = [\"ale\", \"apple\", \"monkey\", \"plea\"]\nOutput: \"apple\"\n\nExplanation: The string \"apple\" can be formed by deleting the characters 'b', 'p', 'c', 'l', and 'a' from the given string.\n\nInput: s = \"abpcplea\", dictionary = [\"a\", \"b\", \"c\"]\nOutput: \"a\"\n\nExplanation: The string \"a\" can be formed by deleting the characters 'b', 'p', 'c', 'l', 'p', 'l', 'e', and 'a' from the given string.",
        "level": "Medium",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "\"abpcplea\", [\"ale\", \"apple\", \"monkey\", \"plea\"]",
                "\"abpcplea\", [\"a\", \"b\", \"c\"]",
                "\"abpcplea\", [\"ab\", \"abc\", \"abcd\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\"]",
                "\"abpcplea\", [\"abcde\", \"abcd\", \"abc\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\", \"abcdefghijklmnop\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\", \"abcdefghijklmnop\", \"abcdefghijklmnopq\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\", \"abcdefghijklmnop\", \"abcdefghijklmnopq\", \"abcdefghijklmnopqr\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\", \"abcdefghijklmnop\", \"abcdefghijklmnopq\", \"abcdefghijklmnopqr\", \"abcdefghijklmnopqrs\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\", \"abcdefghijklmnop\", \"abcdefghijklmnopq\", \"abcdefghijklmnopqr\", \"abcdefghijklmnopqrs\", \"abcdefghijklmnopqrst\"]",
                "\"abpcplea\", [\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\", \"abcdefghijklmno\", \"abcdefghijklmnop\", \"abcdefghijklmnopq\", \"abcdefghijklmnopqr\", \"abcdefghijklmnopqrs\", \"abcdefghijklmnopqrst\", \"abcdefghijklmnopqrstu\"]"
            ],
            "outputs": [
                "\"apple\"",
                "\"a\"",
                "\"ab\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\"",
                "\"abc\""
            ]
        }
    },
    "525": {
        "title": "Maximum Length of Contiguous Subarray",
        "description": "Given a binary array `nums`, find the maximum length of a contiguous subarray with an equal number of `0` and `1`.",
        "example": "Example 1:\n\nInput: nums = [0,1]\nOutput: 2\nExplanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n\nExample 2:\n\nInput: nums = [0,1,0]\nOutput: 2\nExplanation: [0, 1] (or [1, 0]) is the longest contiguous subarray with an equal number of 0 and 1.",
        "level": "Medium",
        "tags": [
            "array",
            "subarray",
            "contiguous",
            "binary"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1
                ],
                [
                    0,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    0,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1,
                    0,
                    1,
                    0,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    1,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    0,
                    1,
                    1,
                    0,
                    1,
                    0,
                    1,
                    1
                ],
                [
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    0,
                    0
                ],
                [
                    0,
                    1,
                    1,
                    1,
                    0,
                    0,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0
                ]
            ],
            "outputs": [
                2,
                2,
                4,
                6,
                0,
                0,
                8,
                8,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                8,
                8,
                8,
                8,
                8
            ]
        }
    },
    "526": {
        "title": "Beautiful Arrangements",
        "description": "Given `n` integers labeled `1` through `n`, a permutation of those `n` integers `perm` (1-indexed) is considered a beautiful arrangement if for every `i` (1 <= i <= n), either `perm[i]` is divisible by `i` or `i` is divisible by `perm[i]`. Given an integer `n`, return the number of beautiful arrangements that can be constructed.",
        "example": "Example:\n\nInput: n = 2\nOutput: 2\nExplanation: The first beautiful arrangement is [1,2]:\n- perm[1] = 1 is divisible by i = 1\n- perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n- perm[1] = 2 is divisible by i = 1\n- i = 2 is divisible by perm[2] = 1",
        "level": "Medium",
        "tags": [
            "permutation",
            "divisibility"
        ],
        "test_cases": {
            "inputs": [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
            ],
            "outputs": [
                2,
                3,
                8,
                10,
                36,
                41,
                132,
                250,
                700,
                750,
                4010,
                4237,
                10680,
                24679
            ]
        }
    },
    "527": {
        "title": "Word Abbreviation",
        "description": "Given an array of distinct strings, return the minimal possible abbreviations for every word. The abbreviation for each word is formed by taking the first character, then the number of characters in between, followed by the last character. If multiple words have the same abbreviation, increase the prefix of each abbreviation by 1 until they are unique. If an abbreviation does not make a word shorter, keep the original word.",
        "example": "For example, given the input words = ['like', 'god', 'internal', 'me', 'internet', 'interval', 'intension', 'face', 'intrusion'], the output would be ['l2e', 'god', 'internal', 'me', 'i6t', 'interval', 'inte4n', 'f2e', 'intr4n'].\n\nExplanation:\n- 'like' becomes 'l2e' because there are 2 characters between 'l' and 'e'.\n- 'god' remains the same as it is already unique.\n- 'internal' remains the same as it is already unique.\n- 'me' remains the same as it is already unique.\n- 'internet' becomes 'i6t' because there are 6 characters between 'i' and 't'.\n- 'interval' remains the same as it is already unique.\n- 'intension' becomes 'inte4n' because there are 4 characters between 'i' and 'n'.\n- 'face' becomes 'f2e' because there are 2 characters between 'f' and 'e'.\n- 'intrusion' becomes 'intr4n' because there are 4 characters between 'i' and 'n'.",
        "level": "Medium",
        "tags": [
            "string",
            "array"
        ],
        "test_cases": {
            "inputs": [
                [
                    "like",
                    "god",
                    "internal",
                    "me",
                    "internet",
                    "interval",
                    "intension",
                    "face",
                    "intrusion"
                ],
                [
                    "aa",
                    "aaa"
                ],
                [
                    "hello",
                    "world",
                    "hi",
                    "hey"
                ],
                [
                    "programming",
                    "code",
                    "algorithm",
                    "problem"
                ],
                [
                    "apple",
                    "banana",
                    "cherry",
                    "date",
                    "elderberry"
                ],
                [
                    "cat",
                    "dog",
                    "elephant",
                    "fish",
                    "giraffe",
                    "hippopotamus"
                ],
                [
                    "moon",
                    "sun",
                    "star",
                    "planet",
                    "galaxy",
                    "universe"
                ],
                [
                    "car",
                    "bike",
                    "bus",
                    "train",
                    "plane",
                    "ship",
                    "subway"
                ],
                [
                    "red",
                    "blue",
                    "green",
                    "yellow",
                    "orange",
                    "purple",
                    "pink",
                    "brown"
                ],
                [
                    "one",
                    "two",
                    "three",
                    "four",
                    "five",
                    "six",
                    "seven",
                    "eight",
                    "nine",
                    "ten"
                ]
            ],
            "outputs": [
                [
                    "l2e",
                    "god",
                    "internal",
                    "me",
                    "i6t",
                    "interval",
                    "inte4n",
                    "f2e",
                    "intr4n"
                ],
                [
                    "aa",
                    "aaa"
                ],
                [
                    "h2o",
                    "w3d",
                    "hi",
                    "hey"
                ],
                [
                    "p11g",
                    "c2e",
                    "a8m",
                    "p5m"
                ],
                [
                    "a4e",
                    "b4a",
                    "c4y",
                    "d2e",
                    "e8y"
                ],
                [
                    "c1t",
                    "d1g",
                    "e7t",
                    "f2h",
                    "g6e",
                    "h9s"
                ],
                [
                    "m2n",
                    "s2n",
                    "s3r",
                    "p4t",
                    "g4y",
                    "u7e"
                ],
                [
                    "c1r",
                    "b2e",
                    "b2s",
                    "t4n",
                    "p4e",
                    "s3p",
                    "s4y"
                ],
                [
                    "r1d",
                    "b3e",
                    "g4n",
                    "y4w",
                    "o5e",
                    "p5e",
                    "p4k",
                    "b4n"
                ],
                [
                    "o2e",
                    "t2o",
                    "t3e",
                    "f3r",
                    "f4e",
                    "s3x",
                    "s4n",
                    "e5t",
                    "n3e",
                    "t3n"
                ]
            ]
        }
    },
    "528": null,
    "529": null,
    "530": {
        "title": "Minimum Absolute Difference in BST",
        "description": "Given the `root` of a Binary Search Tree (BST), find the minimum absolute difference between the values of any two different nodes in the tree.",
        "example": "Example 1:\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\nExample 2:\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1",
        "level": "Easy",
        "tags": [
            "Binary Search Tree",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[4,2,6,1,3]",
                "[1,0,48,null,null,12,49]",
                "[5,3,9,1,4,null,10]",
                "[2,1,3]",
                "[1,null,3,2]"
            ],
            "outputs": [
                "1",
                "1",
                "1",
                "1",
                "1"
            ]
        }
    },
    "531": {
        "title": "Black Lonely Pixels",
        "description": "Given an `m x n` picture consisting of black 'B' and white 'W' pixels, return the number of black lonely pixels. A black lonely pixel is a character 'B' that is located at a specific position where the same row and same column don't have any other black pixels.",
        "example": "Example:\n\nInput: picture = [['W', 'W', 'B'], ['W', 'B', 'W'], ['B', 'W', 'W']]\nOutput: 3\nExplanation: All the three 'B's are black lonely pixels.",
        "level": "Easy",
        "tags": [
            "matrix",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        "W",
                        "W",
                        "B"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ],
                    [
                        "B",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "W"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "B",
                        "W",
                        "B"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ],
                    [
                        "B",
                        "W",
                        "B"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "W",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "W",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "B"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "W"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "W",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ]
                ],
                [
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "B",
                        "B"
                    ],
                    [
                        "B",
                        "W",
                        "B"
                    ]
                ],
                [
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "W",
                        "W"
                    ],
                    [
                        "W",
                        "B",
                        "W"
                    ]
                ]
            ],
            "outputs": [
                3,
                0,
                0,
                0,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "532": {
        "title": "K-Diff Pairs in an Array",
        "description": "Given an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array. A k-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true: \n\n- `0 <= i, j < nums.length` \n- `i != j` \n- `nums[i] - nums[j] == k` \n\nNotice that `|val|` denotes the absolute value of `val`.",
        "example": "Example 1:\n\nInput: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5). Although we have two 1s in the input, we should only return the number of unique pairs.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\nExample 3:\n\nInput: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).",
        "level": "Easy",
        "tags": [
            "array",
            "hash table",
            "two pointers"
        ],
        "test_cases": {
            "inputs": [
                "[3,1,4,1,5]",
                "[1,2,3,4,5]",
                "[1,3,1,5,4]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ],
            "outputs": [
                "2",
                "4",
                "1",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "533": {
        "title": "Black Lonely Pixels",
        "description": "Given an `m x n` picture consisting of black 'B' and white 'W' pixels and an integer target, return the number of black lonely pixels. A black lonely pixel is a character 'B' that is located at a specific position `(r, c)` where row `r` and column `c` both contain exactly `target` black pixels. Additionally, for all rows that have a black pixel at column `c`, they should be exactly the same as row `r`.",
        "example": "Example:\n\nInput: picture = [['W', 'B', 'W', 'B', 'B', 'W'], ['W', 'B', 'W', 'B', 'B', 'W'], ['W', 'B', 'W', 'B', 'B', 'W'], ['W', 'W', 'B', 'W', 'B', 'W']], target = 3\nOutput: 6\nExplanation: All the green 'B' are the black pixels we need (all 'B's at column 1 and 3). Take 'B' at row r = 0 and column c = 1 as an example: Rule 1, row r = 0 and column c = 1 both have exactly target = 3 black pixels. Rule 2, the rows have black pixel at column c = 1 are row 0, row 1 and row 2. They are exactly the same as row r = 0.",
        "level": "Medium",
        "tags": [
            "matrix",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "picture": [
                        [
                            "W",
                            "B",
                            "W",
                            "B",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "B",
                            "W",
                            "B",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "B",
                            "W",
                            "B",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "B",
                            "W",
                            "B",
                            "W"
                        ]
                    ],
                    "target": 3
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "B"
                        ],
                        [
                            "W",
                            "W",
                            "B"
                        ],
                        [
                            "W",
                            "W",
                            "B"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 3
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 0
                },
                {
                    "picture": [
                        [
                            "B",
                            "W",
                            "B"
                        ],
                        [
                            "W",
                            "B",
                            "W"
                        ],
                        [
                            "B",
                            "W",
                            "B"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "W",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 2
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 0
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 3
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 2
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 2
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 0
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 3
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 3
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 2
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 0
                },
                {
                    "picture": [
                        [
                            "W",
                            "W",
                            "W"
                        ],
                        [
                            "W",
                            "B",
                            "W"
                        ],
                        [
                            "W",
                            "W",
                            "W"
                        ]
                    ],
                    "target": 1
                },
                {
                    "picture": [
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ],
                        [
                            "B",
                            "B",
                            "B"
                        ]
                    ],
                    "target": 2
                }
            ],
            "outputs": [
                6,
                0,
                0,
                0,
                4,
                0,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "535": {
        "title": "URL Encoder and Decoder",
        "description": "Design a class that can encode a given URL into a tiny URL and decode a tiny URL back to the original URL. The class should be able to handle any valid URL and ensure that the encoding and decoding process is reversible.",
        "example": "Example:\n\nInput:\nurl = \"https://leetcode.com/problems/design-tinyurl\"\n\nOutput:\n\"https://leetcode.com/problems/design-tinyurl\"\n\nExplanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.",
        "level": "Medium",
        "tags": [
            "System Design",
            "Encoding",
            "Decoding"
        ],
        "test_cases": {
            "inputs": [
                "\"https://leetcode.com/problems/design-tinyurl\"",
                "\"https://www.google.com\"",
                "\"https://www.amazon.com\"",
                "\"https://www.facebook.com\"",
                "\"https://www.twitter.com\"",
                "\"https://www.instagram.com\"",
                "\"https://www.linkedin.com\"",
                "\"https://www.youtube.com\"",
                "\"https://www.netflix.com\"",
                "\"https://www.spotify.com\"",
                "\"https://www.apple.com\"",
                "\"https://www.microsoft.com\"",
                "\"https://www.oracle.com\"",
                "\"https://www.ibm.com\"",
                "\"https://www.adobe.com\"",
                "\"https://www.wikipedia.org\"",
                "\"https://www.reddit.com\"",
                "\"https://www.pinterest.com\"",
                "\"https://www.tumblr.com\"",
                "\"https://www.github.com\""
            ],
            "outputs": [
                "\"https://leetcode.com/problems/design-tinyurl\"",
                "\"https://www.google.com\"",
                "\"https://www.amazon.com\"",
                "\"https://www.facebook.com\"",
                "\"https://www.twitter.com\"",
                "\"https://www.instagram.com\"",
                "\"https://www.linkedin.com\"",
                "\"https://www.youtube.com\"",
                "\"https://www.netflix.com\"",
                "\"https://www.spotify.com\"",
                "\"https://www.apple.com\"",
                "\"https://www.microsoft.com\"",
                "\"https://www.oracle.com\"",
                "\"https://www.ibm.com\"",
                "\"https://www.adobe.com\"",
                "\"https://www.wikipedia.org\"",
                "\"https://www.reddit.com\"",
                "\"https://www.pinterest.com\"",
                "\"https://www.tumblr.com\"",
                "\"https://www.github.com\""
            ]
        }
    },
    "536": {
        "title": "Construct Binary Tree from String",
        "description": "You are given a string consisting of parenthesis and integers. The string represents a binary tree, where each integer represents the value of a node and a pair of parenthesis contains the child binary tree with the same structure. You need to construct the binary tree from the given string. The left child node of the parent is constructed first if it exists.",
        "example": "For example, given the string s = \"4(2(3)(1))(6(5))\", the binary tree can be constructed as follows:\n\n          4\n        /   \\\n       2     6\n      / \\   /\n     3   1 5\n\nThe constructed binary tree can be represented as the list [4, 2, 6, 3, 1, 5].",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "String",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "\"4(2(3)(1))(6(5))\"",
                "\"4(2(3)(1))(6(5)(7))\"",
                "\"-4(2(3)(1))(6(5)(7))\"",
                "\"1\"",
                "\"10(20)\"",
                "\"-5(-10(15)(-20))\"",
                "\"100(200(300(400(500)))(600(700(800(900)))))\"",
                "\"7(6(5(4(3(2(1))))))\"",
                "\"9(8(7(6(5(4(3(2(1))))))))\"",
                "\"-1(-2(-3(-4(-5(-6(-7(-8(-9))))))))\"",
                "\"10(20(30(40(50(60(70(80(90))))))))\"",
                "\"1(2(3(4(5(6(7(8(9))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10)))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12)))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14)))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14(15))))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14(15(16)))))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14(15(16(17))))))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14(15(16(17(18)))))))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14(15(16(17(18(19))))))))))))))))))\"",
                "\"1(2(3(4(5(6(7(8(9(10(11(12(13(14(15(16(17(18(19(20)))))))))))))))))))\""
            ],
            "outputs": [
                "[4, 2, 6, 3, 1, 5]",
                "[4, 2, 6, 3, 1, 5, 7]",
                "[-4, 2, 6, 3, 1, 5, 7]",
                "[1]",
                "[10, 20]",
                "[-5, -10, 15, -20]",
                "[100, 200, 300, 400, 500, 600, 700, 800, 900]",
                "[7, 6, 5, 4, 3, 2, 1]",
                "[9, 8, 7, 6, 5, 4, 3, 2, 1]",
                "[-1, -2, -3, -4, -5, -6, -7, -8, -9]",
                "[10, 20, 30, 40, 50, 60, 70, 80, 90]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
            ]
        }
    },
    "537": {
        "title": "Complex Number Multiplication",
        "description": "Given two complex numbers `num1` and `num2` as strings, return a string of the complex number that represents their multiplications. A complex number can be represented as a string on the form `\"real+imaginaryi\"` where `real` is the real part and is an integer in the range [-100, 100], `imaginary` is the imaginary part and is an integer in the range [-100, 100], and `i^2 == -1`.",
        "example": "Example:\n\nInput: num1 = \"1+1i\", num2 = \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i^2 + 2i = 2i, and you need to convert it to the form of 0+2i.",
        "level": "Easy",
        "tags": [
            "complex numbers",
            "string manipulation"
        ],
        "test_cases": {
            "inputs": [
                "\"1+1i\"",
                "\"1+-1i\"",
                "\"2+3i\"",
                "\"-4+2i\"",
                "\"0+0i\"",
                "\"100+100i\"",
                "\"-100-100i\"",
                "\"50+0i\"",
                "\"0+75i\"",
                "\"-25+75i\"",
                "\"-75-25i\"",
                "\"-50+50i\"",
                "\"-50-50i\"",
                "\"-75+25i\"",
                "\"75-25i\"",
                "\"-100+0i\"",
                "\"0-100i\"",
                "\"100-100i\"",
                "\"-100+100i\"",
                "\"100+0i\""
            ],
            "outputs": [
                "\"0+2i\"",
                "\"0+-2i\"",
                "\"-6+7i\"",
                "\"-8-16i\"",
                "\"0+0i\"",
                "\"20000+0i\"",
                "\"20000+0i\"",
                "\"100+0i\"",
                "\"0+7500i\"",
                "\"-7500+22500i\"",
                "\"-22500-7500i\"",
                "\"-5000+5000i\"",
                "\"-5000-5000i\"",
                "\"-7500+2500i\"",
                "\"7500-2500i\"",
                "\"0+10000i\"",
                "\"0-10000i\"",
                "\"20000-20000i\"",
                "\"-20000+20000i\"",
                "\"10000+0i\""
            ]
        }
    },
    "538": {
        "title": "Convert Binary Search Tree to Greater Tree",
        "description": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. A binary search tree is a tree that satisfies the following constraints: \n\n- The left subtree of a node contains only nodes with keys **less than** the node's key. \n- The right subtree of a node contains only nodes with keys **greater than** the node's key. \n- Both the left and right subtrees must also be binary search trees.",
        "example": "Example:\n\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n\nInput: root = [0,null,1]\nOutput: [1,null,1]",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]",
                "[0,null,1]",
                "[5,2,13]",
                "[10,5,15,3,7,13,18]",
                "[1,null,2]",
                "[3,2,4,1]",
                "[2,0,3,null,1]",
                "[1,0,2]",
                "[3,2,4,1,null,null,5]",
                "[1,null,3,2,4]"
            ],
            "outputs": [
                "[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]",
                "[1,null,1]",
                "[18,15,13]",
                "[58,63,43,48,50,31,18]",
                "[3,null,4]",
                "[7,9,4,10]",
                "[5,6,3,null,8]",
                "[5,6,3]",
                "[12,14,9,16,null,null,5]",
                "[7,null,10,9,14]"
            ]
        }
    },
    "539": {
        "title": "Minimum Minutes Difference",
        "description": "Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.",
        "example": "Example:\n\nInput: timePoints = [\"23:59\",\"00:00\"]\nOutput: 1\n\nExplanation: The minimum minutes difference is 1 minute between the time points 23:59 and 00:00.",
        "level": "Easy",
        "tags": [
            "array",
            "string"
        ],
        "test_cases": {
            "inputs": [
                [
                    "23:59",
                    "00:00"
                ],
                [
                    "00:00",
                    "23:59",
                    "00:00"
                ],
                [
                    "12:00",
                    "12:01",
                    "12:02",
                    "12:03"
                ],
                [
                    "01:00",
                    "02:00",
                    "03:00",
                    "04:00"
                ],
                [
                    "10:00",
                    "11:00",
                    "12:00",
                    "13:00",
                    "14:00"
                ],
                [
                    "00:00",
                    "00:01",
                    "00:02",
                    "00:03",
                    "00:04",
                    "00:05"
                ],
                [
                    "23:59",
                    "00:01",
                    "00:02",
                    "00:03",
                    "00:04",
                    "00:05"
                ],
                [
                    "12:00",
                    "12:00",
                    "12:00",
                    "12:00",
                    "12:00"
                ],
                [
                    "01:00",
                    "01:00",
                    "01:00",
                    "01:00",
                    "01:00"
                ],
                [
                    "10:00",
                    "10:00",
                    "10:00",
                    "10:00",
                    "10:00"
                ],
                [
                    "00:00",
                    "00:00",
                    "00:00",
                    "00:00",
                    "00:00"
                ],
                [
                    "23:59",
                    "23:59",
                    "23:59",
                    "23:59",
                    "23:59"
                ],
                [
                    "12:00",
                    "12:00",
                    "12:00",
                    "12:00",
                    "12:00"
                ],
                [
                    "01:00",
                    "01:00",
                    "01:00",
                    "01:00",
                    "01:00"
                ],
                [
                    "10:00",
                    "10:00",
                    "10:00",
                    "10:00",
                    "10:00"
                ],
                [
                    "00:00",
                    "00:00",
                    "00:00",
                    "00:00",
                    "00:00"
                ],
                [
                    "23:59",
                    "23:59",
                    "23:59",
                    "23:59",
                    "23:59"
                ],
                [
                    "12:00",
                    "12:00",
                    "12:00",
                    "12:00",
                    "12:00"
                ],
                [
                    "01:00",
                    "01:00",
                    "01:00",
                    "01:00",
                    "01:00"
                ],
                [
                    "10:00",
                    "10:00",
                    "10:00",
                    "10:00",
                    "10:00"
                ]
            ],
            "outputs": [
                1,
                0,
                1,
                60,
                60,
                1,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "540": {
        "title": "Single Element in Sorted Array",
        "description": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Your task is to find and return the single element that appears only once. Implement a solution that runs in O(log n) time and O(1) space.",
        "example": "For example, given the array nums = [1,1,2,3,3,4,4,8,8], the single element that appears only once is 2. In another example, given the array nums = [3,3,7,7,10,11,11], the single element that appears only once is 10.",
        "level": "Medium",
        "tags": [
            "array",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    1,
                    2,
                    3,
                    3,
                    4,
                    4,
                    8,
                    8
                ],
                [
                    3,
                    3,
                    7,
                    7,
                    10,
                    11,
                    11
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6
                ],
                [
                    2,
                    2,
                    4,
                    4,
                    6,
                    6,
                    8,
                    10,
                    10
                ],
                [
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5
                ]
            ],
            "outputs": [
                2,
                10,
                6,
                8,
                1
            ]
        }
    },
    "541": {
        "title": "Reverse String in Segments",
        "description": "Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.\n\nIf there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original.",
        "example": "Example:\n\nInput: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"\n\nExplanation: The string is divided into segments of length 2k = 4. The first segment \"abcd\" is reversed to \"bacd\". The second segment \"efg\" remains unchanged. The final result is \"bacdfeg\".",
        "level": "Easy",
        "tags": [
            "String",
            "Reverse"
        ],
        "test_cases": {
            "inputs": [
                "\"abcdefg\", 2",
                "\"abcd\", 2",
                "\"abcdefghijk\", 3",
                "\"abcde\", 1",
                "\"abcdefgh\", 4",
                "\"a\", 1",
                "\"\", 2",
                "\"abcde\", 3",
                "\"abcdefghijk\", 4",
                "\"abcdefg\", 3",
                "\"abcd\", 3",
                "\"abcdefgh\", 2",
                "\"a\", 2",
                "\"\", 1",
                "\"abcde\", 4",
                "\"abcdefghijk\", 5",
                "\"abcdefg\", 4",
                "\"abcd\", 4",
                "\"abcdefgh\", 3",
                "\"a\", 3"
            ],
            "outputs": [
                "\"bacdfeg\"",
                "\"bacd\"",
                "\"cbadefihgjk\"",
                "\"edcba\"",
                "\"dcbaefgh\"",
                "\"a\"",
                "\"\"",
                "\"edcba\"",
                "\"dcbaefghijk\"",
                "\"cbadefg\"",
                "\"cbadefg\"",
                "\"bacdefgh\"",
                "\"a\"",
                "\"\"",
                "\"edcba\"",
                "\"edcbafghijk\"",
                "\"dcbaefg\"",
                "\"dcba\"",
                "\"cbadefgh\"",
                "\"a\""
            ]
        }
    },
    "542": null,
    "543": {
        "title": "Binary Tree Diameter",
        "description": "Given the `root` of a binary tree, find the length of the longest path between any two nodes in the tree. The path may or may not pass through the root.",
        "example": "Example:\n\nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: The longest path is [4,2,1,3] or [5,2,1,3].",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion",
            "Depth-First Search"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[1,2]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,null,null,4,5,null,null,6,7,null,null,8,9,null,null,10]",
                "[1,2,3,4,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "3",
                "1",
                "0",
                "9",
                "9",
                "10",
                "99"
            ]
        }
    },
    "544": {
        "title": "NBA Playoff Team Pairing",
        "description": "During the NBA playoffs, teams are paired in a way that the rather strong team plays with the rather weak team. Given the number of teams `n`, return their final contest matches in the form of a string. The teams are labeled from 1 to n, representing their initial rank. We use parentheses and commas to represent the contest team pairing, with parentheses for pairing and commas for partition. In each round, the strategy is to pair the rather strong team with the rather weak one.",
        "example": "Example 1:\n\nInput: n = 4\nOutput: \"((1,4),(2,3))\"\nExplanation: In the first round, we pair the team 1 and 4, the teams 2 and 3 together, as we need to make the strong team and weak team together. And we got (1, 4),(2, 3). In the second round, the winners of (1, 4) and (2, 3) need to play again to generate the final winner, so you need to add the parentheses outside them. And we got the final answer ((1,4),(2,3)).\n\nExample 2:\n\nInput: n = 8\nOutput: \"(((1,8),(4,5)),((2,7),(3,6)))\"\nExplanation: First round: (1, 8),(2, 7),(3, 6),(4, 5). Second round: ((1, 8),(4, 5)),((2, 7),(3, 6)). Third round: (((1, 8),(4, 5)),((2, 7),(3, 6))). Since the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).",
        "level": "Medium",
        "tags": [
            "array",
            "string",
            "pairing"
        ],
        "test_cases": {
            "inputs": [
                4,
                8,
                12,
                2,
                6,
                10,
                3,
                9,
                5,
                7,
                11,
                1
            ],
            "outputs": [
                "((1,4),(2,3))",
                "(((1,8),(4,5)),((2,7),(3,6)))",
                "((((1,12),(6,7)),((2,11),(5,8))),(((3,10),(4,9)),((1,12),(6,7))))",
                "((1,2))",
                "(((1,6),(3,4)),((2,5)))",
                "((((1,10),(6,7)),((3,8),(4,9))),(((2,11),(5,12)),((1,10),(6,7))))",
                "(((1,3),(2)))",
                "((((1,9),(5,6)),((2,8),(3,7))),(((4,10),(1,9)),((5,6),(2,8))))",
                "(((1,5),(2,4)),((3)))",
                "((((1,7),(4,5)),((2,6),(3))),(((1,7),(4,5)),((2,6),(3))))",
                "((((1,11),(6,7)),((3,8),(4,10))),(((2,9),(5,12)),((1,11),(6,7))))",
                "((1))"
            ]
        }
    },
    "545": null,
    "546": {
        "title": "Maximum Points from Boxes",
        "description": "You are given several `boxes` with different colors represented by different positive numbers. You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points. Return the maximum points you can get.",
        "example": "Example 1:\n\nInput: boxes = [1,3,2,2,2,3,4,3,1]\nOutput: 23\nExplanation:\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----> [1, 3, 3, 3, 1] (1*1=1 points) \n----> [1, 1] (3*3=9 points) \n----> [] (2*2=4 points)\n\nExample 2:\n\nInput: boxes = [1,1,1]\nOutput: 9\n\nExample 3:\n\nInput: boxes = [1]\nOutput: 1",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,2,2,2,3,4,3,1]",
                "[1,1,1]",
                "[1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,1,1,2,2,2,3,3,3]",
                "[1,2,3,4,5,1,2,3,4,5]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,4,3,2,1]",
                "[1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,4,3,2,1]"
            ],
            "outputs": [
                "23",
                "9",
                "1",
                "15",
                "15",
                "25",
                "27",
                "30",
                "100",
                "30",
                "36",
                "42",
                "49",
                "56",
                "64",
                "72",
                "81",
                "90",
                "100",
                "110"
            ]
        }
    },
    "547": {
        "title": "Number of Provinces",
        "description": "Given a matrix representing the connectivity between cities, determine the total number of provinces. A province is a group of directly or indirectly connected cities with no other cities outside the group.",
        "example": "Example:\n\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2\nExplanation: There are 2 provinces. City 0 and City 1 are directly connected, and City 2 is indirectly connected to itself.\n\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\nExplanation: There are 3 provinces. Each city is its own province.\n",
        "level": "Medium",
        "tags": [
            "Graph",
            "Connected Components"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        1
                    ],
                    [
                        0,
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1,
                        1
                    ]
                ]
            ],
            "outputs": [
                2,
                3,
                2,
                1,
                4,
                2,
                5,
                1,
                6,
                3
            ]
        }
    },
    "548": {
        "title": "Triplet Subarray Sum Equality",
        "description": "Given an integer array `nums` of length `n`, return `true` if there is a triplet `(i, j, k)` which satisfies the following conditions:\n\n*   `0 < i, i + 1 < j, j + 1 < k < n - 1`\n*   The sum of subarrays `(0, i - 1)`, `(i + 1, j - 1)`, `(j + 1, k - 1)` and `(k + 1, n - 1)` is equal.\n\nA subarray `(l, r)` represents a slice of the original array starting from the element indexed `l` to the element indexed `r`.",
        "example": "Example:\n\nInput: nums = [1,2,1,2,1,2,1]\nOutput: true\nExplanation:\ni = 1, j = 3, k = 5.\nsum(0, i - 1) = sum(0, 0) = 1\nsum(i + 1, j - 1) = sum(2, 2) = 1\nsum(j + 1, k - 1) = sum(4, 4) = 1\nsum(k + 1, n - 1) = sum(6, 6) = 1",
        "level": "Medium",
        "tags": [
            "array",
            "subarray",
            "sum"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    1,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    1,
                    2,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13
                ],
                [
                    2,
                    5,
                    8,
                    11,
                    14,
                    17,
                    20
                ],
                [
                    1,
                    4,
                    7,
                    10,
                    13,
                    16,
                    19
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "549": {
        "title": "Longest Consecutive Path in Binary Tree",
        "description": "Given the `root` of a binary tree, you need to find the length of the longest consecutive path in the tree. A consecutive path is a path where the values of the consecutive nodes in the path differ by one. This path can be either increasing or decreasing. For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid. On the other hand, the path can be in the child-Parent-child order, where it does not necessarily have to be in parent-child order.",
        "example": "Example:\n\nInput: root = [1,2,3]\nOutput: 2\nExplanation: The longest consecutive path is [1, 2] or [2, 1].",
        "level": "Medium",
        "tags": [
            "binary tree",
            "consecutive path",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[2,1,3]",
                "[1,3,2,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,6,7,8,9]",
                "[1]",
                "[1,2]",
                "[2,1]",
                "[1,null,2,3,4,null,null,5]"
            ],
            "outputs": [
                "2",
                "3",
                "3",
                "5",
                "5",
                "5",
                "1",
                "2",
                "2",
                "3"
            ]
        }
    },
    "551": {
        "title": "Attendance Award Eligibility",
        "description": "You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n*   `A`: Absent.\n*   `L`: Late.\n*   `P`: Present.\n\nThe student is eligible for an attendance award if they meet **both** of the following criteria:\n\n*   The student was absent (`A`) for **strictly** fewer than 2 days **total**.\n*   The student was **never** late (`L`) for 3 or more **consecutive** days.\n\nReturn `true` if the student is eligible for an attendance award, or `false` otherwise.",
        "example": "Example:\n\nInput: s =  \"PPALLP \"\nOutput: true\nExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.",
        "level": "Easy",
        "tags": [
            "string",
            "conditionals"
        ],
        "test_cases": {
            "inputs": [
                "\"PPALLP \"",
                "\"PPALLL \"",
                "\"PAPALP \"",
                "\"PAPALPL \"",
                "\"PAPALPLP \"",
                "\"PAPALPLLP \"",
                "\"PAPALPLLL \"",
                "\"PAPALPLLLL \"",
                "\"PAPALPLLLLL \"",
                "\"PAPALPLLLLLL \"",
                "\"PAPALPLLLLLLL \"",
                "\"PAPALPLLLLLLLL \"",
                "\"PAPALPLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLLLLLLL \"",
                "\"PAPALPLLLLLLLLLLLLLLLL \""
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "552": {
        "title": "Attendance Award Eligibility",
        "description": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n*   'A': Absent.\n*   'L': Late.\n*   'P': Present.\n\nAny student is eligible for an attendance award if they meet both of the following criteria:\n\n*   The student was absent ('A') for strictly fewer than 2 days total.\n*   The student was never late ('L') for 3 or more consecutive days.\n\nGiven an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.",
        "example": "Example:\n\nInput:\n\nn = 2\n\nOutput:\n\n8\n\nExplanation:\n\nThere are 8 records with length 2 that are eligible for an award:\n\n\"PP \",  \"AP \",  \"PA \",  \"LP \",  \"PL \",  \"AL \",  \"LA \",  \"LL \"\n\nOnly  \"AA \" is not eligible because there are 2 absences (there need to be fewer than 2).",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                2,
                1,
                10101,
                5,
                10,
                15,
                20,
                50,
                100,
                1000,
                10000,
                50000,
                100000,
                105,
                1000000,
                10000000,
                100000000,
                1000000000,
                10000000000,
                100000000000
            ],
            "outputs": [
                8,
                3,
                183236316,
                19,
                76,
                315,
                1296,
                316290802,
                646108792,
                703030049,
                457992974,
                782204094,
                682289015,
                682289015,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "553": null,
    "554": null,
    "555": {
        "title": "Lexicographically Largest Regular String",
        "description": "Given an array of strings `strs`, you can concatenate these strings together into a loop, where for each string, you can choose to reverse it or not. Among all the possible loops, your task is to find the lexicographically largest string after cutting the loop, which will make the looped string into a regular one. Specifically, you need to concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given. Then, you need to cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. Finally, find the lexicographically largest regular string among all the possible regular strings.",
        "example": "Example:\n\nInput: strs = [\"abc \", \"xyz \"]\nOutput: \"zyxcba \"\nExplanation: You can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", where '-' represents the looped status. The answer string came from the fourth looped one, where you could cut from the middle character 'a' and get \"zyxcba\".",
        "level": "Medium",
        "tags": [
            "string",
            "loop",
            "lexicographically"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abc ",
                    "xyz "
                ],
                [
                    "abc "
                ],
                [
                    "hello ",
                    "world "
                ],
                [
                    "coding ",
                    "questions ",
                    "are ",
                    "fun "
                ],
                [
                    "a ",
                    "b ",
                    "c ",
                    "d ",
                    "e ",
                    "f ",
                    "g ",
                    "h ",
                    "i ",
                    "j ",
                    "k ",
                    "l ",
                    "m ",
                    "n ",
                    "o ",
                    "p ",
                    "q ",
                    "r ",
                    "s ",
                    "t ",
                    "u ",
                    "v ",
                    "w ",
                    "x ",
                    "y ",
                    "z "
                ]
            ],
            "outputs": [
                "zyxcba ",
                "cba ",
                "worldhello ",
                "utsnoinuqgnidoc ",
                "zyxwvutsrqponmlkjihgfedcba "
            ]
        }
    },
    "556": {
        "title": "Next Greater Number with Same Digits",
        "description": "Given a positive integer `n`, find the smallest integer which has exactly the same digits as the integer `n` and is greater in value than `n`. If no such positive integer exists, return `-1`. The returned integer should fit in a 32-bit integer. If there is a valid answer but it does not fit in a 32-bit integer, return `-1`.",
        "example": "Example:\n\nInput: n = 12\nOutput: 21\n\nExplanation: The next greater number with the same digits as 12 is 21.\n\nInput: n = 21\nOutput: -1\n\nExplanation: There is no positive integer greater than 21 with the same digits.",
        "level": "Medium",
        "tags": [
            "Math",
            "Number Theory"
        ],
        "test_cases": {
            "inputs": [
                12,
                21,
                123,
                321,
                111,
                1234,
                4321,
                987654321,
                123456789,
                987654312,
                9876543210,
                98765432100,
                987654321000,
                9876543210000,
                98765432100000,
                987654321000000,
                9876543210000000,
                98765432100000000,
                987654321000000000,
                9876543210000000000
            ],
            "outputs": [
                21,
                -1,
                132,
                -1,
                -1,
                1243,
                -1,
                -1,
                123456798,
                987654123,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            ]
        }
    },
    "557": {
        "title": "Reverse Words in a String III",
        "description": "Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
        "example": "Example 1:\n\nInput: s = \"Let`s take LeetCode contest\"\nOutput: \"s`teL ekat edoCteeL tsetnoc\"\n\nExample 2:\n\nInput: s = \"God Ding\"\nOutput: \"doG gniD\"",
        "level": "Easy",
        "tags": [
            "string",
            "reverse"
        ],
        "test_cases": {
            "inputs": [
                "\"Let`s take LeetCode contest\"",
                "\"God Ding\"",
                "\"Hello World\"",
                "\"I am a programmer\"",
                "\"This is a test\"",
                "\"Coding is fun\"",
                "\"Reverse this string\"",
                "\"Keep it simple\"",
                "\"Race car\"",
                "\"Palindrome\"",
                "\"123 456 789\"",
                "\"!@#$%^&*()\"",
                "\"Hello, World!\"",
                "\"I love coding!\"",
                "\"This is a sentence.\"",
                "\"Reverse the words.\"",
                "\"Programming is awesome.\"",
                "\"12345 67890\"",
                "\"!@#$ %^&*()\"",
                "\"Hello_World\"",
                "\"I_am_a_programmer\""
            ],
            "outputs": [
                "\"s`teL ekat edoCteeL tsetnoc\"",
                "\"doG gniD\"",
                "\"olleH dlroW\"",
                "\"I ma a remmargorp\"",
                "\"sihT si a tset\"",
                "\"gnidoC si nuf\"",
                "\"esrever siht gnirts\"",
                "\"peeK ti elpmis\"",
                "\"ecaR rac\"",
                "\"emordnilaP\"",
                "\"321 654 987\"",
                "\"!@#$%^&*()\"",
                "\"olleH, dlroW!\"",
                "\"I evol !gnidoc\"",
                "\"sihT si a .ecnetnes\"",
                "\"esreveR eht sdrow.\"",
                "\"gnimmargorP si emosewa.\"",
                "\"54321 09876\"",
                "\"!@#$ %^&*()\"",
                "\"dlroW_olleH\"",
                "\"I_ma_a_remmergorp\""
            ]
        }
    },
    "558": {
        "title": "Quad-Tree Binary Matrix OR",
        "description": "Given two Quad-Trees `quadTree1` and `quadTree2`, where each Quad-Tree represents a `n * n` binary matrix, return a Quad-Tree representing the logical bitwise OR of the two binary matrices.",
        "example": "Example 1:\n\nInput: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]], quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree. If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree. Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n\nExample 2:\n\nInput: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\nOutput: [[1,0]]\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero. The resulting matrix is of size 1*1 with also zero.",
        "level": "Medium",
        "tags": [
            "Quad-Tree",
            "Binary Matrix",
            "Logical Bitwise OR"
        ],
        "test_cases": {
            "inputs": [
                "[[0,1],[1,1],[1,1],[1,0],[1,0]]",
                "[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
                "[[1,0]]",
                "[[1,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,0],[0,1]]",
                "[[0,1],[1,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,0],[0,1]]",
                "[[0,1],[1,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]"
            ],
            "outputs": [
                "[[0,0],[1,1],[1,1],[1,1],[1,0]]",
                "[[0,0],[1,1],[1,1],[1,1],[1,0]]",
                "[[1,0]]",
                "[[1,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1]]",
                "[[1,1],[1,1]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1]]",
                "[[1,1],[1,1]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]",
                "[[1,1],[1,1],[1,1],[1,1]]",
                "[[0,0],[0,0],[0,0],[0,0]]"
            ]
        }
    },
    "559": {
        "title": "Maximum Depth of N-ary Tree",
        "description": "Given an N-ary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. The N-ary tree input serialization is represented in level order traversal, where each group of children is separated by the null value.",
        "example": "Example:\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: 3\n\nExplanation: The tree has a maximum depth of 3. The longest path from the root node (1) to a leaf node is 1 -> 3 -> 5.",
        "level": "Easy",
        "tags": [
            "Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,3,2,4,null,5,6]",
                "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32,null,33,null,34,null,35,null,36,null,37,null,38,null,39,null,40,null,41,null,42,null,43,null,44,null,45,null,46,null,47,null,48,null,49,null,50,null,51,null,52,null,53,null,54,null,55,null,56,null,57,null,58,null,59,null,60,null,61,null,62,null,63,null,64,null,65,null,66,null,67,null,68,null,69,null,70,null,71,null,72,null,73,null,74,null,75,null,76,null,77,null,78,null,79,null,80,null,81,null,82,null,83,null,84,null,85,null,86,null,87,null,88,null,89,null,90,null,91,null,92,null,93,null,94,null,95,null,96,null,97,null,98,null,99,null,100,null,101,null,102,null,103,null,104,null,105,null,106,null,107,null,108,null,109,null,110,null,111,null,112,null,113,null,114,null,115,null,116,null,117,null,118,null,119,null,120,null,121,null,122,null,123,null,124,null,125,null,126,null,127,null,128,null,129,null,130,null,131,null,132,null,133,null,134,null,135,null,136,null,137,null,138,null,139,null,140,null,141,null,142,null,143,null,144,null,145,null,146,null,147,null,148,null,149,null,150,null,151,null,152,null,153,null,154,null,155,null,156,null,157,null,158,null,159,null,160,null,161,null,162,null,163,null,164,null,165,null,166,null,167,null,168,null,169,null,170,null,171,null,172,null,173,null,174,null,175,null,176,null,177,null,178,null,179,null,180,null,181,null,182,null,183,null,184,null,185,null,186,null,187,null,188,null,189,null,190,null,191,null,192,null,193,null,194,null,195,null,196,null,197,null,198,null,199,null,200,null,201,null,202,null,203,null,204,null,205,null,206,null,207,null,208,null,209,null,210,null,211,null,212,null,213,null,214,null,215,null,216,null,217,null,218,null,219,null,220,null,221,null,222,null,223,null,224,null,225,null,226,null,227,null,228,null,229,null,230,null,231,null,232,null,233,null,234,null,235,null,236,null,237,null,238,null,239,null,240,null,241,null,242,null,243,null,244,null,245,null,246,null,247,null,248,null,249,null,250,null,251,null,252,null,253,null,254,null,255,null,256,null,257,null,258,null,259,null,260,null,261,null,262,null,263,null,264,null,265,null,266,null,267,null,268,null,269,null,270,null,271,null,272,null,273,null,274,null,275,null,276,null,277,null,278,null,279,null,280,null,281,null,282,null,283,null,284,null,285,null,286,null,287,null,288,null,289,null,290,null,291,null,292,null,293,null,294,null,295,null,296,null,297,null,298,null,299,null,300,null,301,null,302,null,303,null,304,null,305,null,306,null,307,null,308,null,309,null,310,null,311,null,312,null,313,null,314,null,315,null,316,null,317,null,318,null,319,null,320,null,321,null,322,null,323,null,324,null,325,null,326,null,327,null,328,null,329,null,330,null,331,null,332,null,333,null,334,null,335,null,336,null,337,null,338,null,339,null,340,null,341,null,342,null,343,null,344,null,345,null,346,null,347,null,348,null,349,null,350,null,351,null,352,null,353,null,354,null,355,null,356,null,357,null,358,null,359,null,360,null,361,null,362,null,363,null,364,null,365,null,366,null,367,null,368,null,369,null,370,null,371,null,372,null,373,null,374,null,375,null,376,null,377,null,378,null,379,null,380,null,381,null,382,null,383,null,384,null,385,null,386,null,387,null,388,null,389,null,390,null,391,null,392,null,393,null,394,null,395,null,396,null,397,null,398,null,399,null,400,null,401,null,402,null,403,null,404,null,405,null,406,null,407,null,408,null,409,null,410,null,411,null,412,null,413,null,414,null,415,null,416,null,417,null,418,null,419,null,420,null,421,null,422,null,423,null,424,null,425,null,426,null,427,null,428,null,429,null,430,null,431,null,432,null,433,null,434,null,435,null,436,null,437,null,438,null,439,null,440,null,441,null,442,null,443,null,444,null,445,null,446,null,447,null,448,null,449,null,450,null,451,null,452,null,453,null,454,null,455,null,456,null,457,null,458,null,459,null,460,null,461,null,462,null,463,null,464,null,465,null,466,null,467,null,468,null,469,null,470,null,471,null,472,null,473,null,474,null,475,null,476,null,477,null,478,null,479,null,480,null,481,null,482,null,483,null,484,null,485,null,486,null,487,null,488,null,489,null,490,null,491,null,492,null,493,null,494,null,495,null,496,null,497,null,498,null,499,null,500,null,501,null,502,null,503,null,504,null,505,null,506,null,507,null,508,null,509,null,510,null,511,null,512,null,513,null,514,null,515,null,516,null,517,null,518,null,519,null,520,null,521,null,522,null,523,null,524,null,525,null,526,null,527,null,528,null,529,null,530,null,531,null,532,null,533,null,534,null,535,null,536,null,537,null,538,null,539,null,540,null,541,null,542,null,543,null,544,null,545,null,546,null,547,null,548,null,549,null,550,null,551,null,552,null,553,null,554,null,555,null,556,null,557,null,558,null,559,null,560,null,561,null,562,null,563,null,564,null,565,null,566,null,567,null,568,null,569,null,570,null,571,null,572,null,573,null,574,null,575,null,576,null,577,null,578,null,579,null,580,null,581,null,582,null,583,null,584,null,585,null,586,null,587,null,588,null,589,null,590,null,591,null,592,null,593,null,594,null,595,null,596,null,597,null,598,null,599,null,600,null,601,null,602,null,603,null,604,null,605,null,606,null,607,null,608,null,609,null,610,null,611,null,612,null,613,null,614,null,615,null,616,null,617,null,618,null,619,null,620,null,621,null,622,null,623,null,624,null,625,null,626,null,627,null,628,null,629,null,630,null,631,null,632,null,633,null,634,null,635,null,636,null,637,null,638,null,639,null,640,null,641,null,642,null,643,null,644,null,645,null,646,null,647,null,648,null,649,null,650,null,651,null,652,null,653,null,654,null,655,null,656,null,657,null,658,null,659,null,660,null,661,null,662,null,663,null,664,null,665,null,666,null,667,null,668,null,669,null,670,null,671,null,672,null,673,null,674,null,675,null,676,null,677,null,678,null,679,null,680,null,681,null,682,null,683,null,684,null,685,null,686,null,687,null,688,null,689,null,690,null,691,null,692,null,693,null,694,null,695,null,696,null,697,null,698,null,699,null,700,null,701,null,702,null,703,null,704,null,705,null,706,null,707,null,708,null,709,null,710,null,711,null,712,null,713,null,714,null,715,null,716,null,717,null,718,null,719,null,720,null,721,null,722,null,723,null,724,null,725,null,726,null,727,null,728,null,729,null,730,null,731,null,732,null,733,null,734,null,735,null,736,null,737,null,738,null,739,null,740,null,741,null,742,null,743,null,744,null,745,null,746,null,747,null,748,null,749,null,750,null,751,null,752,null,753,null,754,null,755,null,756,null,757,null,758,null,759,null,760,null,761,null,762,null,763,null,764,null,765,null,766,null,767,null,768,null,769,null,770,null,771,null,772,null,773,null,774,null,775,null,776,null,777,null,778,null,779,null,780,null,781,null,782,null,783,null,784,null,785,null,786,null,787,null,788,null,789,null,790,null,791,null,792,null,793,null,794,null,795,null,796,null,797,null,798,null,799,null,800,null,801,null,802,null,803,null,804,null,805,null,806,null,807,null,808,null,809,null,810,null,811,null,812,null,813,null,814,null,815,null,816,null,817,null,818,null,819,null,820,null,821,null,822,null,823,null,824,null,825,null,826,null,827,null,828,null,829,null,830,null,831,null,832,null,833,null,834,null,835,null,836,null,837,null,838,null,839,null,840,null,841,null,842,null,843,null,844,null,845,null,846,null,847,null,848,null,849,null,850,null,851,null,852,null,853,null,854,null,855,null,856,null,857,null,858,null,859,null,860,null,861,null,862,null,863,null,864,null,865,null,866,null,867,null,868,null,869,null,870,null,871,null,872,null,873,null,874,null,875,null,876,null,877,null,878,null,879,null,880,null,881,null,882,null,883,null,884,null,885,null,886,null,887,null,888,null,889,null,890,null,891,null,892,null,893,null,894,null,895,null,896,null,897,null,898,null,899,null,900,null,901,null,902,null,903,null,904,null,905,null,906,null,907,null,908,null,909,null,910,null,911,null,912,null,913,null,914,null,915,null,916,null,917,null,918,null,919,null,920,null,921,null,922,null,923,null,924,null,925,null,926,null,927,null,928,null,929,null,930,null,931,null,932,null,933,null,934,null,935,null,936,null,937,null,938,null,939,null,940,null,941,null,942,null,943,null,944,null,945,null,946,null,947,null,948,null,949,null,950,null,951,null,952,null,953,null,954,null,955,null,956,null,957,null,958,null,959,null,960,null,961,null,962,null,963,null,964,null,965,null,966,null,967,null,968,null,969,null,970,null,971,null,972,null,973,null,974,null,975,null,976,null,977,null,978,null,979,null,980,null,981,null,982,null,983,null,984,null,985,null,986,null,987,null,988,null,989,null,990,null,991,null,992,null,993,null,994,null,995,null,996,null,997,null,998,null,999,null,1000]"
            ],
            "outputs": [
                "3",
                "5",
                "1000"
            ]
        }
    },
    "560": {
        "title": "Subarray Sum Equals K",
        "description": "Given an array of integers `nums` and an integer `k`, return the total number of subarrays whose sum equals to `k`. A subarray is a contiguous non-empty sequence of elements within an array.",
        "example": "Example:\n\nInput: nums = [1,1,1], k = 2\nOutput: 2\n\nExplanation: The subarrays with sum equal to 2 are [1,1] and [1,1].\n\nInput: nums = [1,2,3], k = 3\nOutput: 2\n\nExplanation: The subarrays with sum equal to 3 are [1,2] and [3].",
        "level": "Medium",
        "tags": [
            "array",
            "prefix sum",
            "hashmap"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        1,
                        1,
                        1
                    ],
                    "k": 2
                },
                {
                    "nums": [
                        1,
                        2,
                        3
                    ],
                    "k": 3
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 9
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 10
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 15
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 20
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 25
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 30
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 35
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 40
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 45
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 50
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 55
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 60
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 65
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 70
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 75
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 80
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 85
                }
            ],
            "outputs": [
                2,
                2,
                2,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    }
}