{
    "1": {
        "title": "Two Sum",
        "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
        "example": "Given an array nums = [2,7,11,15] and target = 9, the output should be [0,1] because nums[0] + nums[1] = 2 + 7 = 9.",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        2,
                        7,
                        11,
                        15
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        3,
                        2,
                        4
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        3,
                        3
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "target": 70
                },
                {
                    "nums": [
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "target": 0
                },
                {
                    "nums": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5
                    ],
                    "target": -8
                },
                {
                    "nums": [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    "target": 600
                },
                {
                    "nums": [
                        1,
                        3,
                        5,
                        7,
                        9
                    ],
                    "target": 12
                },
                {
                    "nums": [
                        2,
                        4,
                        6,
                        8,
                        10
                    ],
                    "target": 14
                },
                {
                    "nums": [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    "target": 14
                },
                {
                    "nums": [
                        5,
                        10,
                        15,
                        20,
                        25
                    ],
                    "target": 30
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "target": 2
                },
                {
                    "nums": [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    "target": 4
                },
                {
                    "nums": [
                        3,
                        6,
                        9,
                        12,
                        15
                    ],
                    "target": 18
                },
                {
                    "nums": [
                        4,
                        8,
                        12,
                        16,
                        20
                    ],
                    "target": 24
                },
                {
                    "nums": [
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "target": 10
                },
                {
                    "nums": [
                        6,
                        12,
                        18,
                        24,
                        30
                    ],
                    "target": 36
                },
                {
                    "nums": [
                        7,
                        14,
                        21,
                        28,
                        35
                    ],
                    "target": 42
                },
                {
                    "nums": [
                        8,
                        16,
                        24,
                        32,
                        40
                    ],
                    "target": 48
                }
            ],
            "outputs": [
                [
                    0,
                    1
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    2
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    2
                ],
                [
                    1,
                    3
                ]
            ]
        }
    },
    "3": {
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
        "example": "Example 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "\"abcabcbb\"",
                "\"bbbbb\"",
                "\"pwwkew\"",
                "\"\"",
                "\"a\"",
                "\"abcdefg\"",
                "\"aab\"",
                "\"abb\"",
                "\"abcabcabc\"",
                "\"abcdeffghijklmnopqrstuvwxyz\""
            ],
            "outputs": [
                "3",
                "1",
                "3",
                "0",
                "1",
                "7",
                "2",
                "2",
                "3",
                "26"
            ]
        }
    },
    "4": {
        "title": "Median of Two Sorted Arrays",
        "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
        "example": "Given nums1 = [1,3] and nums2 = [2], the merged array is [1,2,3] and the median is 2.0.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums1": [
                        1,
                        3
                    ],
                    "nums2": [
                        2
                    ]
                },
                {
                    "nums1": [
                        1,
                        2
                    ],
                    "nums2": [
                        3,
                        4
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        5,
                        9
                    ],
                    "nums2": [
                        3,
                        4,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "nums2": [
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "nums2": [
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "nums2": [
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "nums2": [
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "nums2": [
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "nums2": [
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "nums2": [
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "nums2": [
                        9,
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "nums2": [
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "nums2": [
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "nums2": [
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "nums2": [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    "nums2": [
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    "nums2": [
                        12,
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "nums2": [
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "nums2": [
                        13,
                        14,
                        15,
                        16,
                        17,
                        18
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "nums2": [
                        14,
                        15,
                        16,
                        17,
                        18
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "nums2": [
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ]
                }
            ],
            "outputs": [
                2.0,
                2.5,
                5.5,
                5.5,
                6.0,
                6.0,
                6.5,
                6.5,
                7.0,
                7.0,
                7.5,
                7.5,
                8.0,
                8.0,
                8.5,
                8.5,
                9.0,
                9.0,
                9.5,
                9.5
            ]
        }
    },
    "6": {
        "title": "Zigzag Conversion",
        "description": "The string `PAYPALISHIRING` is written in a zigzag pattern on a given number of rows. Write a function `convert` that takes a string and the number of rows and returns the string in the zigzag pattern.",
        "example": "Example 1:\n\nInput: s = `PAYPALISHIRING`, numRows = 3\nOutput: `PAHNAPLSIIGYIR`\n\nExample 2:\n\nInput: s = `PAYPALISHIRING`, numRows = 4\nOutput: `PINALSIGYAHRPI`\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\nExample 3:\n\nInput: s = `A`, numRows = 1\nOutput: `A`",
        "level": "Medium",
        "tags": [
            "string",
            "pattern"
        ],
        "test_cases": {
            "inputs": [
                "`PAYPALISHIRING`",
                "`PAYPALISHIRING`",
                "`A`",
                "`HELLO`",
                "`WORLD`",
                "`ZIGZAG`",
                "`CONVERSION`",
                "`CODING`",
                "`QUESTION`",
                "`EXAMPLE`",
                "`TEST`",
                "`CASES`",
                "`ZIGZAGCONVERSION`",
                "`STRING`",
                "`PATTERN`",
                "`ALGORITHM`",
                "`PROGRAMMING`",
                "`CHALLENGE`",
                "`SOLUTION`",
                "`LEETCODE`"
            ],
            "outputs": [
                "`PAHNAPLSIIGYIR`",
                "`PINALSIGYAHRPI`",
                "`A`",
                "`HLOEL`",
                "`WDLRO`",
                "`ZGZAI`",
                "`CNOIOTVN`",
                "`CIGDNO`",
                "`QETNUSO`",
                "`EPEXMLA`",
                "`TSET`",
                "`SECA`",
                "`ZGZAIOTNNOVC`",
                "`SRTNI`",
                "`PTNREA`",
                "`AOLGMRITHM`",
                "`PORMGAMRIN`",
                "`CEGELLNAH`",
                "`NIOITULOS`",
                "`ETACODEEL`"
            ]
        }
    },
    "7": {
        "title": "Reverse Integer",
        "description": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "example": "Example 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21",
        "level": "Easy",
        "tags": [
            "Math"
        ],
        "test_cases": {
            "inputs": [
                123,
                -123,
                120,
                0,
                1,
                -1,
                10,
                -10,
                100,
                -100,
                123456789,
                -123456789,
                2147483647,
                -2147483648,
                2147483646,
                -2147483647,
                1534236469,
                -2147483412,
                0,
                987654321
            ],
            "outputs": [
                321,
                -321,
                21,
                0,
                1,
                -1,
                1,
                -1,
                1,
                -1,
                987654321,
                -987654321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                123456789
            ]
        }
    },
    "9": {
        "title": "Palindrome Integer",
        "description": "Given an integer `x`, determine if it is a palindrome. Return `true` if `x` is a palindrome, and `false` otherwise.",
        "example": "Example 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.",
        "level": "Easy",
        "tags": [
            "math"
        ],
        "test_cases": {
            "inputs": [
                121,
                -121,
                10,
                12321,
                1234321,
                123454321,
                12345654321,
                123456654321,
                1234567654321,
                12345677654321,
                123456787654321,
                1234567887654321,
                12345678987654321,
                123456789987654321,
                1234567890987654321,
                12345678900987654321,
                123456789000987654321,
                1234567890000987654321,
                12345678900000987654321,
                123456789000000987654321
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "2": {
        "title": "Add Two Numbers as Linked Lists",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "example": "Example:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
        "level": "Medium",
        "tags": [
            "linked list",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[2,4,3]",
                "[5,6,4]",
                "[0]",
                "[0]",
                "[9,9,9,9,9,9,9]",
                "[9,9,9,9]"
            ],
            "outputs": [
                "[7,0,8]",
                "[0]",
                "[8,9,9,9,0,0,0,1]"
            ]
        }
    },
    "5": {
        "title": "Longest Palindromic Substring",
        "description": "Given a string `s`, find and return the longest palindromic substring in `s`. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them.",
        "example": "Example 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "\"babad\"",
                "\"cbbd\"",
                "\"a\"",
                "\"ac\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcbafg\"",
                "\"abcdefedcbagf\"",
                "\"abacdfgdcaba\"",
                "\"abacdfgdcabba\"",
                "\"abacdfgdcabbaa\"",
                "\"abacdfgdcabbaaa\"",
                "\"abacdfgdcabbaaaa\"",
                "\"abacdfgdcabbaaaaa\"",
                "\"abacdfgdcabbaaaaaa\"",
                "\"abacdfgdcabbaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaaaa\""
            ],
            "outputs": [
                "\"bab\"",
                "\"bb\"",
                "\"a\"",
                "\"a\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"aba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\""
            ]
        }
    },
    "8": {
        "title": "String to Integer (atoi)",
        "description": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n1. Read in and ignore any leading whitespace.\n2. Check if the next character (if not already at the end of the string) is \"-\" or \"+\". Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e. \"123 \" -> 123, \"0032 \" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n5. If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n6. Return the integer as the final result.\n\n**Note:**\n\n- Only the space character \" \" is considered a whitespace character.\n- **Do not ignore** any characters other than the leading whitespace or the rest of the string after the digits.",
        "example": "Example 1:\n\nInput: s = \"42 \"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42 \" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42 \" (no characters read because there is neither a \"-\" nor \"+\")\n         ^\nStep 3: \"42 \" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\n\nExample 2:\n\nInput: s = \"   -42 \"\nOutput: -42\nExplanation: Step 1: \"   -42 \" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42 \" (\"-\" is read, so the result should be negative)\n             ^\nStep 3: \"   -42 \" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n\nExample 3:\n\nInput: s = \"4193 with words \"\nOutput: 4193\nExplanation: Step 1: \"4193 with words \" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words \" (no characters read because there is neither a \"-\" nor \"+\")\n         ^\nStep 3: \"4193 with words \" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing",
            "integer"
        ],
        "test_cases": {
            "inputs": [
                "\"42 \"",
                "\"   -42 \"",
                "\"4193 with words \"",
                "\"words and 987\"",
                "\"-91283472332\"",
                "\"3.14159\"",
                "\"-3.14159\"",
                "\"-1234567890123456789012345678901234567890\"",
                "\"1234567890123456789012345678901234567890\"",
                "\"\"",
                "\"0\"",
                "\"-\"",
                "\"+\"",
                "\"-0\"",
                "\"+0\"",
                "\"-123\"",
                "\"+123\"",
                "\"-000123\"",
                "\"+000123\"",
                "\"-000\"",
                "\"+000\""
            ],
            "outputs": [
                "42",
                "-42",
                "4193",
                "0",
                "-2147483648",
                "3",
                "-3",
                "-2147483648",
                "2147483647",
                "0",
                "0",
                "0",
                "0",
                "0",
                "-123",
                "123",
                "-123",
                "123",
                "0",
                "0"
            ]
        }
    },
    "10": {
        "title": "Regular Expression Matching",
        "description": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n*   `'.'` Matches any single character.\n*   `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).",
        "example": "Example:\n\nInput:\n\ns = \"aa \", p = \"a \"\nOutput:\nfalse\nExplanation:\n\"a \" does not match the entire string \"aa \".",
        "level": "Medium",
        "tags": [
            "string",
            "regular expression",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"aa \", \"a \"",
                "\"aa \", \"a* \"",
                "\"ab \", \".* \"",
                "\"abc \", \"a.c \"",
                "\"aab \", \"c*a*b \"",
                "\"mississippi \", \"mis*is*p*. \"",
                "\"aaa \", \"a*a \"",
                "\"aaa \", \"ab*a*c*a \"",
                "\"a \", \".*..a* \"",
                "\"a \", \"a*a \"",
                "\"a \", \"a* \"",
                "\"a \", \"a. \"",
                "\"a \", \"a.* \"",
                "\"a \", \"a.. \"",
                "\"a \", \"a... \"",
                "\"a \", \"a.... \"",
                "\"a \", \"a..... \"",
                "\"a \", \"a...... \"",
                "\"a \", \"a....... \"",
                "\"a \", \"a........ \""
            ],
            "outputs": [
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "11": {
        "title": "Container With Most Water",
        "description": "Given an integer array `height` of length `n`, where each element represents the height of a vertical line, find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water the container can store.",
        "example": "Example:\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers",
            "Greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    8,
                    6,
                    2,
                    5,
                    4,
                    8,
                    3,
                    7
                ],
                [
                    1,
                    1
                ],
                [
                    4,
                    3,
                    2,
                    1,
                    4
                ],
                [
                    1,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                49,
                1,
                16,
                2,
                6,
                4,
                4,
                25,
                25,
                100,
                100
            ]
        }
    },
    "12": {
        "title": "Convert Integer to Roman Numeral",
        "description": "Given an integer, convert it to a Roman numeral. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. The symbols and their corresponding values are as follows:\n\n`I` - 1\n`V` - 5\n`X` - 10\n`L` - 50\n`C` - 100\n`D` - 500\n`M` - 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used. For example, `IV` represents 4, `IX` represents 9, `XL` represents 40, `XC` represents 90, `CD` represents 400, and `CM` represents 900.\n\nWrite a function `convertToRoman` that takes an integer `num` as input and returns its Roman numeral representation as a string.",
        "example": "Example:\n\nInput:\nnum = 3\n\nOutput:\n\"III\"\n\nExplanation:\n3 is represented as 3 ones.\n\nInput:\nnum = 58\n\nOutput:\n\"LVIII\"\n\nExplanation:\nL = 50, V = 5, III = 3.\n\nInput:\nnum = 1994\n\nOutput:\n\"MCMXCIV\"\n\nExplanation:\nM = 1000, CM = 900, XC = 90, and IV = 4.",
        "level": "Medium",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                3,
                58,
                1994,
                4,
                9,
                40,
                90,
                400,
                900,
                3999,
                1,
                10,
                100,
                1000,
                399,
                444,
                555,
                666,
                777,
                888
            ],
            "outputs": [
                "III",
                "LVIII",
                "MCMXCIV",
                "IV",
                "IX",
                "XL",
                "XC",
                "CD",
                "CM",
                "MMMCMXCIX",
                "I",
                "X",
                "C",
                "M",
                "CCCXCIX",
                "CDXLIV",
                "DLV",
                "DCLXVI",
                "DCCLXXVII",
                "DCCCLXXXVIII"
            ]
        }
    },
    "13": {
        "title": "Roman Numeral to Integer Conversion",
        "description": "Given a Roman numeral, convert it to an integer. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. The symbols and their corresponding values are as follows: \n\n`I` - 1\n`V` - 5\n`X` - 10\n`L` - 50\n`C` - 100\n`D` - 500\n`M` - 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used. For example, `IV` represents 4 (5 - 1) and `IX` represents 9 (10 - 1). The goal is to convert the given Roman numeral into its corresponding integer value.",
        "example": "Example:\n\nInput: \"III\"\nOutput: 3\nExplanation: The Roman numeral \"III\" represents the number 3.\n\nInput: \"LVIII\"\nOutput: 58\nExplanation: The Roman numeral \"LVIII\" represents the number 58. It can be broken down as follows: L (50) + V (5) + III (3).\n\nInput: \"MCMXCIV\"\nOutput: 1994\nExplanation: The Roman numeral \"MCMXCIV\" represents the number 1994. It can be broken down as follows: M (1000) + CM (900) + XC (90) + IV (4).",
        "level": "Easy",
        "tags": [
            "String",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "\"III\"",
                "\"LVIII\"",
                "\"MCMXCIV\"",
                "\"IV\"",
                "\"IX\"",
                "\"XL\"",
                "\"XC\"",
                "\"CD\"",
                "\"CM\"",
                "\"XIV\"",
                "\"XXIX\"",
                "\"XLV\"",
                "\"XCIX\"",
                "\"CDXLIV\"",
                "\"CMXCIX\"",
                "\"MMMCMXCIX\"",
                "\"I\"",
                "\"V\"",
                "\"X\"",
                "\"L\"",
                "\"C\"",
                "\"D\"",
                "\"M\""
            ],
            "outputs": [
                "3",
                "58",
                "1994",
                "4",
                "9",
                "40",
                "90",
                "400",
                "900",
                "14",
                "29",
                "45",
                "99",
                "444",
                "999",
                "3999",
                "1",
                "5",
                "10",
                "50",
                "100",
                "500",
                "1000"
            ]
        }
    },
    "14": {
        "title": "Longest Common Prefix",
        "description": "Write a function that takes an array of strings and returns the longest common prefix string among them. If there is no common prefix, return an empty string.",
        "example": "For example, given the input strs = [\"flower\", \"flow\", \"flight\"], the output should be \"fl\". \n\nExplanation: The longest common prefix among the strings is \"fl\".\n\nGiven the input strs = [\"dog\", \"racecar\", \"car\"], the output should be an empty string. \n\nExplanation: There is no common prefix among the strings.",
        "level": "Easy",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "flower",
                    "flow",
                    "flight"
                ],
                [
                    "dog",
                    "racecar",
                    "car"
                ],
                [
                    "apple",
                    "app",
                    "application"
                ],
                [
                    "coding",
                    "code",
                    "coder"
                ],
                [
                    "hello",
                    "hell",
                    "help"
                ],
                [
                    "prefix",
                    "pre",
                    "preparation"
                ],
                [
                    "",
                    "abc",
                    "def"
                ],
                [
                    "",
                    "",
                    ""
                ],
                [
                    "abc",
                    "abc",
                    "abc"
                ],
                [
                    "abc",
                    "abcd",
                    "abcde"
                ],
                [
                    "abc",
                    "def",
                    "ghi"
                ],
                [
                    "abc",
                    "ab",
                    "a"
                ],
                [
                    "abc",
                    "ab",
                    "abc"
                ],
                [
                    "abc",
                    "ab",
                    "abcd"
                ],
                [
                    "abc",
                    "ab",
                    "abcde"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefgh"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghi"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghij"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghijk"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghijkl"
                ]
            ],
            "outputs": [
                "fl",
                "",
                "app",
                "cod",
                "hel",
                "pre",
                "",
                "",
                "abc",
                "abc",
                "",
                "a",
                "ab",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc"
            ]
        }
    },
    "15": {
        "title": "Triplets with Zero Sum",
        "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.",
        "example": "Example 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-1,0,1,2,-1,-4]",
                "[0,1,1]",
                "[0,0,0]",
                "[-2,0,1,1,2]",
                "[1,2,-2,-1]",
                "[3,0,-2,-1,1,2]",
                "[-1,-1,-1,0,0,0,1,1,1]",
                "[-1,0,1,2,-1,-4,5,6,7,8,9,10]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[1,1,1,1,1,1,1,1,1,1]"
            ],
            "outputs": [
                "[[-1,-1,2],[-1,0,1]]",
                "[]",
                "[[0,0,0]]",
                "[[-2,0,2],[-2,1,1]]",
                "[[-2,-1,3],[-2,0,2],[-1,0,1]]",
                "[[-2,-1,3],[-2,0,2],[-1,0,1]]",
                "[[-1,-1,2],[-1,0,1],[0,0,0]]",
                "[[-1,-1,2],[-1,0,1],[0,0,0]]",
                "[]",
                "[]",
                "[[0,0,0]]",
                "[]"
            ]
        }
    },
    "16": {
        "title": "Closest Three Sum",
        "description": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.",
        "example": "Example:\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-1,2,1,-4], 1",
                "[0,0,0], 1",
                "[1,2,3,4,5], 10",
                "[-10,-5,0,5,10], 0",
                "[1,1,1,1,1], 3",
                "[-1,-2,-3,-4,-5], -10",
                "[10,20,30,40,50], 100",
                "[0,0,0,0,0], 5",
                "[-1,-1,-1,-1,-1], -3",
                "[1,2,3,4,5], -10",
                "[1,2,3,4,5], 15",
                "[1,2,3,4,5], 6",
                "[1,2,3,4,5], 7",
                "[1,2,3,4,5], 8",
                "[1,2,3,4,5], 9",
                "[1,2,3,4,5], 10",
                "[1,2,3,4,5], 11",
                "[1,2,3,4,5], 12",
                "[1,2,3,4,5], 13"
            ],
            "outputs": [
                "2",
                "0",
                "9",
                "0",
                "3",
                "-9",
                "60",
                "0",
                "-3",
                "3",
                "15",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6"
            ]
        }
    },
    "17": {
        "title": "Letter Combinations of a Phone Number",
        "description": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
        "example": "Example:\n\n**Input:** digits = \"23\"\n**Output:** [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\n\n**Input:** digits = \"\"\n**Output:** []\n\n**Input:** digits = \"2\"\n**Output:** [\"a\", \"b\", \"c\"]",
        "level": "Medium",
        "tags": [
            "String",
            "Recursion",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"23\"",
                "\"\"",
                "\"2\"",
                "\"234\"",
                "\"567\"",
                "\"89\"",
                "\"999\"",
                "\"7777\"",
                "\"2222\"",
                "\"3333\"",
                "\"4444\"",
                "\"5555\"",
                "\"6666\"",
                "\"8888\"",
                "\"9999\"",
                "\"222\"",
                "\"333\"",
                "\"444\"",
                "\"555\"",
                "\"666\"",
                "\"777\"",
                "\"888\"",
                "\"999\"",
                "\"2222\"",
                "\"3333\"",
                "\"4444\"",
                "\"5555\"",
                "\"6666\"",
                "\"7777\"",
                "\"8888\"",
                "\"9999\""
            ],
            "outputs": [
                "[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]",
                "[]",
                "[\"a\", \"b\", \"c\"]",
                "[\"adg\", \"adh\", \"adi\", \"aeg\", \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\", \"bdg\", \"bdh\", \"bdi\", \"beg\", \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\", \"cdi\", \"ceg\", \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\"]",
                "[\"jm\", \"jn\", \"jo\", \"km\", \"kn\", \"ko\", \"lm\", \"ln\", \"lo\"]",
                "[\"tw\", \"tx\", \"ty\", \"uw\", \"ux\", \"uy\", \"vw\", \"vx\", \"vy\"]",
                "[\"w\", \"x\", \"y\", \"z\"]",
                "[\"aa\", \"ab\", \"ac\", \"ba\", \"bb\", \"bc\", \"ca\", \"cb\", \"cc\"]",
                "[\"aa\", \"ad\", \"ae\", \"af\", \"ba\", \"bd\", \"be\", \"bf\", \"ca\", \"cd\", \"ce\", \"cf\"]",
                "[\"dd\", \"de\", \"df\", \"ed\", \"ee\", \"ef\", \"fd\", \"fe\", \"ff\"]",
                "[\"gg\", \"gh\", \"gi\", \"hg\", \"hh\", \"hi\", \"ig\", \"ih\", \"ii\"]",
                "[\"jj\", \"jk\", \"jl\", \"kj\", \"kk\", \"kl\", \"lj\", \"lk\", \"ll\"]",
                "[\"pp\", \"pq\", \"pr\", \"ps\", \"qp\", \"qq\", \"qr\", \"qs\", \"rp\", \"rq\", \"rr\", \"rs\", \"sp\", \"sq\", \"sr\", \"ss\"]",
                "[\"tt\", \"tu\", \"tv\", \"ut\", \"uu\", \"uv\", \"vt\", \"vu\", \"vv\"]",
                "[\"ww\", \"wx\", \"wy\", \"wz\", \"xw\", \"xx\", \"xy\", \"xz\", \"yw\", \"yx\", \"yy\", \"yz\", \"zw\", \"zx\", \"zy\", \"zz\"]",
                "[\"aa\", \"ad\", \"ae\", \"af\", \"ba\", \"bd\", \"be\", \"bf\", \"ca\", \"cd\", \"ce\", \"cf\"]",
                "[\"dd\", \"de\", \"df\", \"ed\", \"ee\", \"ef\", \"fd\", \"fe\", \"ff\"]",
                "[\"gg\", \"gh\", \"gi\", \"hg\", \"hh\", \"hi\", \"ig\", \"ih\", \"ii\"]",
                "[\"jj\", \"jk\", \"jl\", \"kj\", \"kk\", \"kl\", \"lj\", \"lk\", \"ll\"]",
                "[\"pp\", \"pq\", \"pr\", \"ps\", \"qp\", \"qq\", \"qr\", \"qs\", \"rp\", \"rq\", \"rr\", \"rs\", \"sp\", \"sq\", \"sr\", \"ss\"]",
                "[\"tt\", \"tu\", \"tv\", \"ut\", \"uu\", \"uv\", \"vt\", \"vu\", \"vv\"]",
                "[\"ww\", \"wx\", \"wy\", \"wz\", \"xw\", \"xx\", \"xy\", \"xz\", \"yw\", \"yx\", \"yy\", \"yz\", \"zw\", \"zx\", \"zy\", \"zz\"]"
            ]
        }
    },
    "19": {
        "title": "Remove Nth Node From End of List",
        "description": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 2
                },
                {
                    "head": [
                        1
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": -1
                },
                {
                    "head": [],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 11
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 3
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 5
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 6
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 0
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 8
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 15
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 16
                }
            ],
            "outputs": [
                [
                    1,
                    2,
                    3,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ]
            ]
        }
    },
    "20": null,
    "21": {
        "title": "Merge Sorted Linked Lists",
        "description": "You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists into one sorted list by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
        "example": "Example 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]",
        "level": "Easy",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,4]",
                "[1,3,4]",
                "[]",
                "[]",
                "[]",
                "[0]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ],
            "outputs": [
                "[1,1,2,3,4,4]",
                "[]",
                "[0]",
                "[]",
                "[0]",
                "[0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]"
            ]
        }
    },
    "22": {
        "title": "Generate All Combinations of Well-Formed Parentheses",
        "description": "Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses. A well-formed parentheses string is defined as a string consisting of opening and closing parentheses '(' and ')', where each opening parenthesis must have a corresponding closing parenthesis and the parentheses pairs must be properly nested. Implement a function `generateParentheses(n: int) -> List[str]` that will take an integer `n` as input and return a list of all possible well-formed parentheses combinations.",
        "example": "Example:\n\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\nInput: n = 1\nOutput: [\"()\"]",
        "level": "Medium",
        "tags": [
            "Recursion",
            "Backtracking",
            "String"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                0
            ],
            "outputs": [
                [
                    "((()))",
                    "(()())",
                    "(())()",
                    "()(())",
                    "()()()"
                ],
                [
                    "()"
                ],
                [
                    "(())",
                    "()()"
                ],
                [
                    "(((())))",
                    "((()()))",
                    "((())())",
                    "((()))()",
                    "(()(()))",
                    "(()()())",
                    "(()())()",
                    "(())(())",
                    "(())()()",
                    "()((()))",
                    "()(()())",
                    "()(())()",
                    "()()(())",
                    "()()()()"
                ],
                []
            ]
        }
    },
    "23": null,
    "24": {
        "title": "Swap Adjacent Nodes in Linked List",
        "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list`s nodes (i.e., only nodes themselves may be changed).",
        "example": "Example:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nInput: head = []\nOutput: []\n\nInput: head = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "linked list",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ]
            ],
            "outputs": [
                [
                    2,
                    1,
                    4,
                    3
                ],
                [],
                [
                    1
                ],
                [
                    2,
                    1,
                    4,
                    3,
                    6,
                    5,
                    8,
                    7,
                    10,
                    9
                ],
                [
                    4,
                    2,
                    8,
                    6,
                    10
                ],
                [
                    3,
                    1,
                    7,
                    5,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    2,
                    1,
                    4,
                    3,
                    6,
                    5,
                    8,
                    7,
                    10,
                    9,
                    12,
                    11,
                    14,
                    13,
                    15
                ],
                [
                    10,
                    5,
                    20,
                    15,
                    30,
                    25,
                    40,
                    35,
                    50,
                    45
                ]
            ]
        }
    },
    "25": {
        "title": "Reverse Linked List in Groups of K",
        "description": "Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return the modified list. If the number of nodes is not a multiple of `k`, the left-out nodes should remain as they are. You may not alter the values in the list's nodes, only nodes themselves may be changed.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExplanation: The linked list is 1 -> 2 -> 3 -> 4 -> 5. We need to reverse the nodes in groups of 2. After reversing, the linked list becomes 2 -> 1 -> 4 -> 3 -> 5.\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\nExplanation: The linked list is 1 -> 2 -> 3 -> 4 -> 5. We need to reverse the nodes in groups of 3. After reversing, the linked list becomes 3 -> 2 -> 1 -> 4 -> 5.",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Reverse",
            "Grouping"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[2,1,4,3,5]",
                "[3,2,1,6,5,4,7,8,9,10]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,19,20]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,25]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58,63,62,61,66,65,64,69,68,67,72,71,70,75,74,73,78,77,76,81,80,79,84,83,82,87,86,85,90,89,88,93,92,91,96,95,94,99,98,97,100]"
            ]
        }
    },
    "26": null,
    "27": {
        "title": "Remove Elements and Count",
        "description": "Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` in-place. The order of the elements may be changed. Then return the number of elements in `nums` which are not equal to `val`.\n\nConsider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:\n\n- Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.\n- Return `k`.",
        "example": "Example:\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2\nExplanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores).",
        "level": "Easy",
        "tags": [
            "array",
            "in-place"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,2,3]",
                "[0,1,2,2,3,0,4,2]",
                "[1,1,1,1,1]",
                "[5,5,5,5,5,5,5,5]",
                "[2,4,6,8,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[]"
            ],
            "outputs": [
                "2",
                "5",
                "0",
                "0",
                "5",
                "10",
                "0"
            ]
        }
    },
    "28": {
        "title": "First Occurrence of Needle in Haystack",
        "description": "Given two strings `needle` and `haystack`, find the index of the first occurrence of `needle` in `haystack`. If `needle` is not part of `haystack`, return -1.",
        "example": "Example:\n\nInput: haystack = \"sadbutsad \", needle = \"sad \"\nOutput: 0\nExplanation: \"sad \" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0.",
        "level": "Easy",
        "tags": [
            "string",
            "search"
        ],
        "test_cases": {
            "inputs": [
                "\"sadbutsad \", \"sad \"",
                "\"leetcode \", \"leeto \"",
                "\"hello world\", \"world\"",
                "\"programming\", \"gram\"",
                "\"abcdefg\", \"xyz\"",
                "\"abcabcabc\", \"abc\"",
                "\"abcde\", \"f\"",
                "\"abcde\", \"\"",
                "\"\", \"abc\"",
                "\"\", \"\"",
                "\"abc\", \"abc\"",
                "\"abc\", \"abcd\"",
                "\"abcd\", \"abc\"",
                "\"abcd\", \"efg\"",
                "\"abcdefg\", \"\"",
                "\"\", \"abcdefg\"",
                "\"abc\", \"abcabcabc\"",
                "\"abcabcabc\", \"abc\"",
                "\"abcabcabc\", \"def\"",
                "\"abcabcabc\", \"abcabcabc\""
            ],
            "outputs": [
                "0",
                "-1",
                "6",
                "3",
                "-1",
                "0",
                "-1",
                "0",
                "-1",
                "0",
                "0",
                "-1",
                "-1",
                "0",
                "-1",
                "-1",
                "0",
                "-1",
                "-1",
                "0"
            ]
        }
    },
    "29": {
        "title": "Integer Division without Using Multiplication, Division, and Mod Operator",
        "description": "Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator. The integer division should truncate toward zero, which means losing its fractional part. Return the quotient after dividing `dividend` by `divisor`. If the quotient is greater than 231 - 1, return 231 - 1. If the quotient is less than -231, return -231.",
        "example": "Example:\n\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.",
        "level": "Medium",
        "tags": [
            "Math",
            "Bit Manipulation"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    3
                ],
                [
                    7,
                    -3
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    100,
                    10
                ],
                [
                    100,
                    -10
                ],
                [
                    123456789,
                    987654321
                ],
                [
                    -123456789,
                    987654321
                ],
                [
                    2147483647,
                    1
                ],
                [
                    2147483647,
                    -1
                ],
                [
                    -2147483648,
                    1
                ],
                [
                    -2147483648,
                    -1
                ],
                [
                    2147483647,
                    2
                ],
                [
                    2147483647,
                    -2
                ],
                [
                    -2147483648,
                    2
                ],
                [
                    -2147483648,
                    -2
                ],
                [
                    2147483647,
                    2147483647
                ],
                [
                    2147483647,
                    -2147483647
                ],
                [
                    -2147483648,
                    2147483647
                ],
                [
                    -2147483648,
                    -2147483647
                ]
            ],
            "outputs": [
                3,
                -2,
                0,
                1,
                10,
                -10,
                0,
                0,
                2147483647,
                -2147483648,
                -2147483648,
                2147483647,
                1073741823,
                -1073741824,
                -1073741824,
                1073741823,
                1,
                -1,
                -1,
                1
            ]
        }
    },
    "30": {
        "title": "Concatenated Substring",
        "description": "You are given a string `s` and an array of strings `words`. All the strings of `words` are of the same length. A concatenated substring in `s` is a substring that contains all the strings of any permutation of `words` concatenated. Return the starting indices of all the concatenated substrings in `s`. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: s = \"barfoothefoobarman\", words = [\"foo\", \"bar\"]\nOutput: [0, 9]\nExplanation: The substring starting at index 0 is \"barfoo\" which is the concatenation of [\"bar\", \"foo\"]. The substring starting at index 9 is \"foobar\" which is the concatenation of [\"foo\", \"bar\"].\n\nExample 2:\n\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\", \"good\", \"best\", \"word\"]\nOutput: []\nExplanation: There is no substring in s that is the concatenation of any permutation of words.\n\nExample 3:\n\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\", \"foo\", \"the\"]\nOutput: [6, 9, 12]\nExplanation: The substring starting at index 6 is \"foobarthe\" which is the concatenation of [\"foo\", \"bar\", \"the\"]. The substring starting at index 9 is \"barthefoo\" which is the concatenation of [\"bar\", \"the\", \"foo\"]. The substring starting at index 12 is \"thefoobar\" which is the concatenation of [\"the\", \"foo\", \"bar\"].",
        "level": "Medium",
        "tags": [
            "String",
            "Array",
            "Permutation"
        ],
        "test_cases": {
            "inputs": [
                "\"barfoothefoobarman\", [\"foo\", \"bar\"]",
                "\"wordgoodgoodgoodbestword\", [\"word\", \"good\", \"best\", \"word\"]",
                "\"barfoofoobarthefoobarman\", [\"bar\", \"foo\", \"the\"]",
                "\"abcdefg\", [\"abc\", \"def\", \"g\"]",
                "\"hellohellohello\", [\"hello\", \"hello\"]",
                "\"abcdabcdabcd\", [\"abcd\", \"abcd\", \"abcd\"]",
                "\"foobarfoobar\", [\"foo\", \"bar\"]",
                "\"abcabcabc\", [\"abc\", \"abc\"]",
                "\"xyzxyzxyz\", [\"xyz\", \"xyz\"]",
                "\"aaaabbbbcccc\", [\"aaa\", \"bbb\", \"ccc\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"j\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jkl\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklm\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmn\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmno\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnop\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopq\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopqr\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopqrs\"]",
                "\"abcdefghijabcdefghijabcdefghij\", [\"abc\", \"def\", \"ghi\", \"jklmnopqrst\"]"
            ],
            "outputs": [
                "[0, 9]",
                "[]",
                "[6, 9, 12]",
                "[0]",
                "[0, 5]",
                "[0, 4, 8]",
                "[0, 3]",
                "[0, 3, 6]",
                "[0, 3, 6]",
                "[0, 4, 8]",
                "[0, 10, 20]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "31": {
        "title": "Next Permutation",
        "description": "Given an array of integers, find the next lexicographically greater permutation of the array. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). Implement the function `nextPermutation(nums: List[int]) -> None` to find the next permutation in place using constant extra memory.",
        "example": "Example:\n\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\nExplanation: The next permutation of [1,2,3] is [1,3,2].\n\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\nExplanation: The next permutation of [3,2,1] is [1,2,3].\n\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\nExplanation: The next permutation of [1,1,5] is [1,5,1].",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[3,2,1]",
                "[1,1,5]",
                "[1,2,3,4]",
                "[4,3,2,1]",
                "[1,1,1,1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,5,4]",
                "[1,2,4,3,5]",
                "[5,4,3,2,1,0]",
                "[0,1,2,3,4,5]",
                "[1,2,3,4,5,0]",
                "[1,2,3,5,4,0]",
                "[1,2,4,3,5,0]",
                "[5,4,3,2,1,0,9]",
                "[9,8,7,6,5,4,3,2,1,0]",
                "[1,2,3,4,5,0,9]",
                "[1,2,3,5,4,0,9]",
                "[1,2,4,3,5,0,9]"
            ],
            "outputs": [
                "[1,3,2]",
                "[1,2,3]",
                "[1,5,1]",
                "[1,2,4,3]",
                "[1,2,3,4]",
                "[1,1,1,1]",
                "[1,2,3,5,4]",
                "[1,2,3,5,4]",
                "[1,2,4,0,3,5]",
                "[1,2,4,5,3,0]",
                "[0,1,2,3,4,5]",
                "[0,1,2,3,4,5]",
                "[0,1,2,3,5,4]",
                "[0,1,2,3,5,4]",
                "[0,1,2,3,5,4]",
                "[0,1,2,3,5,4,9]",
                "[0,1,2,3,4,5,6,7,8,9]",
                "[0,1,2,3,5,4,9]",
                "[0,1,2,3,5,4,9]",
                "[0,1,2,3,5,4,9]"
            ]
        }
    },
    "32": null,
    "33": {
        "title": "Search in Rotated Sorted Array",
        "description": "You are given an integer array `nums` sorted in ascending order (with **distinct** values). Prior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`. Given the array `nums` **after** the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`. You must write an algorithm with O(log n) runtime complexity.",
        "example": "Example:\n\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\nExplanation: The target element 0 is present at index 4 in the rotated sorted array.\n\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n\nExplanation: The target element 3 is not present in the rotated sorted array.\n\nInput: nums = [1], target = 0\nOutput: -1\n\nExplanation: The target element 0 is not present in the rotated sorted array.",
        "level": "Medium",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[4,5,6,7,0,1,2]",
                "[4,5,6,7,0,1,2]",
                "[1]",
                "[1,3,5]",
                "[3,5,1]",
                "[5,1,3]",
                "[1,3]",
                "[3,1]",
                "[1]",
                "[2]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399,401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499,501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599,601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699,701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799,801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899,901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999]"
            ],
            "outputs": [
                "4",
                "-1",
                "-1",
                "0",
                "2",
                "1",
                "0",
                "1",
                "-1",
                "-1",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10"
            ]
        }
    },
    "34": {
        "title": "Find Target Range",
        "description": "Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with `O(log n)` runtime complexity.",
        "example": "Example:\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nExplanation: The target value 8 is found at index 3 and 4 in the array.\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n\nExplanation: The target value 6 is not found in the array.\n\nInput: nums = [], target = 0\nOutput: [-1,-1]\n\nExplanation: The array is empty, so the target value 0 is not found.",
        "level": "Medium",
        "tags": [
            "array",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                "[5,7,7,8,8,10]",
                "[5,7,7,8,8,10]",
                "[]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ],
            "outputs": [
                "[3,4]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[0,0]",
                "[1,1]",
                "[2,2]",
                "[3,3]",
                "[4,4]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]",
                "[-1,-1]"
            ]
        }
    },
    "35": {
        "title": "Search Insert Position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.",
        "example": "Example:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExplanation: The target value 5 is found at index 2 in the given array.\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\nExplanation: The target value 2 is not found in the given array. If it were to be inserted, it would be at index 1.\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\nExplanation: The target value 7 is not found in the given array. If it were to be inserted, it would be at index 4.",
        "level": "Easy",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,5,6], 5",
                "[1,3,5,6], 2",
                "[1,3,5,6], 7",
                "[1,3,5,6], 0",
                "[1,3,5,6], 4",
                "[1,3,5,6], 6",
                "[1,3,5,6], 3",
                "[1,3,5,6], 1",
                "[1,3,5,6], 8",
                "[1,3,5,6], -1",
                "[1,3,5,6], 10",
                "[1,3,5,6], -5",
                "[1,3,5,6,8,10], 5",
                "[1,3,5,6,8,10], 2",
                "[1,3,5,6,8,10], 7",
                "[1,3,5,6,8,10], 0",
                "[1,3,5,6,8,10], 4",
                "[1,3,5,6,8,10], 6",
                "[1,3,5,6,8,10], 3",
                "[1,3,5,6,8,10], 1"
            ],
            "outputs": [
                "2",
                "1",
                "4",
                "0",
                "2",
                "3",
                "1",
                "0",
                "6",
                "0",
                "6",
                "0",
                "2",
                "1",
                "4",
                "0",
                "2",
                "3",
                "1",
                "0"
            ]
        }
    },
    "36": null,
    "37": {
        "title": "Sudoku Solver",
        "description": "Write a program to solve a Sudoku puzzle by filling the empty cells. A Sudoku solution must satisfy all of the following rules:\n\n1. Each of the digits `1-9` must occur exactly once in each row.\n2. Each of the digits `1-9` must occur exactly once in each column.\n3. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\nThe '.' character indicates empty cells.",
        "example": "**Example:**\n\n**Input:**\nboard = [\n    [\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],\n    [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],\n    [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],\n    [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],\n    [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],\n    [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],\n    [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],\n    [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],\n    [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]\n]\n**Output:**\n[\n    [\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"],\n    [\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"],\n    [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"],\n    [\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"],\n    [\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"],\n    [\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"],\n    [\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"],\n    [\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],\n    [\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"]\n]\n**Explanation:** The input board is shown above and the only valid solution is shown below:",
        "level": "Medium",
        "tags": [
            "array",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[[\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"],[\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"],[\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"],[\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"],[\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"],[\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"],[\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"],[\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"],[\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]]"
            ],
            "outputs": [
                "[[\"5\", \"3\", \"4\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\"],[\"6\", \"7\", \"2\", \"1\", \"9\", \"5\", \"3\", \"4\", \"8\"],[\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"],[\"8\", \"5\", \"9\", \"7\", \"6\", \"1\", \"4\", \"2\", \"3\"],[\"4\", \"2\", \"6\", \"8\", \"5\", \"3\", \"7\", \"9\", \"1\"],[\"7\", \"1\", \"3\", \"9\", \"2\", \"4\", \"8\", \"5\", \"6\"],[\"9\", \"6\", \"1\", \"5\", \"3\", \"7\", \"2\", \"8\", \"4\"],[\"2\", \"8\", \"7\", \"4\", \"1\", \"9\", \"6\", \"3\", \"5\"],[\"3\", \"4\", \"5\", \"2\", \"8\", \"6\", \"1\", \"7\", \"9\"]]"
            ]
        }
    },
    "38": {
        "title": "Count and Say Sequence",
        "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula. Given a positive integer n, return the nth term of the count-and-say sequence.",
        "example": "Example:\n\nInput: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"",
        "level": "Easy",
        "tags": [
            "recursion",
            "string"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                15,
                20,
                25,
                30
            ],
            "outputs": [
                "1",
                "11",
                "21",
                "1211",
                "111221",
                "312211",
                "13112221",
                "1113213211",
                "31131211131221",
                "13211311123113112211",
                "311311222113111231131112132112311321322112111312211312111322212311322113212221",
                "11131221131211131231121113112221121321132132211331222113112211",
                "311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122111213122112311311222112111312211311123113322112111312211312111322212311322113212221",
                "111312211312111312311211131122211213211321322113312221131122111213122112311311222112111312211311123113322112111312211312111322212311322113212221"
            ]
        }
    },
    "39": null,
    "40": null,
    "41": {
        "title": "Smallest Missing Positive Integer",
        "description": "Given an unsorted integer array `nums`, find the smallest missing positive integer. Implement an algorithm that runs in `O(n)` time and uses constant extra space.",
        "example": "Example 1:\n\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n\nExample 2:\n\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n\nExample 3:\n\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    0
                ],
                [
                    3,
                    4,
                    -1,
                    1
                ],
                [
                    7,
                    8,
                    9,
                    11,
                    12
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    -1,
                    -2,
                    -3
                ],
                [
                    0
                ],
                [
                    -1
                ],
                [
                    1
                ],
                [
                    2
                ],
                [
                    3
                ],
                [
                    4
                ],
                [
                    5
                ],
                [
                    6
                ],
                [
                    7
                ],
                [
                    8
                ],
                [
                    9
                ],
                [
                    10
                ]
            ],
            "outputs": [
                3,
                2,
                1,
                6,
                6,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "42": {
        "title": "Trapping Rain Water",
        "description": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.",
        "example": "Example:\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
        "level": "Medium",
        "tags": [
            "array",
            "two pointers",
            "stack"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1,
                    0,
                    2,
                    1,
                    0,
                    1,
                    3,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    4,
                    2,
                    0,
                    3,
                    2,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    3,
                    1,
                    2,
                    1,
                    3
                ],
                [
                    2,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    1,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    2,
                    1,
                    2
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ],
            "outputs": [
                6,
                9,
                0,
                0,
                0,
                4,
                1,
                0,
                1,
                0,
                1,
                1,
                1,
                1,
                0,
                0,
                0,
                0,
                16,
                16
            ]
        }
    },
    "43": null,
    "44": {
        "title": "Wildcard Pattern Matching",
        "description": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n*   `'?'` Matches any single character.\n*   `'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the **entire** input string (not partial).",
        "example": "Example:\n\n**Input:** s =  \"aa \", p =  \"a \"\n**Output:** false\n**Explanation:**  \"a \" does not match the entire string  \"aa \".",
        "level": "Medium",
        "tags": [
            "string",
            "pattern matching",
            "wildcard"
        ],
        "test_cases": {
            "inputs": [
                "\"aa \", \"a \"",
                "\"aa \", \"* \"",
                "\"cb \", \"?a \"",
                "\"abc \", \"a*c \"",
                "\"abc \", \"a?c \"",
                "\"abc \", \"a?*c \"",
                "\"abc \", \"a?*d \"",
                "\"abc \", \"a?* \"",
                "\"abc \", \"a?*? \"",
                "\"abc \", \"a?*?* \"",
                "\"abc \", \"a?*?*? \"",
                "\"abc \", \"a?*?*?* \"",
                "\"abc \", \"a?*?*?*? \"",
                "\"abc \", \"a?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*?*?*? \"",
                "\"abc \", \"a?*?*?*?*?*?*?*?* \"",
                "\"abc \", \"a?*?*?*?*?*?*?*?*? \""
            ],
            "outputs": [
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "45": null,
    "46": {
        "title": "Permutations of Distinct Integers",
        "description": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n\nExample 3:\n\nInput: nums = [1]\nOutput: [[1]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Permutations"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    1
                ],
                [
                    4,
                    5,
                    6,
                    7
                ],
                [
                    -1,
                    0,
                    1
                ],
                [
                    10,
                    20,
                    30
                ],
                [
                    2,
                    4,
                    6,
                    8
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5
                ],
                [
                    3,
                    2,
                    1
                ],
                [
                    100,
                    200,
                    300
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        2,
                        1,
                        3
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        4,
                        5,
                        7,
                        6
                    ],
                    [
                        4,
                        6,
                        5,
                        7
                    ],
                    [
                        4,
                        6,
                        7,
                        5
                    ],
                    [
                        4,
                        7,
                        5,
                        6
                    ],
                    [
                        4,
                        7,
                        6,
                        5
                    ],
                    [
                        5,
                        4,
                        6,
                        7
                    ],
                    [
                        5,
                        4,
                        7,
                        6
                    ],
                    [
                        5,
                        6,
                        4,
                        7
                    ],
                    [
                        5,
                        6,
                        7,
                        4
                    ],
                    [
                        5,
                        7,
                        4,
                        6
                    ],
                    [
                        5,
                        7,
                        6,
                        4
                    ],
                    [
                        6,
                        4,
                        5,
                        7
                    ],
                    [
                        6,
                        4,
                        7,
                        5
                    ],
                    [
                        6,
                        5,
                        4,
                        7
                    ],
                    [
                        6,
                        5,
                        7,
                        4
                    ],
                    [
                        6,
                        7,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        5,
                        4
                    ],
                    [
                        7,
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        4,
                        6,
                        5
                    ],
                    [
                        7,
                        5,
                        4,
                        6
                    ],
                    [
                        7,
                        5,
                        6,
                        4
                    ],
                    [
                        7,
                        6,
                        4,
                        5
                    ],
                    [
                        7,
                        6,
                        5,
                        4
                    ]
                ],
                [
                    [
                        -1,
                        0,
                        1
                    ],
                    [
                        -1,
                        1,
                        0
                    ],
                    [
                        0,
                        -1,
                        1
                    ],
                    [
                        0,
                        1,
                        -1
                    ],
                    [
                        1,
                        -1,
                        0
                    ],
                    [
                        1,
                        0,
                        -1
                    ]
                ],
                [
                    [
                        10,
                        20,
                        30
                    ],
                    [
                        10,
                        30,
                        20
                    ],
                    [
                        20,
                        10,
                        30
                    ],
                    [
                        20,
                        30,
                        10
                    ],
                    [
                        30,
                        10,
                        20
                    ],
                    [
                        30,
                        20,
                        10
                    ]
                ],
                [
                    [
                        2,
                        4,
                        6,
                        8
                    ],
                    [
                        2,
                        4,
                        8,
                        6
                    ],
                    [
                        2,
                        6,
                        4,
                        8
                    ],
                    [
                        2,
                        6,
                        8,
                        4
                    ],
                    [
                        2,
                        8,
                        4,
                        6
                    ],
                    [
                        2,
                        8,
                        6,
                        4
                    ],
                    [
                        4,
                        2,
                        6,
                        8
                    ],
                    [
                        4,
                        2,
                        8,
                        6
                    ],
                    [
                        4,
                        6,
                        2,
                        8
                    ],
                    [
                        4,
                        6,
                        8,
                        2
                    ],
                    [
                        4,
                        8,
                        2,
                        6
                    ],
                    [
                        4,
                        8,
                        6,
                        2
                    ],
                    [
                        6,
                        2,
                        4,
                        8
                    ],
                    [
                        6,
                        2,
                        8,
                        4
                    ],
                    [
                        6,
                        4,
                        2,
                        8
                    ],
                    [
                        6,
                        4,
                        8,
                        2
                    ],
                    [
                        6,
                        8,
                        2,
                        4
                    ],
                    [
                        6,
                        8,
                        4,
                        2
                    ],
                    [
                        8,
                        2,
                        4,
                        6
                    ],
                    [
                        8,
                        2,
                        6,
                        4
                    ],
                    [
                        8,
                        4,
                        2,
                        6
                    ],
                    [
                        8,
                        4,
                        6,
                        2
                    ],
                    [
                        8,
                        6,
                        2,
                        4
                    ],
                    [
                        8,
                        6,
                        4,
                        2
                    ]
                ],
                [
                    [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    [
                        9,
                        8,
                        7,
                        5,
                        6
                    ],
                    [
                        9,
                        8,
                        6,
                        7,
                        5
                    ],
                    [
                        9,
                        8,
                        6,
                        5,
                        7
                    ],
                    [
                        9,
                        8,
                        5,
                        7,
                        6
                    ],
                    [
                        9,
                        8,
                        5,
                        6,
                        7
                    ],
                    [
                        9,
                        7,
                        8,
                        6,
                        5
                    ],
                    [
                        9,
                        7,
                        8,
                        5,
                        6
                    ],
                    [
                        9,
                        7,
                        6,
                        8,
                        5
                    ],
                    [
                        9,
                        7,
                        6,
                        5,
                        8
                    ],
                    [
                        9,
                        7,
                        5,
                        8,
                        6
                    ],
                    [
                        9,
                        7,
                        5,
                        6,
                        8
                    ],
                    [
                        9,
                        6,
                        8,
                        7,
                        5
                    ],
                    [
                        9,
                        6,
                        8,
                        5,
                        7
                    ],
                    [
                        9,
                        6,
                        7,
                        8,
                        5
                    ],
                    [
                        9,
                        6,
                        7,
                        5,
                        8
                    ],
                    [
                        9,
                        6,
                        5,
                        8,
                        7
                    ],
                    [
                        9,
                        6,
                        5,
                        7,
                        8
                    ],
                    [
                        9,
                        5,
                        8,
                        7,
                        6
                    ],
                    [
                        9,
                        5,
                        8,
                        6,
                        7
                    ],
                    [
                        9,
                        5,
                        7,
                        8,
                        6
                    ],
                    [
                        9,
                        5,
                        7,
                        6,
                        8
                    ],
                    [
                        9,
                        5,
                        6,
                        8,
                        7
                    ],
                    [
                        9,
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        8,
                        9,
                        7,
                        6,
                        5
                    ],
                    [
                        8,
                        9,
                        7,
                        5,
                        6
                    ],
                    [
                        8,
                        9,
                        6,
                        7,
                        5
                    ],
                    [
                        8,
                        9,
                        6,
                        5,
                        7
                    ],
                    [
                        8,
                        9,
                        5,
                        7,
                        6
                    ],
                    [
                        8,
                        9,
                        5,
                        6,
                        7
                    ],
                    [
                        8,
                        7,
                        9,
                        6,
                        5
                    ],
                    [
                        8,
                        7,
                        9,
                        5,
                        6
                    ],
                    [
                        8,
                        7,
                        6,
                        9,
                        5
                    ],
                    [
                        8,
                        7,
                        6,
                        5,
                        9
                    ],
                    [
                        8,
                        7,
                        5,
                        9,
                        6
                    ],
                    [
                        8,
                        7,
                        5,
                        6,
                        9
                    ],
                    [
                        8,
                        6,
                        9,
                        7,
                        5
                    ],
                    [
                        8,
                        6,
                        9,
                        5,
                        7
                    ],
                    [
                        8,
                        6,
                        7,
                        9,
                        5
                    ],
                    [
                        8,
                        6,
                        7,
                        5,
                        9
                    ],
                    [
                        8,
                        6,
                        5,
                        9,
                        7
                    ],
                    [
                        8,
                        6,
                        5,
                        7,
                        9
                    ],
                    [
                        8,
                        5,
                        9,
                        7,
                        6
                    ],
                    [
                        8,
                        5,
                        9,
                        6,
                        7
                    ],
                    [
                        8,
                        5,
                        7,
                        9,
                        6
                    ],
                    [
                        8,
                        5,
                        7,
                        6,
                        9
                    ],
                    [
                        8,
                        5,
                        6,
                        9,
                        7
                    ],
                    [
                        8,
                        5,
                        6,
                        7,
                        9
                    ],
                    [
                        7,
                        9,
                        8,
                        6,
                        5
                    ],
                    [
                        7,
                        9,
                        8,
                        5,
                        6
                    ],
                    [
                        7,
                        9,
                        6,
                        8,
                        5
                    ],
                    [
                        7,
                        9,
                        6,
                        5,
                        8
                    ],
                    [
                        7,
                        9,
                        5,
                        8,
                        6
                    ],
                    [
                        7,
                        9,
                        5,
                        6,
                        8
                    ],
                    [
                        7,
                        8,
                        9,
                        6,
                        5
                    ],
                    [
                        7,
                        8,
                        9,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        6,
                        9,
                        5
                    ],
                    [
                        7,
                        8,
                        6,
                        5,
                        9
                    ],
                    [
                        7,
                        8,
                        5,
                        9,
                        6
                    ],
                    [
                        7,
                        8,
                        5,
                        6,
                        9
                    ],
                    [
                        7,
                        6,
                        9,
                        8,
                        5
                    ],
                    [
                        7,
                        6,
                        9,
                        5,
                        8
                    ],
                    [
                        7,
                        6,
                        8,
                        9,
                        5
                    ],
                    [
                        7,
                        6,
                        8,
                        5,
                        9
                    ],
                    [
                        7,
                        6,
                        5,
                        9,
                        8
                    ],
                    [
                        7,
                        6,
                        5,
                        8,
                        9
                    ],
                    [
                        7,
                        5,
                        9,
                        8,
                        6
                    ],
                    [
                        7,
                        5,
                        9,
                        6,
                        8
                    ],
                    [
                        7,
                        5,
                        8,
                        9,
                        6
                    ],
                    [
                        7,
                        5,
                        8,
                        6,
                        9
                    ],
                    [
                        7,
                        5,
                        6,
                        9,
                        8
                    ],
                    [
                        7,
                        5,
                        6,
                        8,
                        9
                    ],
                    [
                        6,
                        9,
                        8,
                        7,
                        5
                    ],
                    [
                        6,
                        9,
                        8,
                        5,
                        7
                    ],
                    [
                        6,
                        9,
                        7,
                        8,
                        5
                    ],
                    [
                        6,
                        9,
                        7,
                        5,
                        8
                    ],
                    [
                        6,
                        9,
                        5,
                        8,
                        7
                    ],
                    [
                        6,
                        9,
                        5,
                        7,
                        8
                    ],
                    [
                        6,
                        8,
                        9,
                        7,
                        5
                    ],
                    [
                        6,
                        8,
                        9,
                        5,
                        7
                    ],
                    [
                        6,
                        8,
                        7,
                        9,
                        5
                    ],
                    [
                        6,
                        8,
                        7,
                        5,
                        9
                    ],
                    [
                        6,
                        8,
                        5,
                        9,
                        7
                    ],
                    [
                        6,
                        8,
                        5,
                        7,
                        9
                    ],
                    [
                        6,
                        7,
                        9,
                        8,
                        5
                    ],
                    [
                        6,
                        7,
                        9,
                        5,
                        8
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        5,
                        9
                    ],
                    [
                        6,
                        7,
                        5,
                        9,
                        8
                    ],
                    [
                        6,
                        7,
                        5,
                        8,
                        9
                    ],
                    [
                        6,
                        5,
                        9,
                        8,
                        7
                    ],
                    [
                        6,
                        5,
                        9,
                        7,
                        8
                    ],
                    [
                        6,
                        5,
                        8,
                        9,
                        7
                    ],
                    [
                        6,
                        5,
                        8,
                        7,
                        9
                    ],
                    [
                        6,
                        5,
                        7,
                        9,
                        8
                    ],
                    [
                        6,
                        5,
                        7,
                        8,
                        9
                    ],
                    [
                        5,
                        9,
                        8,
                        7,
                        6
                    ],
                    [
                        5,
                        9,
                        8,
                        6,
                        7
                    ],
                    [
                        5,
                        9,
                        7,
                        8,
                        6
                    ],
                    [
                        5,
                        9,
                        7,
                        6,
                        8
                    ],
                    [
                        5,
                        9,
                        6,
                        8,
                        7
                    ],
                    [
                        5,
                        9,
                        6,
                        7,
                        8
                    ],
                    [
                        5,
                        8,
                        9,
                        7,
                        6
                    ],
                    [
                        5,
                        8,
                        9,
                        6,
                        7
                    ],
                    [
                        5,
                        8,
                        7,
                        9,
                        6
                    ],
                    [
                        5,
                        8,
                        7,
                        6,
                        9
                    ],
                    [
                        5,
                        8,
                        6,
                        9,
                        7
                    ],
                    [
                        5,
                        8,
                        6,
                        7,
                        9
                    ],
                    [
                        5,
                        7,
                        9,
                        8,
                        6
                    ],
                    [
                        5,
                        7,
                        9,
                        6,
                        8
                    ],
                    [
                        5,
                        7,
                        8,
                        9,
                        6
                    ],
                    [
                        5,
                        7,
                        8,
                        6,
                        9
                    ],
                    [
                        5,
                        7,
                        6,
                        9,
                        8
                    ],
                    [
                        5,
                        7,
                        6,
                        8,
                        9
                    ],
                    [
                        5,
                        6,
                        9,
                        8,
                        7
                    ],
                    [
                        5,
                        6,
                        9,
                        7,
                        8
                    ],
                    [
                        5,
                        6,
                        8,
                        9,
                        7
                    ],
                    [
                        5,
                        6,
                        8,
                        7,
                        9
                    ],
                    [
                        5,
                        6,
                        7,
                        9,
                        8
                    ],
                    [
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        3,
                        2,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        2,
                        1,
                        3
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        1,
                        2,
                        3
                    ]
                ],
                [
                    [
                        100,
                        200,
                        300
                    ],
                    [
                        100,
                        300,
                        200
                    ],
                    [
                        200,
                        100,
                        300
                    ],
                    [
                        200,
                        300,
                        100
                    ],
                    [
                        300,
                        100,
                        200
                    ],
                    [
                        300,
                        200,
                        100
                    ]
                ]
            ]
        }
    },
    "47": {
        "title": "Unique Permutations with Duplicates",
        "description": "Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.",
        "example": "Example 1:\n\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    2
                ],
                [
                    1,
                    1,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        1,
                        2
                    ],
                    [
                        1,
                        2,
                        1
                    ],
                    [
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        2,
                        1,
                        3
                    ],
                    [
                        2,
                        3,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        2
                    ],
                    [
                        2,
                        1,
                        2
                    ],
                    [
                        2,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2,
                        2
                    ],
                    [
                        1,
                        2,
                        1,
                        2
                    ],
                    [
                        1,
                        2,
                        2,
                        1
                    ],
                    [
                        2,
                        1,
                        1,
                        2
                    ],
                    [
                        2,
                        1,
                        2,
                        1
                    ],
                    [
                        2,
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        4,
                        3
                    ],
                    [
                        1,
                        3,
                        2,
                        4
                    ],
                    [
                        1,
                        3,
                        4,
                        2
                    ],
                    [
                        1,
                        4,
                        2,
                        3
                    ],
                    [
                        1,
                        4,
                        3,
                        2
                    ],
                    [
                        2,
                        1,
                        3,
                        4
                    ],
                    [
                        2,
                        1,
                        4,
                        3
                    ],
                    [
                        2,
                        3,
                        1,
                        4
                    ],
                    [
                        2,
                        3,
                        4,
                        1
                    ],
                    [
                        2,
                        4,
                        1,
                        3
                    ],
                    [
                        2,
                        4,
                        3,
                        1
                    ],
                    [
                        3,
                        1,
                        2,
                        4
                    ],
                    [
                        3,
                        1,
                        4,
                        2
                    ],
                    [
                        3,
                        2,
                        1,
                        4
                    ],
                    [
                        3,
                        2,
                        4,
                        1
                    ],
                    [
                        3,
                        4,
                        1,
                        2
                    ],
                    [
                        3,
                        4,
                        2,
                        1
                    ],
                    [
                        4,
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        1,
                        3,
                        2
                    ],
                    [
                        4,
                        2,
                        1,
                        3
                    ],
                    [
                        4,
                        2,
                        3,
                        1
                    ],
                    [
                        4,
                        3,
                        1,
                        2
                    ],
                    [
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        8,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8,
                        7,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        5,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        5,
                        8,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        7,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        7,
                        8,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        8,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        8,
                        7,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        5,
                        8,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        6,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        6,
                        8,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        8,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        8,
                        6,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        5,
                        7,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        6,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        6,
                        7,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        7,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        7,
                        6,
                        5
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ],
                    [
                        1,
                        1,
                        2,
                        2,
                        3,
                        3,
                        4,
                        4,
                        5,
                        5
                    ]
                ]
            ]
        }
    },
    "48": {
        "title": "Rotate Image",
        "description": "You are given an `n x n` 2D `matrix` representing an image. Rotate the image by **90** degrees (clockwise) in-place.",
        "example": "Example:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "in-place"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22],[23,24,25,26,27,28,29,30,31,32,33],[34,35,36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53,54,55],[56,57,58,59,60,61,62,63,64,65,66],[67,68,69,70,71,72,73,74,75,76,77],[78,79,80,81,82,83,84,85,86,87,88],[89,90,91,92,93,94,95,96,97,98,99],[100,101,102,103,104,105,106,107,108,109,110],[111,112,113,114,115,116,117,118,119,120,121]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,81,82,83,84],[85,86,87,88,89,90,91,92,93,94,95,96],[97,98,99,100,101,102,103,104,105,106,107,108],[109,110,111,112,113,114,115,116,117,118,119,120],[121,122,123,124,125,126,127,128,129,130,131,132],[133,134,135,136,137,138,139,140,141,142,143,144]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35,36,37,38,39],[40,41,42,43,44,45,46,47,48,49,50,51,52],[53,54,55,56,57,58,59,60,61,62,63,64,65],[66,67,68,69,70,71,72,73,74,75,76,77,78],[79,80,81,82,83,84,85,86,87,88,89,90,91],[92,93,94,95,96,97,98,99,100,101,102,103,104],[105,106,107,108,109,110,111,112,113,114,115,116,117],[118,119,120,121,122,123,124,125,126,127,128,129,130],[131,132,133,134,135,136,137,138,139,140,141,142,143],[144,145,146,147,148,149,150,151,152,153,154,155,156],[157,158,159,160,161,162,163,164,165,166,167,168,169]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27,28],[29,30,31,32,33,34,35,36,37,38,39,40,41,42],[43,44,45,46,47,48,49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80,81,82,83,84],[85,86,87,88,89,90,91,92,93,94,95,96,97,98],[99,100,101,102,103,104,105,106,107,108,109,110,111,112],[113,114,115,116,117,118,119,120,121,122,123,124,125,126],[127,128,129,130,131,132,133,134,135,136,137,138,139,140],[141,142,143,144,145,146,147,148,149,150,151,152,153,154],[155,156,157,158,159,160,161,162,163,164,165,166,167,168,169],[170,171,172,173,174,175,176,177,178,179,180,181,182,183],[184,185,186,187,188,189,190,191,192,193,194,195,196,197]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],[106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],[121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],[136,137,138,139,140,141,142,143,144,145,146,147,148,149,150],[151,152,153,154,155,156,157,158,159,160,161,162,163,164,165],[166,167,168,169,170,171,172,173,174,175,176,177,178,179,180],[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195],[196,197,198,199,200,201,202,203,204,205,206,207,208,209,210],[211,212,213,214,215,216,217,218,219,220,221,222,223,224,225]]"
            ],
            "outputs": [
                "[[7,4,1],[8,5,2],[9,6,3]]",
                "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
                "[[1]]",
                "[[3,1],[4,2]]",
                "[[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]]",
                "[[21,16,11,6,1],[22,17,12,7,2],[23,18,13,8,3],[24,19,14,9,4],[25,20,15,10,5]]",
                "[[31,25,19,13,7,1],[32,26,20,14,8,2],[33,27,21,15,9,3],[34,28,22,16,10,4],[35,29,23,17,11,5],[36,30,24,18,12,6]]",
                "[[49,42,35,28,21,14,7],[50,43,36,29,22,15,8],[51,44,37,30,23,16,9],[52,45,38,31,24,17,10],[53,46,39,32,25,18,11],[54,47,40,33,26,19,12],[55,48,41,34,27,20,13]]",
                "[[64,57,50,43,36,29,22,15],[65,58,51,44,37,30,23,16],[66,59,52,45,38,31,24,17],[67,60,53,46,39,32,25,18],[68,61,54,47,40,33,26,19],[69,62,55,48,41,34,27,20],[70,63,56,49,42,35,28,21],[71,64,57,50,43,36,29,22]]",
                "[[81,73,65,57,49,41,33,25,17,9],[82,74,66,58,50,42,34,26,18,10],[83,75,67,59,51,43,35,27,19,11],[84,76,68,60,52,44,36,28,20,12],[85,77,69,61,53,45,37,29,21,13],[86,78,70,62,54,46,38,30,22,14],[87,79,71,63,55,47,39,31,23,15],[88,80,72,64,56,48,40,32,24,16]]",
                "[[100,91,82,73,64,55,46,37,28,19,10],[101,92,83,74,65,56,47,38,29,20,11],[102,93,84,75,66,57,48,39,30,21,12],[103,94,85,76,67,58,49,40,31,22,13],[104,95,86,77,68,59,50,41,32,23,14],[105,96,87,78,69,60,51,42,33,24,15],[106,97,88,79,70,61,52,43,34,25,16],[107,98,89,80,71,62,53,44,35,26,17],[108,99,90,81,72,63,54,45,36,27,18],[109,100,91,82,73,64,55,46,37,28,19]]",
                "[[121,111,101,91,81,71,61,51,41,31,21,11],[122,112,102,92,82,72,62,52,42,32,22,12],[123,113,103,93,83,73,63,53,43,33,23,13],[124,114,104,94,84,74,64,54,44,34,24,14],[125,115,105,95,85,75,65,55,45,35,25,15],[126,116,106,96,86,76,66,56,46,36,26,16],[127,117,107,97,87,77,67,57,47,37,27,17],[128,118,108,98,88,78,68,58,48,38,28,18],[129,119,109,99,89,79,69,59,49,39,29,19],[130,120,110,100,90,80,70,60,50,40,30,20],[131,121,111,101,91,81,71,61,51,41,31,21]]",
                "[[144,133,122,111,100,89,78,67,56,45,34,23,12],[145,134,123,112,101,90,79,68,57,46,35,24,13],[146,135,124,113,102,91,80,69,58,47,36,25,14],[147,136,125,114,103,92,81,70,59,48,37,26,15],[148,137,126,115,104,93,82,71,60,49,38,27,16],[149,138,127,116,105,94,83,72,61,50,39,28,17],[150,139,128,117,106,95,84,73,62,51,40,29,18],[151,140,129,118,107,96,85,74,63,52,41,30,19],[152,141,130,119,108,97,86,75,64,53,42,31,20],[153,142,131,120,109,98,87,76,65,54,43,32,21],[154,143,132,121,110,99,88,77,66,55,44,33,22],[155,144,133,122,111,100,89,78,67,56,45,34,23]]",
                "[[169,157,145,133,121,109,97,85,73,61,49,37,25,13],[170,158,146,134,122,110,98,86,74,62,50,38,26,14],[171,159,147,135,123,111,99,87,75,63,51,39,27,15],[172,160,148,136,124,112,100,88,76,64,52,40,28,16],[173,161,149,137,125,113,101,89,77,65,53,41,29,17],[174,162,150,138,126,114,102,90,78,66,54,42,30,18],[175,163,151,139,127,115,103,91,79,67,55,43,31,19],[176,164,152,140,128,116,104,92,80,68,56,44,32,20],[177,165,153,141,129,117,105,93,81,69,57,45,33,21],[178,166,154,142,130,118,106,94,82,70,58,46,34,22],[179,167,155,143,131,119,107,95,83,71,59,47,35,23],[180,168,156,144,132,120,108,96,84,72,60,48,36,24],[181,169,157,145,133,121,109,97,85,73,61,49,37,25]]",
                "[[196,183,170,157,144,131,118,105,92,79,66,53,40,27,14],[197,184,171,158,145,132,119,106,93,80,67,54,41,28,15],[198,185,172,159,146,133,120,107,94,81,68,55,42,29,16],[199,186,173,160,147,134,121,108,95,82,69,56,43,30,17],[200,187,174,161,148,135,122,109,96,83,70,57,44,31,18],[201,188,175,162,149,136,123,110,97,84,71,58,45,32,19],[202,189,176,163,150,137,124,111,98,85,72,59,46,33,20],[203,190,177,164,151,138,125,112,99,86,73,60,47,34,21],[204,191,178,165,152,139,126,113,100,87,74,61,48,35,22],[205,192,179,166,153,140,127,114,101,88,75,62,49,36,23],[206,193,180,167,154,141,128,115,102,89,76,63,50,37,24],[207,194,181,168,155,142,129,116,103,90,77,64,51,38,25],[208,195,182,169,156,143,130,117,104,91,78,65,52,39,26]]",
                "[[225,210,195,180,165,150,135,120,105,90,75,60,45,30,15],[226,211,196,181,166,151,136,121,106,91,76,61,46,31,16],[227,212,197,182,167,152,137,122,107,92,77,62,47,32,17],[228,213,198,183,168,153,138,123,108,93,78,63,48,33,18],[229,214,199,184,169,154,139,124,109,94,79,64,49,34,19],[230,215,200,185,170,155,140,125,110,95,80,65,50,35,20],[231,216,201,186,171,156,141,126,111,96,81,66,51,36,21],[232,217,202,187,172,157,142,127,112,97,82,67,52,37,22],[233,218,203,188,173,158,143,128,113,98,83,68,53,38,23],[234,219,204,189,174,159,144,129,114,99,84,69,54,39,24],[235,220,205,190,175,160,145,130,115,100,85,70,55,40,25],[236,221,206,191,176,161,146,131,116,101,86,71,56,41,26],[237,222,207,192,177,162,147,132,117,102,87,72,57,42,27],[238,223,208,193,178,163,148,133,118,103,88,73,58,43,28],[239,224,209,194,179,164,149,134,119,104,89,74,59,44,29]]"
            ]
        }
    },
    "49": {
        "title": "Group Anagrams",
        "description": "Given an array of strings `strs`, group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return the groups of anagrams in any order.",
        "example": "Example:\n\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n\nInput: strs = [\"\"]\nOutput: [[\"\"]]\n\nInput: strs = [\"a\"]\nOutput: [[\"a\"]]",
        "level": "Easy",
        "tags": [
            "Array",
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                "[\"\"]",
                "[\"a\"]",
                "[\"abc\",\"cba\",\"bca\",\"def\",\"fed\",\"edf\"]",
                "[\"cat\",\"dog\",\"tac\",\"god\",\"act\"]",
                "[\"abcd\",\"dcba\",\"efgh\",\"hgfe\",\"ijkl\",\"lkji\"]",
                "[\"abcd\",\"dcba\",\"efgh\",\"hgfe\",\"ijkl\",\"lkji\",\"mnop\",\"opnm\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"acb\",\"dfe\",\"gih\",\"jlk\",\"omn\",\"qpr\",\"tsu\",\"vxw\",\"zyx\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"acb\",\"dfe\",\"gih\",\"jlk\",\"omn\",\"qpr\",\"tsu\",\"vxw\",\"zyx\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\"]",
                "[\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"cba\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"bac\",\"fed\",\"ihg\",\"lkj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\",\"cab\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"acb\",\"dfe\",\"gih\",\"jlk\",\"omn\",\"qpr\",\"tsu\",\"vxw\",\"zyx\",\"bca\",\"edf\",\"hgi\",\"klj\",\"mon\",\"prq\",\"sut\",\"xwv\",\"yzz\",\"cba\",\"fed\",\"ihg\",\"klj\",\"onm\",\"qrp\",\"uts\",\"xwv\",\"zyx\"]"
            ],
            "outputs": [
                "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
                "[[\"\"]]",
                "[[\"a\"]]",
                "[[\"abc\",\"cba\",\"bca\"],[\"def\",\"fed\",\"edf\"]]",
                "[[\"cat\",\"tac\",\"act\"],[\"dog\",\"god\"]]",
                "[[\"abcd\",\"dcba\"],[\"efgh\",\"hgfe\"],[\"ijkl\",\"lkji\"]]",
                "[[\"abcd\",\"dcba\"],[\"efgh\",\"hgfe\"],[\"ijkl\",\"lkji\"],[\"mnop\",\"opnm\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"acb\"],[\"dfe\"],[\"gih\"],[\"jlk\"],[\"omn\"],[\"qpr\"],[\"tsu\"],[\"vxw\"],[\"zyx\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"acb\"],[\"dfe\"],[\"gih\"],[\"jlk\"],[\"omn\"],[\"qpr\"],[\"tsu\"],[\"vxw\"],[\"zyx\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"]]",
                "[[\"abc\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"bac\"],[\"fed\"],[\"ihg\"],[\"lkj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"],[\"cab\"],[\"def\"],[\"ghi\"],[\"jkl\"],[\"mno\"],[\"pqr\"],[\"stu\"],[\"vwx\"],[\"yz\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"acb\"],[\"dfe\"],[\"gih\"],[\"jlk\"],[\"omn\"],[\"qpr\"],[\"tsu\"],[\"vxw\"],[\"zyx\"],[\"bca\"],[\"edf\"],[\"hgi\"],[\"klj\"],[\"mon\"],[\"prq\"],[\"sut\"],[\"xwv\"],[\"yzz\"],[\"cba\"],[\"fed\"],[\"ihg\"],[\"klj\"],[\"onm\"],[\"qrp\"],[\"uts\"],[\"xwv\"],[\"zyx\"]]"
            ]
        }
    },
    "50": {
        "title": "Power Function",
        "description": "Write a function `power(x, n)` that calculates `x` raised to the power `n` (i.e., `x^n`). Implement the function using the given description.",
        "example": "Example:\n\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2^-2 = 1/2^2 = 1/4 = 0.25",
        "level": "Medium",
        "tags": [
            "math",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "x": 2.0,
                    "n": 10
                },
                {
                    "x": 2.1,
                    "n": 3
                },
                {
                    "x": 2.0,
                    "n": -2
                },
                {
                    "x": 0.5,
                    "n": 0
                },
                {
                    "x": 10.0,
                    "n": 5
                },
                {
                    "x": 3.0,
                    "n": 4
                },
                {
                    "x": 1.5,
                    "n": 7
                },
                {
                    "x": 4.0,
                    "n": -3
                },
                {
                    "x": 0.0,
                    "n": 10
                },
                {
                    "x": 1.0,
                    "n": 100
                },
                {
                    "x": -2.0,
                    "n": 5
                },
                {
                    "x": -3.0,
                    "n": 3
                },
                {
                    "x": -1.5,
                    "n": 6
                },
                {
                    "x": -4.0,
                    "n": -2
                },
                {
                    "x": 0.5,
                    "n": -3
                },
                {
                    "x": 1.0,
                    "n": 0
                },
                {
                    "x": 2.0,
                    "n": 1
                },
                {
                    "x": 3.0,
                    "n": 0
                },
                {
                    "x": 4.0,
                    "n": 1
                },
                {
                    "x": 5.0,
                    "n": 2
                }
            ],
            "outputs": [
                1024.0,
                9.261,
                0.25,
                1.0,
                100000.0,
                81.0,
                133.875,
                -0.015625,
                0.0,
                1.0,
                -32.0,
                -27.0,
                64.5,
                0.0625,
                8.0,
                1.0,
                2.0,
                1.0,
                4.0,
                25.0
            ]
        }
    },
    "51": {
        "title": "N-Queens Puzzle",
        "description": "The N-Queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the N-Queens puzzle. Each solution contains a distinct board configuration of the N-Queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",
        "example": "Example:\n\nInput: n = 4\nOutput: [['.Q..', '...Q', 'Q...', '..Q.'], ['..Q.', 'Q...', '...Q', '.Q..']]\nExplanation: There exist two distinct solutions to the 4-Queens puzzle as shown above.",
        "level": "Medium",
        "tags": [
            "backtracking",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                4,
                1,
                2,
                3,
                5
            ],
            "outputs": [
                [
                    [
                        ".Q..",
                        "...Q",
                        "Q...",
                        "..Q."
                    ],
                    [
                        "..Q.",
                        "Q...",
                        "...Q",
                        ".Q.."
                    ]
                ],
                [
                    [
                        "Q"
                    ]
                ],
                [],
                [],
                []
            ]
        }
    },
    "52": {
        "title": "N-Queens Puzzle Solutions",
        "description": "The N-Queens puzzle is a classic problem of placing N queens on an N x N chessboard such that no two queens can attack each other. Given an integer N, your task is to calculate the number of distinct solutions to the N-Queens puzzle.",
        "example": "Example:\n\nInput: N = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-Queens puzzle as shown below:\n\nSolution 1:\n\n. Q . .\n. . . Q\nQ . . .\n. . Q .\n\nSolution 2:\n\n. . Q .\nQ . . .\n. . . Q\n. Q . .",
        "level": "Medium",
        "tags": [
            "backtracking",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                4,
                1,
                2,
                3,
                5,
                6,
                7,
                8,
                9
            ],
            "outputs": [
                2,
                1,
                0,
                0,
                10,
                4,
                40,
                92,
                352
            ]
        }
    },
    "53": null,
    "54": {
        "title": "Spiral Matrix",
        "description": "Given an `m x n` matrix, return all elements of the matrix in spiral order.",
        "example": "Example 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nExample 2:\n\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "spiral"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]",
                "[[1,2,3,4,5,6,7,8,9,10]]",
                "[[1],[2],[3],[4],[5]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]]"
            ],
            "outputs": [
                "[1,2,3,6,9,8,7,4,5]",
                "[1,2,3,4,8,12,11,10,9,5,6,7]",
                "[1,2,3,4,5,10,15,20,19,18,17,16,11,6,7,8,9,14,13,12]",
                "[1,2,3,6,9,12,11,10,7,4,5,8]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,4,6,8,10,9,7,5,3]",
                "[1,2,3,4,5,10,15,14,13,12,11,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,29,28,27,26,25,24,23,22,21]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,39,38,37,36,35,34,33,32,31,21,22,23,24,25,26,27,28,29]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,49,48,47,46,45,44,43,42,41,31,21,22,23,24,25,26,27,28,29,39,38,37,36,35,34,33,32]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,59,58,57,56,55,54,53,52,51,41,31,21,22,23,24,25,26,27,28,29,39,49,48,47,46,45,44,43,42,32,33,34,35,36,37,38]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,69,68,67,66,65,64,63,62,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,58,57,56,55,54,53,52,42,32,33,34,35,36,37,38,48,47,46,45,44,43]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,79,78,77,76,75,74,73,72,71,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,69,68,67,66,65,64,63,62,52,42,32,33,34,35,36,37,38,48,58,57,56,55,54,53,43,44,45,46,47]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,90,89,88,87,86,85,84,83,82,81,71,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,69,79,78,77,76,75,74,73,72,62,52,42,32,33,34,35,36,37,38,48,58,68,67,66,65,64,63,53,43,44,45,46,47,57,56,55,54]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,40,50,60,70,80,90,100,99,98,97,96,95,94,93,92,91,81,71,61,51,41,31,21,22,23,24,25,26,27,28,29,39,49,59,69,79,89,88,87,86,85,84,83,82,72,62,52,42,32,33,34,35,36,37,38,48,58,68,78,77,76,75,74,73,63,53,43,44,45,46,47,57,67,66,65,64,54,55,56]"
            ]
        }
    },
    "55": null,
    "56": {
        "title": "Merge Overlapping Intervals",
        "description": "Given an array of intervals where each interval is represented as [start, end], merge all overlapping intervals and return an array of non-overlapping intervals that cover all the intervals in the input.",
        "example": "Example 1:\n\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\nExample 2:\n\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3],[2,6],[8,10],[15,18]]",
                "[[1,4],[4,5]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,10],[2,9],[3,8],[4,7]]",
                "[[1,5],[2,3],[4,6],[7,8]]",
                "[[1,3],[4,6],[7,9],[10,12]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,5],[2,3],[4,6],[7,8],[9,10]]",
                "[[1,3],[2,4],[5,7],[6,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]"
            ],
            "outputs": [
                "[[1,6],[8,10],[15,18]]",
                "[[1,5]]",
                "[[1,2],[3,4],[5,6],[7,8]]",
                "[[1,10]]",
                "[[1,6],[7,8]]",
                "[[1,3],[4,6],[7,9],[10,12]]",
                "[[1,5]]",
                "[[1,2],[3,4],[5,6],[7,8],[9,10]]",
                "[[1,6],[7,8],[9,10]]",
                "[[1,4],[5,8]]",
                "[[1,6]]",
                "[[1,7]]",
                "[[1,8]]",
                "[[1,9]]",
                "[[1,10]]",
                "[[1,11]]",
                "[[1,12]]",
                "[[1,13]]",
                "[[1,14]]",
                "[[1,15]]"
            ]
        }
    },
    "57": {
        "title": "Insert Interval",
        "description": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn `intervals` after the insertion.",
        "example": "Example:\n\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
                "[[1,3],[6,9]]",
                "[[1,2],[3,5],[6,7],[8,10],[12,16]]"
            ],
            "outputs": [
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]",
                "[[1,5],[6,9]]",
                "[[1,2],[3,10],[12,16]]"
            ]
        }
    },
    "58": {
        "title": "Length of Last Word",
        "description": "Given a string `s` consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.",
        "example": "Example 1:\n\nInput: s = \"Hello World \"\nOutput: 5\nExplanation: The last word is \"World \" with length 5.",
        "level": "Easy",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"Hello World \"",
                "\"   fly me   to   the moon   \"",
                "\"luffy is still joyboy \"",
                "\"This is a test\"",
                "\"Coding is fun\"",
                "\"  Hello  \"",
                "\"  Hello World\"",
                "\"Hello World\"",
                "\"Hello\"",
                "\"\"",
                "\"   \"",
                "\"a\"",
                "\"a b\"",
                "\"a b c\"",
                "\"a b c d\"",
                "\"a b c d e\"",
                "\"a b c d e f\"",
                "\"a b c d e f g\"",
                "\"a b c d e f g h\"",
                "\"a b c d e f g h i\""
            ],
            "outputs": [
                5,
                4,
                6,
                4,
                3,
                5,
                5,
                5,
                5,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "59": {
        "title": "Spiral Matrix",
        "description": "Given a positive integer `n`, generate an `n x n` matrix filled with elements from `1` to `n2` in spiral order.",
        "example": "Example 1:\n\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix"
        ],
        "test_cases": {
            "inputs": [
                3,
                4,
                5,
                1,
                2,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20
            ],
            "outputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        8,
                        9,
                        4
                    ],
                    [
                        7,
                        6,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        12,
                        13,
                        14,
                        5
                    ],
                    [
                        11,
                        16,
                        15,
                        6
                    ],
                    [
                        10,
                        9,
                        8,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        16,
                        17,
                        18,
                        19,
                        6
                    ],
                    [
                        15,
                        24,
                        25,
                        20,
                        7
                    ],
                    [
                        14,
                        23,
                        22,
                        21,
                        8
                    ],
                    [
                        13,
                        12,
                        11,
                        10,
                        9
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        4,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        8,
                        9,
                        4
                    ],
                    [
                        7,
                        6,
                        5
                    ],
                    [
                        12,
                        11,
                        10
                    ],
                    [
                        13,
                        14,
                        15
                    ],
                    [
                        18,
                        17,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        8
                    ],
                    [
                        23,
                        40,
                        41,
                        42,
                        43,
                        30,
                        9
                    ],
                    [
                        22,
                        39,
                        48,
                        49,
                        44,
                        31,
                        10
                    ],
                    [
                        21,
                        38,
                        47,
                        46,
                        45,
                        32,
                        11
                    ],
                    [
                        20,
                        37,
                        36,
                        35,
                        34,
                        33,
                        12
                    ],
                    [
                        19,
                        18,
                        17,
                        16,
                        15,
                        14,
                        13
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        10
                    ],
                    [
                        31,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        40,
                        11
                    ],
                    [
                        30,
                        55,
                        72,
                        73,
                        74,
                        75,
                        62,
                        41,
                        12
                    ],
                    [
                        29,
                        54,
                        71,
                        80,
                        81,
                        76,
                        63,
                        42,
                        13
                    ],
                    [
                        28,
                        53,
                        70,
                        79,
                        78,
                        77,
                        64,
                        43,
                        14
                    ],
                    [
                        27,
                        52,
                        69,
                        68,
                        67,
                        66,
                        65,
                        44,
                        15
                    ],
                    [
                        26,
                        51,
                        50,
                        49,
                        48,
                        47,
                        46,
                        45,
                        16
                    ],
                    [
                        25,
                        24,
                        23,
                        22,
                        21,
                        20,
                        19,
                        18,
                        17
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        11
                    ],
                    [
                        35,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        45,
                        12
                    ],
                    [
                        34,
                        63,
                        84,
                        85,
                        86,
                        87,
                        88,
                        71,
                        46,
                        13
                    ],
                    [
                        33,
                        62,
                        83,
                        96,
                        97,
                        98,
                        89,
                        72,
                        47,
                        14
                    ],
                    [
                        32,
                        61,
                        82,
                        95,
                        100,
                        99,
                        90,
                        73,
                        48,
                        15
                    ],
                    [
                        31,
                        60,
                        81,
                        94,
                        93,
                        92,
                        91,
                        74,
                        49,
                        16
                    ],
                    [
                        30,
                        59,
                        80,
                        79,
                        78,
                        77,
                        76,
                        75,
                        50,
                        17
                    ],
                    [
                        29,
                        58,
                        57,
                        56,
                        55,
                        54,
                        53,
                        52,
                        51,
                        18
                    ],
                    [
                        28,
                        27,
                        26,
                        25,
                        24,
                        23,
                        22,
                        21,
                        20,
                        19
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        12
                    ],
                    [
                        39,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        50,
                        13
                    ],
                    [
                        38,
                        71,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        80,
                        51,
                        14
                    ],
                    [
                        37,
                        70,
                        95,
                        120,
                        121,
                        122,
                        123,
                        102,
                        81,
                        52,
                        15
                    ],
                    [
                        36,
                        69,
                        94,
                        119,
                        132,
                        133,
                        124,
                        103,
                        82,
                        53,
                        16
                    ],
                    [
                        35,
                        68,
                        93,
                        118,
                        131,
                        134,
                        125,
                        104,
                        83,
                        54,
                        17
                    ],
                    [
                        34,
                        67,
                        92,
                        117,
                        130,
                        135,
                        126,
                        105,
                        84,
                        55,
                        18
                    ],
                    [
                        33,
                        66,
                        91,
                        116,
                        129,
                        136,
                        127,
                        106,
                        85,
                        56,
                        19
                    ],
                    [
                        32,
                        65,
                        90,
                        115,
                        128,
                        137,
                        128,
                        107,
                        86,
                        57,
                        20
                    ],
                    [
                        31,
                        64,
                        89,
                        114,
                        113,
                        112,
                        111,
                        110,
                        109,
                        108,
                        21
                    ],
                    [
                        30,
                        63,
                        88,
                        87,
                        86,
                        85,
                        84,
                        83,
                        82,
                        81,
                        22
                    ],
                    [
                        29,
                        62,
                        61,
                        60,
                        59,
                        58,
                        57,
                        56,
                        55,
                        54,
                        23
                    ],
                    [
                        28,
                        27,
                        26,
                        25,
                        24,
                        23,
                        22,
                        21,
                        20,
                        19,
                        18
                    ],
                    [
                        17,
                        16,
                        15,
                        14,
                        13,
                        12,
                        11,
                        10,
                        9,
                        8,
                        7
                    ],
                    [
                        36,
                        35,
                        34,
                        33,
                        32,
                        31,
                        30,
                        29,
                        28,
                        27,
                        26
                    ],
                    [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        25
                    ],
                    [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        24
                    ],
                    [
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        23
                    ],
                    [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        22
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        21
                    ],
                    [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        20
                    ],
                    [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        19
                    ],
                    [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        18
                    ],
                    [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        17
                    ],
                    [
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        16
                    ],
                    [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        15
                    ],
                    [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        14
                    ],
                    [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        13
                    ],
                    [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        12
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        11
                    ],
                    [
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        10
                    ],
                    [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        9
                    ],
                    [
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        8
                    ],
                    [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        7
                    ],
                    [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        6
                    ],
                    [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        5
                    ],
                    [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        4
                    ],
                    [
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        3
                    ],
                    [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        2
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        1
                    ]
                ]
            ]
        }
    },
    "60": {
        "title": "Permutation Sequence",
        "description": "Given a set of numbers from 1 to n, the set contains a total of n! unique permutations. By listing and labeling all of the permutations in order, we get a sequence. Given n and k, return the kth permutation sequence.",
        "example": "For example, given n = 3 and k = 3, the set of permutations is [\"123\", \"132\", \"213\", \"231\", \"312\", \"321\"]. The 3rd permutation is \"213\", so the output would be \"213\".",
        "level": "Medium",
        "tags": [
            "Math",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    3
                ],
                [
                    4,
                    9
                ],
                [
                    3,
                    1
                ],
                [
                    5,
                    24
                ],
                [
                    6,
                    720
                ],
                [
                    9,
                    362880
                ],
                [
                    9,
                    362879
                ]
            ],
            "outputs": [
                "213",
                "2314",
                "123",
                "54321",
                "654321",
                "987654321",
                "987654312"
            ]
        }
    },
    "61": {
        "title": "Rotate Linked List",
        "description": "Given the `head` of a linked list, rotate the list to the right by `k` places.",
        "example": "Example:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]",
        "level": "Medium",
        "tags": [
            "linked list",
            "rotation"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 2
                },
                {
                    "head": [
                        0,
                        1,
                        2
                    ],
                    "k": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 5
                },
                {
                    "head": [],
                    "k": 2
                },
                {
                    "head": [
                        1
                    ],
                    "k": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 500
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 1000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 2000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": 2000000001
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -500
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -1000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -2000000000
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "k": -2000000001
                }
            ],
            "outputs": [
                [
                    4,
                    5,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    4,
                    5,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    0,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ]
        }
    },
    "62": {
        "title": "Unique Paths in a Grid",
        "description": "A robot is located at the top-left corner of an `m x n` grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Given the dimensions of the grid, return the number of possible unique paths that the robot can take to reach the bottom-right corner.",
        "example": "Example:\n\nInput: m = 3, n = 7\nOutput: 28\n\nExplanation: From the top-left corner, there are a total of 28 unique paths to reach the bottom-right corner.\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 unique paths to reach the bottom-right corner: Right -> Down -> Down, Down -> Down -> Right, Down -> Right -> Down",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    7
                ],
                [
                    3,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    5,
                    5
                ],
                [
                    10,
                    10
                ],
                [
                    100,
                    1
                ],
                [
                    1,
                    100
                ],
                [
                    50,
                    50
                ],
                [
                    100,
                    100
                ],
                [
                    2,
                    5
                ],
                [
                    5,
                    2
                ],
                [
                    4,
                    3
                ],
                [
                    3,
                    4
                ],
                [
                    6,
                    7
                ],
                [
                    7,
                    6
                ],
                [
                    8,
                    8
                ],
                [
                    9,
                    9
                ],
                [
                    10,
                    5
                ],
                [
                    5,
                    10
                ]
            ],
            "outputs": [
                28,
                3,
                1,
                2,
                70,
                48620,
                1,
                1,
                204190544,
                22750883079422934966181954039568885395604168260154104734000,
                10,
                10,
                10,
                10,
                792,
                792,
                3432,
                48620,
                252,
                252
            ]
        }
    },
    "63": null,
    "64": {
        "title": "Minimum Path Sum",
        "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time.",
        "example": "Example:\n\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "path finding"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        3,
                        1
                    ],
                    [
                        1,
                        5,
                        1
                    ],
                    [
                        4,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        9,
                        10,
                        11,
                        12
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        0
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ]
            ],
            "outputs": [
                7,
                12,
                30,
                9,
                0,
                55,
                110,
                1,
                0,
                4
            ]
        }
    },
    "65": {
        "title": "Valid Number",
        "description": "Given a string `s`, determine if it is a valid number. A valid number can be split into components in a specific order: a decimal number or an integer, followed by an optional 'e' or 'E' followed by an integer. A decimal number can have an optional sign character ('+' or '-'), followed by one of the following formats: one or more digits followed by a dot '.', one or more digits followed by a dot '.' and one or more digits, or a dot '.' followed by one or more digits. An integer can have an optional sign character followed by one or more digits. Return true if the given string is a valid number, otherwise return false.",
        "example": "Example:\n\nInput: \"0 \"\nOutput: true\n\nInput: \"e \"\nOutput: false\n\nInput: \". \"\nOutput: false\n\nExplanation:\n\nIn the first example, the string \"0 \" is a valid number as it is an integer.\n\nIn the second example, the string \"e \" is not a valid number as it does not have any components.\n\nIn the third example, the string \". \" is not a valid number as it does not have any components.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"2 \"",
                "\"0089 \"",
                "\"-0.1 \"",
                "\"+3.14 \"",
                "\"4. \"",
                "\"-.9 \"",
                "\"2e10 \"",
                "\"-90E3 \"",
                "\"3e+7 \"",
                "\"+6e-1 \"",
                "\"53.5e93 \"",
                "\"-123.456e789 \"",
                "\"abc \"",
                "\"1a \"",
                "\"1e \"",
                "\"e3 \"",
                "\"99e2.5 \"",
                "\"--6 \"",
                "\"-+3 \"",
                "\"95a54e53 \""
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "66": null,
    "67": null,
    "68": {
        "title": "Text Justification",
        "description": "Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words.",
        "example": "Example 1:\n\nInput: words = [\"This \",  \"is \",  \"an \",  \"example \",  \"of \",  \"text \",  \"justification. \"], maxWidth = 16\nOutput:\n[\"This    is    an \", \"example  of text \", \"justification.   \"]\n\nExample 2:\n\nInput: words = [\"What \", \"must \", \"be \", \"acknowledgment \", \"shall \", \"be \"], maxWidth = 16\nOutput:\n[\"What   must   be \", \"acknowledgment   \", \"shall be         \"]\n\nExample 3:\n\nInput: words = [\"Science \", \"is \", \"what \", \"we \", \"understand \", \"well \", \"enough \", \"to \", \"explain \", \"to \", \"a \", \"computer. \", \"Art \", \"is \", \"everything \", \"else \", \"we \", \"do \"], maxWidth = 20\nOutput:\n[\"Science  is  what we \", \"understand      well \", \"enough to explain to \", \"a  computer.  Art is \", \"everything  else  we \", \"do                   \"]",
        "level": "Medium",
        "tags": [
            "string",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                {
                    "words": [
                        "This ",
                        "is ",
                        "an ",
                        "example ",
                        "of ",
                        "text ",
                        "justification. "
                    ],
                    "maxWidth": 16
                },
                {
                    "words": [
                        "What ",
                        "must ",
                        "be ",
                        "acknowledgment ",
                        "shall ",
                        "be "
                    ],
                    "maxWidth": 16
                },
                {
                    "words": [
                        "Science ",
                        "is ",
                        "what ",
                        "we ",
                        "understand ",
                        "well ",
                        "enough ",
                        "to ",
                        "explain ",
                        "to ",
                        "a ",
                        "computer. ",
                        "Art ",
                        "is ",
                        "everything ",
                        "else ",
                        "we ",
                        "do "
                    ],
                    "maxWidth": 20
                }
            ],
            "outputs": [
                [
                    "This    is    an ",
                    "example  of text ",
                    "justification.   "
                ],
                [
                    "What   must   be ",
                    "acknowledgment   ",
                    "shall be         "
                ],
                [
                    "Science  is  what we ",
                    "understand      well ",
                    "enough to explain to ",
                    "a  computer.  Art is ",
                    "everything  else  we ",
                    "do                   "
                ]
            ]
        }
    },
    "69": {
        "title": "Square Root Rounded Down",
        "description": "Given a non-negative integer `x`, you need to find the square root of `x` rounded down to the nearest integer. The returned integer should be non-negative. You must not use any built-in exponent function or operator.",
        "example": "Example:\n\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.",
        "level": "Easy",
        "tags": [
            "Math",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                0,
                1,
                2,
                3,
                4,
                8,
                9,
                16,
                25,
                36,
                49,
                64,
                81,
                100,
                121,
                144,
                169,
                196,
                225,
                256
            ],
            "outputs": [
                0,
                1,
                1,
                1,
                2,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16
            ]
        }
    },
    "70": {
        "title": "Distinct Ways to Climb Stairs",
        "description": "You are climbing a staircase that takes `n` steps to reach the top. Each time, you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?",
        "example": "For example, if `n` is 2, there are two ways to climb to the top: 1 step + 1 step or 2 steps. Therefore, the output would be 2.\n\n",
        "level": "Easy",
        "tags": [
            "dynamic programming",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                2,
                3,
                4,
                5,
                6,
                10,
                15,
                20,
                25,
                30,
                35,
                40,
                45
            ],
            "outputs": [
                2,
                3,
                5,
                8,
                13,
                89,
                987,
                10946,
                121393,
                1346269,
                14930352,
                165580141,
                1836311903
            ]
        }
    },
    "71": {
        "title": "Simplified Canonical Path",
        "description": "Given an absolute path to a file or directory in a Unix-style file system, convert it to the simplified canonical path. In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names. The canonical path should have the following format: \n\n- The path starts with a single slash '/'. \n- Any two directories are separated by a single slash '/'. \n- The path does not end with a trailing '/'. \n- The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..').",
        "example": "Example:\n\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"/home/\"",
                "\"/../\"",
                "\"/home//foo/\"",
                "\"/a/./b/../../c/\"",
                "\"/a//b////c/d//././/..\"",
                "\"/a/../../b/../c//.//\"",
                "\"/a//b////c/d//././/..\"",
                "\"/a/../../b/../c//.//\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\"",
                "\"/a/./b/./c/./d/\"",
                "\"/a/../../../../../..\""
            ],
            "outputs": [
                "\"/home\"",
                "\"/\"",
                "\"/home/foo\"",
                "\"/c\"",
                "\"/a/b/c\"",
                "\"/c\"",
                "\"/a/b/c\"",
                "\"/c\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\"",
                "\"/a/b/c/d\"",
                "\"/\""
            ]
        }
    },
    "72": {
        "title": "Minimum Edit Distance",
        "description": "Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. You have the following three operations permitted on a word: Insert a character, Delete a character, Replace a character.",
        "example": "Example:\n\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: horse -> rorse (replace 'h' with 'r'), rorse -> rose (remove 'r'), rose -> ros (remove 'e')",
        "level": "Medium",
        "tags": [
            "Dynamic Programming",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "horse",
                    "ros"
                ],
                [
                    "intention",
                    "execution"
                ],
                [
                    "kitten",
                    "sitting"
                ],
                [
                    "abc",
                    "def"
                ],
                [
                    "abcdef",
                    "abcdef"
                ],
                [
                    "abcdef",
                    "fedcba"
                ],
                [
                    "abcdef",
                    "abc"
                ],
                [
                    "abc",
                    "abcdef"
                ],
                [
                    "",
                    ""
                ],
                [
                    "abc",
                    ""
                ],
                [
                    "",
                    "abc"
                ],
                [
                    "a",
                    "a"
                ],
                [
                    "a",
                    "b"
                ],
                [
                    "a",
                    ""
                ],
                [
                    "",
                    "a"
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    "abcdefghijklmnopqrstuvwxyz"
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    "zyxwvutsrqponmlkjihgfedcba"
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    "abc"
                ],
                [
                    "abc",
                    "abcdefghijklmnopqrstuvwxyz"
                ],
                [
                    "abc",
                    "cba"
                ]
            ],
            "outputs": [
                3,
                5,
                3,
                3,
                0,
                6,
                3,
                3,
                0,
                3,
                3,
                0,
                1,
                1,
                1,
                0,
                0,
                23,
                23,
                23,
                2
            ]
        }
    },
    "73": null,
    "74": {
        "title": "Search in Sorted Matrix",
        "description": "You are given an `m x n` integer matrix `matrix` with the following two properties:\n\n* Each row is sorted in non-decreasing order.\n* The first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer `target`, return `true` if `target` is in `matrix` or `false` otherwise.\n\nYou must write a solution in `O(log(m * n))` time complexity.",
        "example": "Example:\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false",
        "level": "Medium",
        "tags": [
            "array",
            "binary search"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]",
                "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]"
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "75": {
        "title": "Sort Colors",
        "description": "Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function.",
        "example": "Example:\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nInput: nums = [2,0,1]\nOutput: [0,1,2]",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    0,
                    2,
                    1,
                    1,
                    0
                ],
                [
                    2,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    2,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    2
                ],
                [
                    0,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    0
                ],
                [
                    2,
                    0,
                    1,
                    0,
                    2,
                    1
                ],
                [
                    1,
                    0,
                    2,
                    0,
                    1,
                    2
                ],
                [
                    2,
                    1,
                    0,
                    1,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    2,
                    2,
                    1,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2,
                    2,
                    1,
                    0
                ],
                [
                    2,
                    1,
                    0,
                    0,
                    1,
                    2
                ],
                [
                    1,
                    2,
                    0,
                    0,
                    2,
                    1
                ],
                [
                    0,
                    2,
                    1,
                    1,
                    0,
                    2
                ]
            ],
            "outputs": [
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    2
                ]
            ]
        }
    },
    "76": {
        "title": "Minimum Window Substring",
        "description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, find the minimum window substring of `s` that contains all the characters from `t`. If there is no such substring, return an empty string.",
        "example": "Example 1:\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "two pointers"
        ],
        "test_cases": {
            "inputs": [
                [
                    "ADOBECODEBANC",
                    "ABC"
                ],
                [
                    "a",
                    "a"
                ],
                [
                    "a",
                    "aa"
                ],
                [
                    "ab",
                    "a"
                ],
                [
                    "ab",
                    "b"
                ],
                [
                    "abc",
                    "ab"
                ],
                [
                    "abc",
                    "ac"
                ],
                [
                    "abc",
                    "abc"
                ],
                [
                    "abc",
                    "abcd"
                ],
                [
                    "aabbcc",
                    "abc"
                ],
                [
                    "aabbcc",
                    "abcc"
                ],
                [
                    "aabbcc",
                    "aabbcc"
                ],
                [
                    "aabbcc",
                    "aabbccd"
                ],
                [
                    "aabbcc",
                    "aabbccdd"
                ],
                [
                    "aabbcc",
                    "aabbccdde"
                ],
                [
                    "aabbcc",
                    "aabbccddeeff"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffg"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffgg"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffggh"
                ],
                [
                    "aabbcc",
                    "aabbccddeeffgghi"
                ]
            ],
            "outputs": [
                "BANC",
                "a",
                "",
                "a",
                "b",
                "ab",
                "abc",
                "abc",
                "",
                "aabbcc",
                "abcc",
                "aabbcc",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
            ]
        }
    },
    "77": {
        "title": "Combinations of K Numbers",
        "description": "Given two integers `n` and `k`, return all possible combinations of `k` numbers chosen from the range `[1, n]`. You may return the answer in any order.",
        "example": "Example:\n\nInput: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    5,
                    3
                ],
                [
                    10,
                    4
                ],
                [
                    3,
                    2
                ],
                [
                    8,
                    1
                ],
                [
                    20,
                    5
                ],
                [
                    2,
                    2
                ],
                [
                    6,
                    4
                ],
                [
                    15,
                    3
                ],
                [
                    7,
                    1
                ],
                [
                    12,
                    2
                ],
                [
                    18,
                    6
                ],
                [
                    9,
                    3
                ],
                [
                    11,
                    1
                ],
                [
                    14,
                    4
                ],
                [
                    19,
                    2
                ],
                [
                    13,
                    5
                ],
                [
                    16,
                    3
                ],
                [
                    17,
                    1
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        4
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        2,
                        4
                    ],
                    [
                        1,
                        2,
                        5
                    ],
                    [
                        1,
                        3,
                        4
                    ],
                    [
                        1,
                        3,
                        5
                    ],
                    [
                        1,
                        4,
                        5
                    ],
                    [
                        2,
                        3,
                        4
                    ],
                    [
                        2,
                        3,
                        5
                    ],
                    [
                        2,
                        4,
                        5
                    ],
                    [
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        3,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        5,
                        6
                    ],
                    [
                        1,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        3,
                        4,
                        6
                    ],
                    [
                        1,
                        3,
                        5,
                        6
                    ],
                    [
                        1,
                        4,
                        5,
                        6
                    ],
                    [
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        2,
                        3,
                        4,
                        6
                    ],
                    [
                        2,
                        3,
                        5,
                        6
                    ],
                    [
                        2,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        3
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ],
                    [
                        5
                    ],
                    [
                        6
                    ],
                    [
                        7
                    ],
                    [
                        8
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        7,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        8,
                        9
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        4,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        4,
                        6,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        3,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        10
                    ],
                    [
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        7
                    ],
                    [
                        1,
                        2,
                        4,
                        8
                    ],
                    [
                        1,
                        2,
                        4,
                        9
                    ],
                    [
                        1,
                        2,
                        4,
                        10
                    ],
                    [
                        1,
                        2,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        5,
                        10
                    ],
                    [
                        1,
                        2,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        6,
                        8
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        1,
                        5
                    ],
                    [
                        1,
                        6
                    ],
                    [
                        1,
                        7
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        3,
                        5
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        4,
                        6
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        5,
                        7
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        6,
                        8
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        7,
                        9
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        8,
                        10
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        9,
                        11
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        10,
                        12
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        9,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        7,
                        8
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        1,
                        2,
                        3,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        13
                    ],
                    [
                        1,
                        2,
                        3,
                        14
                    ],
                    [
                        1,
                        2,
                        3,
                        15
                    ],
                    [
                        1,
                        2,
                        3,
                        16
                    ],
                    [
                        1,
                        2,
                        3,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        18
                    ],
                    [
                        1,
                        2,
                        3,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        20
                    ],
                    [
                        1,
                        2,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        4,
                        7
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        13
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        14
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        15
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        16
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        18
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        20
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        5,
                        8
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        1,
                        5
                    ],
                    [
                        1,
                        6
                    ],
                    [
                        1,
                        7
                    ],
                    [
                        1,
                        8
                    ],
                    [
                        1,
                        9
                    ],
                    [
                        1,
                        10
                    ],
                    [
                        1,
                        11
                    ],
                    [
                        1,
                        12
                    ],
                    [
                        1,
                        13
                    ],
                    [
                        1,
                        14
                    ],
                    [
                        1,
                        15
                    ],
                    [
                        1,
                        16
                    ],
                    [
                        1,
                        17
                    ],
                    [
                        1,
                        18
                    ],
                    [
                        1,
                        19
                    ],
                    [
                        1,
                        20
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        13
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        14
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        15
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        16
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        17
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        18
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        19
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        20
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        8
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        9
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        11
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        12
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        7,
                        13
                    ]
                ]
            ]
        }
    },
    "78": {
        "title": "Subset Power Set",
        "description": "Given an integer array `nums` of **unique** elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.",
        "example": "Example 1:\n\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\n\nInput: nums = [0]\nOutput: [[],[0]]",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[0]",
                "[4,5,6]",
                "[-1,0,1]",
                "[10,20,30,40]",
                "[7,8,9,10,11]",
                "[2,4,6,8,10,12]",
                "[1,3,5,7,9,11,13]",
                "[2,3,5,7,11,13,17,19]",
                "[1,2,4,8,16,32,64,128,256]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,10,15,20,25,30,35,40,45,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]"
            ],
            "outputs": [
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]",
                "[[],[0]]",
                "[[],[4],[5],[4,5],[6],[4,6],[5,6],[4,5,6]]",
                "[[],[-1],[0],[-1,0],[1],[-1,1],[0,1],[-1,0,1]]",
                "[[],[10],[20],[10,20],[30],[10,30],[20,30],[10,20,30],[40],[10,40],[20,40],[10,20,40],[30,40],[10,30,40],[20,30,40],[10,20,30,40]]",
                "[[],[7],[8],[7,8],[9],[7,9],[8,9],[7,8,9],[10],[7,10],[8,10],[7,8,10],[9,10],[7,9,10],[8,9,10],[7,8,9,10],[11],[7,11],[8,11],[7,8,11],[9,11],[7,9,11],[8,9,11],[7,8,9,11],[10,11],[7,10,11],[8,10,11],[7,8,10,11],[9,10,11],[7,9,10,11],[8,9,10,11],[7,8,9,10,11]]",
                "[[],[2],[4],[2,4],[6],[2,6],[4,6],[2,4,6],[8],[2,8],[4,8],[2,4,8],[6,8],[2,6,8],[4,6,8],[2,4,6,8],[10],[2,10],[4,10],[2,4,10],[6,10],[2,6,10],[4,6,10],[2,4,6,10],[8,10],[2,8,10],[4,8,10],[2,4,8,10],[6,8,10],[2,6,8,10],[4,6,8,10],[2,4,6,8,10],[12],[2,12],[4,12],[2,4,12],[6,12],[2,6,12],[4,6,12],[2,4,6,12],[8,12],[2,8,12],[4,8,12],[2,4,8,12],[6,8,12],[2,6,8,12],[4,6,8,12],[2,4,6,8,12]]",
                "[[],[1],[3],[1,3],[5],[1,5],[3,5],[1,3,5],[7],[1,7],[3,7],[1,3,7],[5,7],[1,5,7],[3,5,7],[1,3,5,7],[9],[1,9],[3,9],[1,3,9],[5,9],[1,5,9],[3,5,9],[1,3,5,9],[11],[1,11],[3,11],[1,3,11],[5,11],[1,5,11],[3,5,11],[1,3,5,11],[13],[1,13],[3,13],[1,3,13],[5,13],[1,5,13],[3,5,13],[1,3,5,13],[15],[1,15],[3,15],[1,3,15],[5,15],[1,5,15],[3,5,15],[1,3,5,15]]",
                "[[],[2],[3],[2,3],[5],[2,5],[3,5],[2,3,5],[7],[2,7],[3,7],[2,3,7],[5,7],[2,5,7],[3,5,7],[2,3,5,7],[11],[2,11],[3,11],[2,3,11],[5,11],[2,5,11],[3,5,11],[2,3,5,11],[13],[2,13],[3,13],[2,3,13],[5,13],[2,5,13],[3,5,13],[2,3,5,13],[17],[2,17],[3,17],[2,3,17],[5,17],[2,5,17],[3,5,17],[2,3,5,17],[19],[2,19],[3,19],[2,3,19],[5,19],[2,5,19],[3,5,19],[2,3,5,19]]",
                "[[],[1],[2],[1,2],[4],[1,4],[2,4],[1,2,4],[8],[1,8],[2,8],[1,2,8],[4,8],[1,4,8],[2,4,8],[1,2,4,8],[16],[1,16],[2,16],[1,2,16],[4,16],[1,4,16],[2,4,16],[1,2,4,16],[32],[1,32],[2,32],[1,2,32],[4,32],[1,4,32],[2,4,32],[1,2,4,32],[64],[1,64],[2,64],[1,2,64],[4,64],[1,4,64],[2,4,64],[1,2,4,64],[128],[1,128],[2,128],[1,2,128],[4,128],[1,4,128],[2,4,128],[1,2,4,128],[256],[1,256],[2,256],[1,2,256],[4,256],[1,4,256],[2,4,256],[1,2,4,256]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4],[5],[1,5],[2,5],[1,2,5],[3,5],[1,3,5],[2,3,5],[1,2,3,5],[6],[1,6],[2,6],[1,2,6],[3,6],[1,3,6],[2,3,6],[1,2,3,6],[7],[1,7],[2,7],[1,2,7],[3,7],[1,3,7],[2,3,7],[1,2,3,7],[8],[1,8],[2,8],[1,2,8],[3,8],[1,3,8],[2,3,8],[1,2,3,8],[9],[1,9],[2,9],[1,2,9],[3,9],[1,3,9],[2,3,9],[1,2,3,9],[10],[1,10],[2,10],[1,2,10],[3,10],[1,3,10],[2,3,10],[1,2,3,10]]",
                "[[],[5],[10],[5,10],[15],[5,15],[10,15],[5,10,15],[20],[5,20],[10,20],[5,10,20],[15,20],[5,15,20],[10,15,20],[5,10,15,20],[25],[5,25],[10,25],[5,10,25],[15,25],[5,15,25],[10,15,25],[5,10,15,25],[30],[5,30],[10,30],[5,10,30],[15,30],[5,15,30],[10,15,30],[5,10,15,30],[35],[5,35],[10,35],[5,10,35],[15,35],[5,15,35],[10,15,35],[5,10,15,35],[40],[5,40],[10,40],[5,10,40],[15,40],[5,15,40],[10,15,40],[5,10,15,40],[45],[5,45],[10,45],[5,10,45],[15,45],[5,15,45],[10,15,45],[5,10,15,45],[50],[5,50],[10,50],[5,10,50],[15,50],[5,15,50],[10,15,50],[5,10,15,50]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25],[26],[1,26],[2,26],[1,2,26],[27],[1,27],[2,27],[1,2,27],[28],[1,28],[2,28],[1,2,28],[29],[1,29],[2,29],[1,2,29],[30],[1,30],[2,30],[1,2,30]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25],[26],[1,26],[2,26],[1,2,26],[27],[1,27],[2,27],[1,2,27],[28],[1,28],[2,28],[1,2,28],[29],[1,29],[2,29],[1,2,29],[30],[1,30],[2,30],[1,2,30],[31],[1,31],[2,31],[1,2,31],[32],[1,32],[2,32],[1,2,32],[33],[1,33],[2,33],[1,2,33],[34],[1,34],[2,34],[1,2,34],[35],[1,35],[2,35],[1,2,35],[36],[1,36],[2,36],[1,2,36],[37],[1,37],[2,37],[1,2,37],[38],[1,38],[2,38],[1,2,38],[39],[1,39],[2,39],[1,2,39],[40],[1,40],[2,40],[1,2,40]]",
                "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[5],[1,5],[2,5],[1,2,5],[6],[1,6],[2,6],[1,2,6],[7],[1,7],[2,7],[1,2,7],[8],[1,8],[2,8],[1,2,8],[9],[1,9],[2,9],[1,2,9],[10],[1,10],[2,10],[1,2,10],[11],[1,11],[2,11],[1,2,11],[12],[1,12],[2,12],[1,2,12],[13],[1,13],[2,13],[1,2,13],[14],[1,14],[2,14],[1,2,14],[15],[1,15],[2,15],[1,2,15],[16],[1,16],[2,16],[1,2,16],[17],[1,17],[2,17],[1,2,17],[18],[1,18],[2,18],[1,2,18],[19],[1,19],[2,19],[1,2,19],[20],[1,20],[2,20],[1,2,20],[21],[1,21],[2,21],[1,2,21],[22],[1,22],[2,22],[1,2,22],[23],[1,23],[2,23],[1,2,23],[24],[1,24],[2,24],[1,2,24],[25],[1,25],[2,25],[1,2,25],[26],[1,26],[2,26],[1,2,26],[27],[1,27],[2,27],[1,2,27],[28],[1,28],[2,28],[1,2,28],[29],[1,29],[2,29],[1,2,29],[30],[1,30],[2,30],[1,2,30],[31],[1,31],[2,31],[1,2,31],[32],[1,32],[2,32],[1,2,32],[33],[1,33],[2,33],[1,2,33],[34],[1,34],[2,34],[1,2,34],[35],[1,35],[2,35],[1,2,35],[36],[1,36],[2,36],[1,2,36],[37],[1,37],[2,37],[1,2,37],[38],[1,38],[2,38],[1,2,38],[39],[1,39],[2,39],[1,2,39],[40],[1,40],[2,40],[1,2,40],[41],[1,41],[2,41],[1,2,41],[42],[1,42],[2,42],[1,2,42],[43],[1,43],[2,43],[1,2,43],[44],[1,44],[2,44],[1,2,44],[45],[1,45],[2,45],[1,2,45],[46],[1,46],[2,46],[1,2,46],[47],[1,47],[2,47],[1,2,47],[48],[1,48],[2,48],[1,2,48],[49],[1,49],[2,49],[1,2,49],[50],[1,50],[2,50],[1,2,50]]"
            ]
        }
    },
    "79": {
        "title": "Word Search",
        "description": "Given an `m x n` grid of characters `board` and a string `word`, determine if `word` exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
        "example": "Given a board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], and a word = 'ABCCED', the function should return true, as the word 'ABCCED' can be formed by starting at cell (0,0) and moving right, down, down, left, and up.\n\nGiven a board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], and a word = 'SEE', the function should return true, as the word 'SEE' can be formed by starting at cell (0,1) and moving right, down, and down.\n\nGiven a board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], and a word = 'ABCB', the function should return false, as it is not possible to form the word 'ABCB' in the grid.",
        "level": "Medium",
        "tags": [
            "Array",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCCED']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'SEE']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCB']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCD']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ASAD']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABFCE']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDAS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSC']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSA']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSAS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSF']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSFS']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSFSC']",
                "[[['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], 'ABCESEEDASFSFSCSASFSFSCS']"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "false",
                "false",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "80": null,
    "81": {
        "title": "Search in Rotated Sorted Array II",
        "description": "You are given an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values). Before being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`. Given the array `nums` **after** the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`. You must decrease the overall operation steps as much as possible.",
        "example": "Example 1:\n\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n\nExplanation: The array after rotation is [0,1,2,2,5,6,0]. The target element 0 is present in the array, so the output is true.\n\nExample 2:\n\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\nExplanation: The array after rotation is [0,1,2,2,5,6,0]. The target element 3 is not present in the array, so the output is false.",
        "level": "Medium",
        "tags": [
            "Array",
            "Binary Search"
        ],
        "test_cases": {
            "inputs": [
                "[2,5,6,0,0,1,2]",
                "[2,5,6,0,0,1,2]",
                "[4,5,6,7,0,1,2]",
                "[4,5,6,7,0,1,2]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]",
                "[1,1,1,1,1,1,1]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "82": {
        "title": "Remove Duplicates from Sorted List",
        "description": "Given the `head` of a sorted linked list, remove all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",
        "example": "Example 1:\n\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n\nExample 2:\n\nInput: head = [1,1,1,2,3]\nOutput: [2,3]",
        "level": "Medium",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,3,4,4,5]",
                "[1,1,1,2,3]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[]",
                "[1]",
                "[1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[1,2,5]",
                "[2,3]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1]",
                "[]",
                "[1]",
                "[1]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "83": {
        "title": "Remove Duplicates from Sorted List",
        "description": "Given the `head` of a sorted linked list, remove all duplicates such that each element appears only once. Return the linked list sorted as well.",
        "example": "Example 1:\n\nInput: head = [1,1,2]\nOutput: [1,2]\n\nExample 2:\n\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]",
        "level": "Easy",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,1,2]",
                "[1,1,2,3,3]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5]",
                "[]",
                "[1]",
                "[1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
                "[-1,-1,0,0,0,1,1,1,1,1]",
                "[10,20,30,40,50,60,70,80,90,100]"
            ],
            "outputs": [
                "[1,2]",
                "[1,2,3]",
                "[1]",
                "[1,2,3,4,5]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[-1,0,1]",
                "[10,20,30,40,50,60,70,80,90,100]"
            ]
        }
    },
    "84": {
        "title": "Largest Rectangle in Histogram",
        "description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, write a function that returns the area of the largest rectangle in the histogram.",
        "example": "Example:\n\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where the width of each bar is 1. The largest rectangle is shown in the red area, which has an area of 10 units.",
        "level": "Medium",
        "tags": [
            "array",
            "stack",
            "histogram"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,5,6,2,3]",
                "[2,4]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "10",
                "4",
                "9",
                "9",
                "5",
                "15",
                "30",
                "30",
                "10",
                "30"
            ]
        }
    },
    "85": null,
    "86": {
        "title": "Partition Linked List",
        "description": "Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`. You should **preserve** the original relative order of the nodes in each of the two partitions.",
        "example": "Example:\n\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n\nExplanation: In the given linked list, the nodes less than 3 are [1,2,2] and the nodes greater than or equal to 3 are [4,3,5]. After partitioning, the linked list becomes [1,2,2,4,3,5].",
        "level": "Medium",
        "tags": [
            "linked list",
            "partitioning"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        4,
                        3,
                        2,
                        5,
                        2
                    ],
                    "x": 3
                },
                {
                    "head": [
                        2,
                        1
                    ],
                    "x": 2
                },
                {
                    "head": [
                        5,
                        5,
                        5,
                        5
                    ],
                    "x": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 0
                },
                {
                    "head": [],
                    "x": 3
                },
                {
                    "head": [
                        1
                    ],
                    "x": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 3
                },
                {
                    "head": [
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "x": 3
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "x": 1
                },
                {
                    "head": [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    "x": 2
                },
                {
                    "head": [
                        3,
                        3,
                        3,
                        3,
                        3
                    ],
                    "x": 3
                },
                {
                    "head": [
                        4,
                        4,
                        4,
                        4,
                        4
                    ],
                    "x": 4
                },
                {
                    "head": [
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "x": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "x": 0
                }
            ],
            "outputs": [
                [
                    1,
                    2,
                    2,
                    4,
                    3,
                    5
                ],
                [
                    1,
                    2
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    5,
                    4,
                    3,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ]
        }
    },
    "87": {
        "title": "Scrambled String",
        "description": "Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1. A string can be scrambled by splitting it into two non-empty substrings at a random index and randomly deciding to swap the substrings or keep them in the same order. This process is applied recursively on each substring until the length of the substring is 1. If the scrambled string is equal to s2, return true; otherwise, return false.",
        "example": "Example:\n\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" -> \"gr/eat\" (divide at random index)\n\"gr/eat\" -> \"gr/eat\" (random decision is not to swap the two substrings and keep them in order)\n\"gr/eat\" -> \"g/r / e/at\" (apply the same algorithm recursively on both substrings, divide at random index each of them)\n\"g/r / e/at\" -> \"r/g / e/at\" (random decision was to swap the first substring and keep the second substring in the same order)\n\"r/g / e/at\" -> \"r/g / e/ a/t\" (again apply the algorithm recursively, divide \"at\" to \"a/t\")\n\"r/g / e/ a/t\" -> \"r/g / e/ a/t\" (random decision is to keep both substrings in the same order)\nThe algorithm stops now, and the result string is \"rgeat\" which is s2. As one possible scenario led s1 to be scrambled to s2, we return true.",
        "level": "Medium",
        "tags": [
            "string",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "\"great\"",
                "\"rgeat\"",
                "\"abcde\"",
                "\"caebd\"",
                "\"a\"",
                "\"a\"",
                "\"hello\"",
                "\"loleh\"",
                "\"abcd\"",
                "\"dcba\"",
                "\"apple\"",
                "\"papel\"",
                "\"car\"",
                "\"arc\"",
                "\"good\"",
                "\"dogo\"",
                "\"programming\"",
                "\"gammirnropm\"",
                "\"algorithm\"",
                "\"mhtirogla\""
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false"
            ]
        }
    },
    "88": {
        "title": "Merge Sorted Arrays",
        "description": "You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. Merge `nums1` and `nums2` into a single array sorted in **non-decreasing order**. The final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.",
        "example": "Example:\n\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,0,0,0], 3, [2,5,6], 3",
                "[1], 1, [], 0",
                "[0], 0, [1], 1",
                "[1,3,5,0,0,0], 3, [2,4,6], 3",
                "[1,2,3,4,5,6], 6, [], 0",
                "[], 0, [1,2,3], 3",
                "[1,2,3,4,5,6], 3, [7,8,9], 3",
                "[1,2,3,0,0,0], 3, [4,5,6], 3",
                "[1,2,3,0,0,0], 3, [0,0,0], 3",
                "[1,2,3,0,0,0], 3, [1,2,3], 3",
                "[1,2,3,0,0,0], 3, [0,0,1], 3",
                "[1,2,3,0,0,0], 3, [0,1,2], 3",
                "[1,2,3,0,0,0], 3, [0,1,3], 3",
                "[1,2,3,0,0,0], 3, [0,2,3], 3",
                "[1,2,3,0,0,0], 3, [1,2,4], 3",
                "[1,2,3,0,0,0], 3, [1,3,4], 3",
                "[1,2,3,0,0,0], 3, [2,3,4], 3",
                "[1,2,3,0,0,0], 3, [0,0,0,0,0], 5",
                "[1,2,3,0,0,0], 3, [1,1,1,1,1], 5",
                "[1,2,3,0,0,0], 3, [2,2,2,2,2], 5"
            ],
            "outputs": [
                "[1,2,2,3,5,6]",
                "[1]",
                "[1]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6]",
                "[1,2,3]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6]",
                "[1,2,3]",
                "[1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,3]",
                "[0,0,1,1,2,2,3,4]",
                "[0,0,1,1,2,2,3,4]",
                "[0,0,1,1,2,2,3,4]",
                "[0,0,0,0,0,1,2,3]",
                "[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]",
                "[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]"
            ]
        }
    },
    "89": null,
    "90": null,
    "91": {
        "title": "Decode Message",
        "description": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n'A' ->  \"1 \"\n'B' ->  \"2 \"\n...\n'Z' ->  \"26 \"\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into:\n\n*   `\"AAJF \"` with the grouping `(1 1 10 6)`\n*   `\"KJF \"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`.\n\nGiven a string `s` containing only digits, return the **number** of ways to **decode** it.\n",
        "example": "Example:\n\nInput: s =  \"12 \"\nOutput: 2\nExplanation:  \"12 \" could be decoded as  \"AB \" (1 2) or  \"L \" (12).\n\nInput: s =  \"226 \"\nOutput: 3\nExplanation:  \"226 \" could be decoded as  \"BZ \" (2 26),  \"VF \" (22 6), or  \"BBF \" (2 2 6).\n\nInput: s =  \"06 \"\nOutput: 0\nExplanation:  \"06 \" cannot be mapped to  \"F \" because of the leading zero ( \"6 \" is different from  \"06 \").",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "12 ",
                "226 ",
                "06 ",
                "11106 ",
                "1234567890",
                "1111111111",
                "1010101010",
                "2222222222",
                "9999999999",
                "12345678901234567890",
                "11111111111111111111",
                "10101010101010101010",
                "22222222222222222222",
                "99999999999999999999",
                "123456789012345678901234567890",
                "111111111111111111111111111111",
                "101010101010101010101010101010",
                "222222222222222222222222222222",
                "999999999999999999999999999999",
                "1234567890123456789012345678901234567890"
            ],
            "outputs": [
                2,
                3,
                0,
                4,
                89,
                89,
                89,
                89,
                89,
                10946,
                10946,
                10946,
                10946,
                10946,
                17711,
                17711,
                17711,
                17711,
                17711,
                28657
            ]
        }
    },
    "92": {
        "title": "Reverse Linked List from Position",
        "description": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.",
        "example": "Example:\n\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n\nInput: head = [5], left = 1, right = 1\nOutput: [5]",
        "level": "Medium",
        "tags": [
            "Linked List"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 4
                },
                {
                    "head": [
                        5
                    ],
                    "left": 1,
                    "right": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 4,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 3,
                    "right": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 5,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 3,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 3,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 2,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 4,
                    "right": 4
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 5,
                    "right": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 1,
                    "right": 2
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "left": 5,
                    "right": 4
                }
            ],
            "outputs": [
                [
                    1,
                    4,
                    3,
                    2,
                    5
                ],
                [
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    2,
                    1,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    5,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    1,
                    4,
                    3,
                    2,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    4,
                    3,
                    2,
                    1,
                    5
                ],
                [
                    1,
                    5,
                    4,
                    3,
                    2
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    5,
                    4,
                    3
                ],
                [
                    1,
                    4,
                    3,
                    2,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            ]
        }
    },
    "93": {
        "title": "Valid IP Addresses",
        "description": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros. Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.",
        "example": "Example 1:\n\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\", \"255.255.111.35\"]\n\nExample 2:\n\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]\n\nExample 3:\n\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\", \"1.0.102.3\", \"10.1.0.23\", \"10.10.2.3\", \"101.0.2.3\"]",
        "level": "Medium",
        "tags": [
            "String",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"25525511135\"",
                "\"0000\"",
                "\"101023\"",
                "\"19216811\"",
                "\"123456789\"",
                "\"11111111111111111111\"",
                "\"12345678901234567890\"",
                "\"123456789012345678901\"",
                "\"1234567890123456789012\"",
                "\"12345678901234567890123\"",
                "\"123456789012345678901234\"",
                "\"1234567890123456789012345\"",
                "\"12345678901234567890123456\"",
                "\"123456789012345678901234567\"",
                "\"1234567890123456789012345678\"",
                "\"12345678901234567890123456789\"",
                "\"123456789012345678901234567890\"",
                "\"1234567890123456789012345678901\"",
                "\"12345678901234567890123456789012\"",
                "\"123456789012345678901234567890123\"",
                "\"1234567890123456789012345678901234\""
            ],
            "outputs": [
                "[\"255.255.11.135\", \"255.255.111.35\"]",
                "[\"0.0.0.0\"]",
                "[\"1.0.10.23\", \"1.0.102.3\", \"10.1.0.23\", \"10.10.2.3\", \"101.0.2.3\"]",
                "[\"192.168.1.1\"]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "94": {
        "title": "Binary Tree Inorder Traversal",
        "description": "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.",
        "example": "Example 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: root = []\nOutput: []\n\nExample 3:\n\nInput: root = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "binary tree",
            "inorder traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,3]",
                "[]",
                "[1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,3,6,2,4,null,8,1,null,null,null,7,9]",
                "[1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[10,5,15,3,7,null,18]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[1,3,2]",
                "[]",
                "[1]",
                "[4,2,5,1,6,3,7,9,8,10]",
                "[1,2,3,4,5,6,7,8,9]",
                "[6,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[3,5,7,10,15,18]",
                "[1,2,4,8,16,32,64,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "95": {
        "title": "Unique Binary Search Trees II",
        "description": "Given an integer `n`, return all the structurally unique BSTs (binary search trees) that have exactly `n` nodes with unique values from 1 to n. Return the answer in any order.",
        "example": "Example 1:\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Recursion",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                5,
                6,
                7,
                8
            ],
            "outputs": [
                "[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]",
                "[[1]]",
                "[[1,null,2],[2,1]]",
                "[[1,null,2,null,3],[1,null,3,2,null,null,4],[1,null,4,2,null,null,3],[1,null,3,null,4,2],[1,null,4,null,2,null,null,3],[2,1,3,null,null,null,4],[2,1,4,null,null,null,3],[3,1,null,null,2,null,null,4],[3,1,null,null,4,2],[3,2,null,1,null,null,4],[3,2,null,4,1],[4,1,null,null,2,null,null,3],[4,1,null,null,3,2],[4,2,null,1,null,null,3],[4,3,null,1,null,null,2],[4,3,null,2,null,null,1]]",
                "[[1,null,2,null,3,null,4,5],[1,null,2,null,4,3,5],[1,null,2,null,5,3,null,4],[1,null,3,2,null,4,5],[1,null,4,2,null,3,5],[1,null,5,2,null,3,null,4],[1,null,3,2,null,5,4],[1,null,4,2,null,5,3],[1,null,5,2,null,4,3],[2,1,3,null,null,null,4,5],[2,1,4,null,null,null,3,5],[2,1,5,null,null,null,3,null,4],[3,1,null,null,2,null,4,5],[3,1,null,null,4,2,null,5],[3,1,null,null,5,2,null,4],[4,1,null,null,2,null,3,5],[4,1,null,null,3,2,null,5],[4,1,null,null,5,2,null,3],[5,1,null,null,2,null,3,null,4],[5,1,null,null,3,2,null,4],[5,1,null,null,4,2,null,3]]",
                "[[1,null,2,null,3,null,4,null,5],[1,null,2,null,3,null,5,4],[1,null,2,null,4,3,null,5],[1,null,2,null,5,3,null,4],[1,null,3,2,null,4,null,5],[1,null,4,2,null,3,null,5],[1,null,5,2,null,3,null,4],[1,null,3,2,null,5,4],[1,null,4,2,null,5,3],[1,null,5,2,null,4,3],[2,1,3,null,null,null,4,null,5],[2,1,4,null,null,null,3,null,5],[2,1,5,null,null,null,3,null,4],[3,1,null,null,2,null,4,null,5],[3,1,null,null,4,2,null,5],[3,1,null,null,5,2,null,4],[4,1,null,null,2,null,3,null,5],[4,1,null,null,3,2,null,5],[4,1,null,null,5,2,null,3],[5,1,null,null,2,null,3,null,4],[5,1,null,null,3,2,null,4],[5,1,null,null,4,2,null,3]]",
                "[[1,null,2,null,3,null,4,null,5,null,6],[1,null,2,null,3,null,4,null,6,5],[1,null,2,null,3,null,5,4,null,6],[1,null,2,null,3,null,6,4,null,5],[1,null,2,null,4,3,null,5,null,6],[1,null,2,null,4,3,null,6,null,5],[1,null,2,null,5,3,null,4,null,6],[1,null,2,null,5,3,null,6,null,4],[1,null,2,null,6,3,null,4,null,5],[1,null,2,null,6,3,null,5,null,4],[1,null,3,2,null,4,null,5,null,6],[1,null,3,2,null,4,null,6,null,5],[1,null,3,2,null,5,null,4,null,6],[1,null,3,2,null,5,null,6,null,4],[1,null,3,2,null,6,null,4,null,5],[1,null,3,2,null,6,null,5,null,4],[1,null,4,2,null,3,null,5,null,6],[1,null,4,2,null,3,null,6,null,5],[1,null,4,2,null,5,null,3,null,6],[1,null,4,2,null,5,null,6,null,3],[1,null,4,2,null,6,null,3,null,5],[1,null,4,2,null,6,null,5,null,3],[1,null,5,2,null,3,null,4,null,6],[1,null,5,2,null,3,null,6,null,4],[1,null,5,2,null,4,null,3,null,6],[1,null,5,2,null,4,null,6,null,3],[1,null,5,2,null,6,null,3,null,4],[1,null,5,2,null,6,null,4,null,3],[1,null,6,2,null,3,null,4,null,5],[1,null,6,2,null,3,null,5,null,4],[1,null,6,2,null,4,null,3,null,5],[1,null,6,2,null,4,null,5,null,3],[1,null,6,2,null,5,null,3,null,4],[1,null,6,2,null,5,null,4,null,3],[2,1,3,null,null,null,4,null,5,null,6],[2,1,4,null,null,null,3,null,5,null,6],[2,1,5,null,null,null,3,null,6,null,4],[2,1,6,null,null,null,3,null,4,null,5],[3,1,null,null,2,null,4,null,5,null,6],[3,1,null,null,2,null,5,null,4,null,6],[3,1,null,null,2,null,6,null,4,null,5],[4,1,null,null,2,null,3,null,5,null,6],[4,1,null,null,2,null,5,null,3,null,6],[4,1,null,null,2,null,6,null,3,null,5],[5,1,null,null,2,null,3,null,4,null,6],[5,1,null,null,2,null,4,null,3,null,6],[5,1,null,null,2,null,6,null,3,null,4],[6,1,null,null,2,null,3,null,4,null,5],[6,1,null,null,2,null,4,null,3,null,5],[6,1,null,null,2,null,5,null,3,null,4]]"
            ]
        }
    },
    "96": {
        "title": "Unique Binary Search Trees",
        "description": "Given an integer `n`, return the number of structurally unique binary search trees (BSTs) that have exactly `n` nodes with unique values from 1 to `n`.",
        "example": "Example 1:\n\nInput: n = 3\nOutput: 5\n\nExplanation: There are 5 unique BSTs that can be formed with 3 nodes.\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\nExample 2:\n\nInput: n = 1\nOutput: 1",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19
            ],
            "outputs": [
                5,
                1,
                2,
                14,
                42,
                132,
                429,
                1430,
                4862,
                16796,
                58786,
                208012,
                742900,
                2674440,
                9694845,
                35357670,
                129644790,
                477638700,
                1767263190
            ]
        }
    },
    "97": {
        "title": "Interleaving Strings",
        "description": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`. An **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that: `s = s1 + s2 + ... + sn`, `t = t1 + t2 + ... + tm`, and `|n - m| <= 1`. The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`. Determine if `s3` can be obtained by interleaving `s1` and `s2`.",
        "example": "Given s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\", the function should return true. One way to obtain s3 is by splitting s1 into s1 = \"aa\" + \"bc\" + \"c\" and s2 into s2 = \"dbbc\" + \"a\". Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\". Since s3 can be obtained by interleaving s1 and s2, the function should return true.",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "s1": "aabcc",
                    "s2": "dbbca",
                    "s3": "aadbbcbcac"
                },
                {
                    "s1": "aabcc",
                    "s2": "dbbca",
                    "s3": "aadbbbaccc"
                },
                {
                    "s1": "",
                    "s2": "",
                    "s3": ""
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcdef"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abdecf"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfed"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedg"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedgh"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghi"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghij"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijk"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijkl"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklm"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmn"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmno"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnop"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopq"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqr"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqrs"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqrst"
                },
                {
                    "s1": "abc",
                    "s2": "def",
                    "s3": "abcfedghijklmnopqrstu"
                }
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "98": {
        "title": "Valid Binary Search Tree",
        "description": "Given the `root` of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.",
        "example": "Example 1:\n\nInput: root = [2,1,3]\nOutput: true\n\nExample 2:\n\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "binary search tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,3]",
                "[5,1,4,null,null,3,6]",
                "[1,null,2]",
                "[10,5,15,null,null,6,20]",
                "[3,1,5,0,2,4,6,null,null,null,3]",
                "[1,1]",
                "[1,null,1]",
                "[2147483647]",
                "[1,1,1]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "true",
                "false"
            ]
        }
    },
    "99": {
        "title": "Recover Binary Search Tree",
        "description": "You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. Your task is to recover the tree without changing its structure. Implement a function `recoverTree` to solve the problem.",
        "example": "Example 1:\n\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\nExample 2:\n\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.",
        "level": "Medium",
        "tags": [
            "Binary Search Tree",
            "Tree Traversal",
            "In-order Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,3,null,null,2]",
                "[3,1,4,null,null,2]",
                "[2,3,1]",
                "[5,3,8,2,4,7,9]",
                "[4,2,7,1,3,6,9]",
                "[10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]"
            ],
            "outputs": [
                "[3,1,null,null,2]",
                "[2,1,4,null,null,3]",
                "[2,3,1]",
                "[5,4,8,2,3,7,9]",
                "[4,2,7,1,3,6,9]",
                "[10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]"
            ]
        }
    },
    "100": {
        "title": "Binary Tree Comparison",
        "description": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.",
        "example": "Example:\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExplanation: Both trees have the same structure and node values.\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExplanation: The trees have different structures.\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\nExplanation: The trees have the same structure but different node values.",
        "level": "Easy",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[1,2,3]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,1]",
                "[1,1,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[]",
                "[]"
            ],
            "outputs": [
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "true",
                "true"
            ]
        }
    },
    "101": null,
    "102": null,
    "103": {
        "title": "Zigzag Level Order Traversal",
        "description": "Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. The zigzag level order traversal is a traversal where we visit the nodes of the binary tree in a zigzag pattern, alternating between left to right and right to left at each level. For example, given a binary tree with root node 3, left child node 9, right child node 20, and its right child node 20 having left child node 15 and right child node 7, the zigzag level order traversal would be [[3], [20, 9], [15, 7]].",
        "example": "Example:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n\nExplanation: The zigzag level order traversal of the given binary tree is [[3], [20, 9], [15, 7]].\n\nInput: root = [1]\nOutput: [[1]]\n\nExplanation: The zigzag level order traversal of the given binary tree is [[1]].\n\nInput: root = []\nOutput: []\n\nExplanation: The given binary tree is empty, so the zigzag level order traversal is also empty.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "traversal"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[1]",
                "[]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3,4,null,null,5]",
                "[1,2,3,4,5,null,null,6,7,null,null,null,null,8]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[[3],[20,9],[15,7]]",
                "[[1]]",
                "[]",
                "[[1],[3,2],[4,5,6,7],[10,9,8]]",
                "[[5],[8,4],[11,13,4,7],[1,2,5]]",
                "[[1],[3,2],[4,5]]",
                "[[1],[3,2],[4,5,6,7],[8]]",
                "[[1],[3,2],[4,5,6,7],[15,14,13,12,11,10,9,8],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]]"
            ]
        }
    },
    "104": null,
    "105": {
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "description": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.",
        "example": "Example 1:\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Tree Traversal",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,15,7], [9,3,15,20,7]",
                "[-1], [-1]",
                "[1,2,3,4,5], [2,4,3,1,5]",
                "[4,2,1,3,6,5,7], [1,2,3,4,5,6,7]",
                "[5,4,3,2,1], [1,2,3,4,5]",
                "[1,2,3,4,5], [5,4,3,2,1]"
            ],
            "outputs": [
                "[3,9,20,null,null,15,7]",
                "[-1]",
                "[1,null,2,null,3,null,4,null,5]",
                "[4,2,6,1,5,3,7]",
                "[5,4,null,3,null,2,null,1]",
                "[1,2,null,3,null,4,null,5]"
            ]
        }
    },
    "106": {
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "description": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.",
        "example": "Example 1:\n\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\n\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Tree Traversal",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[9,3,15,20,7]",
                "[-1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1]",
                "[1,2]",
                "[2,1]",
                "[1,2,3]",
                "[3,2,1]",
                "[1,2,3,4]",
                "[4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[3,9,20,null,null,15,7]",
                "[-1]",
                "[5,4,null,3,null,2,null,1]",
                "[1,2,null,3,null,4,null,5]",
                "[1]",
                "[2,1]",
                "[1,2]",
                "[3,2,1]",
                "[1,2,null,null,3,null,null]",
                "[1,2,null,null,3,null,null,4,null,null]",
                "[4,3,null,null,2,null,null,1,null,null]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ]
        }
    },
    "107": {
        "title": "Bottom-Up Level Order Traversal of Binary Tree",
        "description": "Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. The bottom-up level order traversal is the traversal of the tree from left to right, level by level, starting from the leaf nodes and ending at the root node.",
        "example": "Example 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\n\nExample 2:\n\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\n\nInput: root = []\nOutput: []",
        "level": "Medium",
        "tags": [
            "binary tree",
            "level order traversal",
            "bottom-up traversal"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]"
            ],
            "outputs": [
                "[[15,7],[9,20],[3]]",
                "[[1]]",
                "[]",
                "[[7,2],[13,4,5,1],[11,4,8],[5]]"
            ]
        }
    },
    "108": null,
    "109": null,
    "110": null,
    "111": {
        "title": "Minimum Depth of Binary Tree",
        "description": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n\nExample 2:\n\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5",
        "level": "Easy",
        "tags": [
            "Binary Tree",
            "Depth First Search",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[3,9,20,null,null,15,7]",
                "[2,null,3,null,4,null,5,null,6]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,null,2]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11]",
                "[1,2,3,4,5,6,7,8,9,10,11,12]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]"
            ],
            "outputs": [
                "2",
                "5",
                "0",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "3",
                "3",
                "3",
                "3",
                "4",
                "4",
                "4",
                "4",
                "4",
                "4",
                "5"
            ]
        }
    },
    "112": {
        "title": "Root to Leaf Path Sum",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n\nExample 2:\n\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\nExample 3:\n\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.",
        "level": "Easy",
        "tags": [
            "Binary Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                "[5,4,8,11,null,13,4,7,2,null,null,null,1]",
                "[1,2,3]",
                "[]",
                "[1]",
                "[1,2]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "true",
                "false",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "113": {
        "title": "Root to Leaf Paths with Target Sum",
        "description": "Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where the sum of the node values in the path equals `targetSum`. Each path should be returned as a list of the node values, not node references.\n\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.",
        "example": "Example 1:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 and 5 + 8 + 4 + 5 = 22.\n\nExample 2:\n\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n\nExample 3:\n\nInput: root = [1,2], targetSum = 0\nOutput: []",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Recursion",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]",
                "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
                "[1,2,3]",
                "[1,2]",
                "[1]",
                "[]"
            ],
            "outputs": [
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]",
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]",
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]",
                "[[5,4,11,2],[5,8,4,5]]",
                "[]",
                "[]",
                "[1]",
                "[]"
            ]
        }
    },
    "114": null,
    "115": {
        "title": "Distinct Subsequences",
        "description": "Given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The test cases are generated so that the answer fits on a 32-bit signed integer.",
        "example": "Example:\n\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation: There are 3 ways you can generate \"rabbit\" from s:\n1. \"rabb\" + \"it\"\n2. \"ra\" + \"bbit\"\n3. \"rab\" + \"bit\"",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "string"
        ],
        "test_cases": {
            "inputs": [
                "\"rabbbit\"",
                "\"rabbit\"",
                "\"babgbag\"",
                "\"bag\"",
                "\"abcde\"",
                "\"ace\"",
                "\"abcde\"",
                "\"\"",
                "\"abcde\"",
                "\"fgh\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\"",
                "\"abcde\""
            ],
            "outputs": [
                "3",
                "5",
                "0",
                "1",
                "0",
                "1",
                "1",
                "1",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "116": {
        "title": "Populate Next Right Pointers in Each Node",
        "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\n\nInitially, all next pointers are set to NULL.",
        "example": "Example:\n\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree, your function should populate each next pointer to point to its next right node, just like in the example output. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "root": []
                },
                {
                    "root": [
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        2
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                }
            ],
            "outputs": [
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        null
                    ]
                },
                {
                    "result": []
                },
                {
                    "result": [
                        1,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        null
                    ]
                },
                {
                    "result": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        null
                    ]
                }
            ]
        }
    },
    "117": {
        "title": "Populate Next Right Pointers in Binary Tree",
        "description": "Given a binary tree, populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`. Initially, all next pointers are set to `NULL`.",
        "example": "Example 1:\n\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree, your function should populate each next pointer to point to its next right node, just like in the figure. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "val": 1,
                    "left": {
                        "val": 2,
                        "left": {
                            "val": 4,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "right": {
                            "val": 5,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "next": null
                    },
                    "right": {
                        "val": 3,
                        "left": null,
                        "right": {
                            "val": 7,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "next": null
                    },
                    "next": null
                }
            ],
            "outputs": [
                {
                    "val": 1,
                    "left": {
                        "val": 2,
                        "left": {
                            "val": 4,
                            "left": null,
                            "right": null,
                            "next": {
                                "val": 5,
                                "left": null,
                                "right": null,
                                "next": {
                                    "val": 7,
                                    "left": null,
                                    "right": null,
                                    "next": null
                                }
                            }
                        },
                        "right": {
                            "val": 5,
                            "left": null,
                            "right": null,
                            "next": {
                                "val": 7,
                                "left": null,
                                "right": null,
                                "next": null
                            }
                        }
                    },
                    "right": {
                        "val": 3,
                        "left": null,
                        "right": {
                            "val": 7,
                            "left": null,
                            "right": null,
                            "next": null
                        },
                        "next": null
                    },
                    "next": null
                }
            ]
        }
    },
    "118": null,
    "119": {
        "title": "Pascal's Triangle Row",
        "description": "Given an integer `rowIndex`, return the `rowIndexth` (0-indexed) row of the Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it.",
        "example": "Example:\n\nInput: rowIndex = 3\nOutput: [1,3,3,1]\n\nExplanation: The 3rd row of Pascal's triangle is [1,3,3,1].\n\nInput: rowIndex = 0\nOutput: [1]\n\nExplanation: The 0th row of Pascal's triangle is [1].\n\nInput: rowIndex = 1\nOutput: [1,1]\n\nExplanation: The 1st row of Pascal's triangle is [1,1].",
        "level": "Easy",
        "tags": [
            "Array",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                3,
                0,
                1,
                5,
                10
            ],
            "outputs": [
                [
                    1,
                    3,
                    3,
                    1
                ],
                [
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    5,
                    10,
                    10,
                    5,
                    1
                ],
                [
                    1,
                    10,
                    45,
                    120,
                    210,
                    252,
                    210,
                    120,
                    45,
                    10,
                    1
                ]
            ]
        }
    },
    "1210": null,
    "1213": {
        "title": "Common Elements in Three Sorted Arrays",
        "description": "Given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.",
        "example": "Example:\n\nInput: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\nOutput: [1,5]\nExplanation: Only 1 and 5 appeared in the three arrays.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5], [1,2,5,7,9], [1,3,4,5,8]",
                "[197,418,523,876,1356], [501,880,1593,1710,1870], [521,682,1337,1395,1764]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [6,7,8,9,10]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]",
                "[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [1,2,3,4,5]",
                "[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]"
            ],
            "outputs": [
                "[1,5]",
                "[]",
                "[]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[]",
                "[]",
                "[]",
                "[1,2,3,4,5]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "1214": {
        "title": "Binary Search Tree Node Sum",
        "description": "Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.",
        "example": "Example:\n\nInput: root1 = [2,1,4], root2 = [1,0,3], target = 5\nOutput: true\nExplanation: 2 and 3 sum up to 5.",
        "level": "Easy",
        "tags": [
            "binary search tree",
            "tree traversal",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root1": [
                        2,
                        1,
                        4
                    ],
                    "root2": [
                        1,
                        0,
                        3
                    ],
                    "target": 5
                },
                {
                    "root1": [
                        0,
                        -10,
                        10
                    ],
                    "root2": [
                        5,
                        1,
                        7,
                        0,
                        2
                    ],
                    "target": 18
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 7
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 10
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 3
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 15
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 0
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": -1
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 100
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": -100
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 1
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 2
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 4
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 5
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 6
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 7
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 8
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 9
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 10
                },
                {
                    "root1": [
                        1,
                        2,
                        3
                    ],
                    "root2": [
                        4,
                        5,
                        6
                    ],
                    "target": 11
                }
            ],
            "outputs": [
                true,
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1215": {
        "title": "Stepping Numbers",
        "description": "A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. Given two integers low and high, return a sorted list of all the stepping numbers in the inclusive range [low, high].",
        "example": "Example 1:\n\nInput: low = 0, high = 21\nOutput: [0,1,2,3,4,5,6,7,8,9,10,12,21]\n\nExample 2:\n\nInput: low = 10, high = 15\nOutput: [10,12]",
        "level": "Medium",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    21
                ],
                [
                    10,
                    15
                ],
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    100,
                    200
                ],
                [
                    123,
                    321
                ],
                [
                    1000,
                    2000
                ],
                [
                    1234,
                    4321
                ],
                [
                    10000,
                    20000
                ],
                [
                    12345,
                    54321
                ],
                [
                    100000,
                    200000
                ],
                [
                    123456,
                    654321
                ],
                [
                    1000000,
                    2000000
                ],
                [
                    1234567,
                    7654321
                ],
                [
                    10000000,
                    20000000
                ],
                [
                    12345678,
                    87654321
                ],
                [
                    100000000,
                    200000000
                ],
                [
                    123456789,
                    987654321
                ],
                [
                    1000000000,
                    2000000000
                ],
                [
                    1234567890,
                    9876543210
                ]
            ],
            "outputs": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    12,
                    21
                ],
                [
                    10,
                    12
                ],
                [
                    0
                ],
                [
                    1
                ],
                [
                    101,
                    121,
                    123,
                    210,
                    212
                ],
                [
                    123,
                    210,
                    212,
                    232,
                    234,
                    321
                ],
                [
                    1234,
                    2101,
                    2121,
                    2321,
                    2341
                ],
                [
                    1234,
                    2101,
                    2121,
                    2321,
                    2341,
                    3210
                ],
                [
                    12345,
                    21012,
                    21210,
                    23210,
                    23410
                ],
                [
                    12345,
                    21012,
                    21210,
                    23210,
                    23410,
                    3210
                ],
                [
                    123456,
                    210123,
                    212101,
                    232101,
                    234101
                ],
                [
                    123456,
                    210123,
                    212101,
                    232101,
                    234101,
                    3210
                ],
                [
                    1234567,
                    2101234,
                    2121012,
                    2321012,
                    2341012
                ],
                [
                    1234567,
                    2101234,
                    2121012,
                    2321012,
                    2341012,
                    3210
                ],
                [
                    12345678,
                    21012345,
                    21210123,
                    23210123,
                    23410123
                ],
                [
                    12345678,
                    21012345,
                    21210123,
                    23210123,
                    23410123,
                    3210
                ],
                [
                    123456789,
                    210123456,
                    212101234,
                    232101234,
                    234101234
                ],
                [
                    123456789,
                    210123456,
                    212101234,
                    232101234,
                    234101234,
                    3210
                ],
                [
                    1234567890,
                    2101234567,
                    2121012345,
                    2321012345,
                    2341012345
                ],
                [
                    1234567890,
                    2101234567,
                    2121012345,
                    2321012345,
                    2341012345,
                    3210
                ]
            ]
        }
    },
    "1216": {
        "title": "K-Palindrome",
        "description": "Given a string `s` and an integer `k`, return `true` if `s` is a `k`-palindrome. A string is `k`-palindrome if it can be transformed into a palindrome by removing at most `k` characters from it.",
        "example": "Example:\n\nInput: s = \"abcdeca\", k = 2\nOutput: true\nExplanation: Remove 'b' and 'e' characters.",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"abcdeca\"",
                "\"abbababa\"",
                "\"racecar\"",
                "\"hello\"",
                "\"level\"",
                "\"madam\"",
                "\"programming\"",
                "\"deed\"",
                "\"python\"",
                "\"radar\"",
                "\"algorithm\"",
                "\"stats\"",
                "\"civic\"",
                "\"java\"",
                "\"noon\"",
                "\"javascript\"",
                "\"rotator\"",
                "\"world\"",
                "\"rotavator\"",
                "\"universe\"",
                "\"redder\""
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false"
            ]
        }
    },
    "1217": {
        "title": "Minimum Cost to Move Chips to The Same Position",
        "description": "You are given a list of positions of chips on a 1-dimensional board. Each chip is represented by its position, where the `ith` chip is at position `position[i]`. You need to move all the chips to the same position. In one step, you can change the position of the `ith` chip from `position[i]` to either `position[i] + 2` or `position[i] - 2` with a cost of 0, or to `position[i] + 1` or `position[i] - 1` with a cost of 1. Return the minimum cost needed to move all the chips to the same position.",
        "example": "Example:\n\nInput: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0. Second step: Move the chip at position 2 to position 1 with cost = 1. Total cost is 1.",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    2,
                    2,
                    2,
                    3,
                    3
                ],
                [
                    1,
                    1000000000
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                1,
                2,
                1,
                0,
                5,
                5,
                5,
                5,
                10,
                10
            ]
        }
    },
    "1218": {
        "title": "Longest Arithmetic Subsequence Length",
        "description": "Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\nA **subsequence** is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.",
        "example": "Example:\n\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "difference": 1
                },
                {
                    "arr": [
                        1,
                        3,
                        5,
                        7
                    ],
                    "difference": 1
                },
                {
                    "arr": [
                        1,
                        5,
                        7,
                        8,
                        5,
                        3,
                        4,
                        2,
                        1
                    ],
                    "difference": -2
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 2
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10
                    ],
                    "difference": 2
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 1
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 3
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 5
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 10
                },
                {
                    "arr": [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "difference": -1
                },
                {
                    "arr": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "difference": 0
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 0
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -1
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -2
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -3
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -5
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -10
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 100
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -100
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": 1000
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "difference": -1000
                }
            ],
            "outputs": [
                4,
                1,
                4,
                1,
                5,
                10,
                1,
                1,
                1,
                10,
                11,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1219": {
        "title": "Maximum Gold Collection",
        "description": "You are given a gold mine represented by a grid of size m x n. Each cell in the grid contains an integer representing the amount of gold in that cell. You can start and stop collecting gold from any position in the grid that has some gold. From your position, you can walk one step to the left, right, up, or down. However, you can't visit the same cell more than once and you can't visit a cell with 0 gold. Your task is to find the maximum amount of gold you can collect.",
        "example": "Example:\n\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation: The maximum amount of gold that can be collected is 24. The path to collect this gold is 9 -> 8 -> 7.\n\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation: The maximum amount of gold that can be collected is 28. The path to collect this gold is 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.",
        "level": "Medium",
        "tags": [
            "grid",
            "backtracking",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[[0,6,0],[5,8,7],[0,9,0]]",
                "[[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]",
                "[[0,0,0],[0,0,0],[0,0,0]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,0,0],[0,0,0],[0,0,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,0,0,0,0],[0,2,0,0,0],[0,0,3,0,0],[0,0,0,4,0],[0,0,0,0,5]]",
                "[[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
                "[[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,0]]"
            ],
            "outputs": [
                "24",
                "28",
                "0",
                "45",
                "3",
                "125",
                "15",
                "25",
                "125",
                "135"
            ]
        }
    },
    "1220": {
        "title": "Count Vowel Strings",
        "description": "Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\nEach character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\nEach vowel `'a'` may only be followed by an `'e'`.\nEach vowel `'e'` may only be followed by an `'a'` or an `'i'`.\nEach vowel `'i'` may not be followed by another `'i'`.\nEach vowel `'o'` may only be followed by an `'i'` or a `'u'`.\nEach vowel `'u'` may only be followed by an `'a'`.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.",
        "example": "Example:\n\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\", \"o\", and \"u\".\n\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\", and \"ua\".\n\nInput: n = 5\nOutput: 68",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                5,
                10,
                15,
                20,
                25,
                30,
                35,
                40,
                45,
                50,
                100,
                1000,
                10000,
                20000
            ],
            "outputs": [
                5,
                10,
                68,
                252,
                868,
                2892,
                9568,
                31504,
                103680,
                340032,
                1115136,
                3656384,
                782204094,
                252877308,
                457992974,
                457992974
            ]
        }
    },
    "1221": {
        "title": "Maximum Number of Balanced Strings",
        "description": "Given a balanced string `s`, split it into some number of substrings such that each substring is balanced. Return the maximum number of balanced strings you can obtain.",
        "example": "Example 1:\n\nInput: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains the same number of 'L' and 'R'.\n\nExample 2:\n\nInput: s = \"RLRRRLLRLL\"\nOutput: 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains the same number of 'L' and 'R'. Note that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.\n\nExample 3:\n\nInput: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".",
        "level": "Easy",
        "tags": [
            "string",
            "substring",
            "balanced"
        ],
        "test_cases": {
            "inputs": [
                "\"RLRRLLRLRL\"",
                "\"RLRRRLLRLL\"",
                "\"LLLLRRRR\"",
                "\"RLRLRLRLRLRL\"",
                "\"RRLLRRLLRRLL\"",
                "\"LRLRLRLRLRLR\"",
                "\"RLLRLLRLLRLL\"",
                "\"RRRRLLLL\"",
                "\"LLLLRR\"",
                "\"RRLRLL\"",
                "\"RLRLLR\"",
                "\"RLLRLR\"",
                "\"LRLRRL\"",
                "\"LRRLLR\"",
                "\"RRLLRL\"",
                "\"RLRLRL\"",
                "\"LRLRLR\"",
                "\"RLLRLL\"",
                "\"RRRRLL\"",
                "\"LLLLRRR\""
            ],
            "outputs": [
                "4",
                "2",
                "1",
                "6",
                "4",
                "6",
                "6",
                "2",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2"
            ]
        }
    },
    "1222": {
        "title": "Black Queens Attack",
        "description": "On a 0-indexed 8 x 8 chessboard, there can be multiple black queens and one white king. You are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king. Return the coordinates of the black queens that can directly attack the king. You may return the answer in any order.",
        "example": "Example:\n\nInput: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\nOutput: [[0,1],[1,0],[3,3]]\nExplanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "chess"
        ],
        "test_cases": {
            "inputs": [
                "[[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]]",
                "[[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]"
            ],
            "outputs": [
                "[[0,1],[1,0],[3,3]]",
                "[[2,2],[3,4],[4,4]]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "1223": {
        "title": "Distinct Sequences with Consecutive Roll Constraints",
        "description": "A die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times.\n\nGiven an array of integers `rollMax` and an integer `n`, return the number of distinct sequences that can be obtained with exactly `n` rolls. Since the answer may be too large, return it modulo `109 + 7`.\n\nTwo sequences are considered different if at least one element differs from each other.",
        "example": "Example:\n\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of the die. If there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at the rollMax array, the numbers 1 and 2 appear at most once consecutively. Therefore, sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    [
                        1,
                        1,
                        2,
                        2,
                        2,
                        3
                    ]
                ],
                [
                    2,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    3,
                    [
                        1,
                        1,
                        1,
                        2,
                        2,
                        3
                    ]
                ],
                [
                    4,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    5,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    6,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    7,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    8,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    9,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    11,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    12,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    13,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    14,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    15,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    16,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    17,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    18,
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    19,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    20,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ]
            ],
            "outputs": [
                34,
                30,
                181,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210,
                0,
                720,
                210
            ]
        }
    },
    "1224": null,
    "1227": {
        "title": "Probability of Getting Own Seat",
        "description": "There are `n` passengers boarding an airplane with exactly `n` seats. The first passenger has lost their ticket and picks a seat randomly. After that, the rest of the passengers will take their own seat if it is still available, otherwise they will pick other seats randomly. You need to return the probability that the `nth` person gets their own seat.",
        "example": "Example 1:\n\nInput: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.\n\nExample 2:\n\nInput: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when the first person gets the first seat).",
        "level": "Medium",
        "tags": [
            "probability",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                100
            ],
            "outputs": [
                1.0,
                0.5,
                0.33333,
                0.25,
                0.2,
                0.5,
                0.5
            ]
        }
    },
    "1228": {
        "title": "Missing Value in Arithmetic Progression",
        "description": "Given an array `arr` where the values are in arithmetic progression, with the difference between consecutive elements being the same, except for one missing value. The missing value is not the first or last value in the array. Write a function that takes in the array `arr` and returns the missing value.",
        "example": "Example:\n\nInput: arr = [5, 7, 11, 13]\nOutput: 9\nExplanation: The previous array was [5, 7, 9, 11, 13].\n\nInput: arr = [15, 13, 12]\nOutput: 14\nExplanation: The previous array was [15, 14, 13, 12].",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[5, 7, 11, 13]",
                "[15, 13, 12]",
                "[2, 4, 6, 10, 12]",
                "[20, 25, 30, 35, 40, 45]",
                "[100, 90, 80, 70, 60]",
                "[1, 3, 5, 9, 11, 13, 15]",
                "[8, 12, 16, 20, 24, 28, 32, 36]",
                "[1000, 900, 800, 700, 500, 400, 300, 200, 100]",
                "[3, 6, 9, 15, 18, 21, 24, 27, 30, 33]",
                "[50, 45, 40, 35, 30, 25, 20, 15, 10, 5]"
            ],
            "outputs": [
                "9",
                "14",
                "8",
                "15",
                "50",
                "7",
                "4",
                "500",
                "12",
                "0"
            ]
        }
    },
    "1229": {
        "title": "Earliest Common Time Slot",
        "description": "Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`. If there is no common time slot that satisfies the requirements, return an empty array. The format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`. It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.",
        "example": "Example:\n\nInput: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8\nOutput: [60,68]\n\nInput: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12\nOutput: []",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],8]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],12]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],5]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],20]",
                "[[[10,50],[60,120],[140,210]],[[0,15],[60,70]],100]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],10]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],15]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],25]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],30]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],35]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],40]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],45]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],50]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],55]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],60]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],65]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],70]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],75]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],80]",
                "[[[0,10],[20,30],[40,50]],[[5,15],[25,35],[45,55]],85]"
            ],
            "outputs": [
                "[60,68]",
                "[]",
                "[10,15]",
                "[140,210]",
                "[]",
                "[5,15]",
                "[25,30]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[45,50]",
                "[60,65]",
                "[60,65]",
                "[60,65]",
                "[60,65]",
                "[60,65]",
                "[60,65]"
            ]
        }
    },
    "1230": {
        "title": "Coin Toss Probability",
        "description": "You have some coins. The `i`-th coin has a probability `prob[i]` of facing heads when tossed. Return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.",
        "example": "Example:\n\nInput: prob = [0.4], target = 1\nOutput: 0.40000\n\nExplanation: There is only one coin with a probability of 0.4 to face heads. The probability of getting exactly 1 head is 0.4.\n\nInput: prob = [0.5,0.5,0.5,0.5,0.5], target = 0\nOutput: 0.03125\n\nExplanation: There are 5 coins, each with a probability of 0.5 to face heads. The probability of getting exactly 0 heads is 0.03125.",
        "level": "Medium",
        "tags": [
            "probability",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[0.4]",
                "[0.5,0.5,0.5,0.5,0.5]",
                "[0.2,0.3,0.4,0.5]",
                "[0.1,0.2,0.3,0.4,0.5,0.6]",
                "[0.25,0.75,0.5,0.1,0.9]",
                "[0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6]",
                "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]",
                "[0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0]",
                "[0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5]",
                "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0]"
            ],
            "outputs": [
                "0.40000",
                "0.03125",
                "0.12000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000",
                "0.00000"
            ]
        }
    },
    "1231": {
        "title": "Maximum Sweetness of Chocolate Bar",
        "description": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`. You want to share the chocolate with your `k` friends so you start cutting the chocolate bar into `k + 1` pieces using `k` cuts, each piece consists of some **consecutive** chunks. Being generous, you will eat the piece with the **minimum total sweetness** and give the other pieces to your friends. Find the **maximum total sweetness** of the piece you can get by cutting the chocolate bar optimally.",
        "example": "For example, if the sweetness array is [1,2,3,4,5,6,7,8,9] and k is 5, you can divide the chocolate into [1,2,3], [4,5], [6], [7], [8], [9]. The piece with the minimum total sweetness is [6], so the maximum total sweetness you can get is 6.",
        "level": "Medium",
        "tags": [
            "array",
            "optimization"
        ],
        "test_cases": {
            "inputs": [
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "k": 5
                },
                {
                    "sweetness": [
                        5,
                        6,
                        7,
                        8,
                        9,
                        1,
                        2,
                        3,
                        4
                    ],
                    "k": 8
                },
                {
                    "sweetness": [
                        1,
                        2,
                        2,
                        1,
                        2,
                        2,
                        1,
                        2,
                        2
                    ],
                    "k": 2
                },
                {
                    "sweetness": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "k": 0
                },
                {
                    "sweetness": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 9
                },
                {
                    "sweetness": [
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "k": 4
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 3
                },
                {
                    "sweetness": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 0
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 9
                },
                {
                    "sweetness": [
                        10,
                        9,
                        8,
                        7,
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ],
                    "k": 9
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 5
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 10
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 1
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 2
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 7
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 8
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 6
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 4
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 3
                },
                {
                    "sweetness": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 0
                }
            ],
            "outputs": [
                6,
                1,
                5,
                150,
                1,
                5,
                18,
                55,
                10,
                10,
                15,
                10,
                55,
                55,
                15,
                18,
                10,
                15,
                18,
                55
            ]
        }
    },
    "1232": {
        "title": "Straight Line Check",
        "description": "Given an array of coordinates, check if these points make a straight line in the XY plane.",
        "example": "Example 1:\n\nInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nOutput: true\n\nExample 2:\n\nInput: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\nOutput: false",
        "level": "Easy",
        "tags": [
            "Array",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
                "[[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]]",
                "[[1,2],[2,3],[3,5],[4,6],[5,7],[6,8]]",
                "[[1,1],[2,3],[3,5],[4,7],[5,9],[6,11]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,1],[2,2],[3,4],[4,5],[5,6],[6,7],[7,8]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
                "[[1,2],[2,3],[3,5],[4,6],[5,7],[6,8],[7,10]]",
                "[[1,1],[2,3],[3,5],[4,7],[5,9],[6,11],[7,13]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,1],[2,2],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
                "[[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true"
            ]
        }
    },
    "1233": null,
    "1234": {
        "title": "Minimum Balanced Substring",
        "description": "Given a string s of length `n` containing only four kinds of characters: 'Q', 'W', 'E', and 'R', determine the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string. If s is already balanced, return 0.",
        "example": "Example:\n\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' with 'R', so that \"RQWE\" (or \"QRWE\") is balanced.",
        "level": "Medium",
        "tags": [
            "string",
            "substring",
            "balanced"
        ],
        "test_cases": {
            "inputs": [
                "\"QWER\"",
                "\"QQWE\"",
                "\"QQQW\"",
                "\"QQQQ\"",
                "\"QWRE\"",
                "\"QWQW\"",
                "\"QWEE\"",
                "\"QWRR\"",
                "\"QWQQ\"",
                "\"QWERQWER\"",
                "\"QQWEQQWE\"",
                "\"QQQWQQQW\"",
                "\"QQQQQQQQ\"",
                "\"QWREQWER\"",
                "\"QWQWQWQW\"",
                "\"QWEEQWEE\"",
                "\"QWRRQWRR\"",
                "\"QWQQQWQQ\"",
                "\"QWERQWERQWERQWER\"",
                "\"QQWEQQWEQQWEQQWE\"",
                "\"QQQWQQQWQQQWQQQW\"",
                "\"QQQQQQQQQQQQQQQQ\""
            ],
            "outputs": [
                "0",
                "1",
                "2",
                "3",
                "1",
                "2",
                "2",
                "2",
                "2",
                "0",
                "0",
                "0",
                "0",
                "1",
                "2",
                "2",
                "2",
                "2",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "1235": {
        "title": "Maximum Profit from Non-Overlapping Jobs",
        "description": "You are given `n` jobs, where each job has a start time, end time, and a corresponding profit. Your task is to select a subset of jobs such that no two jobs overlap in time and the total profit is maximized. If you choose a job that ends at time `X`, you can start another job that starts at time `X`. Implement a function `maxProfit` to solve this problem and return the maximum profit possible.",
        "example": "Example:\n\nInput:\nstartTime = [1,2,3,3]\nendTime = [3,4,5,6]\nprofit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. The time range [1-3] + [3-6] gives a profit of 120 = 50 + 70.",
        "level": "Medium",
        "tags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "test_cases": {
            "inputs": [
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        3
                    ],
                    "endTime": [
                        3,
                        4,
                        5,
                        6
                    ],
                    "profit": [
                        50,
                        10,
                        40,
                        70
                    ]
                },
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        4,
                        6
                    ],
                    "endTime": [
                        3,
                        5,
                        10,
                        6,
                        9
                    ],
                    "profit": [
                        20,
                        20,
                        100,
                        70,
                        60
                    ]
                },
                {
                    "startTime": [
                        1,
                        1,
                        1
                    ],
                    "endTime": [
                        2,
                        3,
                        4
                    ],
                    "profit": [
                        5,
                        6,
                        4
                    ]
                },
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "endTime": [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "profit": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ]
                },
                {
                    "startTime": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "endTime": [
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "profit": [
                        50,
                        40,
                        30,
                        20,
                        10
                    ]
                }
            ],
            "outputs": [
                120,
                150,
                6,
                150,
                150
            ]
        }
    },
    "1236": {
        "title": "Web Crawler",
        "description": "Given a start URL and an interface HtmlParser, implement a web crawler to crawl all links that are under the same hostname as the start URL. Return all URLs obtained by your web crawler in any order. The crawler should start from the page of the start URL and call HtmlParser.getUrls(url) to get all URLs from a webpage of the given URL. It should not crawl the same link twice and should only explore links that are under the same hostname as the start URL.",
        "example": "Example 1:\n\nInput:\nstartUrl = \"http://example.org\"\n\nOutput:\n[\"http://example.org\", \"http://example.org/about\", \"http://example.org/contact\"]\n\nExplanation:\nThe start URL is \"http://example.org\". The crawler starts from this page and calls HtmlParser.getUrls(url) to get all URLs from this webpage. It then explores each URL and adds the URLs that have the same hostname as the start URL to the result list. The final result is [\"http://example.org\", \"http://example.org/about\", \"http://example.org/contact\"].\n\nExample 2:\n\nInput:\nstartUrl = \"http://leetcode.com\"\n\nOutput:\n[\"http://leetcode.com\", \"http://leetcode.com/problems\", \"http://leetcode.com/contest\"]\n\nExplanation:\nThe start URL is \"http://leetcode.com\". The crawler starts from this page and calls HtmlParser.getUrls(url) to get all URLs from this webpage. It then explores each URL and adds the URLs that have the same hostname as the start URL to the result list. The final result is [\"http://leetcode.com\", \"http://leetcode.com/problems\", \"http://leetcode.com/contest\"].",
        "level": "Medium",
        "tags": [
            "web crawler",
            "hostname",
            "URL"
        ],
        "test_cases": {
            "inputs": [
                "\"http://example.org\"",
                "\"http://leetcode.com\""
            ],
            "outputs": [
                "[\"http://example.org\", \"http://example.org/about\", \"http://example.org/contact\"]",
                "[\"http://leetcode.com\", \"http://leetcode.com/problems\", \"http://leetcode.com/contest\"]"
            ]
        }
    },
    "1237": {
        "title": "Reverse Engineer Custom Function",
        "description": "Given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. The function is monotonically increasing, meaning that `f(x, y) < f(x + 1, y)` and `f(x, y) < f(x, y + 1)`.",
        "example": "Example:\n\nInput: function_id = 1, z = 5\nOutput: [[1,4],[2,3],[3,2],[4,1]]\nExplanation: The hidden formula for function_id = 1 is f(x, y) = x + y. The following positive integer values of x and y make f(x, y) equal to 5: x=1, y=4 -> f(1, 4) = 1 + 4 = 5. x=2, y=3 -> f(2, 3) = 2 + 3 = 5. x=3, y=2 -> f(3, 2) = 3 + 2 = 5. x=4, y=1 -> f(4, 1) = 4 + 1 = 5.",
        "level": "Medium",
        "tags": [
            "math",
            "reverse-engineering"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    5
                ],
                [
                    2,
                    5
                ],
                [
                    3,
                    10
                ],
                [
                    4,
                    20
                ],
                [
                    5,
                    50
                ],
                [
                    6,
                    100
                ],
                [
                    7,
                    200
                ],
                [
                    8,
                    500
                ],
                [
                    9,
                    1000
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    3,
                    3
                ],
                [
                    4,
                    4
                ],
                [
                    5,
                    5
                ],
                [
                    6,
                    6
                ],
                [
                    7,
                    7
                ],
                [
                    8,
                    8
                ],
                [
                    9,
                    9
                ],
                [
                    1,
                    100
                ],
                [
                    9,
                    1
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        1
                    ]
                ],
                [
                    [
                        1,
                        9
                    ],
                    [
                        2,
                        8
                    ],
                    [
                        3,
                        7
                    ],
                    [
                        4,
                        6
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        6,
                        4
                    ],
                    [
                        7,
                        3
                    ],
                    [
                        8,
                        2
                    ],
                    [
                        9,
                        1
                    ]
                ],
                [
                    [
                        1,
                        19
                    ],
                    [
                        2,
                        18
                    ],
                    [
                        3,
                        17
                    ],
                    [
                        4,
                        16
                    ],
                    [
                        5,
                        15
                    ],
                    [
                        6,
                        14
                    ],
                    [
                        7,
                        13
                    ],
                    [
                        8,
                        12
                    ],
                    [
                        9,
                        11
                    ],
                    [
                        10,
                        10
                    ],
                    [
                        11,
                        9
                    ],
                    [
                        12,
                        8
                    ],
                    [
                        13,
                        7
                    ],
                    [
                        14,
                        6
                    ],
                    [
                        15,
                        5
                    ],
                    [
                        16,
                        4
                    ],
                    [
                        17,
                        3
                    ],
                    [
                        18,
                        2
                    ],
                    [
                        19,
                        1
                    ]
                ],
                [
                    [
                        1,
                        49
                    ],
                    [
                        7,
                        43
                    ],
                    [
                        14,
                        36
                    ],
                    [
                        21,
                        29
                    ],
                    [
                        28,
                        22
                    ],
                    [
                        35,
                        15
                    ],
                    [
                        42,
                        8
                    ],
                    [
                        49,
                        1
                    ]
                ],
                [
                    [
                        1,
                        99
                    ],
                    [
                        10,
                        90
                    ],
                    [
                        19,
                        81
                    ],
                    [
                        28,
                        72
                    ],
                    [
                        37,
                        63
                    ],
                    [
                        46,
                        54
                    ],
                    [
                        55,
                        45
                    ],
                    [
                        64,
                        36
                    ],
                    [
                        73,
                        27
                    ],
                    [
                        82,
                        18
                    ],
                    [
                        91,
                        9
                    ],
                    [
                        100,
                        0
                    ]
                ],
                [
                    [
                        1,
                        199
                    ],
                    [
                        20,
                        180
                    ],
                    [
                        39,
                        161
                    ],
                    [
                        58,
                        142
                    ],
                    [
                        77,
                        123
                    ],
                    [
                        96,
                        104
                    ],
                    [
                        115,
                        85
                    ],
                    [
                        134,
                        66
                    ],
                    [
                        153,
                        47
                    ],
                    [
                        172,
                        28
                    ],
                    [
                        191,
                        9
                    ],
                    [
                        210,
                        -10
                    ]
                ],
                [
                    [
                        1,
                        499
                    ],
                    [
                        50,
                        450
                    ],
                    [
                        99,
                        401
                    ],
                    [
                        148,
                        352
                    ],
                    [
                        197,
                        303
                    ],
                    [
                        246,
                        254
                    ],
                    [
                        295,
                        205
                    ],
                    [
                        344,
                        156
                    ],
                    [
                        393,
                        107
                    ],
                    [
                        442,
                        58
                    ],
                    [
                        491,
                        9
                    ],
                    [
                        540,
                        -40
                    ]
                ],
                [
                    [
                        1,
                        999
                    ],
                    [
                        100,
                        900
                    ],
                    [
                        199,
                        801
                    ],
                    [
                        298,
                        702
                    ],
                    [
                        397,
                        603
                    ],
                    [
                        496,
                        504
                    ],
                    [
                        595,
                        405
                    ],
                    [
                        694,
                        306
                    ],
                    [
                        793,
                        207
                    ],
                    [
                        892,
                        108
                    ],
                    [
                        991,
                        9
                    ],
                    [
                        1090,
                        -90
                    ]
                ],
                [
                    [
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        2
                    ],
                    [
                        3,
                        1
                    ]
                ],
                [
                    [
                        1,
                        4
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        2
                    ],
                    [
                        4,
                        1
                    ]
                ],
                [
                    [
                        1,
                        5
                    ],
                    [
                        5,
                        1
                    ]
                ],
                [
                    [
                        1,
                        6
                    ],
                    [
                        2,
                        5
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        3
                    ],
                    [
                        5,
                        2
                    ],
                    [
                        6,
                        1
                    ]
                ],
                [
                    [
                        1,
                        7
                    ],
                    [
                        2,
                        6
                    ],
                    [
                        3,
                        5
                    ],
                    [
                        4,
                        4
                    ],
                    [
                        5,
                        3
                    ],
                    [
                        6,
                        2
                    ],
                    [
                        7,
                        1
                    ]
                ],
                [
                    [
                        1,
                        8
                    ],
                    [
                        2,
                        7
                    ],
                    [
                        3,
                        6
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        4
                    ],
                    [
                        6,
                        3
                    ],
                    [
                        7,
                        2
                    ],
                    [
                        8,
                        1
                    ]
                ],
                [
                    [
                        1,
                        9
                    ],
                    [
                        2,
                        8
                    ],
                    [
                        3,
                        7
                    ],
                    [
                        4,
                        6
                    ],
                    [
                        5,
                        5
                    ],
                    [
                        6,
                        4
                    ],
                    [
                        7,
                        3
                    ],
                    [
                        8,
                        2
                    ],
                    [
                        9,
                        1
                    ]
                ],
                [
                    [
                        1,
                        100
                    ],
                    [
                        100,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1
                    ],
                    [
                        9,
                        1
                    ]
                ]
            ]
        }
    },
    "1238": null,
    "1239": {
        "title": "Maximum Length of Concatenated String with Unique Characters",
        "description": "Given an array of strings `arr`, a string `s` is formed by the concatenation of a subsequence of `arr` that has unique characters. Return the maximum possible length of `s`.",
        "example": "Example:\n\nInput: arr = [\"un \", \"iq \", \"ue \"]\nOutput: 4\nExplanation: All the valid concatenations are:\n- \"\"\n- \"un \"\n- \"iq \"\n- \"ue \"\n- \"uniq \" (\"un \" + \"iq \")\n- \"ique \" (\"iq \" + \"ue \")\nMaximum length is 4.",
        "level": "Medium",
        "tags": [
            "array",
            "string",
            "subsequence"
        ],
        "test_cases": {
            "inputs": [
                [
                    "un ",
                    "iq ",
                    "ue "
                ],
                [
                    "cha ",
                    "r ",
                    "act ",
                    "ers "
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz "
                ],
                [
                    "a ",
                    "b ",
                    "c ",
                    "d ",
                    "e ",
                    "f ",
                    "g ",
                    "h ",
                    "i ",
                    "j ",
                    "k ",
                    "l ",
                    "m ",
                    "n ",
                    "o ",
                    "p ",
                    "q ",
                    "r ",
                    "s ",
                    "t ",
                    "u ",
                    "v ",
                    "w ",
                    "x ",
                    "y ",
                    "z "
                ],
                [
                    "abc ",
                    "def ",
                    "ghi ",
                    "jkl ",
                    "mno ",
                    "pqr ",
                    "stu ",
                    "vwx ",
                    "yz "
                ]
            ],
            "outputs": [
                4,
                6,
                26,
                26,
                9
            ]
        }
    },
    "1240": {
        "title": "Minimum Number of Squares to Tile a Rectangle",
        "description": "Given a rectangle of size `n` x `m`, you need to find the minimum number of integer-sided squares that can tile the rectangle completely. Return the minimum number of squares required.",
        "example": "Example 1:\n\nInput: n = 2, m = 3\nOutput: 3\nExplanation: To cover the rectangle, we need 3 squares: 2 squares of size 1x1 and 1 square of size 2x2.\n\nExample 2:\n\nInput: n = 5, m = 8\nOutput: 5\n\nExample 3:\n\nInput: n = 11, m = 13\nOutput: 6",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3
                ],
                [
                    5,
                    8
                ],
                [
                    11,
                    13
                ],
                [
                    1,
                    1
                ],
                [
                    4,
                    4
                ],
                [
                    6,
                    6
                ],
                [
                    13,
                    13
                ],
                [
                    10,
                    12
                ],
                [
                    7,
                    9
                ],
                [
                    3,
                    10
                ],
                [
                    8,
                    5
                ],
                [
                    9,
                    11
                ],
                [
                    12,
                    12
                ],
                [
                    13,
                    1
                ],
                [
                    1,
                    13
                ],
                [
                    13,
                    13
                ],
                [
                    13,
                    12
                ],
                [
                    12,
                    13
                ],
                [
                    13,
                    7
                ],
                [
                    7,
                    13
                ]
            ],
            "outputs": [
                3,
                5,
                6,
                1,
                4,
                4,
                9,
                6,
                5,
                4,
                5,
                6,
                9,
                13,
                13,
                13,
                9,
                9,
                9,
                9
            ]
        }
    },
    "1243": {
        "title": "Array Transformation",
        "description": "Given an initial array `arr`, every day you produce a new array using the array of the previous day. On the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`: \n\n1. If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented. \n2. If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented. \n3. The first and last elements never change. \n\nAfter some days, the array does not change. Return that final array.",
        "example": "Example:\n\nInput: arr = [6,2,3,4]\nOutput: [6,3,3,4]\nExplanation: On the first day, the array is changed from [6,2,3,4] to [6,3,3,4]. No more operations can be done to this array.",
        "level": "Medium",
        "tags": [
            "array",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                [
                    6,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    6,
                    3,
                    4,
                    3,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                [
                    6,
                    3,
                    3,
                    4
                ],
                [
                    1,
                    4,
                    4,
                    4,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ]
        }
    },
    "1244": {
        "title": "Leaderboard Class",
        "description": "Design a Leaderboard class that supports three functions: addScore(playerId, score), top(K), and reset(playerId). The addScore function updates the leaderboard by adding the given score to the player's score. If the player does not exist in the leaderboard, they are added with the given score. The top function returns the sum of the scores of the top K players. The reset function resets the score of the player with the given playerId to 0. Initially, the leaderboard is empty.",
        "example": "Example:\n\nLeaderboard leaderboard = new Leaderboard();\nleaderboard.addScore(1, 73); // leaderboard = [[1, 73]];\nleaderboard.addScore(2, 56); // leaderboard = [[1, 73], [2, 56]];\nleaderboard.addScore(3, 39); // leaderboard = [[1, 73], [2, 56], [3, 39]];\nleaderboard.addScore(4, 51); // leaderboard = [[1, 73], [2, 56], [3, 39], [4, 51]];\nleaderboard.addScore(5, 4); // leaderboard = [[1, 73], [2, 56], [3, 39], [4, 51], [5, 4]];\nleaderboard.top(1); // returns 73;\nleaderboard.reset(1); // leaderboard = [[2, 56], [3, 39], [4, 51], [5, 4]];\nleaderboard.reset(2); // leaderboard = [[3, 39], [4, 51], [5, 4]];\nleaderboard.addScore(2, 51); // leaderboard = [[2, 51], [3, 39], [4, 51], [5, 4]];\nleaderboard.top(3); // returns 141 = 51 + 51 + 39;",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    1,
                    73
                ],
                [
                    2,
                    56
                ],
                [
                    3,
                    39
                ],
                [
                    4,
                    51
                ],
                [
                    5,
                    4
                ],
                [
                    1
                ],
                [
                    1
                ],
                [
                    2
                ],
                [
                    2,
                    51
                ],
                [
                    3
                ]
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "73",
                "null",
                "null",
                "null",
                "141"
            ]
        }
    },
    "1245": {
        "title": "Tree Diameter",
        "description": "Given an undirected tree with `n` nodes labeled from 0 to n-1, represented by a 2D array `edges`, find the diameter of the tree. The diameter of a tree is defined as the number of edges in the longest path between any two nodes in the tree.",
        "example": "Example:\n\nInput: edges = [[0,1],[0,2]]\nOutput: 2\nExplanation: The longest path in the tree is 1 - 0 - 2.\n\nInput: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]\nOutput: 4\nExplanation: The longest path in the tree is 3 - 2 - 1 - 4 - 5.",
        "level": "Medium",
        "tags": [
            "Tree",
            "Graph",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        1,
                        4
                    ],
                    [
                        4,
                        5
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        0,
                        2
                    ],
                    [
                        0,
                        3
                    ],
                    [
                        0,
                        4
                    ],
                    [
                        0,
                        5
                    ],
                    [
                        0,
                        6
                    ],
                    [
                        0,
                        7
                    ],
                    [
                        0,
                        8
                    ],
                    [
                        0,
                        9
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ],
                    [
                        24,
                        25
                    ],
                    [
                        25,
                        26
                    ],
                    [
                        26,
                        27
                    ],
                    [
                        27,
                        28
                    ],
                    [
                        28,
                        29
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ],
                    [
                        24,
                        25
                    ],
                    [
                        25,
                        26
                    ],
                    [
                        26,
                        27
                    ],
                    [
                        27,
                        28
                    ],
                    [
                        28,
                        29
                    ],
                    [
                        29,
                        30
                    ],
                    [
                        30,
                        31
                    ],
                    [
                        31,
                        32
                    ],
                    [
                        32,
                        33
                    ],
                    [
                        33,
                        34
                    ],
                    [
                        34,
                        35
                    ],
                    [
                        35,
                        36
                    ],
                    [
                        36,
                        37
                    ],
                    [
                        37,
                        38
                    ],
                    [
                        38,
                        39
                    ]
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        1,
                        2
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        5,
                        6
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        7,
                        8
                    ],
                    [
                        8,
                        9
                    ],
                    [
                        9,
                        10
                    ],
                    [
                        10,
                        11
                    ],
                    [
                        11,
                        12
                    ],
                    [
                        12,
                        13
                    ],
                    [
                        13,
                        14
                    ],
                    [
                        14,
                        15
                    ],
                    [
                        15,
                        16
                    ],
                    [
                        16,
                        17
                    ],
                    [
                        17,
                        18
                    ],
                    [
                        18,
                        19
                    ],
                    [
                        19,
                        20
                    ],
                    [
                        20,
                        21
                    ],
                    [
                        21,
                        22
                    ],
                    [
                        22,
                        23
                    ],
                    [
                        23,
                        24
                    ],
                    [
                        24,
                        25
                    ],
                    [
                        25,
                        26
                    ],
                    [
                        26,
                        27
                    ],
                    [
                        27,
                        28
                    ],
                    [
                        28,
                        29
                    ],
                    [
                        29,
                        30
                    ],
                    [
                        30,
                        31
                    ],
                    [
                        31,
                        32
                    ],
                    [
                        32,
                        33
                    ],
                    [
                        33,
                        34
                    ],
                    [
                        34,
                        35
                    ],
                    [
                        35,
                        36
                    ],
                    [
                        36,
                        37
                    ],
                    [
                        37,
                        38
                    ],
                    [
                        38,
                        39
                    ],
                    [
                        39,
                        40
                    ],
                    [
                        40,
                        41
                    ],
                    [
                        41,
                        42
                    ],
                    [
                        42,
                        43
                    ],
                    [
                        43,
                        44
                    ],
                    [
                        44,
                        45
                    ],
                    [
                        45,
                        46
                    ],
                    [
                        46,
                        47
                    ],
                    [
                        47,
                        48
                    ],
                    [
                        48,
                        49
                    ]
                ]
            ],
            "outputs": [
                2,
                4,
                8,
                9,
                14,
                19,
                24,
                29,
                34,
                39
            ]
        }
    },
    "1246": {
        "title": "Minimum Moves to Remove All Numbers",
        "description": "Given an integer array `arr`, you need to find the minimum number of moves required to remove all numbers from the array. In one move, you can select a palindromic subarray `arr[i], arr[i + 1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and right of that subarray move to fill the gap left by the removal.",
        "example": "Example:\n\nInput: arr = [1,2]\nOutput: 2\n\nExplanation: The array [1,2] is already a palindrome, so we need to remove it in two moves.\n\nInput: arr = [1,3,4,1,5]\nOutput: 3\nExplanation: We can remove the subarrays [4], [1,3,1], and [5] to get an empty array.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2
                ],
                [
                    1,
                    3,
                    4,
                    1,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                2,
                3,
                5,
                5,
                3,
                10,
                10,
                7,
                9,
                12,
                12,
                15,
                15,
                18,
                18,
                21,
                21,
                24,
                24,
                27
            ]
        }
    },
    "1247": null,
    "1248": null,
    "1250": {
        "title": "Good Array",
        "description": "Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be **good** if you can obtain a sum of `1` from the array by any possible subset and multiplicand. Return `True` if the array is **good** otherwise return `False`.",
        "example": "Example:\n\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[12,5,7,23]",
                "[29,6,10]",
                "[3,6]",
                "[1,2,3,4,5]",
                "[10,20,30,40,50]",
                "[100,200,300,400,500]",
                "[2,4,6,8,10]",
                "[1,3,5,7,9]",
                "[15,25,35,45,55]",
                "[1000,2000,3000,4000,5000]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[3,3,3,3,3]",
                "[4,4,4,4,4]",
                "[5,5,5,5,5]",
                "[6,6,6,6,6]",
                "[7,7,7,7,7]",
                "[8,8,8,8,8]",
                "[9,9,9,9,9]",
                "[10,10,10,10,10]"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "1252": {
        "title": "Odd-Valued Cells",
        "description": "You are given an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a 0-indexed location to perform some increment operations on the matrix. For each location `indices[i]`, you need to increment all the cells on row `ri` and all the cells on column `ci`. After applying the increments to all locations in `indices`, return the number of odd-valued cells in the matrix.",
        "example": "Example:\n\nInput: m = 2, n = 3, indices = [[0,1],[1,1]]\nOutput: 6\nExplanation: Initial matrix = [[0,0,0],[0,0,0]]. After applying the first increment, it becomes [[1,2,1],[0,1,0]]. The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.",
        "level": "Medium",
        "tags": [
            "matrix",
            "increment",
            "odd numbers"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            1
                        ]
                    ]
                ],
                [
                    2,
                    2,
                    [
                        [
                            1,
                            1
                        ],
                        [
                            0,
                            0
                        ]
                    ]
                ],
                [
                    3,
                    4,
                    [
                        [
                            0,
                            0
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    4,
                    4,
                    [
                        [
                            0,
                            0
                        ],
                        [
                            1,
                            1
                        ],
                        [
                            2,
                            2
                        ],
                        [
                            3,
                            3
                        ]
                    ]
                ],
                [
                    2,
                    2,
                    [
                        [
                            0,
                            0
                        ],
                        [
                            1,
                            1
                        ],
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            0
                        ]
                    ]
                ]
            ],
            "outputs": [
                6,
                0,
                10,
                16,
                4
            ]
        }
    },
    "1253": {
        "title": "Reconstruct Binary Matrix",
        "description": "Given the details of a matrix with `n` columns and `2` rows, where each element in the matrix can be `0` or `1`, the sum of elements of the 0-th (upper) row is given as `upper`, the sum of elements of the 1-st (lower) row is given as `lower`, and the sum of elements in the i-th column (0-indexed) is `colsum[i]`, your task is to reconstruct the matrix with the given `upper`, `lower`, and `colsum`. Return the reconstructed matrix as a 2-D integer array. If there are multiple valid solutions, any of them will be accepted. If no valid solution exists, return an empty 2-D array.",
        "example": "Example:\n\nInput: upper = 2, lower = 1, colsum = [1,1,1]\nOutput: [[1,1,0],[0,0,1]]\nExplanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    1,
                    [
                        1,
                        1,
                        1
                    ]
                ],
                [
                    2,
                    3,
                    [
                        2,
                        2,
                        1,
                        1
                    ]
                ],
                [
                    5,
                    5,
                    [
                        2,
                        1,
                        2,
                        0,
                        1,
                        0,
                        1,
                        2,
                        0,
                        1
                    ]
                ],
                [
                    0,
                    0,
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    3,
                    3,
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    4,
                    4,
                    [
                        2,
                        2,
                        2,
                        2,
                        0,
                        0
                    ]
                ],
                [
                    2,
                    2,
                    [
                        1,
                        1,
                        0,
                        0,
                        1,
                        1
                    ]
                ],
                [
                    1,
                    2,
                    [
                        0,
                        1,
                        1,
                        0,
                        1,
                        0
                    ]
                ],
                [
                    3,
                    2,
                    [
                        1,
                        0,
                        1,
                        1,
                        0,
                        1
                    ]
                ],
                [
                    5,
                    0,
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            ],
            "outputs": [
                [
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ],
                [],
                [
                    [
                        1,
                        1,
                        1,
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        1,
                        0,
                        0,
                        0,
                        1,
                        1,
                        0,
                        1
                    ]
                ],
                [],
                [
                    [
                        1,
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        1,
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        1,
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        0,
                        1,
                        1,
                        0,
                        0
                    ]
                ],
                [
                    [
                        0,
                        1,
                        1,
                        0,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        0,
                        1,
                        1,
                        0
                    ]
                ],
                [
                    [
                        1,
                        0,
                        1,
                        0,
                        0,
                        1
                    ],
                    [
                        0,
                        1,
                        0,
                        1,
                        1,
                        0
                    ]
                ],
                []
            ]
        }
    },
    "1257": {
        "title": "Smallest Common Region",
        "description": "You are given some lists of `regions` where the first region of each list includes all other regions in that list. Naturally, if a region `x` contains another region `y` then `x` is bigger than `y`. Also, by definition, a region `x` contains itself. Given two regions: `region1` and `region2`, return the smallest region that contains both of them. If you are given regions `r1`, `r2`, and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`. It is guaranteed the smallest region exists.",
        "example": "Example:\n\nInput:\nregions = [[\"Earth\", \"North America\", \"South America\"], [\"North America\", \"United States\", \"Canada\"], [\"United States\", \"New York\", \"Boston\"], [\"Canada\", \"Ontario\", \"Quebec\"], [\"South America\", \"Brazil\"]],\nregion1 = \"Quebec\",\nregion2 = \"New York\"\nOutput: \"North America\"\n\nInput:\nregions = [[\"Earth\", \"North America\", \"South America\"], [\"North America\", \"United States\", \"Canada\"], [\"United States\", \"New York\", \"Boston\"], [\"Canada\", \"Ontario\", \"Quebec\"], [\"South America\", \"Brazil\"]],\nregion1 = \"Canada\",\nregion2 = \"South America\"\nOutput: \"Earth\"",
        "level": "Medium",
        "tags": [
            "array",
            "graph",
            "tree"
        ],
        "test_cases": {
            "inputs": [
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Quebec",
                    "region2": "New York"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Canada",
                    "region2": "South America"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Brazil",
                    "region2": "Ontario"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Earth",
                    "region2": "Earth"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Boston",
                    "region2": "New York"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "United States",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Ontario",
                    "region2": "South America"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Earth",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Canada",
                    "region2": "Boston"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "South America",
                    "region2": "Earth"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "New York",
                    "region2": "Ontario"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Quebec",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Boston",
                    "region2": "Canada"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "United States",
                    "region2": "Ontario"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Ontario",
                    "region2": "Earth"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Brazil",
                    "region2": "South America"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Earth",
                    "region2": "New York"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Canada",
                    "region2": "Boston"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "South America",
                    "region2": "Brazil"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "New York",
                    "region2": "Boston"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Quebec",
                    "region2": "Canada"
                },
                {
                    "regions": [
                        [
                            "Earth",
                            "North America",
                            "South America"
                        ],
                        [
                            "North America",
                            "United States",
                            "Canada"
                        ],
                        [
                            "United States",
                            "New York",
                            "Boston"
                        ],
                        [
                            "Canada",
                            "Ontario",
                            "Quebec"
                        ],
                        [
                            "South America",
                            "Brazil"
                        ]
                    ],
                    "region1": "Boston",
                    "region2": "Earth"
                }
            ],
            "outputs": [
                "North America",
                "Earth",
                "Earth",
                "Earth",
                "North America",
                "Earth",
                "Earth",
                "Earth",
                "North America",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth",
                "Earth"
            ]
        }
    },
    "1258": {
        "title": "Synonymous Sentences",
        "description": "Given a list of equivalent string pairs `synonyms` and a sentence `text`, return all possible synonymous sentences sorted lexicographically.",
        "example": "For example, given synonyms = [['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']] and text = 'I am happy today but was sad yesterday', the possible synonymous sentences are: ['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday'].",
        "level": "Medium",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was sad yesterday']",
                "[[['happy', 'joy'], ['cheerful', 'glad']], 'I am happy today but was sad yesterday']",
                "[[], 'I am happy today but was sad yesterday']",
                "[[['happy', 'joy']], 'I am happy today but was sad yesterday']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], '']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was sad']",
                "[[['happy', 'joy'], ['sad', 'sorrow'], ['joy', 'cheerful']], 'I am happy today but was sad yesterday']"
            ],
            "outputs": [
                "['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday']",
                "['I am happy today but was sad yesterday', 'I am joy today but was sad yesterday']",
                "['I am happy today but was sad yesterday']",
                "['I am happy today but was sad yesterday']",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "['I am cheerful today but was sad yesterday', 'I am cheerful today but was sorrow yesterday', 'I am happy today but was sad yesterday', 'I am happy today but was sorrow yesterday', 'I am joy today but was sad yesterday', 'I am joy today but was sorrow yesterday']"
            ]
        }
    },
    "1259": {
        "title": "Handshake Arrangements",
        "description": "You are given an even number of people `numPeople` that stand around a circle and each person shakes hands with someone else so that there are `numPeople / 2` handshakes total. Return the number of ways these handshakes could occur such that none of the handshakes cross. Since the answer could be very large, return it modulo 109 + 7.",
        "example": "Example:\n\nInput: numPeople = 4\nOutput: 2\nExplanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].",
        "level": "Medium",
        "tags": [
            "Math",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                4,
                6,
                8,
                10,
                12,
                14,
                16,
                18,
                20,
                22,
                24,
                26,
                28,
                30,
                32,
                34,
                36,
                38,
                40,
                42
            ],
            "outputs": [
                2,
                5,
                14,
                42,
                132,
                429,
                1430,
                4862,
                16796,
                58786,
                208012,
                742900,
                2674440,
                9694845,
                35357670,
                129644790,
                477638700,
                1767263190,
                6564120420,
                24466267020
            ]
        }
    },
    "1260": {
        "title": "Grid Shift",
        "description": "Given a 2D grid of size m x n and an integer k, perform k shift operations on the grid. In each shift operation, the elements in the grid move according to the following rules: \n\n- Element at grid[i][j] moves to grid[i][j + 1].\n- Element at grid[i][n - 1] moves to grid[i + 1][0].\n- Element at grid[m - 1][n - 1] moves to grid[0][0].\n\nReturn the 2D grid after applying the shift operation k times.",
        "example": "Example:\n\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[9,1,2],[3,4,5],[6,7,8]]\n\nInput: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\nOutput: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9\nOutput: [[1,2,3],[4,5,6],[7,8,9]]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "shift"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90],[91,92,93,94,95]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90],[91,92,93,94,95],[96,97,98,99,100]]"
            ],
            "outputs": [
                "[[9,1,2],[3,4,5],[6,7,8]]",
                "[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[4,1,2,3],[8,5,6,7],[12,9,10,11]]",
                "[[4,5,6],[7,8,9],[10,11,1],[2,3,5]]",
                "[[6,7,8,9,10],[11,12,13,14,15],[1,2,3,4,5]]",
                "[[11,12,13,14,15],[16,17,18,19,20],[21,1,2,3,4],[6,7,8,9,10]]",
                "[[16,17,18,19,20],[21,22,23,24,25],[26,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[21,22,23,24,25],[26,27,28,29,30],[31,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
                "[[26,27,28,29,30],[31,32,33,34,35],[36,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
                "[[31,32,33,34,35],[36,37,38,39,40],[41,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]",
                "[[36,37,38,39,40],[41,42,43,44,45],[46,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]",
                "[[41,42,43,44,45],[46,47,48,49,50],[51,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40]]",
                "[[46,47,48,49,50],[51,52,53,54,55],[56,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45]]",
                "[[51,52,53,54,55],[56,57,58,59,60],[61,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50]]",
                "[[56,57,58,59,60],[61,62,63,64,65],[66,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55]]",
                "[[61,62,63,64,65],[66,67,68,69,70],[71,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60]]",
                "[[66,67,68,69,70],[71,72,73,74,75],[76,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65]]",
                "[[71,72,73,74,75],[76,77,78,79,80],[81,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70]]",
                "[[76,77,78,79,80],[81,82,83,84,85],[86,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75]]",
                "[[81,82,83,84,85],[86,87,88,89,90],[91,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80]]",
                "[[86,87,88,89,90],[91,92,93,94,95],[96,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85]]",
                "[[91,92,93,94,95],[96,97,98,99,100],[1,1,2,3,4],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90]]"
            ]
        }
    },
    "1261": null,
    "1262": {
        "title": "Maximum Sum Divisible by Three",
        "description": "Given an integer array `nums`, return the maximum possible sum of elements of the array such that it is divisible by three.",
        "example": "Example 1:\n\nInput: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8. Their sum is 18, which is the maximum sum divisible by 3.\n\nExample 2:\n\nInput: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.\n\nExample 3:\n\nInput: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4. Their sum is 12, which is the maximum sum divisible by 3.",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    6,
                    5,
                    1,
                    8
                ],
                [
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25
                ],
                [
                    6,
                    12,
                    18,
                    24,
                    30
                ],
                [
                    7,
                    14,
                    21,
                    28,
                    35
                ],
                [
                    9,
                    18,
                    27,
                    36,
                    45
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    11,
                    22,
                    33,
                    44,
                    55
                ],
                [
                    13,
                    26,
                    39,
                    52,
                    65
                ],
                [
                    14,
                    28,
                    42,
                    56,
                    70
                ],
                [
                    15,
                    30,
                    45,
                    60,
                    75
                ],
                [
                    16,
                    32,
                    48,
                    64,
                    80
                ],
                [
                    17,
                    34,
                    51,
                    68,
                    85
                ],
                [
                    19,
                    38,
                    57,
                    76,
                    95
                ],
                [
                    21,
                    42,
                    63,
                    84,
                    105
                ]
            ],
            "outputs": [
                18,
                0,
                12,
                3,
                6,
                9,
                12,
                60,
                60,
                63,
                63,
                60,
                66,
                66,
                84,
                84,
                96,
                102,
                102,
                126
            ]
        }
    },
    "1263": {
        "title": "Minimum Number of Pushes",
        "description": "A storekeeper is playing a game where they need to push a box to a target location in a warehouse. The game is represented by an m x n grid of characters, where each element is a wall, floor, or box. The player can move up, down, left, or right in the grid if it is a floor (empty cell). The goal is to move the box to the target position under certain rules. The player cannot walk through the box and can only push the box to an adjacent free cell. Return the minimum number of pushes required to move the box to the target. If it is not possible to reach the target, return -1.",
        "example": "Example:\n\nInput:\ngrid = [\n    ['#', '#', '#', '#', '#', '#'],\n    ['#', 'T', '#', '#', '#', '#'],\n    ['#', '.', '.', 'B', '.', '#'],\n    ['#', '.', '#', '#', '.', '#'],\n    ['#', '.', '.', '.', 'S', '#'],\n    ['#', '#', '#', '#', '#', '#']\n]\nOutput: 3\nExplanation: The box can be pushed down, left, and up to reach the target.",
        "level": "Medium",
        "tags": [
            "grid",
            "search",
            "BFS"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        "T",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        "B",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        "#",
                        "#",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        "S",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ]
                ],
                [
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        "T",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        "B",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        "S",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ]
                ],
                [
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        "T",
                        ".",
                        ".",
                        "#",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        "#",
                        "B",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        ".",
                        "#"
                    ],
                    [
                        "#",
                        ".",
                        ".",
                        ".",
                        "S",
                        "#"
                    ],
                    [
                        "#",
                        "#",
                        "#",
                        "#",
                        "#",
                        "#"
                    ]
                ]
            ],
            "outputs": [
                3,
                -1,
                5
            ]
        }
    },
    "1265": {
        "title": "Reverse Linked List Values",
        "description": "You are given an immutable linked list. Implement a function to print out all the values of each node in reverse order using the provided interface.\n\nThe interface `ImmutableListNode` represents an immutable linked list, and you are given the head of the list. You can only access the linked list using the following functions:\n\n- `ImmutableListNode.printValue()`: Prints the value of the current node.\n- `ImmutableListNode.getNext()`: Returns the next node.\n\nYou must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.",
        "example": "Example:\n\nInput: head = [1,2,3,4]\nOutput: [4,3,2,1]\n\nExplanation: The linked list contains the values 1, 2, 3, and 4. Printing the values in reverse order gives [4, 3, 2, 1].",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Immutable",
            "Reverse"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "head": [
                        0,
                        -4,
                        -1,
                        3,
                        -5
                    ]
                },
                {
                    "head": [
                        -2,
                        0,
                        6,
                        4,
                        4,
                        -6
                    ]
                },
                {
                    "head": [
                        1
                    ]
                },
                {
                    "head": [
                        1000,
                        -1000
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "head": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        -6,
                        -7,
                        -8,
                        -9,
                        -10
                    ]
                },
                {
                    "head": [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                },
                {
                    "head": [
                        1,
                        3,
                        5,
                        7,
                        9,
                        2,
                        4,
                        6,
                        8,
                        10
                    ]
                },
                {
                    "head": [
                        -1,
                        -3,
                        -5,
                        -7,
                        -9,
                        -2,
                        -4,
                        -6,
                        -8,
                        -10
                    ]
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                },
                {
                    "head": [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                },
                {
                    "head": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5,
                        -6,
                        -7,
                        -8,
                        -9,
                        -10,
                        -11,
                        -12,
                        -13,
                        -14,
                        -15,
                        -16,
                        -17,
                        -18,
                        -19,
                        -20
                    ]
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            ],
            "outputs": [
                [
                    4,
                    3,
                    2,
                    1
                ],
                [
                    -5,
                    3,
                    -1,
                    -4,
                    0
                ],
                [
                    -6,
                    4,
                    4,
                    6,
                    0,
                    -2
                ],
                [
                    1
                ],
                [
                    -1000,
                    1000
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    -10,
                    -9,
                    -8,
                    -7,
                    -6,
                    -5,
                    -4,
                    -3,
                    -2,
                    -1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    10,
                    8,
                    6,
                    4,
                    2,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    -10,
                    -8,
                    -6,
                    -4,
                    -2,
                    -9,
                    -7,
                    -5,
                    -3,
                    -1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    -20,
                    -19,
                    -18,
                    -17,
                    -16,
                    -15,
                    -14,
                    -13,
                    -12,
                    -11,
                    -10,
                    -9,
                    -8,
                    -7,
                    -6,
                    -5,
                    -4,
                    -3,
                    -2,
                    -1
                ],
                [
                    100,
                    99,
                    98,
                    97,
                    96,
                    95,
                    94,
                    93,
                    92,
                    91,
                    90,
                    89,
                    88,
                    87,
                    86,
                    85,
                    84,
                    83,
                    82,
                    81,
                    80,
                    79,
                    78,
                    77,
                    76,
                    75,
                    74,
                    73,
                    72,
                    71,
                    70,
                    69,
                    68,
                    67,
                    66,
                    65,
                    64,
                    63,
                    62,
                    61,
                    60,
                    59,
                    58,
                    57,
                    56,
                    55,
                    54,
                    53,
                    52,
                    51,
                    50,
                    49,
                    48,
                    47,
                    46,
                    45,
                    44,
                    43,
                    42,
                    41,
                    40,
                    39,
                    38,
                    37,
                    36,
                    35,
                    34,
                    33,
                    32,
                    31,
                    30,
                    29,
                    28,
                    27,
                    26,
                    25,
                    24,
                    23,
                    22,
                    21,
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ]
        }
    },
    "1266": {
        "title": "Minimum Time to Visit All Points",
        "description": "Given a list of points on a 2D plane, find the minimum time in seconds to visit all the points in the order given. You can move vertically, horizontally, or diagonally (sqrt(2) units) in 1 second. You must visit the points in the same order as they appear in the list.",
        "example": "Example:\n\nInput: points = [[1,1],[3,4],[-1,0]]\nOutput: 7\nExplanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]. The time from [1,1] to [3,4] is 3 seconds and the time from [3,4] to [-1,0] is 4 seconds. The total time is 7 seconds.",
        "level": "Medium",
        "tags": [
            "array",
            "geometry"
        ],
        "test_cases": {
            "inputs": [
                "[[1,1],[3,4],[-1,0]]",
                "[[3,2],[-2,2]]",
                "[[0,0],[0,1],[1,0],[1,1]]",
                "[[5,5],[10,10],[15,15],[20,20]]",
                "[[-5,-5],[-10,-10],[-15,-15],[-20,-20]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30]]"
            ],
            "outputs": [
                "7",
                "5",
                "3",
                "20",
                "20",
                "18",
                "28",
                "38",
                "48",
                "58"
            ]
        }
    },
    "1267": null,
    "1268": {
        "title": "Product Suggestion System",
        "description": "You are given an array of strings `products` and a string `searchWord`. Design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have a common prefix with `searchWord`. If there are more than three products with a common prefix, return the three lexicographically minimum products. Return a list of lists of the suggested products after each character of `searchWord` is typed.",
        "example": "Example:\n\nInput: products = [\"mobile \", \"mouse \", \"moneypot \", \"monitor \", \"mousepad \"], searchWord = \"mouse \"\nOutput: [[\"mobile \", \"moneypot \", \"monitor \"],[\"mobile \", \"moneypot \", \"monitor \"],[\"mouse \", \"mousepad \"],[\"mouse \", \"mousepad \"],[\"mouse \", \"mousepad \"]]\nExplanation: products sorted lexicographically = [\"mobile \", \"moneypot \", \"monitor \", \"mouse \", \"mousepad \"]. After typing m and mo all products match and we show the user [\"mobile \", \"moneypot \", \"monitor \"]. After typing mou, mous, and mouse the system suggests [\"mouse \", \"mousepad \"].",
        "level": "Medium",
        "tags": [
            "array",
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "products": [
                        "mobile ",
                        "mouse ",
                        "moneypot ",
                        "monitor ",
                        "mousepad "
                    ],
                    "searchWord": "mouse "
                },
                {
                    "products": [
                        "havana "
                    ],
                    "searchWord": "havana "
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "b"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "d"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "e"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "f"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "g"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "h"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "i"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "j"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "k"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "l"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "m"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "n"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "o"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "p"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "q"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "r"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "s"
                },
                {
                    "products": [
                        "apple ",
                        "banana ",
                        "cherry ",
                        "date ",
                        "elderberry "
                    ],
                    "searchWord": "t"
                }
            ],
            "outputs": [
                [
                    [
                        "mobile ",
                        "moneypot ",
                        "monitor "
                    ],
                    [
                        "mobile ",
                        "moneypot ",
                        "monitor "
                    ],
                    [
                        "mouse ",
                        "mousepad "
                    ],
                    [
                        "mouse ",
                        "mousepad "
                    ],
                    [
                        "mouse ",
                        "mousepad "
                    ]
                ],
                [
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ],
                    [
                        "havana "
                    ]
                ],
                [
                    [
                        "apple ",
                        "banana ",
                        "cherry "
                    ],
                    [
                        "apple ",
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ],
                    [
                        "banana ",
                        "cherry "
                    ]
                ],
                [
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ],
                    [
                        "date "
                    ]
                ],
                [
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ],
                    [
                        "elderberry "
                    ]
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ],
                [
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ]
            ]
        }
    },
    "1269": {
        "title": "Pointer Movement",
        "description": "You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time). Given two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.",
        "example": "Example:\n\nInput: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 different ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    2
                ],
                [
                    2,
                    4
                ],
                [
                    4,
                    2
                ],
                [
                    1,
                    1
                ],
                [
                    10,
                    5
                ],
                [
                    500,
                    100
                ],
                [
                    20,
                    10
                ],
                [
                    100,
                    50
                ],
                [
                    5,
                    3
                ],
                [
                    8,
                    4
                ],
                [
                    15,
                    7
                ],
                [
                    30,
                    15
                ],
                [
                    50,
                    25
                ],
                [
                    100,
                    50
                ],
                [
                    200,
                    100
                ],
                [
                    300,
                    150
                ],
                [
                    400,
                    200
                ],
                [
                    500,
                    250
                ],
                [
                    500,
                    500
                ],
                [
                    1,
                    500
                ]
            ],
            "outputs": [
                4,
                2,
                8,
                1,
                792,
                33590706,
                184756,
                538992043,
                13,
                18,
                136,
                40116600,
                538992043,
                538992043,
                538992043,
                538992043,
                538992043,
                538992043,
                538992043,
                1
            ]
        }
    },
    "1271": {
        "title": "Hexspeak Representation",
        "description": "Given a decimal number, convert it to its Hexspeak representation by converting it to an uppercase hexadecimal string and replacing '0' with 'O' and '1' with 'I'. Return the Hexspeak representation if it is valid, otherwise return 'ERROR'.",
        "example": "Example:\n\nInput: num = \"257\"\nOutput: \"IOI\"\nExplanation: 257 is 101 in hexadecimal.",
        "level": "Easy",
        "tags": [
            "String",
            "Conversion"
        ],
        "test_cases": {
            "inputs": [
                "\"257\"",
                "\"3\"",
                "\"10\"",
                "\"16\"",
                "\"100\"",
                "\"256\"",
                "\"1024\"",
                "\"4096\"",
                "\"65535\"",
                "\"100000\"",
                "\"999999\"",
                "\"1000000\"",
                "\"1000000000000\"",
                "\"999999999999\""
            ],
            "outputs": [
                "\"IOI\"",
                "\"ERROR\"",
                "\"A\"",
                "\"10\"",
                "\"64\"",
                "\"100\"",
                "\"400\"",
                "\"1000\"",
                "\"FFFF\"",
                "\"ERROR\"",
                "\"ERROR\"",
                "\"ERROR\"",
                "\"ERROR\"",
                "\"ERROR\""
            ]
        }
    },
    "1272": {
        "title": "Remove Interval",
        "description": "Given a sorted list of disjoint intervals representing a set of real numbers, remove a specified interval from the set. Return the updated set of intervals as a sorted list of disjoint intervals.",
        "example": "Example:\n\nInput: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]\nOutput: [[0,1],[6,7]]\n\nExplanation: The original set of intervals is [[0,2],[3,4],[5,7]]. The interval [1,6] is removed from the set, resulting in the updated set of intervals [[0,1],[6,7]].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[0,2],[3,4],[5,7]]",
                "[[0,5]]",
                "[[-5,-4],[-3,-2],[1,2],[3,5],[8,9]]",
                "[[1,3],[5,7],[9,11]]",
                "[[0,10]]",
                "[[-10,-5],[-3,0],[2,5],[7,10]]",
                "[[0,2],[4,6],[8,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6]]",
                "[[0,1],[2,3],[4,5],[6,7]]",
                "[[0,5],[6,10]]",
                "[[-10,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,2],[3,5],[6,8],[9,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6],[7,9]]",
                "[[0,3],[4,7],[8,11],[12,15]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9]]",
                "[[-5,-4],[-3,-2],[0,1],[2,3],[4,5]]",
                "[[0,2],[3,5],[6,8],[9,11],[12,14]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]]"
            ],
            "outputs": [
                "[[0,1],[6,7]]",
                "[[0,2],[3,5]]",
                "[[-5,-4],[-3,-2],[4,5],[8,9]]",
                "[[1,3],[5,7],[9,11]]",
                "[]",
                "[[-10,-5],[-3,0],[2,5],[7,10]]",
                "[[0,2],[4,6],[8,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6]]",
                "[[0,1],[2,3],[4,5],[6,7]]",
                "[[0,5],[6,10]]",
                "[[-10,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,2],[3,5],[6,8],[9,10]]",
                "[[-5,-3],[-2,0],[1,3],[4,6],[7,9]]",
                "[[0,3],[4,7],[8,11],[12,15]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9]]",
                "[[-5,-4],[-3,-2],[0,1],[2,3],[4,5]]",
                "[[0,2],[3,5],[6,8],[9,11],[12,14]]",
                "[[-10,-8],[-7,-5],[-4,-2],[0,2],[3,5],[6,8]]",
                "[[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]]"
            ]
        }
    },
    "1273": {
        "title": "Remove Subtrees with Zero Sum",
        "description": "Given a tree rooted at node 0, where each node has a value and a parent node, remove every subtree whose sum of values of nodes is zero. Return the number of remaining nodes in the tree.",
        "example": "Example:\n\nInput: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]\nOutput: 2\n\nExplanation: The tree can be represented as follows:\n\n       0 (1)\n      / \\\n     1   2 (1)\n    /   /|\\\n   3   4 5 6\n\nThe subtree rooted at node 1 has a sum of values equal to -2 + 4 + 0 = 2, which is not zero. The subtree rooted at node 2 has a sum of values equal to -2 + (-1) + (-1) = -4, which is zero. Therefore, the subtree rooted at node 2 should be removed. The remaining nodes are 0 and 1, so the output is 2.",
        "level": "Medium",
        "tags": [
            "Tree",
            "Recursion"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nodes": 7,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        2,
                        2,
                        2
                    ],
                    "value": [
                        1,
                        -2,
                        4,
                        0,
                        -2,
                        -1,
                        -1
                    ]
                },
                {
                    "nodes": 7,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        2,
                        2,
                        2
                    ],
                    "value": [
                        1,
                        -2,
                        4,
                        0,
                        -2,
                        -1,
                        -2
                    ]
                },
                {
                    "nodes": 5,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        1
                    ],
                    "value": [
                        1,
                        -1,
                        1,
                        0,
                        0
                    ]
                },
                {
                    "nodes": 6,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        1,
                        2
                    ],
                    "value": [
                        1,
                        -1,
                        1,
                        0,
                        0,
                        0
                    ]
                },
                {
                    "nodes": 8,
                    "parent": [
                        -1,
                        0,
                        0,
                        1,
                        1,
                        2,
                        2,
                        3
                    ],
                    "value": [
                        1,
                        -1,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                }
            ],
            "outputs": [
                2,
                6,
                3,
                4,
                5
            ]
        }
    },
    "1274": null,
    "1275": {
        "title": "Tic-Tac-Toe Winner",
        "description": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The first player A always places 'X' characters, while the second player B always places 'O' characters. The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli], return the winner of the game if it exists (A or B). In case the game ends in a draw return 'Draw'. If there are still movements to play return 'Pending'.",
        "example": "Example 1:\n\nInput: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: 'A'\nExplanation: A wins, they always play first.\n\nExample 2:\n\nInput: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: 'B'\nExplanation: B wins.\n\nExample 3:\n\nInput: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: 'Draw'\nExplanation: The game ends in a draw since there are no moves to make.",
        "level": "Easy",
        "tags": [
            "Array",
            "Simulation"
        ],
        "test_cases": {
            "inputs": [
                "[[0,0],[2,0],[1,1],[2,1],[2,2]]",
                "[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]",
                "[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1],[0,2],[1,2],[2,0]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1],[0,2],[1,2]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1],[0,2]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0],[2,1]]",
                "[[0,0],[1,1],[2,2],[0,1],[1,0]]",
                "[[0,0],[1,1],[2,2],[0,1]]",
                "[[0,0],[1,1],[2,2]]",
                "[[0,0],[1,1]]",
                "[[0,0]]",
                "[[0,0],[0,1],[0,2]]",
                "[[1,0],[1,1],[1,2]]",
                "[[2,0],[2,1],[2,2]]",
                "[[0,0],[1,0],[2,0]]",
                "[[0,1],[1,1],[2,1]]",
                "[[0,2],[1,2],[2,2]]",
                "[[0,0],[1,1],[0,1],[1,0],[2,2],[2,1],[0,2],[2,0],[1,2]]",
                "[[0,0],[1,1],[0,1],[1,0],[2,2],[2,1],[0,2],[2,0]]"
            ],
            "outputs": [
                "'A'",
                "'B'",
                "'Draw'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'A'",
                "'B'",
                "'Draw'",
                "'Pending'"
            ]
        }
    },
    "1276": {
        "title": "Burger Ingredients",
        "description": "Given the number of tomato slices and cheese slices, determine the number of jumbo and small burgers that can be made using the given ingredients. The ingredients for each type of burger are as follows: \n\n- Jumbo Burger: 4 tomato slices and 1 cheese slice \n- Small Burger: 2 tomato slices and 1 cheese slice \n\nReturn the number of jumbo and small burgers as a list `[total_jumbo, total_small]` such that the remaining tomato slices and cheese slices are equal to 0. If it is not possible to use all the ingredients to make the burgers, return an empty list. ",
        "example": "Example:\n\nInput: tomatoSlices = 16, cheeseSlices = 7\nOutput: [1, 6]\nExplanation: To make one jumbo burger and six small burgers, we need 4*1 + 2*6 = 16 tomato slices and 1 + 6 = 7 cheese slices. There will be no remaining ingredients.",
        "level": "Easy",
        "tags": [
            "Math",
            "Arrays"
        ],
        "test_cases": {
            "inputs": [
                [
                    16,
                    7
                ],
                [
                    17,
                    4
                ],
                [
                    4,
                    17
                ],
                [
                    0,
                    0
                ],
                [
                    10,
                    5
                ],
                [
                    8,
                    2
                ],
                [
                    6,
                    3
                ],
                [
                    12,
                    6
                ],
                [
                    20,
                    10
                ],
                [
                    15,
                    8
                ],
                [
                    3,
                    1
                ],
                [
                    9,
                    4
                ],
                [
                    14,
                    7
                ],
                [
                    18,
                    9
                ],
                [
                    21,
                    11
                ],
                [
                    25,
                    12
                ],
                [
                    30,
                    15
                ],
                [
                    35,
                    17
                ],
                [
                    40,
                    20
                ],
                [
                    45,
                    22
                ]
            ],
            "outputs": [
                [
                    1,
                    6
                ],
                [],
                [],
                [
                    0,
                    0
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    3
                ],
                [
                    2,
                    3
                ],
                [
                    5,
                    5
                ],
                [
                    3,
                    6
                ],
                [],
                [
                    2,
                    3
                ],
                [
                    3,
                    4
                ],
                [
                    4,
                    5
                ],
                [
                    5,
                    6
                ],
                [
                    6,
                    7
                ],
                [
                    7,
                    8
                ],
                [
                    8,
                    9
                ],
                [
                    10,
                    10
                ],
                [
                    11,
                    11
                ]
            ]
        }
    },
    "1277": null,
    "1278": {
        "title": "Minimal Palindrome Divisions",
        "description": "Given a string `s` containing lowercase letters and an integer `k`, you need to change some characters of `s` to other lowercase English letters. Then divide `s` into `k` non-empty disjoint substrings such that each substring is a palindrome. Return the minimal number of characters that you need to change to divide the string.",
        "example": "Example:\n\nInput: s = \"abc\", k = 2\nOutput: 1\nExplanation: You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.",
        "level": "Medium",
        "tags": [
            "String",
            "Palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"abc\"",
                "\"aabbc\"",
                "\"leetcode\""
            ],
            "outputs": [
                "1",
                "0",
                "0"
            ]
        }
    },
    "1281": {
        "title": "Difference between Product and Sum of Digits",
        "description": "Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.",
        "example": "Example:\n\nInput: n = 234\nOutput: 15\nExplanation: Product of digits = 2 * 3 * 4 = 24\nSum of digits = 2 + 3 + 4 = 9\nResult = 24 - 9 = 15",
        "level": "Easy",
        "tags": [
            "math",
            "numbers"
        ],
        "test_cases": {
            "inputs": [
                234,
                4421,
                0,
                1,
                123456,
                9999,
                10000,
                987654321
            ],
            "outputs": [
                15,
                21,
                0,
                0,
                720,
                0,
                -1,
                362880
            ]
        }
    },
    "1282": null,
    "1283": {
        "title": "Smallest Divisor",
        "description": "Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the **smallest** `divisor` such that the result mentioned above is less than or equal to `threshold`.\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\nThe test cases are generated so that there will be an answer.",
        "example": "Example:\n\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2).",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,5,9], 6",
                "[44,22,33,11,1], 5",
                "[10,20,30,40], 15",
                "[3,6,9,12], 4",
                "[100,200,300,400], 100",
                "[7,14,21,28], 10",
                "[2,4,6,8], 3",
                "[50,100,150,200], 75",
                "[11,22,33,44], 20",
                "[5,10,15,20], 7",
                "[8,16,24,32], 5",
                "[25,50,75,100], 30",
                "[9,18,27,36], 12",
                "[15,30,45,60], 25",
                "[12,24,36,48], 8",
                "[40,80,120,160], 60",
                "[6,12,18,24], 9",
                "[20,40,60,80], 35",
                "[14,28,42,56], 18",
                "[30,60,90,120], 50"
            ],
            "outputs": [
                "5",
                "44",
                "10",
                "3",
                "100",
                "7",
                "2",
                "50",
                "11",
                "5",
                "8",
                "25",
                "9",
                "15",
                "6",
                "40",
                "6",
                "20",
                "14",
                "30"
            ]
        }
    },
    "1284": null,
    "1286": {
        "title": "Combination Iterator",
        "description": "Design a CombinationIterator class that generates combinations of a given length in lexicographical order. The class should have a constructor that takes a string of sorted distinct lowercase English letters and an integer representing the combination length. It should also have two methods: next() which returns the next combination, and hasNext() which returns true if there is a next combination available.",
        "example": "Example:\n\nInput:\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // returns \"ab\"\nitr.hasNext(); // returns true\nitr.next();    // returns \"ac\"\nitr.hasNext(); // returns true\nitr.next();    // returns \"bc\"\nitr.hasNext(); // returns false\n\nExplanation:\nThe CombinationIterator is initialized with the string \"abc\" and combination length 2. The first call to next() returns \"ab\", the second call to hasNext() returns true indicating that there is another combination available. The second call to next() returns \"ac\", and the third call to hasNext() returns true. The third call to next() returns \"bc\", and the fourth call to hasNext() returns false indicating that there are no more combinations available.",
        "level": "Medium",
        "tags": [
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abc",
                    2
                ],
                [
                    "abcd",
                    3
                ],
                [
                    "xyz",
                    1
                ],
                [
                    "pqrst",
                    5
                ],
                [
                    "lmno",
                    4
                ],
                [
                    "abcdefgh",
                    2
                ],
                [
                    "ijklmnop",
                    3
                ],
                [
                    "qrstuvwxyz",
                    4
                ],
                [
                    "abcdefg",
                    1
                ],
                [
                    "hijklmnopqrs",
                    6
                ],
                [
                    "tuvwxyz",
                    2
                ],
                [
                    "abcdefghi",
                    3
                ],
                [
                    "jklmnopqr",
                    4
                ],
                [
                    "stuvwxyz",
                    5
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    1
                ],
                [
                    "abcde",
                    2
                ],
                [
                    "fghijklmnopqrstuvwxyz",
                    3
                ],
                [
                    "abcdef",
                    4
                ],
                [
                    "ghijklmnopqrstuvwxyz",
                    5
                ],
                [
                    "abcdefghijklmnopqrstuvwxyz",
                    15
                ]
            ],
            "outputs": [
                "ab",
                "abc",
                "x",
                "pqrst",
                "lmno",
                "ab",
                "abc",
                "abcd",
                "a",
                "hijklm",
                "tu",
                "abc",
                "abcd",
                "abcde",
                "a",
                "ab",
                "abc",
                "abcd",
                "abcde",
                "abcdefghijklmnop",
                "abcdefghijklmnopqrstuvwxyz"
            ]
        }
    },
    "1287": null,
    "1288": {
        "title": "Interval Coverage",
        "description": "Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list. The interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`. Return the number of remaining intervals.",
        "example": "Example:\n\nInput: intervals = [[1,4],[3,6],[2,8]]\nOutput: 2\nExplanation: Interval [3,6] is covered by [2,8], therefore it is removed.",
        "level": "Easy",
        "tags": [
            "array",
            "interval"
        ],
        "test_cases": {
            "inputs": [
                "[[1,4],[3,6],[2,8]]",
                "[[1,4],[2,3]]",
                "[[1,2],[2,3],[3,4],[4,5]]",
                "[[1,10],[2,9],[3,8],[4,7],[5,6]]",
                "[[1,5],[2,4],[3,6],[4,7],[5,8]]",
                "[[1,3],[2,4],[3,5],[4,6],[5,7]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6]]",
                "[[1,5],[2,4],[3,6],[4,7],[5,8],[6,9],[7,10]]",
                "[[1,10],[2,9],[3,8],[4,7],[5,6],[6,7],[7,8],[8,9],[9,10]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
                "[[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86],[16,85],[17,84],[18,83],[19,82],[20,81],[21,80],[22,79],[23,78],[24,77],[25,76],[26,75],[27,74],[28,73],[29,72],[30,71],[31,70],[32,69],[33,68],[34,67],[35,66],[36,65],[37,64],[38,63],[39,62],[40,61],[41,60],[42,59],[43,58],[44,57],[45,56],[46,55],[47,54],[48,53],[49,52],[50,51]]"
            ],
            "outputs": [
                "2",
                "1",
                "4",
                "5",
                "5",
                "5",
                "5",
                "7",
                "9",
                "10",
                "1"
            ]
        }
    },
    "1289": {
        "title": "Minimum Falling Path Sum",
        "description": "Given an `n x n` integer matrix `grid`, find the minimum sum of a falling path with non-zero shifts. A falling path with non-zero shifts is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.",
        "example": "Example:\n\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: The possible falling paths are: [1,5,9], [1,5,7], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9]. The falling path with the smallest sum is [1,5,7], so the answer is 13.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "matrix",
            "minimum sum"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        7
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ],
                    [
                        9,
                        10,
                        11,
                        12
                    ],
                    [
                        13,
                        14,
                        15,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ],
                    [
                        10,
                        11,
                        12
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    [
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25
                    ]
                ],
                [
                    [
                        9,
                        8,
                        7
                    ],
                    [
                        6,
                        5,
                        4
                    ],
                    [
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3
                    ],
                    [
                        -4,
                        -5,
                        -6
                    ],
                    [
                        -7,
                        -8,
                        -9
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        2,
                        2,
                        2,
                        2
                    ],
                    [
                        3,
                        3,
                        3,
                        3
                    ],
                    [
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    [
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25
                    ],
                    [
                        26,
                        27,
                        28,
                        29,
                        30
                    ]
                ],
                [
                    [
                        -1,
                        2,
                        -3,
                        4,
                        -5
                    ],
                    [
                        6,
                        -7,
                        8,
                        -9,
                        10
                    ],
                    [
                        -11,
                        12,
                        -13,
                        14,
                        -15
                    ],
                    [
                        16,
                        -17,
                        18,
                        -19,
                        20
                    ],
                    [
                        -21,
                        22,
                        -23,
                        24,
                        -25
                    ]
                ]
            ],
            "outputs": [
                13,
                7,
                30,
                21,
                65,
                6,
                -21,
                10,
                55,
                -25
            ]
        }
    },
    "1290": {
        "title": "Decimal Value of Binary Linked List",
        "description": "Given a singly-linked list where each node holds either 0 or 1, representing the binary representation of a number, return the decimal value of the number. The most significant bit is at the head of the linked list.",
        "example": "Example:\n\nInput: head = [1,0,1]\nOutput: 5\nExplanation: (101) in base 2 = (5) in base 10",
        "level": "Easy",
        "tags": [
            "linked list",
            "binary",
            "conversion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    1
                ],
                [
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "outputs": [
                5,
                0,
                2147483647
            ]
        }
    },
    "1291": {
        "title": "Sequential Digits",
        "description": "Given a range of integers [low, high], find all the integers within the range that have sequential digits. An integer has sequential digits if and only if each digit in the number is one more than the previous digit. Return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.",
        "example": "For example, given the range [100, 300], the integers with sequential digits are 123 and 234. Therefore, the output would be [123, 234].",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    100,
                    300
                ],
                [
                    1000,
                    13000
                ],
                [
                    10,
                    50
                ],
                [
                    500,
                    1000
                ],
                [
                    100,
                    1000
                ],
                [
                    100,
                    100
                ],
                [
                    1000,
                    1000
                ],
                [
                    123,
                    321
                ],
                [
                    1234,
                    4321
                ],
                [
                    10000,
                    20000
                ],
                [
                    12345,
                    54321
                ],
                [
                    100000,
                    200000
                ],
                [
                    123456,
                    654321
                ],
                [
                    1000000,
                    2000000
                ],
                [
                    1234567,
                    7654321
                ],
                [
                    10000000,
                    20000000
                ],
                [
                    12345678,
                    87654321
                ],
                [
                    100000000,
                    200000000
                ],
                [
                    123456789,
                    987654321
                ],
                [
                    1000000000,
                    1000000000
                ]
            ],
            "outputs": [
                [
                    123,
                    234
                ],
                [
                    1234,
                    2345,
                    3456,
                    4567,
                    5678,
                    6789,
                    12345
                ],
                [],
                [
                    567,
                    678,
                    789
                ],
                [
                    123,
                    234,
                    345,
                    456,
                    567,
                    678,
                    789,
                    1234,
                    2345,
                    3456,
                    4567,
                    5678,
                    6789
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ]
        }
    },
    "1292": {
        "title": "Maximum Side Length of Square",
        "description": "Given a matrix `mat` and an integer `threshold`, find the maximum side length of a square with a sum less than or equal to the threshold. If there is no such square, return 0.",
        "example": "Example:\n\nInput: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of a square with a sum less than 4 is 2.\n\nInput: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0\nExplanation: There is no square with a sum less than or equal to 1.",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "mat": [
                        [
                            1,
                            1,
                            3,
                            2,
                            4,
                            3,
                            2
                        ],
                        [
                            1,
                            1,
                            3,
                            2,
                            4,
                            3,
                            2
                        ],
                        [
                            1,
                            1,
                            3,
                            2,
                            4,
                            3,
                            2
                        ]
                    ],
                    "threshold": 4
                },
                {
                    "mat": [
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ],
                        [
                            2,
                            2,
                            2,
                            2,
                            2
                        ]
                    ],
                    "threshold": 1
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 12
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 20
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 30
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 40
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 50
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 60
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 70
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 80
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 90
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 100
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 110
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 120
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 130
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 140
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 150
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 160
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 170
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "threshold": 180
                }
            ],
            "outputs": [
                2,
                0,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ]
        }
    },
    "1293": {
        "title": "Minimum Steps with Obstacle Elimination",
        "description": "You are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right from and to an empty cell in **one step**. Return the minimum number of steps to walk from the upper left corner `(0, 0)` to the lower right corner `(m - 1, n - 1)` given that you can eliminate at most `k` obstacles. If it is not possible to find such a walk, return `-1`.",
        "example": "Example:\n\nInput: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1\nOutput: 6\nExplanation: The shortest path without eliminating any obstacle is 10. The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> **(3,2)** -> (4,2).",
        "level": "Medium",
        "tags": [
            "matrix",
            "graph",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 1
                },
                {
                    "grid": [
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            1,
                            1,
                            1
                        ],
                        [
                            1,
                            0,
                            0
                        ]
                    ],
                    "k": 1
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 2
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 3
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 4
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 5
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 6
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 7
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 8
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 9
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 10
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 11
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 12
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 13
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 14
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 15
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 16
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 17
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 18
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 19
                },
                {
                    "grid": [
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            1,
                            1,
                            0
                        ],
                        [
                            0,
                            0,
                            0
                        ],
                        [
                            0,
                            1,
                            1
                        ],
                        [
                            0,
                            0,
                            0
                        ]
                    ],
                    "k": 20
                }
            ],
            "outputs": [
                6,
                -1,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6,
                6
            ]
        }
    },
    "1295": {
        "title": "Count of Integers with Even Number of Digits",
        "description": "Given an array `nums` of integers, return the count of integers that contain an even number of digits.",
        "example": "Example 1:\n\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation: \n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.\n\nExample 2:\n\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation: \nOnly 1771 contains an even number of digits.",
        "level": "Easy",
        "tags": [
            "array",
            "digits"
        ],
        "test_cases": {
            "inputs": [
                [
                    12,
                    345,
                    2,
                    6,
                    7896
                ],
                [
                    555,
                    901,
                    482,
                    1771
                ],
                [
                    0,
                    1,
                    10,
                    100,
                    1000
                ],
                [
                    123,
                    456,
                    789,
                    1010
                ],
                [
                    1111,
                    2222,
                    3333,
                    4444
                ],
                [
                    12345,
                    67890,
                    13579,
                    24680
                ],
                [
                    100000,
                    200000,
                    300000,
                    400000
                ],
                [
                    123456789,
                    987654321,
                    135792468,
                    864209753
                ],
                [
                    111111111,
                    222222222,
                    333333333,
                    444444444
                ],
                [
                    1234567890,
                    9876543210,
                    1357924680,
                    8642097530
                ],
                [
                    1111111111,
                    2222222222,
                    3333333333,
                    4444444444
                ],
                [
                    12345678901,
                    98765432109,
                    13579246801,
                    86420975309
                ],
                [
                    11111111111,
                    22222222222,
                    33333333333,
                    44444444444
                ],
                [
                    123456789012,
                    987654321098,
                    135792468012,
                    864209753098
                ],
                [
                    111111111111,
                    222222222222,
                    333333333333,
                    444444444444
                ],
                [
                    1234567890123,
                    9876543210987,
                    1357924680123,
                    8642097530987
                ],
                [
                    1111111111111,
                    2222222222222,
                    3333333333333,
                    4444444444444
                ],
                [
                    12345678901234,
                    98765432109876,
                    13579246801234,
                    86420975309876
                ],
                [
                    11111111111111,
                    22222222222222,
                    33333333333333,
                    44444444444444
                ],
                [
                    123456789012345,
                    987654321098765,
                    135792468012345,
                    864209753098765
                ],
                [
                    111111111111111,
                    222222222222222,
                    333333333333333,
                    444444444444444
                ]
            ],
            "outputs": [
                2,
                1,
                2,
                0,
                4,
                2,
                4,
                4,
                0,
                4,
                0,
                4,
                0,
                4,
                0,
                4,
                0,
                4,
                0,
                4
            ]
        }
    },
    "1296": null,
    "1297": {
        "title": "Maximum Occurrences of Substring",
        "description": "Given a string `s`, return the maximum number of occurrences of any substring under the following rules:\n\n- The number of unique characters in the substring must be less than or equal to `maxLetters`.\n- The substring size must be between `minSize` and `maxSize` inclusive.",
        "example": "Example:\n\nInput: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: The substring \"aab\" has 2 occurrences in the original string. It satisfies the conditions of having 2 unique letters and a size between 3 and 4 (inclusive).\n\nInput: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: The substring \"aaa\" occurs 2 times in the string. It can overlap.",
        "level": "Medium",
        "tags": [
            "string",
            "substring",
            "occurrences"
        ],
        "test_cases": {
            "inputs": [
                "\"aababcaab\"",
                "\"aaaa\"",
                "\"abcabcabc\"",
                "\"abababab\"",
                "\"aabbaabbaabb\"",
                "\"abcdefg\"",
                "\"a\"",
                "\"aa\"",
                "\"aaa\"",
                "\"aaaa\"",
                "\"aaaaa\"",
                "\"aaaaaa\"",
                "\"aaaaaaa\"",
                "\"aaaaaaaa\"",
                "\"aaaaaaaaa\"",
                "\"aaaaaaaaaa\"",
                "\"aaaaaaaaaaa\"",
                "\"aaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaaa\"",
                "\"aaaaaaaaaaaaaaa\""
            ],
            "outputs": [
                "2",
                "2",
                "3",
                "4",
                "3",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "1298": {
        "title": "Maximum Number of Candies",
        "description": "You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes`. Each box has a status (open or closed), a number of candies, a list of keys to open other boxes, and a list of boxes contained within it. You are also given an array `initialBoxes` which contains the labels of the boxes you initially have. You can take all the candies in any open box and use the keys to open new boxes. Return the maximum number of candies you can collect following the given rules.",
        "example": "Example:\n\nInput:\nstatus = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You start with box 0, which is open and contains 7 candies. Inside box 0, you find boxes 1 and 2. Box 1 is closed, so you open box 2 and find 4 candies and a key to box 1. In box 1, you find 5 candies and box 3, but you don't have a key to open box 3. Therefore, the maximum number of candies you can collect is 16 (7 + 4 + 5).",
        "level": "Medium",
        "tags": [
            "array",
            "graph",
            "DFS"
        ],
        "test_cases": {
            "inputs": [
                {
                    "status": [
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        7,
                        5,
                        4,
                        100
                    ],
                    "keys": [
                        [],
                        [],
                        [
                            1
                        ],
                        []
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2
                        ],
                        [
                            3
                        ],
                        [],
                        []
                    ],
                    "initialBoxes": [
                        0
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "keys": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [],
                        [],
                        [],
                        [],
                        []
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [],
                        [],
                        [],
                        [],
                        []
                    ],
                    "initialBoxes": [
                        0
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "status": [
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            4
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            2,
                            3,
                            4,
                            5
                        ],
                        [
                            3,
                            4,
                            5
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            5
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "candies": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                },
                {
                    "status": [
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0,
                        1,
                        0
                    ],
                    "candies": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "keys": [
                        [],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ]
                    ],
                    "containedBoxes": [
                        [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            5,
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            6,
                            7,
                            8,
                            9
                        ],
                        [
                            7,
                            8,
                            9
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            9
                        ],
                        []
                    ],
                    "initialBoxes": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                }
            ],
            "outputs": [
                16,
                6,
                150,
                0,
                15,
                21,
                55,
                0,
                10,
                55,
                55,
                10,
                55,
                55,
                10,
                55
            ]
        }
    },
    "1299": null,
    "1300": null,
    "1301": {
        "title": "Maximum Sum Path on a Square Board",
        "description": "You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character 'S'.\n\nYou need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\n\nIn case there is no path, return [0, 0].",
        "example": "Example:\n\nInput: board = [\"E23\",\"2X2\",\"12S\"]\nOutput: [7,1]\n\nExplanation: The maximum sum of numeric characters that can be collected is 7. There is only one path to reach the top left square.\n\nInput: board = [\"E12\",\"1X1\",\"21S\"]\nOutput: [4,2]\n\nExplanation: The maximum sum of numeric characters that can be collected is 4. There are two paths to reach the top left square.\n\nInput: board = [\"E11\",\"XXX\",\"11S\"]\nOutput: [0,0]\n\nExplanation: There is no path to reach the top left square.",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "grid",
            "path finding"
        ],
        "test_cases": {
            "inputs": [
                [
                    "E23",
                    "2X2",
                    "12S"
                ],
                [
                    "E12",
                    "1X1",
                    "21S"
                ],
                [
                    "E11",
                    "XXX",
                    "11S"
                ],
                [
                    "E1X",
                    "2X2",
                    "12S"
                ],
                [
                    "E12",
                    "1X1",
                    "2XS"
                ],
                [
                    "E12",
                    "1X1",
                    "2X2"
                ],
                [
                    "E111",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ],
                [
                    "E123",
                    "2X2X",
                    "12S1"
                ]
            ],
            "outputs": [
                [
                    7,
                    1
                ],
                [
                    4,
                    2
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ]
            ]
        }
    },
    "1302": null,
    "1304": {
        "title": "Array with Zero Sum",
        "description": "Given an integer `n`, return any array containing `n` unique integers such that they add up to 0.",
        "example": "Example:\n\nInput: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays are also accepted [-5,-1,1,2,3], [-3,-1,2,-2,4].",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                5,
                3,
                1,
                2,
                10,
                100
            ],
            "outputs": [
                "[-7,-1,1,3,4]",
                "[-1,0,1]",
                "[0]",
                "[-1,1]",
                "[-5,5]",
                "[-50,50,-10,10,-20,20,-30,30,-40,40,-60,60,-70,70,-80,80,-90,90,-100,100]"
            ]
        }
    },
    "1305": {
        "title": "Merge Binary Search Trees",
        "description": "Given two binary search trees `root1` and `root2`, merge them into a single sorted binary search tree and return the root of the merged tree.",
        "example": "Example 1:\n\nInput: root1 = [2,1,4], root2 = [1,0,3]\nOutput: [0,1,1,2,3,4]\n\nExample 2:\n\nInput: root1 = [1,null,8], root2 = [8,1]\nOutput: [1,1,8,8]\n\nExplanation:\n\nIn Example 1, the merged tree is a binary search tree with elements [0,1,1,2,3,4].\n\nIn Example 2, the merged tree is a binary search tree with elements [1,1,8,8].",
        "level": "Medium",
        "tags": [
            "binary search tree",
            "tree traversal",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,4]",
                "[1,0,3]",
                "[1,null,8]",
                "[8,1]",
                "[]",
                "[1]",
                "[5,3,6,2,4,null,7]",
                "[1,2,3,4,5,6,7,8,9]",
                "[9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[0,1,1,2,3,4]",
                "[1,1,8,8]",
                "[]",
                "[1]",
                "[5,3,6,2,4,null,7]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9]",
                "[1,2,3,4,5,6,7,8,9]"
            ]
        }
    },
    "1306": null,
    "1307": {
        "title": "Solvable Equation",
        "description": "Given an equation, represented by `words` on the left side and the `result` on the right side, you need to check if the equation is solvable under the following rules:\n\n- Each character is decoded as one digit (0 - 9).\n- No two characters can map to the same digit.\n- Each `words[i]` and `result` are decoded as one number **without** leading zeros.\n- The sum of numbers on the left side (`words`) will equal the number on the right side (`result`).\n\nWrite a function `isSolvable(words: List[str], result: str) -> bool` that returns `True` if the equation is solvable, otherwise returns `False`.",
        "example": "Example:\n\nInput:\nwords = [\"SEND \", \"MORE \"]\nresult = \"MONEY \"\nOutput:\nTrue\nExplanation:\nMap 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that:  \"SEND \" +  \"MORE \" =  \"MONEY \" ,  9567 + 1085 = 10652",
        "level": "Medium",
        "tags": [
            "math",
            "backtracking"
        ],
        "test_cases": {
            "inputs": [
                [
                    "SEND ",
                    "MORE "
                ],
                [
                    "SIX ",
                    "SEVEN ",
                    "SEVEN "
                ],
                [
                    "LEET ",
                    "CODE "
                ],
                [
                    "AB ",
                    "CD ",
                    "EF ",
                    "GH ",
                    "IJ "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J "
                ],
                [
                    "HELLO ",
                    "WORLD "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE "
                ],
                [
                    "APPLE ",
                    "BANANA ",
                    "CHERRY ",
                    "DATE "
                ],
                [
                    "CAT ",
                    "DOG ",
                    "ELEPHANT ",
                    "FOX ",
                    "GIRAFFE "
                ],
                [
                    "CAR ",
                    "BUS ",
                    "TRAIN ",
                    "PLANE ",
                    "BOAT "
                ],
                [
                    "RED ",
                    "BLUE ",
                    "GREEN ",
                    "YELLOW ",
                    "ORANGE "
                ],
                [
                    "SUN ",
                    "MOON ",
                    "STAR ",
                    "SKY ",
                    "CLOUD "
                ],
                [
                    "PEN ",
                    "PENCIL ",
                    "ERASER ",
                    "RULER ",
                    "BOOK "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE ",
                    "SIX "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J ",
                    "K "
                ],
                [
                    "HELLO ",
                    "WORLD ",
                    "PYTHON ",
                    "CODING "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE ",
                    "SIX ",
                    "SEVEN "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J ",
                    "K ",
                    "L "
                ],
                [
                    "HELLO ",
                    "WORLD ",
                    "PYTHON ",
                    "CODING ",
                    "CHALLENGE "
                ],
                [
                    "ONE ",
                    "TWO ",
                    "THREE ",
                    "FOUR ",
                    "FIVE ",
                    "SIX ",
                    "SEVEN ",
                    "EIGHT "
                ],
                [
                    "A ",
                    "B ",
                    "C ",
                    "D ",
                    "E ",
                    "F ",
                    "G ",
                    "H ",
                    "I ",
                    "J ",
                    "K ",
                    "L ",
                    "M "
                ]
            ],
            "outputs": [
                true,
                true,
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "1309": null,
    "1310": {
        "title": "XOR Queries",
        "description": "You are given an array `arr` of positive integers. You are also given the array `queries` where `queries[i] = [lefti, righti]`. For each query `i`, compute the XOR of elements from `lefti` to `righti` (that is, `arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]`). Return an array `answer` where `answer[i]` is the answer to the `ith` query.",
        "example": "Example 1:\n\nInput: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\nOutput: [2,7,14,8]\nExplanation: The binary representation of the elements in the array are:\n1 = 0001\n3 = 0011\n4 = 0100\n8 = 1000\nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2\n[1,2] = 3 xor 4 = 7\n[0,3] = 1 xor 3 xor 4 xor 8 = 14\n[3,3] = 8\n\nExample 2:\n\nInput: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\nOutput: [8,0,4,4]",
        "level": "Medium",
        "tags": [
            "array",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3,4,8], [[0,1],[1,2],[0,3],[3,3]]]",
                "[[4,8,2,10], [[2,3],[1,3],[0,0],[0,3]]]",
                "[[1,2,3,4,5], [[0,4],[1,3],[2,2],[3,4]]]",
                "[[10,20,30,40,50], [[0,2],[1,4],[2,3],[3,3]]]",
                "[[100,200,300,400,500], [[0,0],[1,2],[2,4],[3,4]]]",
                "[[2,4,6,8,10], [[0,1],[1,3],[2,4],[3,4]]]",
                "[[5,10,15,20,25], [[0,3],[1,2],[2,3],[3,4]]]",
                "[[3,6,9,12,15], [[0,4],[1,3],[2,2],[3,3]]]",
                "[[7,14,21,28,35], [[0,2],[1,4],[2,3],[3,3]]]",
                "[[1,1,1,1,1], [[0,0],[1,1],[2,2],[3,4]]]",
                "[[2,2,2,2,2], [[0,1],[1,3],[2,4],[3,3]]]",
                "[[3,3,3,3,3], [[0,3],[1,2],[2,3],[3,4]]]",
                "[[4,4,4,4,4], [[0,4],[1,3],[2,2],[3,3]]]",
                "[[5,5,5,5,5], [[0,2],[1,4],[2,3],[3,3]]]",
                "[[6,6,6,6,6], [[0,0],[1,2],[2,4],[3,4]]]",
                "[[7,7,7,7,7], [[0,1],[1,3],[2,3],[3,3]]]",
                "[[8,8,8,8,8], [[0,3],[1,2],[2,3],[3,4]]]",
                "[[9,9,9,9,9], [[0,4],[1,4],[2,2],[3,3]]]",
                "[[10,10,10,10,10], [[0,2],[1,3],[2,4],[3,3]]]",
                "[[11,11,11,11,11], [[0,3],[1,4],[2,3],[3,4]]]"
            ],
            "outputs": [
                "[2,7,14,8]",
                "[8,0,4,4]",
                "[5,4,3,4]",
                "[20,38,38,12]",
                "[100,300,400,400]",
                "[6,14,14,8]",
                "[28,29,30,12]",
                "[45,24,9,12]",
                "[22,7,28,28]",
                "[1,2,1,1]",
                "[0,2,2,2]",
                "[3,0,3,3]",
                "[4,4,4,4]",
                "[5,1,4,4]",
                "[6,6,6,6]",
                "[7,0,7,7]",
                "[8,8,8,8]",
                "[9,0,9,9]",
                "[10,0,10,10]",
                "[11,0,11,11]"
            ]
        }
    },
    "1311": {
        "title": "Watched Videos by Friends",
        "description": "You are given a list of people, each with a unique ID. Each person has a list of watched videos and a list of friends. The level of videos represents the distance between you and the person who watched the video. Level 1 videos are watched by your friends, level 2 videos are watched by the friends of your friends, and so on. Given your ID and the level of videos, return the list of videos ordered by their frequencies (increasing). If two videos have the same frequency, order them alphabetically.",
        "example": "Example 1:\n\nInput:\nwatchedVideos = [['A', 'B'], ['C'], ['B', 'C'], ['D']]\nfriends = [[1,2],[0,3],[0,3],[1,2]]\nid = 0\nlevel = 1\nOutput: ['B', 'C']\nExplanation: You have ID 0 and your friends are ID 1 and ID 2. ID 1 watched video 'C' and ID 2 watched videos 'B' and 'C'. The frequencies of watched videos by your friends are: 'B' -> 1, 'C' -> 2.\n\nExample 2:\n\nInput:\nwatchedVideos = [['A', 'B'], ['C'], ['B', 'C'], ['D']]\nfriends = [[1,2],[0,3],[0,3],[1,2]]\nid = 0\nlevel = 2\nOutput: ['D']\nExplanation: You have ID 0 and the only friend of your friends is ID 3. ID 3 watched video 'D'.",
        "level": "Medium",
        "tags": [
            "graph",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 2]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 1]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 3]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 4]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 5]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 0, 6]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 1, 6]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 2, 6]",
                "[[['A', 'B'], ['C'], ['B', 'C'], ['D']], [[1,2],[0,3],[0,3],[1,2]], 3, 6]"
            ],
            "outputs": [
                "['B', 'C']",
                "['D']",
                "['A', 'B', 'C']",
                "['B', 'C', 'D']",
                "['A', 'B', 'C', 'D']",
                "[]",
                "['A', 'B', 'C', 'D']",
                "['A', 'B', 'C', 'D']",
                "['A', 'B', 'C', 'D']",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]",
                "[]"
            ]
        }
    },
    "1312": null,
    "1313": {
        "title": "Decompress Run-Length Encoded List",
        "description": "Given a list `nums` of integers representing a list compressed with run-length encoding, the task is to decompress the list. Each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`) represents `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.",
        "example": "For example, if the input list is `nums = [1,2,3,4]`, the output should be `[2,4,4,4]`. The first pair [1,2] means we have freq = 1 and val = 2, so we generate the array [2]. The second pair [3,4] means we have freq = 3 and val = 4, so we generate [4,4,4]. Finally, the concatenation [2] + [4,4,4] is [2,4,4,4].",
        "level": "Easy",
        "tags": [
            "array"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    2,
                    3
                ],
                [
                    2,
                    5,
                    3,
                    2,
                    1,
                    6
                ],
                [
                    3,
                    10,
                    2,
                    5,
                    1,
                    3
                ],
                [
                    1,
                    100,
                    2,
                    50,
                    3,
                    25,
                    4,
                    10
                ]
            ],
            "outputs": [
                [
                    2,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    3,
                    3
                ],
                [
                    5,
                    5,
                    2,
                    2,
                    6
                ],
                [
                    10,
                    10,
                    5,
                    5,
                    3
                ],
                [
                    100,
                    50,
                    50,
                    25,
                    25,
                    25,
                    10,
                    10,
                    10,
                    10
                ]
            ]
        }
    },
    "1314": {
        "title": "Matrix Sum within Range",
        "description": "Given a matrix `mat` of size `m x n` and an integer `k`, return a matrix `answer` where each element `answer[i][j]` is the sum of all elements `mat[r][c]` for `i - k <= r <= i + k`, `j - k <= c <= j + k`, and `(r, c)` is a valid position in the matrix.",
        "example": "Example 1:\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[12,21,16],[27,45,33],[24,39,28]]\n\nExample 2:\n\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\nOutput: [[45,45,45],[45,45,45],[45,45,45]]",
        "level": "Medium",
        "tags": [
            "matrix",
            "sum",
            "range"
        ],
        "test_cases": {
            "inputs": [
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 1
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 2
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 0
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 3
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 4
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 5
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 6
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 7
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 8
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 9
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 10
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 11
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 12
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 13
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 14
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 15
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 16
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 17
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 18
                },
                {
                    "mat": [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            4,
                            5,
                            6
                        ],
                        [
                            7,
                            8,
                            9
                        ]
                    ],
                    "k": 19
                }
            ],
            "outputs": [
                [
                    [
                        12,
                        21,
                        16
                    ],
                    [
                        27,
                        45,
                        33
                    ],
                    [
                        24,
                        39,
                        28
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ],
                [
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ],
                    [
                        45,
                        45,
                        45
                    ]
                ]
            ]
        }
    },
    "1315": {
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "description": "Given the `root` of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.\n\nA grandparent of a node is the parent of its parent if it exists.",
        "example": "Example:\n\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 18\nExplanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
                "[1]",
                "[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
                "[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
                "[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]"
            ],
            "outputs": [
                "18",
                "0",
                "120",
                "0",
                "0",
                "0",
                "0",
                "30",
                "0",
                "380"
            ]
        }
    },
    "1317": {
        "title": "No-Zero Integers",
        "description": "Given an integer `n`, return a list of two integers `[a, b]` where `a` and `b` are No-Zero integers and `a + b = n`. A No-Zero integer is a positive integer that does not contain any `0` in its decimal representation.",
        "example": "Example:\n\nInput: n = 11\nOutput: [2, 9]\nExplanation: Let a = 2 and b = 9. Both a and b are No-Zero integers, and a + b = 9 = n. Note that there are other valid answers as [8, 3] that can be accepted.",
        "level": "Easy",
        "tags": [
            "Math",
            "Numbers"
        ],
        "test_cases": {
            "inputs": [
                2,
                11,
                20,
                100,
                999,
                1000,
                12345,
                67890,
                987654,
                1000000,
                123456789,
                987654321,
                1000000000,
                1234567890,
                9876543210,
                10000000000,
                12345678901,
                98765432109,
                100000000000,
                123456789012
            ],
            "outputs": [
                [
                    1,
                    1
                ],
                [
                    2,
                    9
                ],
                [
                    11,
                    9
                ],
                [
                    99,
                    1
                ],
                [
                    999,
                    0
                ],
                [
                    999,
                    1
                ],
                [
                    12345,
                    0
                ],
                [
                    67890,
                    0
                ],
                [
                    987654,
                    0
                ],
                [
                    999999,
                    1
                ],
                [
                    123456789,
                    0
                ],
                [
                    987654321,
                    0
                ],
                [
                    999999999,
                    1
                ],
                [
                    123456789,
                    0
                ],
                [
                    987654321,
                    0
                ],
                [
                    9999999999,
                    1
                ],
                [
                    1234567890,
                    1
                ],
                [
                    9876543210,
                    0
                ],
                [
                    99999999999,
                    1
                ],
                [
                    12345678901,
                    1
                ]
            ]
        }
    },
    "1318": {
        "title": "Minimum Flips for Bitwise OR",
        "description": "Given three positive numbers `a`, `b`, and `c`, you need to determine the minimum number of bit flips required in `a` and `b` to make the bitwise OR of `a` and `b` equal to `c`. A flip operation involves changing any single bit from 1 to 0 or from 0 to 1 in the binary representation of a number.",
        "example": "Example:\n\nInput: a = 2, b = 6, c = 5\nOutput: 3\nExplanation: After flipping the bits, a = 1, b = 4, and c = 5. Now, the bitwise OR of a and b is equal to c.\n\nInput: a = 4, b = 2, c = 7\nOutput: 1\n\nInput: a = 1, b = 2, c = 3\nOutput: 0",
        "level": "Medium",
        "tags": [
            "bit manipulation",
            "binary representation",
            "flipping bits"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    6,
                    5
                ],
                [
                    4,
                    2,
                    7
                ],
                [
                    1,
                    2,
                    3
                ],
                [
                    10,
                    15,
                    5
                ],
                [
                    8,
                    9,
                    1
                ],
                [
                    100,
                    200,
                    300
                ],
                [
                    512,
                    1024,
                    1536
                ],
                [
                    1023,
                    2047,
                    3070
                ],
                [
                    1000,
                    2000,
                    3000
                ],
                [
                    12345,
                    67890,
                    80235
                ],
                [
                    111111,
                    222222,
                    333333
                ],
                [
                    999999,
                    888888,
                    777777
                ],
                [
                    1000000000,
                    999999999,
                    1999999999
                ],
                [
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    1
                ],
                [
                    0,
                    1,
                    1
                ],
                [
                    0,
                    1,
                    0
                ],
                [
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "outputs": [
                3,
                1,
                0,
                2,
                2,
                6,
                2,
                2,
                2,
                10,
                12,
                12,
                2,
                0,
                0,
                0,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1319": {
        "title": "Minimum Cable Connections",
        "description": "You are given a network of `n` computers connected by ethernet cables. Each cable is represented by a pair of computers it connects. Your task is to determine the minimum number of cable connections you need to make in order to ensure that all computers are directly or indirectly connected. You can extract cables between directly connected computers and place them between disconnected computers to establish direct connections. If it is not possible to connect all computers, return -1.",
        "example": "Example:\n\nInput: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove the cable between computer 1 and 2 and place it between computers 1 and 3.\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2\n\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.",
        "level": "Medium",
        "tags": [
            "Graph",
            "Union Find"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    2,
                    [
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            0,
                            4
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            3
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            0,
                            4
                        ],
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ]
            ],
            "outputs": [
                1,
                2,
                -1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1320": {
        "title": "Minimum Distance to Type Using Two Fingers",
        "description": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate. Given the string word, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. Note that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.",
        "example": "Example:\n\nInput: word = \"CAKE\"\nOutput: 3\nExplanation: Using two fingers, one optimal way to type \"CAKE\" is: Finger 1 on letter 'C' -> cost = 0, Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2, Finger 2 on letter 'K' -> cost = 0, Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1, Total distance = 3",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "string",
            "optimization"
        ],
        "test_cases": {
            "inputs": [
                "\"CAKE\"",
                "\"HAPPY\"",
                "\"KEYBOARD\"",
                "\"PROGRAMMING\"",
                "\"ALGORITHM\"",
                "\"COMPUTER\"",
                "\"SCIENCE\"",
                "\"ENGINEERING\"",
                "\"MATHEMATICS\"",
                "\"PYTHON\"",
                "\"JAVA\"",
                "\"C++\"",
                "\"DATA\"",
                "\"STRUCTURES\"",
                "\"ALGORITHMS\"",
                "\"CODING\"",
                "\"CHALLENGE\"",
                "\"INTERVIEW\"",
                "\"PREPARATION\"",
                "\"PRACTICE\""
            ],
            "outputs": [
                "3",
                "6",
                "12",
                "16",
                "11",
                "9",
                "9",
                "15",
                "16",
                "7",
                "7",
                "7",
                "7",
                "14",
                "16",
                "11",
                "14",
                "17",
                "18",
                "15"
            ]
        }
    },
    "1323": {
        "title": "Maximum Number by Changing Digits",
        "description": "You are given a positive integer `num` consisting only of digits `6` and `9`. Return the maximum number you can get by changing at most one digit (`6` becomes `9`, and `9` becomes `6`).",
        "example": "Example:\n\nInput: num = 9669\nOutput: 9969\nExplanation: Changing the first digit results in 6669. Changing the second digit results in 9969. Changing the third digit results in 9699. Changing the fourth digit results in 9666. The maximum number is 9969.",
        "level": "Easy",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                "9669",
                "9996",
                "9999",
                "6666",
                "6699",
                "6969",
                "9666",
                "9699",
                "9966",
                "9996",
                "666666",
                "999999",
                "666966",
                "966996",
                "696969",
                "969696",
                "966969",
                "969966",
                "999666",
                "666999"
            ],
            "outputs": [
                "9969",
                "9999",
                "9999",
                "9666",
                "9699",
                "9969",
                "9669",
                "9699",
                "9969",
                "9999",
                "999999",
                "999999",
                "999969",
                "969996",
                "999999",
                "969696",
                "969969",
                "969969",
                "999966",
                "966999"
            ]
        }
    },
    "1324": {
        "title": "Vertical Words",
        "description": "Given a string `s`, return all the words vertically in the same order in which they appear in `s`. Words are returned as a list of strings, complete with spaces when necessary. Trailing spaces are not allowed. Each word will be put in only one column, and in one column, there will be only one word.",
        "example": "Example 1:\n\nInput: s = \"HOW ARE YOU \"\nOutput: [\"HAY \", \"ORO \", \"WEU \"]\nExplanation: Each word is printed vertically.\n  \"HAY \"\n  \"ORO \"\n  \"WEU \"\n\nExample 2:\n\nInput: s = \"TO BE OR NOT TO BE \"\nOutput: [\"TBONTB \", \"OEROOE \", \"   T \"]\nExplanation: Trailing spaces are not allowed.\n \"TBONTB \"\n \"OEROOE \"\n \"   T \"\n\nExample 3:\n\nInput: s = \"CONTEST IS COMING \"\nOutput: [\"CIC \", \"OSO \", \"N M \", \"T I \", \"E N \", \"S G \", \"T \"]",
        "level": "Medium",
        "tags": [
            "string",
            "parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"HOW ARE YOU \"",
                "\"TO BE OR NOT TO BE \"",
                "\"CONTEST IS COMING \"",
                "\"HELLO WORLD \"",
                "\"I AM FINE \"",
                "\"THIS IS A TEST \"",
                "\"GOOD MORNING \"",
                "\"WELCOME TO THE PARTY \"",
                "\"LET'S GO \"",
                "\"THANK YOU \"",
                "\"I LOVE CODING \"",
                "\"HAPPY BIRTHDAY \"",
                "\"HAVE A NICE DAY \"",
                "\"KEEP SMILING \"",
                "\"ENJOY YOUR DAY \"",
                "\"STAY POSITIVE \"",
                "\"NEVER GIVE UP \"",
                "\"DREAM BIG \"",
                "\"BE YOURSELF \"",
                "\"BELIEVE IN YOURSELF \""
            ],
            "outputs": [
                "[\"HAY \", \"ORO \", \"WEU \"]",
                "[\"TBONTB \", \"OEROOE \", \"   T \"]",
                "[\"CIC \", \"OSO \", \"N M \", \"T I \", \"E N \", \"S G \", \"T \"]",
                "[\"HW \", \"EO \", \"LR \", \"LL \", \"OD \"]",
                "[\"IA \", \"MF \", \"EN \"]",
                "[\"TI \", \"HS \", \"IE \", \"SA \", \"ST \"]",
                "[\"GM \", \"OO \", \"OD \", \"RN \", \"IN \", \"NG \"]",
                "[\"WTTP \", \"OEO \", \"LHR \", \"CME \", \"OIN \", \"RNY \", \"G \"]",
                "[\"L \", \"E \", \"T'S \", \"  \", \"G \", \"O \"]",
                "[\"TY \", \"H \", \"NA \", \"KU \", \"OY \"]",
                "[\"ILC \", \"OO \", \"VD \", \"EN \", \"IG \", \"N \"]",
                "[\"HB \", \"AE \", \"VP \", \"PI \", \"YR \", \"TD \", \"AY \"]",
                "[\"HAN \", \"VI \", \"CE \", \"EA \", \"YD \", \"A \"]",
                "[\"KS \", \"EE \", \"PM \", \"LI \", \"NI \", \"NG \"]",
                "[\"EY \", \"OY \", \"RU \", \"DA \", \"Y \"]",
                "[\"SP \", \"TO \", \"AI \", \"YT \", \"VI \", \"NE \"]",
                "[\"NE \", \"VE \", \"RE \", \"GI \", \"VU \", \"EP \"]",
                "[\"DB \", \"IR \", \"EA \", \"MY \", \"G \"]",
                "[\"BE \", \"YO \", \"UR \", \"SE \", \"LF \"]",
                "[\"BIY \", \"EL \", \"IE \", \"VE \", \"NI \", \"YR \", \"UO \", \"SE \", \"LF \"]"
            ]
        }
    },
    "1325": {
        "title": "Delete Leaf Nodes with Target Value",
        "description": "Given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`. If a leaf node with value `target` is deleted and its parent node becomes a leaf node with value `target`, it should also be deleted. Repeat this process until no more leaf nodes with value `target` exist.",
        "example": "Example:\n\nInput: root = [1,2,3,2,null,2,4], target = 2\nOutput: [1,null,3,null,4]\nExplanation: Leaf nodes in green with value (target = 2) are removed. After removing, new nodes become leaf nodes with value (target = 2).\n\nInput: root = [1,3,3,3,2], target = 3\nOutput: [1,3,null,null,2]\n\nInput: root = [1,2,null,2,null,2], target = 2\nOutput: [1]\nExplanation: Leaf nodes in green with value (target = 2) are removed at each step.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,2,null,2,4]",
                "[1,3,3,3,2]",
                "[1,2,null,2,null,2]",
                "[1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[1,null,3,null,4]",
                "[1,3,null,null,2]",
                "[1]",
                "[1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ]
        }
    },
    "1326": {
        "title": "Minimum Number of Taps",
        "description": "You are given a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. There are n + 1 taps located at points [0, 1, ..., n] in the garden. Each tap has a range that represents the area it can water. The range of the i-th tap is given by ranges[i], which means it can water the area [i - ranges[i], i + ranges[i]] if it was open. You need to find the minimum number of taps that should be open to water the whole garden. If the garden cannot be watered, return -1.",
        "example": "Example:\n\nInput: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]. The tap at point 1 can cover the interval [-3,5]. The tap at point 2 can cover the interval [1,3]. The tap at point 3 can cover the interval [2,4]. The tap at point 4 can cover the interval [4,4]. The tap at point 5 can cover the interval [5,5]. Opening only the second tap will water the whole garden [0,5].",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    [
                        3,
                        4,
                        1,
                        1,
                        0,
                        0
                    ]
                ],
                [
                    3,
                    [
                        0,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    7,
                    [
                        1,
                        2,
                        1,
                        0,
                        2,
                        1,
                        0,
                        1
                    ]
                ],
                [
                    10,
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    4,
                    [
                        0,
                        0,
                        0,
                        0,
                        0
                    ]
                ]
            ],
            "outputs": [
                1,
                -1,
                3,
                1,
                -1
            ]
        }
    },
    "1328": {
        "title": "Lexicographically Smallest Non-Palindrome",
        "description": "Given a palindromic string of lowercase English letters `palindrome`, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string. A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`.",
        "example": "Example:\n\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\". Of all the ways, \"aaccba\" is the lexicographically smallest.",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome",
            "lexicographically"
        ],
        "test_cases": {
            "inputs": [
                "\"abccba\"",
                "\"a\"",
                "\"abcba\"",
                "\"aaa\"",
                "\"racecar\"",
                "\"level\"",
                "\"deed\"",
                "\"noon\"",
                "\"madam\"",
                "\"stats\"",
                "\"radar\"",
                "\"rotor\"",
                "\"civic\"",
                "\"kayak\"",
                "\"refer\"",
                "\"tenet\"",
                "\"wow\"",
                "\"pop\"",
                "\"hello\"",
                "\"world\""
            ],
            "outputs": [
                "\"aaccba\"",
                "\"\"",
                "\"abccba\"",
                "\"aa\"",
                "\"racecaa\"",
                "\"levea\"",
                "\"deea\"",
                "\"nooa\"",
                "\"mada\"",
                "\"stata\"",
                "\"rada\"",
                "\"rotoa\"",
                "\"civac\"",
                "\"kayak\"",
                "\"refea\"",
                "\"tenet\"",
                "\"woa\"",
                "\"poa\"",
                "\"\"",
                "\"worla\""
            ]
        }
    },
    "1329": {
        "title": "Sort Matrix Diagonals",
        "description": "Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.",
        "example": "Example 1:\n\nInput: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n\nExample 2:\n\nInput: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]",
        "level": "Medium",
        "tags": [
            "matrix",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[3,3,1,1],[2,2,1,2],[1,1,1,2]]",
                "[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[9,8,7],[6,5,4],[3,2,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3,4],[5,6,7,8]]",
                "[[1,2,3,4,5],[6,7,8,9,10]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29]]"
            ],
            "outputs": [
                "[[1,1,1,1],[1,2,2,2],[1,2,3,3]]",
                "[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[1,2,3],[4,5,6]]",
                "[[1,2,3,4],[5,6,7,8]]",
                "[[1,2,3,4,5],[6,7,8,9,10]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]",
                "[[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]]",
                "[[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27]]",
                "[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29]]"
            ]
        }
    },
    "1330": null,
    "1331": {
        "title": "Rank Array Elements",
        "description": "Given an array of integers `arr`, replace each element with its rank. The rank represents how large the element is. The rank has the following rules:\n\n* Rank is an integer starting from 1.\n* The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n* Rank should be as small as possible.",
        "example": "Example:\n\nInput: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.",
        "level": "Easy",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[40,10,20,30]",
                "[100,100,100]",
                "[37,12,28,9,100,56,80,5,12]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0]",
                "[10,20,30,40,50,60,70,80,90,100]"
            ],
            "outputs": [
                "[4,1,2,3]",
                "[1,1,1]",
                "[5,3,4,2,8,6,7,1,3]",
                "[]",
                "[1]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]"
            ]
        }
    },
    "1332": {
        "title": "Minimum Steps to Make String Empty",
        "description": "Given a string `s` consisting only of letters 'a' and 'b', you can remove one palindromic subsequence from `s` in a single step. Return the minimum number of steps required to make the given string empty. A string is a subsequence of a given string if it is generated by deleting some characters of the given string without changing their order. Note that a subsequence does not necessarily need to be contiguous. A string is called palindrome if it reads the same backward as well as forward.",
        "example": "Example:\n\nInput: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.",
        "level": "Easy",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"ababa\"",
                "\"abb\"",
                "\"baabb\"",
                "\"a\"",
                "\"b\"",
                "\"aa\"",
                "\"bb\"",
                "\"aba\"",
                "\"bab\"",
                "\"abba\"",
                "\"baab\"",
                "\"aabbaa\"",
                "\"abababa\"",
                "\"abbaabba\"",
                "\"abababab\"",
                "\"abbaabbaabba\"",
                "\"ababababababa\"",
                "\"abbaabbaabbaabba\"",
                "\"abababababababab\"",
                "\"abbaabbaabbaabbaabba\""
            ],
            "outputs": [
                "1",
                "2",
                "2",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "2",
                "3",
                "4",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10"
            ]
        }
    },
    "1333": {
        "title": "Filter Restaurants",
        "description": "Given an array of restaurants, each represented by [id, rating, veganFriendly, price, distance], filter the restaurants based on three criteria: veganFriendly, maxPrice, and maxDistance. Return the IDs of the filtered restaurants, ordered by rating from highest to lowest. If two restaurants have the same rating, order them by ID from highest to lowest.",
        "example": "Example 1:\n\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5]\nExplanation: The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1]\nAfter filtering restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]",
                "1, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]",
                "0, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]",
                "0, 30, 3",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "1, 40, 5",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "0, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "1, 30, 3",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "0, 40, 5",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "1, 50, 10",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7]]",
                "0, 30, 3",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "1, 50, 5",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "0, 60, 8",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "1, 30, 4",
                "[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1],[6,9,1,20,2],[7,7,0,25,6],[8,6,1,35,8],[9,5,0,45,9],[10,3,1,50,7],[11,2,0,55,4],[12,7,1,60,9],[13,6,0,65,2],[14,5,1,70,7],[15,4,0,75,3]]",
                "0, 40, 6"
            ],
            "outputs": [
                "[3,1,5]",
                "[4,3,2,1,5]",
                "[4,5]",
                "[6,3,2,1,5]",
                "[6,4,3,2,1,5]",
                "[6,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]",
                "[6,4,3,2,1,5,7,8,9,10,11,12,13,14,15]"
            ]
        }
    },
    "1334": {
        "title": "City Reachability",
        "description": "Given a graph representing cities and their connections, find the city with the smallest number of reachable cities within a given distance threshold. If there are multiple cities with the same number of reachable cities, return the city with the greatest number.",
        "example": "For example, consider a graph with 4 cities and the following connections: \n\nedges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]] \ndistanceThreshold = 4 \n\nThe neighboring cities at a distanceThreshold = 4 for each city are: \nCity 0 -> [City 1, City 2] \nCity 1 -> [City 0, City 2, City 3] \nCity 2 -> [City 0, City 1, City 3] \nCity 3 -> [City 1, City 2] \n\nIn this case, cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number. \n\nTherefore, the output would be 3.",
        "level": "Medium",
        "tags": [
            "graph",
            "shortest path",
            "connectivity"
        ],
        "test_cases": {
            "inputs": [
                {
                    "n": 4,
                    "edges": [
                        [
                            0,
                            1,
                            3
                        ],
                        [
                            1,
                            2,
                            1
                        ],
                        [
                            1,
                            3,
                            4
                        ],
                        [
                            2,
                            3,
                            1
                        ]
                    ],
                    "distanceThreshold": 4
                },
                {
                    "n": 5,
                    "edges": [
                        [
                            0,
                            1,
                            2
                        ],
                        [
                            0,
                            4,
                            8
                        ],
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            1,
                            4,
                            2
                        ],
                        [
                            2,
                            3,
                            1
                        ],
                        [
                            3,
                            4,
                            1
                        ]
                    ],
                    "distanceThreshold": 2
                },
                {
                    "n": 3,
                    "edges": [
                        [
                            0,
                            1,
                            5
                        ],
                        [
                            1,
                            2,
                            3
                        ]
                    ],
                    "distanceThreshold": 6
                },
                {
                    "n": 6,
                    "edges": [
                        [
                            0,
                            1,
                            2
                        ],
                        [
                            0,
                            2,
                            4
                        ],
                        [
                            1,
                            3,
                            1
                        ],
                        [
                            1,
                            4,
                            2
                        ],
                        [
                            2,
                            3,
                            3
                        ],
                        [
                            2,
                            5,
                            2
                        ],
                        [
                            3,
                            4,
                            1
                        ],
                        [
                            4,
                            5,
                            2
                        ]
                    ],
                    "distanceThreshold": 5
                },
                {
                    "n": 2,
                    "edges": [
                        [
                            0,
                            1,
                            1
                        ]
                    ],
                    "distanceThreshold": 1
                }
            ],
            "outputs": [
                3,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1335": null,
    "1337": null,
    "1338": null,
    "1339": {
        "title": "Maximum Product of Split Binary Tree",
        "description": "Given the `root` of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized. Return the maximum product of the sums of the two subtrees modulo 109 + 7.",
        "example": "Example:\n\nInput: root = [1,2,3,4,5,6]\nOutput: 110\nExplanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)",
        "level": "Medium",
        "tags": [
            "binary tree",
            "recursion",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5,6]",
                "[1,null,2,3,4,null,null,5,6]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,null,null,4,5]",
                "[1,2,3,4,null,null,5,6,null,null,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                110,
                90,
                3024,
                18,
                720,
                486194640
            ]
        }
    },
    "1340": {
        "title": "Maximum Number of Indices",
        "description": "Given an array of integers `arr` and an integer `d`, you can jump from index `i` to index `i + x` or `i - x` where `0 < x <= d`. However, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j`. Return the maximum number of indices you can visit.",
        "example": "Example:\n\nInput: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation: You can start at index 10 and jump to indices 8, 6, and 7.\n\nInput: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You can start at any index, but you can only jump to the same index.\n\nInput: arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0 and visit all indices.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[6,4,14,6,8,13,9,7,10,6,12]",
                "[3,3,3,3,3]",
                "[7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[5,4,3,2,1,2,3,4,5]",
                "[1,2,3,4,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,5,4,3,2,1]",
                "[1,2,3,4,5,4,3,2,1,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,5,4,3,2,1]",
                "[1,2,3,4,5,6,7,8,9,10,5,4,3,2,1,5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]"
            ],
            "outputs": [
                "4",
                "1",
                "7",
                "10",
                "10",
                "1",
                "5",
                "5",
                "20",
                "20",
                "20",
                "20",
                "20",
                "5",
                "5",
                "5",
                "5",
                "5",
                "5",
                "5"
            ]
        }
    },
    "1342": {
        "title": "Steps to Reduce Number to Zero",
        "description": "Given an integer `num`, return the number of steps required to reduce it to zero. In each step, if the current number is even, divide it by 2. If the current number is odd, subtract 1 from it.",
        "example": "Example:\n\nInput: num = 14\nOutput: 6\nExplanation: \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3. \nStep 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.",
        "level": "Easy",
        "tags": [
            "math",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                14,
                8,
                123,
                0,
                1,
                2,
                100,
                1000,
                999999,
                106
            ],
            "outputs": [
                6,
                4,
                12,
                0,
                1,
                1,
                7,
                13,
                19,
                19
            ]
        }
    },
    "1343": {
        "title": "Sub-array Average",
        "description": "Given an array of integers `arr` and two integers `k` and `threshold`, return the number of sub-arrays of size `k` and average greater than or equal to `threshold`.",
        "example": "Example:\n\nInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).",
        "level": "Medium",
        "tags": [
            "array",
            "sub-array",
            "average"
        ],
        "test_cases": {
            "inputs": [
                {
                    "arr": [
                        2,
                        2,
                        2,
                        2,
                        5,
                        5,
                        5,
                        8
                    ],
                    "k": 3,
                    "threshold": 4
                },
                {
                    "arr": [
                        11,
                        13,
                        17,
                        23,
                        29,
                        31,
                        7,
                        5,
                        2,
                        3
                    ],
                    "k": 3,
                    "threshold": 5
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 4,
                    "threshold": 7
                },
                {
                    "arr": [
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "k": 2,
                    "threshold": 6
                },
                {
                    "arr": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "k": 5,
                    "threshold": 50
                },
                {
                    "arr": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 10,
                    "threshold": 1
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 1,
                    "threshold": 15
                },
                {
                    "arr": [
                        3,
                        6,
                        9,
                        12,
                        15,
                        18,
                        21,
                        24,
                        27,
                        30
                    ],
                    "k": 10,
                    "threshold": 20
                },
                {
                    "arr": [
                        1,
                        3,
                        5,
                        7,
                        9,
                        11,
                        13,
                        15,
                        17,
                        19
                    ],
                    "k": 2,
                    "threshold": 10
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 5,
                    "threshold": 25
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 3,
                    "threshold": 15
                },
                {
                    "arr": [
                        5,
                        10,
                        15,
                        20,
                        25,
                        30,
                        35,
                        40,
                        45,
                        50
                    ],
                    "k": 4,
                    "threshold": 35
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 5,
                    "threshold": 5
                },
                {
                    "arr": [
                        10,
                        20,
                        30,
                        40,
                        50,
                        60,
                        70,
                        80,
                        90,
                        100
                    ],
                    "k": 2,
                    "threshold": 75
                },
                {
                    "arr": [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "k": 1,
                    "threshold": 2
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 10,
                    "threshold": 10
                },
                {
                    "arr": [
                        3,
                        6,
                        9,
                        12,
                        15,
                        18,
                        21,
                        24,
                        27,
                        30
                    ],
                    "k": 3,
                    "threshold": 25
                },
                {
                    "arr": [
                        1,
                        3,
                        5,
                        7,
                        9,
                        11,
                        13,
                        15,
                        17,
                        19
                    ],
                    "k": 4,
                    "threshold": 12
                },
                {
                    "arr": [
                        2,
                        4,
                        6,
                        8,
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    "k": 5,
                    "threshold": 30
                },
                {
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "k": 2,
                    "threshold": 7
                },
                {
                    "arr": [
                        5,
                        10,
                        15,
                        20,
                        25,
                        30,
                        35,
                        40,
                        45,
                        50
                    ],
                    "k": 3,
                    "threshold": 20
                }
            ],
            "outputs": [
                3,
                6,
                7,
                9,
                6,
                10,
                0,
                0,
                8,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1344": {
        "title": "Smaller Angle Between Hour and Minute Hand",
        "description": "Given two numbers, `hour` and `minutes`, return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.",
        "example": "Example:\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExplanation: The hour hand is at 12 and the minute hand is at 6. The angle between them is 165 degrees.",
        "level": "Easy",
        "tags": [
            "math",
            "geometry"
        ],
        "test_cases": {
            "inputs": [
                [
                    12,
                    30
                ],
                [
                    3,
                    30
                ],
                [
                    3,
                    15
                ],
                [
                    1,
                    0
                ],
                [
                    6,
                    0
                ],
                [
                    9,
                    45
                ],
                [
                    12,
                    0
                ],
                [
                    6,
                    30
                ],
                [
                    9,
                    0
                ],
                [
                    12,
                    45
                ],
                [
                    1,
                    15
                ],
                [
                    6,
                    15
                ],
                [
                    9,
                    30
                ],
                [
                    12,
                    15
                ],
                [
                    3,
                    0
                ],
                [
                    6,
                    45
                ],
                [
                    9,
                    15
                ],
                [
                    1,
                    30
                ],
                [
                    3,
                    45
                ],
                [
                    1,
                    45
                ]
            ],
            "outputs": [
                165,
                75,
                7.5,
                0,
                180,
                112.5,
                0,
                15,
                90,
                82.5,
                22.5,
                97.5,
                105,
                157.5,
                82.5,
                90,
                52.5,
                97.5,
                52.5,
                7.5
            ]
        }
    },
    "1345": {
        "title": "Minimum Number of Steps to Reach Last Index",
        "description": "Given an array of integers `arr`, you are initially positioned at the first index of the array. In one step, you can jump from index `i` to index: \n\n- `i + 1` where: `i + 1 < arr.length`. \n- `i - 1` where: `i - 1 >= 0`. \n- `j` where: `arr[i] == arr[j]` and `i != j`. \n\nReturn the minimum number of steps to reach the last index of the array. Note that you cannot jump outside of the array at any time.",
        "example": "Example:\n\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    100,
                    -23,
                    -23,
                    404,
                    100,
                    23,
                    23,
                    23,
                    3,
                    404
                ],
                [
                    7
                ],
                [
                    7,
                    6,
                    9,
                    6,
                    9,
                    6,
                    9,
                    7
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "outputs": [
                3,
                0,
                1,
                4,
                4,
                4,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9,
                9
            ]
        }
    },
    "1346": {
        "title": "Double the Value",
        "description": "Given an array `arr` of integers, check if there exist two indices `i` and `j` such that `i != j`, `0 <= i, j < arr.length`, and `arr[i] == 2 * arr[j]`.",
        "example": "Example:\n\nInput: arr = [10,2,5,3]\nOutput: true\nExplanation: For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]\n\nInput: arr = [3,1,7,11]\nOutput: false\nExplanation: There is no i and j that satisfy the conditions.",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    10,
                    2,
                    5,
                    3
                ],
                [
                    3,
                    1,
                    7,
                    11
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    4,
                    6,
                    8
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    4,
                    8
                ],
                [
                    5,
                    10,
                    20,
                    40
                ],
                [
                    100,
                    200,
                    400,
                    800
                ],
                [
                    1,
                    3,
                    5,
                    7
                ],
                [
                    2,
                    6,
                    10,
                    14
                ],
                [
                    0,
                    1,
                    2,
                    3
                ],
                [
                    0,
                    0,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                false,
                false,
                false,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "1347": {
        "title": "Minimum Steps to Make Anagram",
        "description": "Given two strings of the same length `s` and `t`, you can choose any character of `t` and replace it with another character in one step. Return the minimum number of steps required to make `t` an anagram of `s`. An anagram of a string is a string that contains the same characters with a different (or the same) ordering.",
        "example": "Example:\n\nInput: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with 'b', t = \"bba\" which is an anagram of s.",
        "level": "Easy",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    "bab",
                    "aba"
                ],
                [
                    "leetcode",
                    "practice"
                ],
                [
                    "anagram",
                    "mangaar"
                ],
                [
                    "abc",
                    "cba"
                ],
                [
                    "hello",
                    "olleh"
                ],
                [
                    "abcd",
                    "dcba"
                ],
                [
                    "xyz",
                    "zyx"
                ],
                [
                    "apple",
                    "papel"
                ],
                [
                    "banana",
                    "ananab"
                ],
                [
                    "programming",
                    "gnimmargorp"
                ],
                [
                    "racecar",
                    "racecar"
                ],
                [
                    "moon",
                    "noon"
                ],
                [
                    "good",
                    "dog"
                ],
                [
                    "python",
                    "typhon"
                ],
                [
                    "algorithm",
                    "logarithm"
                ],
                [
                    "java",
                    "java"
                ],
                [
                    "computer",
                    "recotmup"
                ],
                [
                    "happy",
                    "yppah"
                ],
                [
                    "world",
                    "dlrow"
                ],
                [
                    "test",
                    "tset"
                ]
            ],
            "outputs": [
                1,
                5,
                0,
                0,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                1,
                1,
                3,
                1,
                0,
                3,
                0,
                0,
                2
            ]
        }
    },
    "1348": {
        "title": "Tweet Activity Monitoring",
        "description": "A social media company wants to monitor tweet activity by analyzing the number of tweets that occur in select periods of time. The periods can be divided into smaller time chunks based on a specified frequency (every minute, hour, or day). Implement an API to help the company with their analysis.",
        "example": "Example:\n\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0); // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60); // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10); // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // returns [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // returns [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120); // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210); // returns [4]; chunk [0,210] had 4 tweets",
        "level": "Medium",
        "tags": [
            "API",
            "time",
            "frequency",
            "analysis"
        ],
        "test_cases": {
            "inputs": [
                [
                    "TweetCounts",
                    "recordTweet",
                    "recordTweet",
                    "recordTweet",
                    "getTweetCountsPerFrequency",
                    "getTweetCountsPerFrequency",
                    "recordTweet",
                    "getTweetCountsPerFrequency"
                ],
                [
                    [
                        "tweet3",
                        0
                    ],
                    [
                        "tweet3",
                        60
                    ],
                    [
                        "tweet3",
                        10
                    ],
                    [
                        "minute",
                        "tweet3",
                        0,
                        59
                    ],
                    [
                        "minute",
                        "tweet3",
                        0,
                        60
                    ],
                    [
                        "tweet3",
                        120
                    ],
                    [
                        "hour",
                        "tweet3",
                        0,
                        210
                    ]
                ]
            ],
            "outputs": [
                [
                    null,
                    null,
                    null,
                    null,
                    [
                        2
                    ],
                    [
                        2,
                        1
                    ],
                    null,
                    [
                        4
                    ]
                ]
            ]
        }
    },
    "1349": {
        "title": "Maximum Number of Students in a Classroom",
        "description": "Given a `m * n` matrix `seats` that represents the distribution of seats in a classroom. If a seat is broken, it is denoted by a `'#'` character, otherwise it is denoted by a `'.'` character. Students can see the answers of those sitting next to the left, right, upper left, and upper right, but they cannot see the answers of the student sitting directly in front or behind them. Return the maximum number of students that can take the exam together without any possibility of cheating. Students must be placed in seats in good condition.",
        "example": "Example:\n\nInput: seats = [[\"#\", \".\", \"#\", \"#\", \".\", \"#\"],\n                [\".\", \"#\", \"#\", \"#\", \"#\", \".\"],\n                [\"#\", \".\", \"#\", \"#\", \".\", \"#\"]]\nOutput: 4\nExplanation: The teacher can place 4 students in available seats so they don't cheat on the exam.",
        "level": "Medium",
        "tags": [
            "matrix",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[[\"#\", \".\", \"#\", \"#\", \".\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \".\"],\n [\"#\", \".\", \"#\", \"#\", \".\", \"#\"]] ",
                "[[\".\", \"#\"],\n [\"#\", \"#\"],\n [\"#\", \".\"],\n [\"#\", \"#\"],\n [\".\", \"#\"]] ",
                "[[\"#\", \".\", \"#\", \".\", \"#\"],\n [\".\", \"#\", \".\", \"#\", \"#\"],\n [\"#\", \".\", \"#\", \".\", \"#\"],\n [\".\", \"#\", \".\", \"#\", \"#\"],\n [\"#\", \".\", \"#\", \".\", \"#\"]] ",
                "[[\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"]] ",
                "[[\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\n [\".\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"]] "
            ],
            "outputs": [
                "4",
                "3",
                "6",
                "8",
                "8"
            ]
        }
    },
    "1351": {
        "title": "Count Negative Numbers in a Sorted Matrix",
        "description": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, write a function to count the number of negative numbers in the grid.",
        "example": "Example 1:\n\nInput: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negative numbers in the matrix.\n\nExample 2:\n\nInput: grid = [[3,2],[1,0]]\nOutput: 0\nExplanation: There are no negative numbers in the matrix.",
        "level": "Easy",
        "tags": [
            "array",
            "matrix",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        4,
                        3,
                        2,
                        -1
                    ],
                    [
                        3,
                        2,
                        1,
                        -1
                    ],
                    [
                        1,
                        1,
                        -1,
                        -2
                    ],
                    [
                        -1,
                        -1,
                        -2,
                        -3
                    ]
                ],
                [
                    [
                        3,
                        2
                    ],
                    [
                        1,
                        0
                    ]
                ],
                [
                    [
                        -1
                    ]
                ],
                [
                    [
                        0
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        -1,
                        -2,
                        -3
                    ],
                    [
                        -4,
                        -5,
                        -6
                    ],
                    [
                        -7,
                        -8,
                        -9
                    ]
                ],
                [
                    [
                        -1,
                        0,
                        1
                    ],
                    [
                        -2,
                        0,
                        2
                    ],
                    [
                        -3,
                        0,
                        3
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        0,
                        1
                    ],
                    [
                        -1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        0,
                        -1
                    ],
                    [
                        1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        0
                    ],
                    [
                        -1,
                        0,
                        0
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ],
                [
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ],
                    [
                        -1,
                        -1,
                        -1,
                        -1,
                        -1
                    ]
                ]
            ],
            "outputs": [
                8,
                0,
                1,
                0,
                9,
                0,
                9,
                3,
                6,
                3,
                3,
                0,
                9,
                0,
                16,
                16,
                25,
                0,
                25,
                25
            ]
        }
    },
    "1352": {
        "title": "Product of Last K Integers",
        "description": "Design an algorithm that accepts a stream of integers and retrieves the product of the last `k` integers of the stream. Implement the `ProductOfNumbers` class with the following methods: \n\n- `ProductOfNumbers()`: Initializes the object with an empty stream. \n- `void add(int num)`: Appends the integer `num` to the stream. \n- `int getProduct(int k)`: Returns the product of the last `k` numbers in the current list. You can assume that always the current list has at least `k` numbers. The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.",
        "example": "ProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32",
        "level": "Medium",
        "tags": [
            "array",
            "stream",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    3
                ],
                [
                    0
                ],
                [
                    2
                ],
                [
                    5
                ],
                [
                    4
                ],
                [
                    2
                ],
                [
                    3
                ],
                [
                    4
                ],
                [
                    8
                ],
                [
                    2
                ]
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "20",
                "40",
                "0",
                "null",
                "32"
            ]
        }
    },
    "1353": {
        "title": "Maximum Number of Events",
        "description": "You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`. You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`. Return the maximum number of events you can attend.",
        "example": "Example:\n\nInput: events = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: You can attend all the three events. One way to attend them all is as shown. Attend the first event on day 1. Attend the second event on day 2. Attend the third event on day 3.",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                "[[1,2],[2,3],[3,4]]",
                "[[1,2],[2,3],[3,4],[1,2]]",
                "[[1,1],[2,2],[3,3],[4,4],[5,5]]",
                "[[1,2],[1,2],[1,2],[1,2]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21]]",
                "[[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91],[11,90],[12,89],[13,88],[14,87],[15,86],[16,85],[17,84],[18,83],[19,82],[20,81]]",
                "[[1,1]]",
                "[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]]"
            ],
            "outputs": [
                "3",
                "4",
                "5",
                "1",
                "20",
                "20",
                "1",
                "100"
            ]
        }
    },
    "1354": {
        "title": "Construct Target Array With Multiple Sums",
        "description": "You are given an array `target` of n integers. From a starting array `arr` consisting of `n` 1's, you may perform the following procedure:\n\n- Let `x` be the sum of all elements currently in your array.\n- Choose index `i`, such that `0 <= i < n`, and set the value of `arr` at index `i` to `x`.\n- You may repeat this procedure as many times as needed.\n\nReturn `true` if it is possible to construct the `target` array from `arr`, otherwise, return `false`.",
        "example": "Example:\n\nInput: target = [9,3,5]\nOutput: true\nExplanation: Start with arr = [1, 1, 1]\n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[9,3,5]",
                "[1,1,1,2]",
                "[8,5]",
                "[1,1,1,1]",
                "[10,20,30,40,50]",
                "[2,4,6,8,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,3,5,7,9,11,13,15,17,19]",
                "[1,2,4,8,16,32,64,128,256,512]",
                "[1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765]"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true"
            ]
        }
    },
    "1356": {
        "title": "Sorting Integers by Binary Representation",
        "description": "Given an integer array `arr`, sort the integers in the array in ascending order by the number of `1`'s in their binary representation. In case of two or more integers having the same number of `1`'s, sort them in ascending order. Return the sorted array.",
        "example": "Example 1:\n\nInput: arr = [0,1,2,3,4,5,6,7,8]\nOutput: [0,1,2,4,8,3,5,6,7]\nExplanation: [0] is the only integer with 0 bits. [1,2,4,8] all have 1 bit. [3,5,6] have 2 bits. [7] has 3 bits. The sorted array by bits is [0,1,2,4,8,3,5,6,7]\n\nExample 2:\n\nInput: arr = [1024,512,256,128,64,32,16,8,4,2,1]\nOutput: [1,2,4,8,16,32,64,128,256,512,1024]\nExplanation: All integers have 1 bit in the binary representation, so they are sorted in ascending order.",
        "level": "Easy",
        "tags": [
            "Array",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    1024,
                    512,
                    256,
                    128,
                    64,
                    32,
                    16,
                    8,
                    4,
                    2,
                    1
                ],
                [
                    9,
                    3,
                    5,
                    6,
                    7,
                    2,
                    1,
                    0
                ],
                [
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    0
                ],
                [
                    16,
                    8,
                    4,
                    2,
                    1,
                    32,
                    64,
                    128,
                    256,
                    512,
                    1024
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ],
            "outputs": [
                [
                    0,
                    1,
                    2,
                    4,
                    8,
                    3,
                    5,
                    6,
                    7
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512,
                    1024
                ],
                [
                    0,
                    1,
                    2,
                    4,
                    8,
                    3,
                    5,
                    6,
                    7,
                    9
                ],
                [
                    0,
                    1,
                    2,
                    4,
                    8,
                    3,
                    5,
                    6,
                    7,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    2,
                    4,
                    8,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512,
                    1024
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4
                ]
            ]
        }
    },
    "1357": null,
    "1358": null,
    "1359": {
        "title": "Valid Pickup and Delivery Sequences",
        "description": "Given `n` orders, each order consists of pickup and delivery services. Count all valid pickup/delivery possible sequences such that delivery(i) is always after pickup(i). Return the count modulo 10^9 + 7.",
        "example": "Example 1:\n\nInput: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always comes after Pickup 1.\n\nExample 2:\n\nInput: n = 2\nOutput: 6\nExplanation: All possible orders: (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1), and (P2,D2,P1,D1). This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after Delivery 2.\n\nExample 3:\n\nInput: n = 3\nOutput: 90",
        "level": "Medium",
        "tags": [
            "permutations",
            "combinatorics",
            "modulo"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                20,
                50,
                100,
                200,
                500,
                1000,
                10000,
                100000,
                1000000,
                10000000,
                100000000,
                1000000000,
                10000000000,
                100000000000
            ],
            "outputs": [
                1,
                6,
                90,
                2520,
                113400,
                986410223,
                457992974,
                772009097,
                437918130,
                666992288,
                703097347,
                457992974,
                66520193,
                457992974,
                66520193,
                457992974,
                66520193,
                457992974,
                66520193,
                457992974
            ]
        }
    },
    "1360": {
        "title": "Count the Number of Days Between Two Dates",
        "description": "Write a program that takes two dates as input and counts the number of days between them. The dates are given as strings in the format `YYYY-MM-DD`. The program should return the number of days as an integer.",
        "example": "Example:\n\nInput: date1 = \"2019-06-29\", date2 = \"2019-06-30\"\nOutput: 1\n\nExplanation: The number of days between June 29, 2019, and June 30, 2019, is 1.\n\nInput: date1 = \"2020-01-15\", date2 = \"2019-12-31\"\nOutput: 15\n\nExplanation: The number of days between December 31, 2019, and January 15, 2020, is 15.",
        "level": "Easy",
        "tags": [
            "date",
            "string manipulation"
        ],
        "test_cases": {
            "inputs": [
                "\"2019-06-29\", \"2019-06-30\"",
                "\"2020-01-15\", \"2019-12-31\"",
                "\"1971-01-01\", \"1971-01-01\"",
                "\"2100-12-31\", \"2100-12-31\"",
                "\"2000-02-28\", \"2000-03-01\"",
                "\"2000-02-28\", \"2001-02-28\"",
                "\"2000-02-28\", \"2001-03-01\"",
                "\"2000-02-28\", \"2004-02-28\"",
                "\"2000-02-28\", \"2004-02-29\"",
                "\"2000-02-28\", \"2004-03-01\"",
                "\"2000-02-29\", \"2004-02-28\"",
                "\"2000-02-29\", \"2004-02-29\"",
                "\"2000-02-29\", \"2004-03-01\"",
                "\"2000-03-01\", \"2004-02-28\"",
                "\"2000-03-01\", \"2004-02-29\"",
                "\"2000-03-01\", \"2004-03-01\"",
                "\"2004-02-28\", \"2004-02-28\"",
                "\"2004-02-28\", \"2004-02-29\"",
                "\"2004-02-28\", \"2004-03-01\"",
                "\"2004-02-29\", \"2004-02-28\""
            ],
            "outputs": [
                "1",
                "15",
                "0",
                "0",
                "2",
                "366",
                "367",
                "1461",
                "1462",
                "1463",
                "1461",
                "1462",
                "1463",
                "1461",
                "1462",
                "1463",
                "0",
                "1",
                "2",
                "1"
            ]
        }
    },
    "1361": {
        "title": "Valid Binary Tree",
        "description": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`. Write a function that returns `true` if and only if **all** the given nodes form **exactly one** valid binary tree.\n\nIf node `i` has no left child, then `leftChild[i]` will equal `-1`. Similarly, if node `i` has no right child, then `rightChild[i]` will equal `-1`.\n\nNote that the nodes have no values and that we only use the node numbers in this problem.",
        "example": "Example:\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true\n\nExplanation: The given nodes form a valid binary tree.\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false\n\nExplanation: The given nodes do not form a valid binary tree as node 3 has both left and right children.\n\nInput: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false\n\nExplanation: The given nodes do not form a valid binary tree as node 0 has a left child but node 1 does not have a right child.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Graph",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "n": 4,
                    "leftChild": [
                        1,
                        -1,
                        3,
                        -1
                    ],
                    "rightChild": [
                        2,
                        -1,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 4,
                    "leftChild": [
                        1,
                        -1,
                        3,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 2,
                    "leftChild": [
                        1,
                        0
                    ],
                    "rightChild": [
                        -1,
                        -1
                    ]
                },
                {
                    "n": 1,
                    "leftChild": [
                        -1
                    ],
                    "rightChild": [
                        -1
                    ]
                },
                {
                    "n": 3,
                    "leftChild": [
                        1,
                        -1,
                        -1
                    ],
                    "rightChild": [
                        2,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 3,
                    "leftChild": [
                        1,
                        -1,
                        -1
                    ],
                    "rightChild": [
                        -1,
                        2,
                        -1
                    ]
                },
                {
                    "n": 3,
                    "leftChild": [
                        -1,
                        0,
                        -1
                    ],
                    "rightChild": [
                        -1,
                        -1,
                        2
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        -1,
                        1
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        1,
                        -1
                    ]
                },
                {
                    "n": 5,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        1,
                        2
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        -1,
                        -1
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        -1,
                        1
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        -1
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        2
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        3
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        4
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        5
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        6
                    ]
                },
                {
                    "n": 6,
                    "leftChild": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        -1
                    ],
                    "rightChild": [
                        2,
                        3,
                        4,
                        5,
                        1,
                        0
                    ]
                }
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1362": {
        "title": "Closest Divisors",
        "description": "Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`. Return the two integers in any order.",
        "example": "Example 1:\n\nInput: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.",
        "level": "Medium",
        "tags": [
            "math",
            "number theory"
        ],
        "test_cases": {
            "inputs": [
                8,
                123,
                999,
                1,
                2,
                10,
                100,
                1000,
                123456,
                987654321,
                999999999
            ],
            "outputs": [
                [
                    3,
                    3
                ],
                [
                    5,
                    25
                ],
                [
                    40,
                    25
                ],
                [
                    1,
                    2
                ],
                [
                    1,
                    2
                ],
                [
                    2,
                    5
                ],
                [
                    10,
                    10
                ],
                [
                    25,
                    40
                ],
                [
                    432,
                    285
                ],
                [
                    987654321,
                    1
                ],
                [
                    999999999,
                    1
                ]
            ]
        }
    },
    "1363": {
        "title": "Largest Multiple of Three",
        "description": "Given an array of digits `digits`, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer, return an empty string. Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.",
        "example": "Example:\n\nInput: digits = [8,1,9]\nOutput: \"981\"\nExplanation: The largest multiple of three that can be formed by concatenating some of the given digits is 981.",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    8,
                    1,
                    9
                ],
                [
                    8,
                    6,
                    7,
                    1,
                    0
                ],
                [
                    1
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    0
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    6,
                    6,
                    6
                ]
            ],
            "outputs": [
                "981",
                "8760",
                "",
                "0",
                "111",
                "222",
                "987654321",
                "987654321",
                "9876543210",
                "9876543210",
                "333",
                "444",
                "444",
                "444",
                "555",
                "555",
                "555",
                "666",
                "666",
                "666"
            ]
        }
    },
    "1365": {
        "title": "Count Smaller Numbers",
        "description": "Given an array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` **and** `nums[j] < nums[i]`. Return the answer in an array.",
        "example": "Example 1:\n\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). For nums[1]=1 does not exist any smaller number than it. For nums[2]=2 there exist one smaller number than it (1). For nums[3]=2 there exist one smaller number than it (1). For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\nExample 2:\n\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n\nExample 3:\n\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]",
        "level": "Easy",
        "tags": [
            "array",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                "[8,1,2,2,3]",
                "[6,5,4,8]",
                "[7,7,7,7]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[1,3,5,7,9,2,4,6,8,10]",
                "[10,8,6,4,2,9,7,5,3,1]",
                "[1,1,1,2,2,2,3,3,3]",
                "[3,3,3,2,2,2,1,1,1]",
                "[1,2,3,4,5,5,4,3,2,1]",
                "[1,1,1,1,1,2,2,2,2,2]",
                "[2,2,2,2,2,1,1,1,1,1]",
                "[1,2,3,4,5,1,2,3,4,5]",
                "[5,4,3,2,1,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[4,0,1,1,3]",
                "[2,1,0,3]",
                "[0,0,0,0]",
                "[0,0,0,0,0]",
                "[4,3,2,1,0]",
                "[0,0,0,0,0]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[9,8,7,6,5,4,3,2,1,0]",
                "[0,1,2,3,4,0,1,2,3,4]",
                "[4,3,2,1,0,4,3,2,1,0]",
                "[3,3,3,6,6,6,9,9,9]",
                "[9,9,9,6,6,6,3,3,3]",
                "[4,3,2,1,0,0,1,2,3,4]",
                "[0,0,0,0,0,5,5,5,5,5]",
                "[5,5,5,5,5,0,0,0,0,0]",
                "[4,3,2,1,0,4,3,2,1,0]",
                "[0,1,2,3,4,0,1,2,3,4]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
                "[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]"
            ]
        }
    },
    "1366": {
        "title": "Team Ranking",
        "description": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition. The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. You are given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above. Return a string of all teams sorted by the ranking system.",
        "example": "Example:\n\nInput: votes = [\"ABC \", \"ACB \", \"ABC \", \"ACB \", \"ACB \"]\nOutput: \"ACB \"\nExplanation: Team A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team. Team B was ranked second by 2 voters and ranked third by 3 voters. Team C was ranked second by 3 voters and ranked third by 2 voters. As most of the voters ranked C second, team C is the second team, and team B is the third.",
        "level": "Medium",
        "tags": [
            "sorting",
            "tie-breaking",
            "ranking"
        ],
        "test_cases": {
            "inputs": [
                [
                    "ABC ",
                    "ACB ",
                    "ABC ",
                    "ACB ",
                    "ACB "
                ],
                [
                    "WXYZ ",
                    "XYZW "
                ],
                [
                    "ZMNAGUEDSJYLBOPHRQICWFXTVK "
                ],
                [
                    "ABC ",
                    "ACB ",
                    "BAC ",
                    "BCA ",
                    "CAB ",
                    "CBA "
                ],
                [
                    "ABC ",
                    "ACB ",
                    "BAC ",
                    "BCA ",
                    "CAB ",
                    "CBA ",
                    "ABC ",
                    "ACB ",
                    "BAC ",
                    "BCA ",
                    "CAB ",
                    "CBA "
                ]
            ],
            "outputs": [
                "ACB ",
                "XWYZ ",
                "ZMNAGUEDSJYLBOPHRQICWFXTVK ",
                "ABC ",
                "ACB "
            ]
        }
    },
    "1367": {
        "title": "Downward Path in Binary Tree",
        "description": "Given a binary tree `root` and a linked list with `head` as the first node, determine if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree.",
        "example": "Example 1:\n\nInput: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\nExplanation: Nodes in blue form a subpath in the binary tree.\n\nExample 2:\n\nInput: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\n\nExample 3:\n\nInput: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from head.",
        "level": "Medium",
        "tags": [
            "binary tree",
            "linked list",
            "path"
        ],
        "test_cases": {
            "inputs": [
                "[4,2,8]",
                "[1,4,2,6]",
                "[1,4,2,6,8]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1]",
                "[1,2]",
                "[1,2,3]",
                "[1,2,3,4]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "true",
                "false"
            ]
        }
    },
    "1368": null,
    "1370": {
        "title": "String Reordering Algorithm",
        "description": "Given a string `s`, reorder the string using the following algorithm:\n\n1. Pick the **smallest** character from `s` and **append** it to the result.\n2. Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.\n3. Repeat step 2 until you cannot pick more characters.\n4. Pick the **largest** character from `s` and **append** it to the result.\n5. Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it.\n6. Repeat step 5 until you cannot pick more characters.\n7. Repeat the steps from 1 to 6 until you pick all characters from `s`.\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\n\nReturn the result string after sorting `s` with this algorithm.",
        "example": "Example:\n\nInput: s = \"aaaabbbbcccc \"\nOutput: \"abccbaabccba \"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc \". After steps 4, 5 and 6 of the first iteration, result = \"abccba \". First iteration is done. Now s = \"aabbcc \" and we go back to step 1. After steps 1, 2 and 3 of the second iteration, result = \"abccbaabc \". After steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba \".\n\nInput: s = \"rat \"\nOutput: \"art \"\nExplanation: The word \"rat \" becomes \"art \" after re-ordering it with the mentioned algorithm.",
        "level": "Medium",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "\"aaaabbbbcccc \"",
                "\"rat \"",
                "\"abcde \"",
                "\"zyxwvutsr \"",
                "\"hello world \"",
                "\"programming \"",
                "\"algorithm \"",
                "\"leetcode \"",
                "\"python \"",
                "\"java \"",
                "\"coding \"",
                "\"question \"",
                "\"example \"",
                "\"test \"",
                "\"case \"",
                "\"solution \"",
                "\"problem \"",
                "\"code \"",
                "\"challenge \"",
                "\"practice \""
            ],
            "outputs": [
                "\"abccbaabccba \"",
                "\"art \"",
                "\"abcde \"",
                "\"ztsrwyxvuu \"",
                "\"ehllowrdl \"",
                "\"agimnorpmm \"",
                "\"aaolrthgm \"",
                "\"ceotdel \"",
                "\"nopty \"",
                "\"ajv \"",
                "\"cdgino \"",
                "\"eestion \"",
                "\"aeelmpx \"",
                "\"acet \"",
                "\"aces \"",
                "\"eilnosu \"",
                "\"bemopr \"",
                "\"cdeo \"",
                "\"aceeghlln \"",
                "\"aceiprt \""
            ]
        }
    },
    "1371": null,
    "1372": {
        "title": "Longest ZigZag Path in Binary Tree",
        "description": "Given the root of a binary tree, find the length of the longest ZigZag path in the tree. A ZigZag path is defined as follows: Choose any node in the binary tree and a direction (right or left). If the current direction is right, move to the right child of the current node; otherwise, move to the left child. Change the direction from right to left or from left to right. Repeat the second and third steps until you can't move in the tree. Zigzag length is defined as the number of nodes visited - 1. Return the longest ZigZag path contained in the tree.",
        "example": "Example:\n\nInput: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\nOutput: 3\nExplanation: The longest ZigZag path is formed by visiting the nodes in the order: right -> left -> right.\n\nInput: root = [1,1,1,null,1,null,null,1,1,null,1]\nOutput: 4\nExplanation: The longest ZigZag path is formed by visiting the nodes in the order: left -> right -> left -> right.\n\nInput: root = [1]\nOutput: 0\nExplanation: There is only one node in the tree, so the ZigZag path length is 0.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Traversal"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        1,
                        null,
                        1,
                        1,
                        1,
                        null,
                        null,
                        1,
                        1,
                        null,
                        1,
                        null,
                        null,
                        null,
                        1,
                        null,
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        1,
                        1,
                        null,
                        1,
                        null,
                        null,
                        1,
                        1,
                        null,
                        1
                    ]
                },
                {
                    "root": [
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        null,
                        4,
                        5,
                        null,
                        null,
                        6,
                        7,
                        8,
                        9,
                        null,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        null,
                        3,
                        null,
                        4,
                        null,
                        5,
                        null,
                        6,
                        null,
                        7,
                        null,
                        8,
                        null,
                        9,
                        null,
                        10
                    ]
                },
                {
                    "root": [
                        1,
                        null,
                        2,
                        3,
                        null,
                        4,
                        5,
                        null,
                        6,
                        7,
                        null,
                        8,
                        9,
                        null,
                        10
                    ]
                }
            ],
            "outputs": [
                3,
                4,
                0,
                9,
                5,
                9,
                9,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7,
                7
            ]
        }
    },
    "1373": null,
    "1374": {
        "title": "Odd Occurrences",
        "description": "Given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times. The returned string must contain only lowercase English letters. If there are multiple valid strings, return any of them.",
        "example": "Example:\n\nInput: n = 4\nOutput: \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".",
        "level": "Easy",
        "tags": [
            "string",
            "math"
        ],
        "test_cases": {
            "inputs": [
                4,
                2,
                7,
                1,
                10,
                20,
                100,
                500,
                333,
                222,
                111,
                99,
                77,
                55,
                33,
                11,
                9,
                7,
                5,
                3
            ],
            "outputs": [
                "pppz",
                "xy",
                "holasss",
                "a",
                "abcdefghij",
                "abcdefghijklmnopqrst",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz",
                "aabbccddee...yyzz"
            ]
        }
    },
    "1375": {
        "title": "Prefix-Aligned Binary String",
        "description": "You have a 1-indexed binary string of length `n` where all the bits are `0` initially. We will flip all the bits of this binary string (i.e., change them from `0` to `1`) one by one. You are given a 1-indexed integer array `flips` where `flips[i]` indicates that the bit at index `i` will be flipped in the `ith` step.\n\nA binary string is prefix-aligned if, after the `ith` step, all the bits in the inclusive range `[1, i]` are ones and all the other bits are zeros.\n\nReturn the number of times the binary string is prefix-aligned during the flipping process.",
        "example": "Example:\n\nInput: flips = [3,2,4,1,5]\nOutput: 2\nExplanation: The binary string is initially \"00000 \".\nAfter applying step 1: The string becomes \"00100 \", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100 \", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110 \", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110 \", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111 \", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.",
        "level": "Medium",
        "tags": [
            "array",
            "prefix-aligned",
            "bit manipulation"
        ],
        "test_cases": {
            "inputs": [
                "[3,2,4,1,5]",
                "[4,1,2,3]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1]",
                "[2]",
                "[3]",
                "[4]",
                "[5]",
                "[1,1,1,1,1]",
                "[2,2,2,2,2]",
                "[3,3,3,3,3]",
                "[4,4,4,4,4]",
                "[5,5,5,5,5]",
                "[1,2,3,4,5,1,2,3,4,5]",
                "[5,4,3,2,1,5,4,3,2,1]",
                "[1,2,3,4,5,5,4,3,2,1]",
                "[5,4,3,2,1,1,2,3,4,5]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2]"
            ],
            "outputs": [
                "2",
                "1",
                "5",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "2",
                "2",
                "2",
                "2",
                "2",
                "2"
            ]
        }
    },
    "1376": {
        "title": "Informing Employees",
        "description": "A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`. Each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure. The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. The `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news). Return the number of minutes needed to inform all the employees about the urgent news.",
        "example": "Example:\n\nInput: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.\n\nInput: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all. The tree structure of the employees in the company is shown.",
        "level": "Medium",
        "tags": [
            "tree",
            "depth-first search",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    [
                        -1
                    ],
                    [
                        0
                    ]
                ],
                [
                    6,
                    2,
                    [
                        2,
                        2,
                        -1,
                        2,
                        2,
                        2
                    ],
                    [
                        0,
                        0,
                        1,
                        0,
                        0,
                        0
                    ]
                ],
                [
                    5,
                    0,
                    [
                        -1,
                        0,
                        0,
                        1,
                        1
                    ],
                    [
                        0,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    4,
                    2,
                    [
                        3,
                        3,
                        -1,
                        2
                    ],
                    [
                        0,
                        0,
                        0,
                        1
                    ]
                ],
                [
                    3,
                    0,
                    [
                        -1,
                        0,
                        0
                    ],
                    [
                        0,
                        1,
                        2
                    ]
                ],
                [
                    7,
                    6,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        -1
                    ],
                    [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]
                ]
            ],
            "outputs": [
                0,
                1,
                2,
                1,
                2,
                1
            ]
        }
    },
    "1377": {
        "title": "Frog Jumping Probability",
        "description": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from **vertex 1**. In one second, the frog jumps from its current vertex to another **unvisited** vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.\n\nReturn the probability that after `t` seconds the frog is on the vertex `target`. Answers within `10-5` of the actual answer will be accepted.",
        "example": "Example:\n\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\nOutput: 0.16666666666666666\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666.",
        "level": "Medium",
        "tags": [
            "graph",
            "probability"
        ],
        "test_cases": {
            "inputs": [
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            7
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            3,
                            5
                        ]
                    ],
                    2,
                    4
                ],
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            7
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            3,
                            5
                        ]
                    ],
                    1,
                    7
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    3,
                    5
                ],
                [
                    4,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ]
                    ],
                    1,
                    4
                ],
                [
                    6,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ],
                    4,
                    6
                ],
                [
                    8,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ]
                    ],
                    3,
                    7
                ],
                [
                    10,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ],
                        [
                            5,
                            10
                        ]
                    ],
                    2,
                    9
                ],
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ],
                    5,
                    1
                ],
                [
                    9,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ]
                    ],
                    5,
                    6
                ],
                [
                    6,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ],
                    1,
                    6
                ],
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ]
                    ],
                    3,
                    7
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    2,
                    5
                ],
                [
                    4,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ]
                    ],
                    2,
                    4
                ],
                [
                    8,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ]
                    ],
                    2,
                    7
                ],
                [
                    10,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ],
                        [
                            5,
                            10
                        ]
                    ],
                    4,
                    10
                ],
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ]
                    ],
                    1,
                    3
                ],
                [
                    9,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ]
                    ],
                    3,
                    6
                ],
                [
                    6,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ],
                    2,
                    6
                ],
                [
                    7,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ]
                    ],
                    1,
                    7
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    1,
                    5
                ]
            ],
            "outputs": [
                0.16666666666666666,
                0.3333333333333333,
                0.0,
                0.25,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0
            ]
        }
    },
    "1379": {
        "title": "Find Cloned Node in Binary Tree",
        "description": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree, return a reference to the same node in the `cloned` tree. The `cloned` tree is a copy of the `original` tree. Note that you are not allowed to change any of the two trees or the `target` node, and the answer must be a reference to a node in the `cloned` tree.",
        "example": "Example 1:\n\nInput: tree = [7,4,3,null,null,6,19], target = 3\nOutput: 3\nExplanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.",
        "level": "Medium",
        "tags": [
            "Binary Tree",
            "Tree Traversal"
        ],
        "test_cases": {
            "inputs": [
                "[7,4,3,null,null,6,19]",
                "[7]",
                "[8,null,6,null,5,null,4,null,3,null,2,null,1]"
            ],
            "outputs": [
                "3",
                "7",
                "4"
            ]
        }
    },
    "1380": {
        "title": "Lucky Numbers in Matrix",
        "description": "Given an `m x n` matrix of **distinct** numbers, find all the **lucky numbers** in the matrix. A lucky number is an element of the matrix that is the minimum element in its row and the maximum element in its column.",
        "example": "Example:\n\nInput: matrix = [[3,7,8],[9,11,13],[15,16,17]]\nOutput: [15]\nExplanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.",
        "level": "Easy",
        "tags": [
            "array",
            "matrix",
            "search"
        ],
        "test_cases": {
            "inputs": [
                "[[3,7,8],[9,11,13],[15,16,17]]",
                "[[1,10,4,2],[9,3,8,7],[15,16,17,12]]",
                "[[7,8],[1,2]]",
                "[[1,2,3],[4,5,6],[7,8,9]]",
                "[[9,8,7],[6,5,4],[3,2,1]]",
                "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "[[12,11,10,9],[8,7,6,5],[4,3,2,1]]",
                "[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]",
                "[[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]]",
                "[[1]]",
                "[[1,2],[3,4]]",
                "[[5,6,7,8,9],[1,2,3,4,5],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]]",
                "[[24,23,22,21,20],[19,18,17,16,15],[14,13,12,11,10],[5,4,3,2,1]]",
                "[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]]",
                "[[24,23,22,21,20],[19,18,17,16,15],[14,13,12,11,10],[9,8,7,6,5],[4,3,2,1]]",
                "[[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28]]",
                "[[28,27,26,25,24,23,22],[21,20,19,18,17,16,15],[14,13,12,11,10,9,8],[7,6,5,4,3,2,1]]",
                "[[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24]]",
                "[[24,23,22,21,20,19,18,17],[16,15,14,13,12,11,10,9],[8,7,6,5,4,3,2,1]]",
                "[[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27]]",
                "[[27,26,25,24,23,22,21,20,19],[18,17,16,15,14,13,12,11,10],[9,8,7,6,5,4,3,2,1]]"
            ],
            "outputs": [
                "[15]",
                "[12]",
                "[7]",
                "[1, 5, 9]",
                "[9, 5, 1]",
                "[1, 5, 9]",
                "[9, 5, 1]",
                "[1, 6, 11]",
                "[15, 10, 5]",
                "[1]",
                "[2]",
                "[5, 11, 17, 23]",
                "[24, 18, 12, 6]",
                "[1, 7, 13, 19]",
                "[28, 21, 14, 7]",
                "[1, 9, 17]",
                "[24, 16, 8]",
                "[1, 10, 19]",
                "[24, 16, 8]",
                "[1, 10, 19]",
                "[27, 18, 9]"
            ]
        }
    },
    "1381": null,
    "1382": {
        "title": "Balanced Binary Search Tree",
        "description": "Given the `root` of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them. A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.",
        "example": "Example:\n\nInput: root = [1,null,2,null,3,null,4,null,null]\nOutput: [2,1,3,null,null,null,4]\nExplanation: This is not the only correct answer, [3,1,4,null,2] is also correct.",
        "level": "Medium",
        "tags": [
            "binary search tree",
            "balanced tree"
        ],
        "test_cases": {
            "inputs": [
                "[1,null,2,null,3,null,4,null,null]",
                "[2,1,3]",
                "[5,3,7,2,4,6,8]",
                "[10,5,15,3,7,12,18,2,4,6,8,11,13,17,19]",
                "[1]"
            ],
            "outputs": [
                "[2,1,3,null,null,null,4]",
                "[2,1,3]",
                "[5,3,7,2,4,6,8]",
                "[10,5,15,3,7,12,18,2,4,6,8,11,13,17,19]",
                "[1]"
            ]
        }
    },
    "1383": {
        "title": "Maximum Performance of a Team",
        "description": "You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.\n\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.\n\nReturn the maximum performance of this team. Since the answer can be a huge number, return it modulo `109 + 7`.",
        "example": "Example:\n\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[6, [2,10,3,1,5,8], [5,4,3,9,7,2], 2]",
                "[6, [2,10,3,1,5,8], [5,4,3,9,7,2], 3]",
                "[6, [2,10,3,1,5,8], [5,4,3,9,7,2], 4]",
                "[5, [1,2,3,4,5], [5,5,5,5,5], 2]",
                "[3, [1,2,3], [1,1,1], 1]",
                "[4, [1,2,3,4], [1,1,1,1], 4]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 5]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 3]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 0]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 6]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 10]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 100]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 10000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 100000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1000000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 10000000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 100000000]",
                "[5, [1,2,3,4,5], [1,1,1,1,1], 1000000000]"
            ],
            "outputs": [
                "60",
                "68",
                "72",
                "25",
                "3",
                "10",
                "15",
                "9",
                "5",
                "0",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15",
                "15"
            ]
        }
    },
    "1385": {
        "title": "Distance Value between Two Arrays",
        "description": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, return the distance value between the two arrays. The distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.",
        "example": "Example 1:\n\nInput: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: For arr1[0]=4 we have: |4-10|=6 > d=2 |4-9|=5 > d=2 |4-1|=3 > d=2 |4-8|=4 > d=2 For arr1[1]=5 we have: |5-10|=5 > d=2 |5-9|=4 > d=2 |5-1|=4 > d=2 |5-8|=3 > d=2 For arr1[2]=8 we have: |8-10|=2 <= d=2 |8-9|=1 <= d=2 |8-1|=7 > d=2 |8-8|=0 <= d=2\n\nExample 2:\n\nInput: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2\n\nExample 3:\n\nInput: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1",
        "level": "Easy",
        "tags": [
            "array",
            "distance"
        ],
        "test_cases": {
            "inputs": [
                "[4,5,8], [10,9,1,8], 2",
                "[1,4,2,3], [-4,-3,6,10,20,30], 3",
                "[2,1,100,3], [-5,-2,10,-3,7], 6",
                "[-1,0,1], [1,2,3], 0",
                "[10,20,30], [5,15,25], 10",
                "[1,2,3,4,5], [6,7,8,9,10], 5",
                "[100,200,300], [400,500,600], 100",
                "[-10,-20,-30], [-5,-15,-25], 10",
                "[0,0,0,0], [1,1,1,1], 1",
                "[1,2,3,4,5], [1,2,3,4,5], 0",
                "[-1,-2,-3,-4,-5], [-1,-2,-3,-4,-5], 0",
                "[1,2,3,4,5], [], 10",
                "[], [1,2,3,4,5], 10",
                "[], [], 0",
                "[1], [1], 0",
                "[1], [2], 1",
                "[1,2,3,4,5], [6,7,8,9,10], 1",
                "[1,2,3,4,5], [6,7,8,9,10], 0",
                "[1,2,3,4,5], [6,7,8,9,10], 5"
            ],
            "outputs": [
                "2",
                "2",
                "1",
                "0",
                "0",
                "5",
                "0",
                "0",
                "0",
                "5",
                "0",
                "10",
                "10",
                "0",
                "0",
                "1",
                "5",
                "5",
                "0"
            ]
        }
    },
    "1386": {
        "title": "Cinema Seating Arrangement",
        "description": "A cinema has `n` rows of seats, numbered from 1 to `n`, and there are ten seats in each row, labelled from 1 to 10. Given the array `reservedSeats` containing the numbers of seats already reserved, return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle are not considered to be adjacent, except when an aisle splits a four-person group in the middle, with two people on each side.",
        "example": "Example 1:\n\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The optimal allocation for four groups is shown in the figure above, where blue seats are already reserved and orange seats are for one group.\n\nExample 2:\n\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n\nExample 3:\n\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4",
        "level": "Medium",
        "tags": [
            "array",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            3,
                            1
                        ],
                        [
                            3,
                            10
                        ]
                    ]
                ],
                [
                    2,
                    [
                        [
                            2,
                            1
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            2,
                            6
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            4,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            4,
                            6
                        ],
                        [
                            1,
                            7
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            1,
                            6
                        ],
                        [
                            1,
                            7
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            1,
                            9
                        ],
                        [
                            1,
                            10
                        ]
                    ]
                ],
                [
                    6,
                    [
                        [
                            2,
                            1
                        ],
                        [
                            2,
                            2
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            2,
                            7
                        ],
                        [
                            2,
                            8
                        ],
                        [
                            2,
                            9
                        ],
                        [
                            2,
                            10
                        ]
                    ]
                ],
                [
                    7,
                    [
                        [
                            3,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            3,
                            3
                        ],
                        [
                            3,
                            4
                        ],
                        [
                            3,
                            5
                        ],
                        [
                            3,
                            6
                        ],
                        [
                            3,
                            7
                        ],
                        [
                            3,
                            8
                        ],
                        [
                            3,
                            9
                        ],
                        [
                            3,
                            10
                        ]
                    ]
                ],
                [
                    8,
                    [
                        [
                            4,
                            1
                        ],
                        [
                            4,
                            2
                        ],
                        [
                            4,
                            3
                        ],
                        [
                            4,
                            4
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            4,
                            6
                        ],
                        [
                            4,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            4,
                            9
                        ],
                        [
                            4,
                            10
                        ]
                    ]
                ],
                [
                    9,
                    [
                        [
                            5,
                            1
                        ],
                        [
                            5,
                            2
                        ],
                        [
                            5,
                            3
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            5,
                            5
                        ],
                        [
                            5,
                            6
                        ],
                        [
                            5,
                            7
                        ],
                        [
                            5,
                            8
                        ],
                        [
                            5,
                            9
                        ],
                        [
                            5,
                            10
                        ]
                    ]
                ],
                [
                    10,
                    [
                        [
                            6,
                            1
                        ],
                        [
                            6,
                            2
                        ],
                        [
                            6,
                            3
                        ],
                        [
                            6,
                            4
                        ],
                        [
                            6,
                            5
                        ],
                        [
                            6,
                            6
                        ],
                        [
                            6,
                            7
                        ],
                        [
                            6,
                            8
                        ],
                        [
                            6,
                            9
                        ],
                        [
                            6,
                            10
                        ]
                    ]
                ],
                [
                    11,
                    [
                        [
                            7,
                            1
                        ],
                        [
                            7,
                            2
                        ],
                        [
                            7,
                            3
                        ],
                        [
                            7,
                            4
                        ],
                        [
                            7,
                            5
                        ],
                        [
                            7,
                            6
                        ],
                        [
                            7,
                            7
                        ],
                        [
                            7,
                            8
                        ],
                        [
                            7,
                            9
                        ],
                        [
                            7,
                            10
                        ]
                    ]
                ],
                [
                    12,
                    [
                        [
                            8,
                            1
                        ],
                        [
                            8,
                            2
                        ],
                        [
                            8,
                            3
                        ],
                        [
                            8,
                            4
                        ],
                        [
                            8,
                            5
                        ],
                        [
                            8,
                            6
                        ],
                        [
                            8,
                            7
                        ],
                        [
                            8,
                            8
                        ],
                        [
                            8,
                            9
                        ],
                        [
                            8,
                            10
                        ]
                    ]
                ],
                [
                    13,
                    [
                        [
                            9,
                            1
                        ],
                        [
                            9,
                            2
                        ],
                        [
                            9,
                            3
                        ],
                        [
                            9,
                            4
                        ],
                        [
                            9,
                            5
                        ],
                        [
                            9,
                            6
                        ],
                        [
                            9,
                            7
                        ],
                        [
                            9,
                            8
                        ],
                        [
                            9,
                            9
                        ],
                        [
                            9,
                            10
                        ]
                    ]
                ],
                [
                    14,
                    [
                        [
                            10,
                            1
                        ],
                        [
                            10,
                            2
                        ],
                        [
                            10,
                            3
                        ],
                        [
                            10,
                            4
                        ],
                        [
                            10,
                            5
                        ],
                        [
                            10,
                            6
                        ],
                        [
                            10,
                            7
                        ],
                        [
                            10,
                            8
                        ],
                        [
                            10,
                            9
                        ],
                        [
                            10,
                            10
                        ]
                    ]
                ],
                [
                    15,
                    [
                        [
                            11,
                            1
                        ],
                        [
                            11,
                            2
                        ],
                        [
                            11,
                            3
                        ],
                        [
                            11,
                            4
                        ],
                        [
                            11,
                            5
                        ],
                        [
                            11,
                            6
                        ],
                        [
                            11,
                            7
                        ],
                        [
                            11,
                            8
                        ],
                        [
                            11,
                            9
                        ],
                        [
                            11,
                            10
                        ]
                    ]
                ],
                [
                    16,
                    [
                        [
                            12,
                            1
                        ],
                        [
                            12,
                            2
                        ],
                        [
                            12,
                            3
                        ],
                        [
                            12,
                            4
                        ],
                        [
                            12,
                            5
                        ],
                        [
                            12,
                            6
                        ],
                        [
                            12,
                            7
                        ],
                        [
                            12,
                            8
                        ],
                        [
                            12,
                            9
                        ],
                        [
                            12,
                            10
                        ]
                    ]
                ],
                [
                    17,
                    [
                        [
                            13,
                            1
                        ],
                        [
                            13,
                            2
                        ],
                        [
                            13,
                            3
                        ],
                        [
                            13,
                            4
                        ],
                        [
                            13,
                            5
                        ],
                        [
                            13,
                            6
                        ],
                        [
                            13,
                            7
                        ],
                        [
                            13,
                            8
                        ],
                        [
                            13,
                            9
                        ],
                        [
                            13,
                            10
                        ]
                    ]
                ],
                [
                    18,
                    [
                        [
                            14,
                            1
                        ],
                        [
                            14,
                            2
                        ],
                        [
                            14,
                            3
                        ],
                        [
                            14,
                            4
                        ],
                        [
                            14,
                            5
                        ],
                        [
                            14,
                            6
                        ],
                        [
                            14,
                            7
                        ],
                        [
                            14,
                            8
                        ],
                        [
                            14,
                            9
                        ],
                        [
                            14,
                            10
                        ]
                    ]
                ],
                [
                    19,
                    [
                        [
                            15,
                            1
                        ],
                        [
                            15,
                            2
                        ],
                        [
                            15,
                            3
                        ],
                        [
                            15,
                            4
                        ],
                        [
                            15,
                            5
                        ],
                        [
                            15,
                            6
                        ],
                        [
                            15,
                            7
                        ],
                        [
                            15,
                            8
                        ],
                        [
                            15,
                            9
                        ],
                        [
                            15,
                            10
                        ]
                    ]
                ],
                [
                    20,
                    [
                        [
                            16,
                            1
                        ],
                        [
                            16,
                            2
                        ],
                        [
                            16,
                            3
                        ],
                        [
                            16,
                            4
                        ],
                        [
                            16,
                            5
                        ],
                        [
                            16,
                            6
                        ],
                        [
                            16,
                            7
                        ],
                        [
                            16,
                            8
                        ],
                        [
                            16,
                            9
                        ],
                        [
                            16,
                            10
                        ]
                    ]
                ]
            ],
            "outputs": [
                4,
                2,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1388": {
        "title": "Maximum Pizza Slice Sum",
        "description": "You and your friends are sharing a pizza with `3n` slices of varying sizes. You have a specific picking order: you pick any slice, your friend Alice picks the next slice in the anti-clockwise direction, and your friend Bob picks the next slice in the clockwise direction. This process repeats until there are no more slices. Given an integer array `slices` representing the sizes of the pizza slices in a clockwise direction, find the maximum possible sum of slice sizes that you can pick.",
        "example": "Example:\n\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: You pick slice 4, Alice picks slice 3, Bob picks slice 5, you pick slice 6, Alice picks slice 2, and Bob picks slice 1. The total sum is 4 + 6 = 10.",
        "level": "Medium",
        "tags": [
            "Array",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    8,
                    9,
                    8,
                    6,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50,
                    55,
                    60
                ]
            ],
            "outputs": [
                10,
                16,
                18,
                240,
                160
            ]
        }
    },
    "1390": {
        "title": "Sum of Divisors with Four Divisors",
        "description": "Given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.",
        "example": "Example:\n\nInput: nums = [21,4,7]\nOutput: 32\nExplanation: \n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.",
        "level": "Medium",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    21,
                    4,
                    7
                ],
                [
                    21,
                    21
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    12,
                    15,
                    18,
                    21,
                    24
                ],
                [
                    8,
                    16,
                    24,
                    32,
                    40
                ],
                [
                    9,
                    16,
                    25,
                    36,
                    49
                ],
                [
                    11,
                    13,
                    17,
                    19,
                    23
                ],
                [
                    27,
                    30,
                    33,
                    36,
                    39
                ],
                [
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    121,
                    144,
                    169,
                    196,
                    225
                ],
                [
                    256,
                    289,
                    324,
                    361,
                    400
                ],
                [
                    441,
                    484,
                    529,
                    576,
                    625
                ],
                [
                    729,
                    784,
                    841,
                    900,
                    961
                ],
                [
                    1024,
                    1089,
                    1156,
                    1225,
                    1296
                ],
                [
                    1369,
                    1444,
                    1521,
                    1600,
                    1681
                ],
                [
                    1764,
                    1849,
                    1936,
                    2025,
                    2116
                ],
                [
                    2209,
                    2304,
                    2401,
                    2500,
                    2601
                ],
                [
                    2704,
                    2809,
                    2916,
                    3025,
                    3136
                ]
            ],
            "outputs": [
                32,
                64,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1391": {
        "title": "Valid Path in Grid",
        "description": "You are given an `m x n` grid. Each cell of the grid represents a street. The street of `grid[i][j]` can be:\n\n* `1` which means a street connecting the left cell and the right cell.\n* `2` which means a street connecting the upper cell and the lower cell.\n* `3` which means a street connecting the left cell and the lower cell.\n* `4` which means a street connecting the right cell and the lower cell.\n* `5` which means a street connecting the left cell and the upper cell.\n* `6` which means a street connecting the right cell and the upper cell.\n\nYou will initially start at the street of the upper-left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)`. The path should only follow the streets.\n\nNotice that you are not allowed to change any street.\n\nReturn `true` if there is a valid path in the grid or `false` otherwise.",
        "example": "Example:\n\nInput: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).",
        "level": "Medium",
        "tags": [
            "graph",
            "pathfinding"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        2,
                        4,
                        3
                    ],
                    [
                        6,
                        5,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        1
                    ],
                    [
                        1,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        1,
                        2
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        2
                    ],
                    [
                        4
                    ],
                    [
                        3
                    ],
                    [
                        6
                    ],
                    [
                        5
                    ],
                    [
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        3,
                        3,
                        3,
                        3,
                        3,
                        3
                    ]
                ],
                [
                    [
                        4,
                        4,
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    [
                        6,
                        6,
                        6,
                        6,
                        6,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        6,
                        5,
                        4,
                        3,
                        2,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        2,
                        3,
                        4,
                        5,
                        6,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        4,
                        5,
                        6,
                        1,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        4,
                        5,
                        6,
                        1,
                        2,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        5,
                        6,
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        6,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        2,
                        2,
                        2,
                        2,
                        2,
                        2
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        3,
                        3,
                        3,
                        3,
                        3,
                        3
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        4,
                        4,
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    [
                        6,
                        6,
                        6,
                        6,
                        6,
                        6
                    ]
                ]
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1394": {
        "title": "Largest Lucky Integer",
        "description": "Given an array of integers `arr`, a **lucky integer** is an integer that has a frequency in the array equal to its value. Return the largest **lucky integer** in the array. If there is no **lucky integer**, return `-1`.",
        "example": "Example:\n\nInput: arr = [2,2,3,4]\nOutput: 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.",
        "level": "Easy",
        "tags": [
            "array",
            "frequency",
            "search"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    2,
                    3,
                    4
                ],
                [
                    1,
                    2,
                    2,
                    3,
                    3,
                    3
                ],
                [
                    2,
                    2,
                    2,
                    3,
                    3
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    4,
                    4,
                    4,
                    4,
                    4
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                2,
                3,
                -1,
                1,
                4,
                -1,
                -1,
                -1,
                -1,
                10
            ]
        }
    },
    "1395": {
        "title": "Count Valid Teams",
        "description": "Given a list of soldiers with unique rating values, you need to form teams of 3 soldiers based on the following rules: Choose 3 soldiers with indices (i, j, k) and ratings (rating[i], rating[j], rating[k]). A team is considered valid if the ratings satisfy either of the following conditions: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]). Return the number of valid teams that can be formed.",
        "example": "Example:\n\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions: (2,3,4), (5,4,1), (5,3,1).",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    5,
                    3,
                    4,
                    1
                ],
                [
                    2,
                    1,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                ],
                [
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11
                ],
                [
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12
                ],
                [
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13
                ],
                [
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                3,
                0,
                4,
                0,
                0,
                0,
                0,
                1,
                84,
                84,
                84,
                120,
                120,
                220,
                220,
                364,
                364,
                560,
                560,
                816,
                816
            ]
        }
    },
    "1396": {
        "title": "Underground Railway System",
        "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another. Implement the `UndergroundSystem` class with the following methods: \n\n- `void checkIn(int id, string stationName, int t)`: A customer with a card ID equal to `id` checks in at the station `stationName` at time `t`. A customer can only be checked into one place at a time. \n\n- `void checkOut(int id, string stationName, int t)`: A customer with a card ID equal to `id` checks out from the station `stationName` at time `t`. \n\n- `double getAverageTime(string startStation, string endStation)`: Returns the average time it takes to travel from `startStation` to `endStation`. The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened directly, meaning a check-in at `startStation` followed by a check-out from `endStation`. The time it takes to travel from `startStation` to `endStation` may be different from the time it takes to travel from `endStation` to `startStation`. There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.",
        "example": "Example:\n\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12",
        "level": "Medium",
        "tags": [
            "Design",
            "Data Structure"
        ],
        "test_cases": {
            "inputs": [
                [],
                [
                    45,
                    "Leyton",
                    3
                ],
                [
                    32,
                    "Paradise",
                    8
                ],
                [
                    27,
                    "Leyton",
                    10
                ],
                [
                    45,
                    "Waterloo",
                    15
                ],
                [
                    27,
                    "Waterloo",
                    20
                ],
                [
                    32,
                    "Cambridge",
                    22
                ],
                [
                    "Paradise",
                    "Cambridge"
                ],
                [
                    "Leyton",
                    "Waterloo"
                ],
                [
                    10,
                    "Leyton",
                    24
                ],
                [
                    "Leyton",
                    "Waterloo"
                ],
                [
                    10,
                    "Waterloo",
                    38
                ],
                [
                    "Leyton",
                    "Waterloo"
                ]
            ],
            "outputs": [
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "null",
                "14.00000",
                "11.00000",
                "null",
                "11.00000",
                "null",
                "12.00000"
            ]
        }
    },
    "1397": {
        "title": "Count Good Strings",
        "description": "Given the strings `s1` and `s2` of size `n` and the string `evil`, return the number of good strings. A good string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this modulo `109 + 7`.",
        "example": "Example:\n\nInput: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51\nExplanation: There are 25 good strings starting with 'a': \"aa\", \"ac\", \"ad\",..., \"az\". Then there are 25 good strings starting with 'c': \"ca\", \"cc\", \"cd\",..., \"cz\" and finally there is one good string starting with 'd': \"da\".",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    "aa",
                    "da",
                    "b"
                ],
                [
                    8,
                    "leetcode",
                    "leetgoes",
                    "leet"
                ],
                [
                    2,
                    "gx",
                    "gz",
                    "x"
                ],
                [
                    3,
                    "abc",
                    "def",
                    "xyz"
                ],
                [
                    5,
                    "apple",
                    "banana",
                    "orange"
                ]
            ],
            "outputs": [
                51,
                0,
                2,
                0,
                0
            ]
        }
    },
    "1399": {
        "title": "Largest Group Size",
        "description": "You are given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. Return the number of groups that have the largest size.",
        "example": "Example 1:\n\nInput: n = 13\nOutput: 4\nExplanation: There are 9 groups in total, they are grouped according to the sum of the digits of numbers from 1 to 13: [1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with the largest size.\n\nExample 2:\n\nInput: n = 2\nOutput: 2\nExplanation: There are 2 groups [1], [2] of size 1.",
        "level": "Easy",
        "tags": [
            "math",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                13,
                2,
                10,
                100,
                1000,
                9999,
                104,
                1,
                50,
                123,
                987,
                10000,
                12345,
                54321,
                11111,
                22222,
                33333,
                44444,
                55555,
                66666
            ],
            "outputs": [
                4,
                2,
                10,
                19,
                37,
                1,
                1,
                1,
                5,
                1,
                1,
                1,
                1,
                1,
                5,
                5,
                5,
                5,
                5,
                5
            ]
        }
    },
    "1400": {
        "title": "Construct Palindrome Strings",
        "description": "Given a string `s` and an integer `k`, determine if it is possible to use all the characters in `s` to construct `k` palindrome strings. Return `true` if possible, and `false` otherwise.",
        "example": "Example 1:\n\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s. Some possible constructions are \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n\nExample 2:\n\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n\nExample 3:\n\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.",
        "level": "Medium",
        "tags": [
            "string",
            "palindrome"
        ],
        "test_cases": {
            "inputs": [
                "\"annabelle\", 2",
                "\"leetcode\", 3",
                "\"true\", 4",
                "\"racecar\", 1",
                "\"aab\", 2",
                "\"abcde\", 5",
                "\"madam\", 3",
                "\"hello\", 1",
                "\"level\", 2",
                "\"noon\", 1",
                "\"aabbaa\", 3",
                "\"abcba\", 2",
                "\"radar\", 4",
                "\"deed\", 2",
                "\"stats\", 1",
                "\"mom\", 3",
                "\"aabbaabb\", 4",
                "\"abcba\", 3",
                "\"noon\", 2",
                "\"hello\", 2"
            ],
            "outputs": [
                "true",
                "false",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "false"
            ]
        }
    },
    "1401": {
        "title": "Circle and Rectangle Overlap",
        "description": "You are given a circle represented as `(radius, xCenter, yCenter)` and an axis-aligned rectangle represented as `(x1, y1, x2, y2)`, where `(x1, y1)` are the coordinates of the bottom-left corner, and `(x2, y2)` are the coordinates of the top-right corner of the rectangle. Return `true` if the circle and rectangle overlap, otherwise return `false`. In other words, check if there is any point `(xi, yi)` that belongs to both the circle and the rectangle at the same time.",
        "example": "Example:\n\nInput: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\nOutput: true\nExplanation: Circle and rectangle share the point (1,0).",
        "level": "Easy",
        "tags": [
            "geometry",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    0,
                    0,
                    1,
                    -1,
                    3,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    -3,
                    2,
                    -1
                ],
                [
                    1,
                    0,
                    0,
                    -1,
                    0,
                    0,
                    1
                ],
                [
                    2,
                    0,
                    0,
                    1,
                    -1,
                    3,
                    1
                ],
                [
                    1,
                    0,
                    0,
                    2,
                    2,
                    4,
                    4
                ],
                [
                    3,
                    0,
                    0,
                    5,
                    5,
                    10,
                    10
                ],
                [
                    2,
                    0,
                    0,
                    5,
                    5,
                    10,
                    10
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    5,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ],
                [
                    1,
                    0,
                    0,
                    10,
                    10,
                    20,
                    20
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "1402": {
        "title": "Maximum Like-Time Coefficient",
        "description": "A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time. The like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level. Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation. Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.",
        "example": "Example:\n\nInput: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[-1,-8,0,5,-9]",
                "[4,3,2]",
                "[-1,-4,-5]",
                "[-2,5,-3,1,2]",
                "[0,0,0,0,0]",
                "[-10,-5,0,5,10]",
                "[-1,0,1,2,3,4,5]",
                "[-5,-4,-3,-2,-1,0,1,2,3,4,5]",
                "[-1000,1000]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981]",
                "[-1000,-999,-998,-997,-996,-995,-994,-993,-992,-991,-990,-989,-988,-987,-986,-985,-984,-983,-982,-981]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000]",
                "[-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]"
            ],
            "outputs": [
                "14",
                "20",
                "0",
                "14",
                "0",
                "0",
                "35",
                "165",
                "1000",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350",
                "9350"
            ]
        }
    },
    "1403": {
        "title": "Subsequence with Maximum Sum",
        "description": "Given an array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non-included elements in such subsequence. If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. Note that the solution with the given constraints is guaranteed to be unique. Also, return the answer sorted in non-increasing order.",
        "example": "Example:\n\nInput: nums = [4,3,10,9,8]\nOutput: [10,9]\nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements.",
        "level": "Medium",
        "tags": [
            "array",
            "subsequence",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    4,
                    3,
                    10,
                    9,
                    8
                ],
                [
                    4,
                    4,
                    7,
                    6,
                    7
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    20,
                    18,
                    16,
                    14,
                    12,
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    19,
                    17,
                    15,
                    13,
                    11,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ],
                [
                    50,
                    45,
                    40,
                    35,
                    30,
                    25,
                    20,
                    15,
                    10,
                    5
                ],
                [
                    3,
                    6,
                    9,
                    12,
                    15,
                    18,
                    21,
                    24,
                    27,
                    30
                ],
                [
                    30,
                    27,
                    24,
                    21,
                    18,
                    15,
                    12,
                    9,
                    6,
                    3
                ],
                [
                    2,
                    3,
                    5,
                    7,
                    11,
                    13,
                    17,
                    19,
                    23,
                    29
                ]
            ],
            "outputs": [
                [
                    10,
                    9
                ],
                [
                    7,
                    7,
                    6
                ],
                [
                    5
                ],
                [
                    50
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6
                ],
                [
                    500
                ],
                [
                    10
                ],
                [
                    10
                ],
                [
                    1
                ],
                [
                    20,
                    18,
                    16,
                    14,
                    12,
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    20,
                    18,
                    16,
                    14,
                    12,
                    10,
                    8,
                    6,
                    4,
                    2
                ],
                [
                    19,
                    17,
                    15,
                    13,
                    11,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    19,
                    17,
                    15,
                    13,
                    11,
                    9,
                    7,
                    5,
                    3,
                    1
                ],
                [
                    50,
                    45,
                    40,
                    35,
                    30,
                    25,
                    20,
                    15,
                    10,
                    5
                ],
                [
                    50,
                    45,
                    40,
                    35,
                    30,
                    25,
                    20,
                    15,
                    10,
                    5
                ],
                [
                    30,
                    27,
                    24,
                    21,
                    18,
                    15,
                    12,
                    9,
                    6,
                    3
                ],
                [
                    30,
                    27,
                    24,
                    21,
                    18,
                    15,
                    12,
                    9,
                    6,
                    3
                ],
                [
                    29,
                    23,
                    19,
                    17,
                    13,
                    11,
                    7,
                    5,
                    3,
                    2
                ]
            ]
        }
    },
    "1404": {
        "title": "Steps to Reduce Binary Number to 1",
        "description": "Given the binary representation of an integer as a string `s`, return the number of steps to reduce it to 1 under the following rules:\n\n- If the current number is even, you have to divide it by 2.\n- If the current number is odd, you have to add 1 to it.\n\nIt is guaranteed that you can always reach one for all test cases.",
        "example": "Example:\n\nInput: \"1101\"\nOutput: 6\nExplanation: \"1101\" corresponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\nStep 5) 4 is even, divide by 2 and obtain 2.\nStep 6) 2 is even, divide by 2 and obtain 1.",
        "level": "Medium",
        "tags": [
            "binary",
            "integer",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "\"1101\"",
                "\"10\"",
                "\"1\"",
                "\"111111\"",
                "\"101010\"",
                "\"1000000\"",
                "\"111\"",
                "\"1001\"",
                "\"101010101\"",
                "\"111000111\"",
                "\"1000000000\"",
                "\"1111111111\"",
                "\"101010101010\"",
                "\"1000000000000\"",
                "\"1111111111111\"",
                "\"10101010101010\"",
                "\"100000000000000\"",
                "\"111111111111111\"",
                "\"1010101010101010\"",
                "\"10000000000000000\""
            ],
            "outputs": [
                "6",
                "1",
                "0",
                "10",
                "6",
                "20",
                "8",
                "8",
                "18",
                "18",
                "24",
                "24",
                "26",
                "36",
                "36",
                "38",
                "48",
                "48",
                "50",
                "60"
            ]
        }
    },
    "1405": null,
    "1406": {
        "title": "Alice and Bob's Stone Game",
        "description": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.\n\nThe score of each player is the sum of the values of the stones taken. The score of each player is 0 initially.\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\nAssume Alice and Bob play optimally.\n\nReturn 'Alice' if Alice will win, 'Bob' if Bob will win, or 'Tie' if they will end the game with the same score.",
        "example": "Example:\n\nInput: values = [1,2,3,7]\nOutput: 'Bob'\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.",
        "level": "Medium",
        "tags": [
            "array",
            "game theory"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,7]",
                "[1,2,3,-9]",
                "[1,2,3,6]",
                "[5,10,15,20]",
                "[-1,-2,-3,-4]",
                "[0,0,0,0]",
                "[1,1,1,1]",
                "[2,2,2,2]",
                "[3,3,3,3]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2]",
                "[3,3,3,3,3,3,3,3,3,3]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
                "[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]"
            ],
            "outputs": [
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Alice'",
                "'Bob'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Alice'",
                "'Bob'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Bob'",
                "'Alice'",
                "'Tie'",
                "'Bob'"
            ]
        }
    },
    "1408": {
        "title": "Substring Words",
        "description": "Given an array of strings `words`, return all strings in `words` that are substrings of another word. A substring is a contiguous sequence of characters within a string.",
        "example": "Example 1:\n\nInput: words = [\"mass\", \"as\", \"hero\", \"superhero\"]\nOutput: [\"as\", \"hero\"]\nExplanation: \"as\" is a substring of \"mass\" and \"hero\" is a substring of \"superhero\". [\"hero\", \"as\"] is also a valid answer.\n\nExample 2:\n\nInput: words = [\"leetcode\", \"et\", \"code\"]\nOutput: [\"et\", \"code\"]\nExplanation: \"et\" and \"code\" are substrings of \"leetcode\".\n\nExample 3:\n\nInput: words = [\"blue\", \"green\", \"bu\"]\nOutput: []\nExplanation: No string in words is a substring of another string.",
        "level": "Easy",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "mass",
                    "as",
                    "hero",
                    "superhero"
                ],
                [
                    "leetcode",
                    "et",
                    "code"
                ],
                [
                    "blue",
                    "green",
                    "bu"
                ],
                [
                    "hello",
                    "world",
                    "lo"
                ],
                [
                    "programming",
                    "gram",
                    "ming"
                ],
                [
                    "apple",
                    "banana",
                    "orange"
                ],
                [
                    "cat",
                    "dog",
                    "at"
                ],
                [
                    "python",
                    "java",
                    "thon"
                ],
                [
                    "good",
                    "bad",
                    "go"
                ],
                [
                    "moon",
                    "sun",
                    "oo"
                ],
                [
                    "happy",
                    "sad",
                    "ha"
                ],
                [
                    "computer",
                    "science",
                    "uter"
                ],
                [
                    "book",
                    "pen",
                    "ok"
                ],
                [
                    "car",
                    "bike",
                    "ar"
                ],
                [
                    "tree",
                    "flower",
                    "ee"
                ],
                [
                    "house",
                    "building",
                    "use"
                ],
                [
                    "red",
                    "blue",
                    "ed"
                ],
                [
                    "water",
                    "fire",
                    "ter"
                ],
                [
                    "sun",
                    "moon",
                    "un"
                ],
                [
                    "sky",
                    "cloud",
                    "ky"
                ]
            ],
            "outputs": [
                [
                    "as",
                    "hero"
                ],
                [
                    "et",
                    "code"
                ],
                [],
                [
                    "hello",
                    "lo"
                ],
                [
                    "programming",
                    "gram",
                    "ming"
                ],
                [],
                [
                    "cat",
                    "at"
                ],
                [
                    "python",
                    "thon"
                ],
                [
                    "good"
                ],
                [
                    "moon"
                ],
                [
                    "ha"
                ],
                [
                    "computer",
                    "uter"
                ],
                [
                    "book",
                    "ok"
                ],
                [
                    "car",
                    "ar"
                ],
                [
                    "tree",
                    "ee"
                ],
                [
                    "house",
                    "use"
                ],
                [
                    "red"
                ],
                [
                    "water",
                    "ter"
                ],
                [
                    "sun"
                ],
                [
                    "sky"
                ]
            ]
        }
    },
    "1409": {
        "title": "Query Permutation",
        "description": "Given an array `queries` of positive integers between 1 and m, process all queries[i] according to the following rules: In the beginning, you have the permutation P=[1,2,3,...,m]. For the current i, find the position of queries[i] in the permutation P (indexing from 0) and move it to the beginning of P. Return an array containing the result for the given queries.",
        "example": "Example 1:\n\nInput: queries = [3,1,2,1], m = 5\nOutput: [2,1,2,1]\nExplanation: The queries are processed as follows:\nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5].\nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5].\nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5].\nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5].\nTherefore, the array containing the result is [2,1,2,1].",
        "level": "Medium",
        "tags": [
            "array",
            "permutation"
        ],
        "test_cases": {
            "inputs": [
                "[3,1,2,1]",
                "[4,1,2,2]",
                "[7,5,5,8,3]",
                "[1]",
                "[2,1]",
                "[5,4,3,2,1]",
                "[10,9,8,7,6,5,4,3,2,1]"
            ],
            "outputs": [
                "[2,1,2,1]",
                "[3,1,2,0]",
                "[6,5,0,7,5]",
                "[0]",
                "[1,0]",
                "[4,3,2,1,0]",
                "[9,8,7,6,5,4,3,2,1,0]"
            ]
        }
    },
    "1410": {
        "title": "HTML Entity Parser",
        "description": "You are given a string `text` which represents an HTML code. The HTML code contains special characters represented by their respective entities. Your task is to implement a parser that replaces these entities with their corresponding special characters and returns the modified string.",
        "example": "For example, if the input `text` is \"&amp; is an HTML entity but &ambassador; is not.\", the output should be \"& is an HTML entity but &ambassador; is not.\"",
        "level": "Easy",
        "tags": [
            "String",
            "Parsing"
        ],
        "test_cases": {
            "inputs": [
                "\"&amp; is an HTML entity but &ambassador; is not.\"",
                "\"and I quote: &quot;...&quot;\"",
                "\"This is a test &lt;string&gt; with multiple entities: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot;\"",
                "\"No entities in this string.\"",
                "\"This string has an unknown entity: &unknown;\"",
                "\"This string has a mix of entities and regular characters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash, and regular text.\"",
                "\"This string has entities at the beginning: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities at the end: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities in the middle: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with spaces: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with special characters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with numbers: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with punctuation: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with uppercase letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with lowercase letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with mixed case letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and mixed case letters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and special characters: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and numbers: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\"",
                "\"This string has entities with multiple occurrences and punctuation: &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.&quot; &quot;quote&quot;, &apos;single&apos;, &amp;amp;, &gt;greater than&lt;, &frasl;slash.\""
            ],
            "outputs": [
                "\"& is an HTML entity but &ambassador; is not.\"",
                "\"and I quote: \\\"...\\\"\"",
                "\"This is a test <string> with multiple entities: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\"\"",
                "\"No entities in this string.\"",
                "\"This string has an unknown entity: &unknown;\"",
                "\"This string has a mix of entities and regular characters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash, and regular text.\"",
                "\"This string has entities at the beginning: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities at the end: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities in the middle: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with spaces: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with special characters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with numbers: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with punctuation: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with uppercase letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with lowercase letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with mixed case letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and mixed case letters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and special characters: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and numbers: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\"",
                "\"This string has entities with multiple occurrences and punctuation: \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\\\" \\\"quote\\\", 'single', &amp;, >greater than<, /slash.\""
            ]
        }
    },
    "1411": {
        "title": "Painting Grid",
        "description": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\nGiven n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.",
        "example": "Example:\n\nInput: n = 1\nOutput: 12\nExplanation: There are 12 possible ways to paint the grid as shown.\n\nInput: n = 5000\nOutput: 30228214",
        "level": "Medium",
        "tags": [
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                1,
                2,
                3,
                4,
                5,
                10,
                100,
                500,
                1000,
                5000
            ],
            "outputs": [
                12,
                24,
                48,
                96,
                192,
                53784,
                772494375,
                772494375,
                772494375,
                30228214
            ]
        }
    },
    "1413": {
        "title": "Minimum Positive Start Value",
        "description": "Given an array of integers `nums`, you start with an initial **positive** value `startValue`. In each iteration, you calculate the step by step sum of `startValue` plus elements in `nums` (from left to right). Return the minimum **positive** value of `startValue` such that the step by step sum is never less than 1.",
        "example": "Example 1:\n\nInput: nums = [-3,2,-3,4,2]\nOutput: 5\nExplanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\nstep by step sum\nstartValue = 4 | startValue = 5 | nums\n  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3\n  (1 +2 ) = 3  | (2 +2 ) = 4    |   2\n  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3\n  (0 +4 ) = 4  | (1 +4 ) = 5    |   4\n  (4 +2 ) = 6  | (5 +2 ) = 7    |   2\n\nExample 2:\n\nInput: nums = [1,2]\nOutput: 1\nExplanation: Minimum start value should be positive.\n\nExample 3:\n\nInput: nums = [1,-2,-3]\nOutput: 5",
        "level": "Easy",
        "tags": [
            "array",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                "[-3,2,-3,4,2]",
                "[1,2]",
                "[1,-2,-3]",
                "[-1,-2,-3]",
                "[0,0,0,0,0]",
                "[1,1,1,1,1]",
                "[-1,0,1,2,3]",
                "[-5,-4,-3,-2,-1]",
                "[10,20,30,40,50]",
                "[-10,-20,-30,-40,-50]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]"
            ],
            "outputs": [
                "5",
                "1",
                "5",
                "7",
                "1",
                "1",
                "6",
                "16",
                "1",
                "51",
                "1",
                "56",
                "1",
                "61",
                "1",
                "66",
                "1",
                "71",
                "1",
                "76",
                "1"
            ]
        }
    },
    "1414": {
        "title": "Minimum Fibonacci Numbers",
        "description": "Given an integer `k`, return the minimum number of Fibonacci numbers whose sum is equal to `k`. The same Fibonacci number can be used multiple times.\n\nThe Fibonacci numbers are defined as:\n\n- `F1 = 1`\n- `F2 = 1`\n- `Fn = Fn-1 + Fn-2` for `n > 2.`\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.",
        "example": "Example:\n\nInput: k = 7\nOutput: 2\nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ...\nFor k = 7 we can use 2 + 5 = 7.",
        "level": "Medium",
        "tags": [
            "math",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                7,
                10,
                19,
                1,
                2,
                3,
                5,
                8,
                13,
                21,
                34,
                55,
                89,
                144,
                233,
                377,
                610,
                987,
                1597,
                2584
            ],
            "outputs": [
                2,
                2,
                3,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ]
        }
    },
    "1415": {
        "title": "Kth Happy String",
        "description": "A happy string is a string that consists only of letters from the set ['a', 'b', 'c'] and s[i] != s[i + 1] for all values of i from 1 to s.length - 1. Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order. Return the kth string of this list or an empty string if there are less than k happy strings of length n.",
        "example": "For n = 1 and k = 3, the list ['a', 'b', 'c'] contains all happy strings of length 1. The third string is 'c'. Therefore, the output is 'c'.",
        "level": "Medium",
        "tags": [
            "String",
            "Sorting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    3
                ],
                [
                    1,
                    4
                ],
                [
                    3,
                    9
                ],
                [
                    2,
                    5
                ],
                [
                    4,
                    15
                ],
                [
                    5,
                    10
                ],
                [
                    10,
                    100
                ]
            ],
            "outputs": [
                "c",
                "",
                "cab",
                "bc",
                "ccba",
                "ccccc",
                ""
            ]
        }
    },
    "1416": {
        "title": "Possible Arrays",
        "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits `s`. All we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array. Given the string `s` and the integer `k`, return the number of possible arrays that can be printed as `s` using the mentioned program. Since the answer may be very large, return it modulo `109 + 7`.",
        "example": "Example:\n\nInput: s = \"1000 \", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]",
        "level": "Medium",
        "tags": [
            "string",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"1000 \", 10000",
                "\"1000 \", 10",
                "\"1317 \", 2000",
                "\"12345 \", 100",
                "\"111 \", 100",
                "\"123456789 \", 1000000000",
                "\"987654321 \", 1000000000",
                "\"123456789 \", 123456789",
                "\"987654321 \", 987654321",
                "\"123456789 \", 987654321",
                "\"987654321 \", 123456789",
                "\"123456789 \", 100",
                "\"987654321 \", 100",
                "\"123456789 \", 10",
                "\"987654321 \", 10",
                "\"123456789 \", 1",
                "\"987654321 \", 1",
                "\"123456789 \", 1000000000",
                "\"987654321 \", 1000000000",
                "\"123456789 \", 123456789",
                "\"987654321 \", 987654321"
            ],
            "outputs": [
                "1",
                "0",
                "8",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "1",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "1",
                "1",
                "1",
                "1"
            ]
        }
    },
    "1417": {
        "title": "Alphanumeric String Reformatting",
        "description": "Given an alphanumeric string `s`, find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. Return the reformatted string or an empty string if it is impossible to reformat the string.",
        "example": "Example 1:\n\nInput: s = \"a0b1c2 \"\nOutput: \"0a1b2c \"\nExplanation: No two adjacent characters have the same type in \"0a1b2c \". \"a0b1c2 \", \"0a1b2c \", \"0c2a1b \" are also valid permutations.",
        "level": "Easy",
        "tags": [
            "String",
            "Permutation"
        ],
        "test_cases": {
            "inputs": [
                "\"a0b1c2 \"",
                "\"leetcode \"",
                "\"1229857369 \"",
                "\"a1b2c3d4e5f6g7h8i9j0 \"",
                "\"1234567890abcdefghijklmnopqrstuvwxyz \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz \"",
                "\"1111111111aaaaaaaaaabbbbbbbbbb \"",
                "\"1234567890abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4a5b6c7d8e9f0g1h2i3j4k5l6m7n8o9p0q1r2s3t4u5v6w7x8y9z0 \""
            ],
            "outputs": [
                "\"0a1b2c \"",
                "\" \"",
                "\" \"",
                "\"a1b2c3d4e5f6g7h8i9j0 \"",
                "\"1a2b3c4d5e6f7g8h9i0jklmnopqrstuvwxyz \"",
                "\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz \"",
                "\"1111111111aaaaaaaaaabbbbbbbbbb \"",
                "\"1a2b3c4d5e6f7g8h9i0jklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4 \"",
                "\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4g5h6i7j8k9l0m1n2o3p4q5r6s7t8u9v0w1x2y3z4a5b6c7d8e9f0g1h2i3j4k5l6m7n8o9p0q1r2s3t4u5v6w7x8y9z0 \""
            ]
        }
    },
    "1418": {
        "title": "Restaurant Display Table",
        "description": "Given an array of orders, where each order is represented as [customerName, tableNumber, foodItem], return the restaurant's display table. The display table is a table that shows how many of each food item each table ordered. The first column is the table number, and the remaining columns correspond to each food item in alphabetical order. The first row should be a header with the column names. The rows should be sorted in numerically increasing order.",
        "example": "Example 1:\n\nInput: orders = [['David', '3', 'Ceviche'], ['Corina', '10', 'Beef Burrito'], ['David', '3', 'Fried Chicken'], ['Carla', '5', 'Water'], ['Carla', '5', 'Ceviche'], ['Rous', '3', 'Ceviche']]\nOutput: [['Table', 'Beef Burrito', 'Ceviche', 'Fried Chicken', 'Water'], ['3', '0', '2', '1', '0'], ['5', '0', '1', '0', '1'], ['10', '1', '0', '0', '0']]\nExplanation: The display table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3,0,2,1,0\n5,0,1,0,1\n10,1,0,0,0\n\nExample 2:\n\nInput: orders = [['James', '12', 'Fried Chicken'], ['Ratesh', '12', 'Fried Chicken'], ['Amadeus', '12', 'Fried Chicken'], ['Adam', '1', 'Canadian Waffles'], ['Brianna', '1', 'Canadian Waffles']]\nOutput: [['Table', 'Canadian Waffles', 'Fried Chicken'], ['1', '2', '0'], ['12', '0', '3']]\nExplanation: For table 1, Adam and Brianna order Canadian Waffles. For table 12, James, Ratesh, and Amadeus order Fried Chicken.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[['David', '3', 'Ceviche'], ['Corina', '10', 'Beef Burrito'], ['David', '3', 'Fried Chicken'], ['Carla', '5', 'Water'], ['Carla', '5', 'Ceviche'], ['Rous', '3', 'Ceviche']]",
                "[['James', '12', 'Fried Chicken'], ['Ratesh', '12', 'Fried Chicken'], ['Amadeus', '12', 'Fried Chicken'], ['Adam', '1', 'Canadian Waffles'], ['Brianna', '1', 'Canadian Waffles']]",
                "[['Laura', '2', 'Bean Burrito'], ['Jhon', '2', 'Beef Burrito'], ['Melissa', '2', 'Soda']]"
            ],
            "outputs": [
                "[['Table', 'Beef Burrito', 'Ceviche', 'Fried Chicken', 'Water'], ['3', '0', '2', '1', '0'], ['5', '0', '1', '0', '1'], ['10', '1', '0', '0', '0']]",
                "[['Table', 'Canadian Waffles', 'Fried Chicken'], ['1', '2', '0'], ['12', '0', '3']]",
                "[['Table', 'Bean Burrito', 'Beef Burrito', 'Soda'], ['2', '1', '1', '1']]"
            ]
        }
    },
    "1419": null,
    "1420": {
        "title": "Number of Ways to Build Array",
        "description": "You are given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:\n\nYou should build the array arr which has the following properties:\n\n- `arr` has exactly `n` integers.\n- `1 <= arr[i] <= m` where `(0 <= i < n)`.\n- After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\nReturn the number of ways to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer must be computed modulo `109 + 7`.",
        "example": "Example:\n\nInput: n = 2, m = 3, k = 1\nOutput: 6\nExplanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming",
            "combinatorics"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    1
                ],
                [
                    5,
                    2,
                    3
                ],
                [
                    9,
                    1,
                    1
                ],
                [
                    4,
                    4,
                    2
                ],
                [
                    3,
                    5,
                    0
                ],
                [
                    6,
                    2,
                    6
                ],
                [
                    10,
                    10,
                    5
                ],
                [
                    7,
                    3,
                    4
                ],
                [
                    8,
                    5,
                    2
                ],
                [
                    12,
                    6,
                    3
                ],
                [
                    15,
                    8,
                    7
                ],
                [
                    20,
                    10,
                    10
                ],
                [
                    25,
                    15,
                    12
                ],
                [
                    30,
                    20,
                    15
                ],
                [
                    35,
                    25,
                    20
                ],
                [
                    40,
                    30,
                    25
                ],
                [
                    45,
                    35,
                    30
                ],
                [
                    50,
                    40,
                    35
                ],
                [
                    50,
                    50,
                    50
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "outputs": [
                6,
                0,
                1,
                12,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ]
        }
    },
    "1422": {
        "title": "Maximum Score After Splitting a String",
        "description": "Given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings. The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.",
        "example": "Example:\n\nInput: s = \"011101\"\nOutput: 5\nExplanation: All possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5\nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4\nleft = \"011\" and right = \"101\", score = 1 + 2 = 3\nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2\nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3",
        "level": "Medium",
        "tags": [
            "string",
            "splitting",
            "score"
        ],
        "test_cases": {
            "inputs": [
                "\"011101\"",
                "\"00111\"",
                "\"1111\"",
                "\"0101010101\"",
                "\"1111111111\"",
                "\"0000000000\"",
                "\"010101010101\"",
                "\"101010101010\"",
                "\"01010101010101\"",
                "\"10101010101010\"",
                "\"0101010101010101\"",
                "\"1010101010101010\"",
                "\"010101010101010101\"",
                "\"101010101010101010\"",
                "\"01010101010101010101\"",
                "\"10101010101010101010\"",
                "\"0101010101010101010101\"",
                "\"1010101010101010101010\"",
                "\"010101010101010101010101\"",
                "\"101010101010101010101010\""
            ],
            "outputs": [
                "5",
                "5",
                "3",
                "5",
                "0",
                "0",
                "6",
                "6",
                "7",
                "7",
                "8",
                "8",
                "9",
                "9",
                "10",
                "10",
                "11",
                "11",
                "12",
                "12"
            ]
        }
    },
    "1423": null,
    "1424": {
        "title": "Diagonal Order",
        "description": "Given a 2D integer array `nums`, return all elements of `nums` in diagonal order. The diagonal order starts from the top-left element and ends at the bottom-right element, as shown in the below images.",
        "example": "Example 1:\n\nInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]\n\nExample 2:\n\nInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]",
        "level": "Medium",
        "tags": [
            "array",
            "matrix",
            "diagonal"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7
                    ],
                    [
                        8
                    ],
                    [
                        9,
                        10,
                        11
                    ],
                    [
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        5,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4
                    ],
                    [
                        5,
                        6,
                        7,
                        8
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        6,
                        7,
                        8,
                        9
                    ],
                    [
                        10,
                        11,
                        12,
                        13
                    ],
                    [
                        14,
                        15,
                        16,
                        17
                    ]
                ],
                [
                    [
                        1
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [
                        4
                    ],
                    [
                        5
                    ],
                    [
                        6
                    ],
                    [
                        7
                    ],
                    [
                        8
                    ],
                    [
                        9
                    ],
                    [
                        10
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20
                    ],
                    [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30
                    ],
                    [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ],
                    [
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                ]
            ],
            "outputs": [
                [
                    1,
                    4,
                    2,
                    7,
                    5,
                    3,
                    8,
                    6,
                    9
                ],
                [
                    1,
                    6,
                    2,
                    8,
                    7,
                    3,
                    9,
                    4,
                    12,
                    10,
                    5,
                    13,
                    11,
                    14,
                    15,
                    16
                ],
                [
                    1,
                    4,
                    2,
                    5,
                    3,
                    6
                ],
                [
                    1,
                    3,
                    2,
                    4,
                    5,
                    6
                ],
                [
                    1,
                    5,
                    2,
                    6,
                    3,
                    7,
                    4,
                    8
                ],
                [
                    1,
                    6,
                    2,
                    11,
                    7,
                    3,
                    16,
                    12,
                    8,
                    4,
                    17,
                    13,
                    9,
                    5,
                    18,
                    14,
                    10,
                    19,
                    15,
                    20
                ],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90
                ],
                [
                    1,
                    11,
                    2,
                    21,
                    12,
                    3,
                    31,
                    22,
                    13,
                    4,
                    41,
                    32,
                    23,
                    14,
                    5,
                    51,
                    42,
                    33,
                    24,
                    15,
                    6,
                    61,
                    52,
                    43,
                    34,
                    25,
                    16,
                    7,
                    71,
                    62,
                    53,
                    44,
                    35,
                    26,
                    17,
                    8,
                    81,
                    72,
                    63,
                    54,
                    45,
                    36,
                    27,
                    18,
                    9,
                    91,
                    82,
                    73,
                    64,
                    55,
                    46,
                    37,
                    28,
                    19,
                    10,
                    100,
                    20,
                    30,
                    40,
                    50,
                    60,
                    70,
                    80,
                    90,
                    100
                ]
            ]
        }
    },
    "1425": {
        "title": "Maximum Sum of Non-Empty Subsequence",
        "description": "Given an integer array `nums` and an integer `k`, find the maximum sum of a non-empty subsequence of `nums` such that for every two consecutive integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied. A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.",
        "example": "Example:\n\nInput: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[10,2,-10,5,20]",
                "[-1,-2,-3]",
                "[10,-2,-10,-5,20]",
                "[1,2,3,4,5]",
                "[-1,-2,-3,-4,-5]",
                "[0,0,0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]",
                "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]"
            ],
            "outputs": [
                "37",
                "-1",
                "23",
                "15",
                "-1",
                "0",
                "55",
                "-1",
                "210",
                "-1",
                "20",
                "-1",
                "30",
                "-1",
                "40",
                "-1",
                "50",
                "-1",
                "60",
                "-1"
            ]
        }
    },
    "1426": {
        "title": "Count Elements with x+1 in Array",
        "description": "Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.",
        "example": "Example:\n\nInput: arr = [1,2,3]\nOutput: 2\nExplanation: 1 and 2 are counted because 2 and 3 are in arr.",
        "level": "Easy",
        "tags": [
            "array",
            "counting"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3
                ],
                [
                    1,
                    1,
                    3,
                    3,
                    5,
                    5,
                    7,
                    7
                ],
                [
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4
                ],
                [
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11,
                    13,
                    15,
                    17,
                    19
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14,
                    16,
                    18,
                    20
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                2,
                0,
                4,
                0,
                9,
                9,
                0,
                9,
                0,
                0,
                20,
                20,
                15,
                20,
                30,
                20,
                30,
                30,
                30,
                30
            ]
        }
    },
    "1427": {
        "title": "String Shifts",
        "description": "You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [directioni, amounti]`. Perform left or right shifts on the string `s` based on the given shift matrix. Return the final string after all operations.",
        "example": "Example:\n\nInput: s = \"abc\", shift = [[0,1],[1,2]]\nOutput: \"cab\"\nExplanation: \n[0,1] means shift to left by 1. \"abc\" -> \"bca\"\n[1,2] means shift to right by 2. \"bca\" -> \"cab\"",
        "level": "Easy",
        "tags": [
            "string",
            "array"
        ],
        "test_cases": {
            "inputs": [
                "\"abc\"",
                "[[0,1],[1,2]]",
                "\"abcdefg\"",
                "[[1,1],[1,1],[0,2],[1,3]]",
                "\"hello\"",
                "[[0,3],[1,2],[0,1],[1,4]]",
                "\"programming\"",
                "[[1,5],[0,2],[1,3],[0,1],[1,4]]"
            ],
            "outputs": [
                "\"cab\"",
                "\"efgabcd\"",
                "\"lohel\"",
                "\"ingpro\"",
                "\"gprogramming\"",
                "\"gmingprogr\""
            ]
        }
    },
    "1428": null,
    "1429": null,
    "1430": {
        "title": "Valid Sequence in Binary Tree",
        "description": "Given a binary tree where each path going from the root to any leaf forms a valid sequence, check if a given string is a valid sequence in such a binary tree. We get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.",
        "example": "Example:\n\nInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]\nOutput: true\nExplanation: The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). Other valid sequences are: 0 -> 1 -> 1 -> 0, 0 -> 0 -> 0",
        "level": "Medium",
        "tags": [
            "binary tree",
            "valid sequence",
            "path",
            "concatenation"
        ],
        "test_cases": {
            "inputs": [
                {
                    "root": [
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        null,
                        null,
                        1,
                        0,
                        0
                    ],
                    "arr": [
                        0,
                        1,
                        0,
                        1
                    ]
                },
                {
                    "root": [
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        null,
                        null,
                        1,
                        0,
                        0
                    ],
                    "arr": [
                        0,
                        0,
                        1
                    ]
                },
                {
                    "root": [
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        null,
                        null,
                        1,
                        0,
                        0
                    ],
                    "arr": [
                        0,
                        1,
                        1
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        4,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        5,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        3,
                        4,
                        6
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "root": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "arr": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                }
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ]
        }
    },
    "1431": null,
    "1432": {
        "title": "Max Difference After Applying Operations",
        "description": "You are given an integer `num`. You will apply the following steps exactly **two** times:\n\n* Pick a digit `x (0 <= x <= 9)`.\n* Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n* Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n* The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\nReturn the max difference between `a` and `b`.",
        "example": "Example:\n\nInput: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888",
        "level": "Easy",
        "tags": [
            "math",
            "string"
        ],
        "test_cases": {
            "inputs": [
                555,
                9,
                12345,
                100,
                1111,
                987654321,
                0,
                1,
                10,
                123456789,
                999999999,
                1234567890,
                9876543210,
                1234567891,
                9876543219,
                1000000000,
                1000000001,
                1000000002,
                1000000003,
                1000000004
            ],
            "outputs": [
                888,
                8,
                82245,
                100,
                8888,
                987654321,
                0,
                1,
                20,
                876543210,
                900000000,
                1234567890,
                9876543210,
                1234567891,
                9876543219,
                1000000000,
                1000000001,
                1000000002,
                1000000003,
                1000000004
            ]
        }
    },
    "1433": {
        "title": "String Permutation Break",
        "description": "Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words, `s2` can break `s1` or vice-versa. A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.",
        "example": "Given two strings: s1 = `abc `, s2 = `xya `, the function should return true. Explanation: `ayx ` is a permutation of s2 = `xya ` which can break the string `abc ` which is a permutation of s1 = `abc `.",
        "level": "Easy",
        "tags": [
            "string",
            "permutation"
        ],
        "test_cases": {
            "inputs": [
                [
                    "abc ",
                    "xya "
                ],
                [
                    "abe ",
                    "acd "
                ],
                [
                    "leetcodee ",
                    "interview "
                ],
                [
                    "abcd ",
                    "dcba "
                ],
                [
                    "xyz ",
                    "abc "
                ],
                [
                    "hello ",
                    "world "
                ],
                [
                    "good ",
                    "bad "
                ],
                [
                    "apple ",
                    "banana "
                ],
                [
                    "cat ",
                    "dog "
                ],
                [
                    "moon ",
                    "sun "
                ],
                [
                    "abcd ",
                    "efgh "
                ],
                [
                    "xyz ",
                    "xyz "
                ],
                [
                    "abc ",
                    "cba "
                ],
                [
                    "abc ",
                    "abc "
                ],
                [
                    "aaa ",
                    "aaa "
                ],
                [
                    "aaa ",
                    "aab "
                ],
                [
                    "aab ",
                    "aaa "
                ],
                [
                    "aaa ",
                    "baa "
                ],
                [
                    "baa ",
                    "aaa "
                ],
                [
                    "aaa ",
                    "aaa "
                ]
            ],
            "outputs": [
                true,
                false,
                true,
                true,
                false,
                false,
                true,
                false,
                false,
                true,
                false,
                true,
                true,
                true,
                true,
                false,
                true,
                false,
                true,
                true
            ]
        }
    },
    "1434": null,
    "1436": {
        "title": "Destination City",
        "description": "You are given an array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. Return the destination city, that is, the city without any path outgoing to another city. It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.",
        "example": "Example 1:\n\nInput: paths = [['London', 'New York'], ['New York', 'Lima'], ['Lima', 'Sao Paulo']]\nOutput: 'Sao Paulo'\nExplanation: Starting at 'London' city, you will reach 'Sao Paulo' city which is the destination city. Your trip consists of: 'London' -> 'New York' -> 'Lima' -> 'Sao Paulo'.\n\nExample 2:\n\nInput: paths = [['B', 'C'], ['D', 'B'], ['C', 'A']]\nOutput: 'A'\nExplanation: All possible trips are: 'D' -> 'B' -> 'C' -> 'A', 'B' -> 'C' -> 'A', 'C' -> 'A', 'A'. Clearly, the destination city is 'A'.\n\nExample 3:\n\nInput: paths = [['A', 'Z']]\nOutput: 'Z'\nExplanation: The only trip is 'A' -> 'Z'. The destination city is 'Z'.",
        "level": "Easy",
        "tags": [
            "array",
            "graph"
        ],
        "test_cases": {
            "inputs": [
                "[['London', 'New York'], ['New York', 'Lima'], ['Lima', 'Sao Paulo']]",
                "[['B', 'C'], ['D', 'B'], ['C', 'A']]",
                "[['A', 'Z']]",
                "[['X', 'Y'], ['Y', 'Z'], ['Z', 'W'], ['W', 'V'], ['V', 'U'], ['U', 'T'], ['T', 'S'], ['S', 'R'], ['R', 'Q'], ['Q', 'P'], ['P', 'O'], ['O', 'N'], ['N', 'M'], ['M', 'L'], ['L', 'K'], ['K', 'J'], ['J', 'I'], ['I', 'H'], ['H', 'G'], ['G', 'F'], ['F', 'E'], ['E', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'A']]",
                "[['City1', 'City2'], ['City2', 'City3'], ['City3', 'City4'], ['City4', 'City5'], ['City5', 'City6'], ['City6', 'City7'], ['City7', 'City8'], ['City8', 'City9'], ['City9', 'City10'], ['City10', 'City11'], ['City11', 'City12'], ['City12', 'City13'], ['City13', 'City14'], ['City14', 'City15'], ['City15', 'City16'], ['City16', 'City17'], ['City17', 'City18'], ['City18', 'City19'], ['City19', 'City20'], ['City20', 'City21'], ['City21', 'City22'], ['City22', 'City23'], ['City23', 'City24'], ['City24', 'City25'], ['City25', 'City26'], ['City26', 'City27'], ['City27', 'City28'], ['City28', 'City29'], ['City29', 'City30'], ['City30', 'City31'], ['City31', 'City32'], ['City32', 'City33'], ['City33', 'City34'], ['City34', 'City35'], ['City35', 'City36'], ['City36', 'City37'], ['City37', 'City38'], ['City38', 'City39'], ['City39', 'City40'], ['City40', 'City41'], ['City41', 'City42'], ['City42', 'City43'], ['City43', 'City44'], ['City44', 'City45'], ['City45', 'City46'], ['City46', 'City47'], ['City47', 'City48'], ['City48', 'City49'], ['City49', 'City50']]"
            ],
            "outputs": [
                "'Sao Paulo'",
                "'A'",
                "'Z'",
                "'A'",
                "'City50'"
            ]
        }
    },
    "1437": null,
    "1438": null,
    "1439": {
        "title": "Kth Smallest Array Sum",
        "description": "Given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k, you are allowed to choose exactly one element from each row to form an array. Return the kth smallest array sum among all possible arrays.",
        "example": "Example 1:\n\nInput: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are: [1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.\n\nExample 2:\n\nInput: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17\n\nExample 3:\n\nInput: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are: [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[1,3,11],[2,4,6]]",
                "[[1,3,11],[2,4,6]]",
                "[[1,10,10],[1,4,5],[2,3,6]]"
            ],
            "outputs": [
                "5",
                "9",
                "7"
            ]
        }
    },
    "1441": null,
    "1442": {
        "title": "Count Triplets with Equal Bitwise XOR",
        "description": "Given an array of integers `arr`, select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`. Define `a` and `b` as follows: `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]` and `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`. Return the number of triplets (`i`, `j` and `k`) where `a == b`.",
        "example": "Example:\n\nInput: arr = [2,3,1,6,7]\nOutput: 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)",
        "level": "Medium",
        "tags": [
            "array",
            "bitwise operation"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    3,
                    1,
                    6,
                    7
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    4,
                    5,
                    6,
                    7,
                    8
                ],
                [
                    9,
                    9,
                    9,
                    9,
                    9
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ]
            ],
            "outputs": [
                4,
                10,
                0,
                10,
                10,
                0,
                0,
                0,
                0,
                0
            ]
        }
    },
    "1443": {
        "title": "Minimum Time to Collect Apples in an Undirected Tree",
        "description": "Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.",
        "example": "Example:\n\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\nOutput: 8\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.",
        "level": "Medium",
        "tags": [
            "tree",
            "graph",
            "DFS",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            6
                        ]
                    ],
                    [
                        false,
                        false,
                        true,
                        false,
                        true,
                        true,
                        false
                    ]
                ],
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            6
                        ]
                    ],
                    [
                        false,
                        false,
                        true,
                        false,
                        false,
                        true,
                        false
                    ]
                ],
                [
                    7,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            1,
                            5
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            2,
                            6
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false
                    ]
                ],
                [
                    5,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ]
                    ],
                    [
                        false,
                        false,
                        true,
                        false,
                        true
                    ]
                ],
                [
                    3,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ]
                    ],
                    [
                        false,
                        true,
                        false
                    ]
                ],
                [
                    4,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            3
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        true
                    ]
                ],
                [
                    6,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            2,
                            5
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false
                    ]
                ],
                [
                    8,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            4,
                            7
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        true
                    ]
                ],
                [
                    10,
                    [
                        [
                            0,
                            1
                        ],
                        [
                            0,
                            2
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            2,
                            6
                        ],
                        [
                            4,
                            7
                        ],
                        [
                            4,
                            8
                        ],
                        [
                            5,
                            9
                        ]
                    ],
                    [
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        false,
                        true,
                        false,
                        true
                    ]
                ],
                [
                    2,
                    [
                        [
                            0,
                            1
                        ]
                    ],
                    [
                        true,
                        false
                    ]
                ]
            ],
            "outputs": [
                8,
                6,
                0,
                4,
                2,
                2,
                0,
                6,
                8,
                1
            ]
        }
    },
    "1444": {
        "title": "Pizza Cutting",
        "description": "Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts. For each cut, you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person. Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.",
        "example": "Example:\n\nInput: pizza = [ \"A.. \", \"AAA \", \"... \"], k = 3\nOutput: 3\nExplanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                {
                    "pizza": [
                        "A.. ",
                        "AAA ",
                        "... "
                    ],
                    "k": 3
                },
                {
                    "pizza": [
                        "A.. ",
                        "AA. ",
                        "... "
                    ],
                    "k": 3
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 1
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 2
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 4
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 5
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 6
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 7
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 8
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 9
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 10
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 11
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 12
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 13
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 14
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 15
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 16
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 17
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 18
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 19
                },
                {
                    "pizza": [
                        "A.. ",
                        "A.. ",
                        "... "
                    ],
                    "k": 20
                }
            ],
            "outputs": [
                3,
                1,
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32768,
                65536,
                131072,
                262144
            ]
        }
    },
    "1446": {
        "title": "String Power",
        "description": "The power of a string is defined as the maximum length of a non-empty substring that contains only one unique character. Given a string `s`, write a function to return the power of `s`.",
        "example": "Example:\n\nInput: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.",
        "level": "Easy",
        "tags": [
            "string",
            "substring",
            "iteration"
        ],
        "test_cases": {
            "inputs": [
                "\"leetcode\"",
                "\"abbcccddddeeeeedcba\"",
                "\"a\"",
                "\"abcde\"",
                "\"aaaaaa\"",
                "\"aabbbccc\"",
                "\"xyzxyzxyz\"",
                "\"hello world\"",
                "\"racecar\"",
                "\"programming\""
            ],
            "outputs": [
                "2",
                "5",
                "1",
                "1",
                "6",
                "3",
                "3",
                "1",
                "7",
                "2"
            ]
        }
    },
    "1447": {
        "title": "Simplified Fractions",
        "description": "Given an integer `n`, return a list of all **simplified** fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. You can return the answer in any order.",
        "example": "Example 1:\n\nInput: n = 2\nOutput: [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.",
        "level": "Easy",
        "tags": [
            "Math",
            "Fractions"
        ],
        "test_cases": {
            "inputs": [
                2,
                3,
                4,
                5,
                10,
                20,
                50,
                100
            ],
            "outputs": [
                [
                    "1/2"
                ],
                [
                    "1/2",
                    "1/3",
                    "2/3"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "2/3",
                    "3/4"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "1/5",
                    "2/3",
                    "3/4",
                    "4/5"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "1/5",
                    "1/6",
                    "1/7",
                    "1/8",
                    "1/9",
                    "1/10",
                    "2/3",
                    "2/5",
                    "3/4",
                    "3/5",
                    "4/5",
                    "4/7",
                    "5/6",
                    "5/7",
                    "6/7",
                    "7/8",
                    "9/10"
                ],
                [
                    "1/2",
                    "1/3",
                    "1/4",
                    "1/5",
                    "1/6",
                    "1/7",
                    "1/8",
                    "1/9",
                    "1/10",
                    "1/11",
                    "1/12",
                    "1/13",
                    "1/14",
                    "1/15",
                    "1/16",
                    "1/17",
                    "1/18",
                    "1/19",
                    "1/20",
                    "2/3",
                    "2/5",
                    "2/7",
                    "2/9",
                    "2/11",
                    "2/13",
                    "2/15",
                    "2/17",
                    "2/19",
                    "3/4",
                    "3/5",
                    "3/7",
                    "3/8",
                    "3/11",
                    "3/13",
                    "3/16",
                    "3/17",
                    "3/19",
                    "4/5",
                    "4/7",
                    "4/9",
                    "4/11",
                    "4/13",
                    "4/15",
                    "4/17",
                    "4/19",
                    "5/6",
                    "5/7",
                    "5/8",
                    "5/9",
                    "5/11",
                    "5/12",
                    "5/13",
                    "5/14",
                    "5/16",
                    "5/17",
                    "5/19",
                    "6/7",
                    "6/11",
                    "6/13",
                    "6/17",
                    "6/19",
                    "7/8",
                    "7/9",
                    "7/11",
                    "7/13",
                    "7/15",
                    "7/16",
                    "7/17",
                    "7/19",
                    "8/9",
                    "8/11",
                    "8/13",
                    "8/15",
                    "8/17",
                    "8/19",
                    "9/10",
                    "9/11",
                    "9/13",
                    "9/14",
                    "9/16",
                    "9/17",
                    "9/19",
                    "10/11",
                    "10/13",
                    "10/17",
                    "10/19",
                    "11/12",
                    "11/13",
                    "11/14",
                    "11/15",
                    "11/16",
                    "11/17",
                    "11/19",
                    "12/13",
                    "12/17",
                    "12/19",
                    "13/14",
                    "13/15",
                    "13/16",
                    "13/17",
                    "13/19",
                    "14/15",
                    "14/17",
                    "14/19",
                    "15/16",
                    "15/17",
                    "15/19",
                    "16/17",
                    "16/19",
                    "17/18",
                    "17/19",
                    "18/19",
                    "19/20"
                ]
            ]
        }
    },
    "1448": null,
    "1449": {
        "title": "Maximum Painted Integer",
        "description": "Given an array of integers `cost` and an integer `target`, you need to paint an integer using the digits 1 to 9. Each digit has a cost associated with it, given by the `cost` array. The goal is to paint the maximum possible integer with a total cost equal to the `target`. The cost of painting a digit `(i + 1)` is given by `cost[i]` (0-indexed). The integer should not contain any 0 digits. Return the maximum integer as a string. If it is not possible to paint any integer with the given target cost, return '0'.",
        "example": "For example, given the `cost` array [4,3,2,5,6,7,2,5,5] and the `target` cost 9, the maximum painted integer is '7772'. The cost to paint the digit '7' is 2, and the digit '2' is 3. The total cost of painting '7772' is 2*3 + 3*1 = 9. Another possible solution is '977', but '7772' is the largest number that can be painted.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[4,3,2,5,6,7,2,5,5]",
                "[7,6,5,5,5,6,8,7,8]",
                "[2,4,6,2,4,6,4,4,4]",
                "[1,1,1,1,1,1,1,1,1]",
                "[5,5,5,5,5,5,5,5,5]",
                "[1,2,3,4,5,6,7,8,9]",
                "[9,8,7,6,5,4,3,2,1]",
                "[1,1,1,1,1,1,1,1,100]",
                "[100,100,100,100,100,100,100,100,100]",
                "[5000,5000,5000,5000,5000,5000,5000,5000,5000]"
            ],
            "outputs": [
                "\"7772\"",
                "\"85\"",
                "\"0\"",
                "\"111111111\"",
                "\"\"",
                "\"987654321\"",
                "\"1\"",
                "\"100\"",
                "\"\"",
                "\"999999999\""
            ]
        }
    },
    "1450": {
        "title": "Number of Students Doing Homework at a Given Time",
        "description": "Given two integer arrays `startTime` and `endTime` and an integer `queryTime`, find the number of students doing their homework at the given time. Each student starts their homework at `startTime[i]` and finishes it at `endTime[i]`. Return the count of students where `queryTime` falls within the interval `[startTime[i], endTime[i]]` inclusive.",
        "example": "Example:\n\nInput: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: There are 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
        "level": "Easy",
        "tags": [
            "array",
            "interval"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3]",
                "[3,2,7]",
                "4",
                "[4]",
                "[4]",
                "4",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "7",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "15",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "25",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "0",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[2,4,6,8,10,12,14,16,18,20]",
                "1"
            ],
            "outputs": [
                "1",
                "1",
                "0",
                "1",
                "1",
                "0",
                "1",
                "5",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0"
            ]
        }
    },
    "1451": {
        "title": "Rearrange Words in Sentence",
        "description": "Given a sentence `text` (A _sentence_ is a string of space-separated words) in the following format: First letter is in upper case. Each word in `text` is separated by a single space. Your task is to rearrange the words in `text` such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order. Return the new text following the format shown above.",
        "example": "Example:\n\nInput: text =  \"Leetcode is cool \"\nOutput:  \"Is cool leetcode \"\nExplanation: There are 3 words,  \"Leetcode \" of length 8,  \"is \" of length 2 and  \"cool \" of length 4. Output is ordered by length and the new first word starts with a capital letter.",
        "level": "Easy",
        "tags": [
            "string",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "Leetcode is cool",
                "Keep calm and code on",
                "To be or not to be",
                "This is a test",
                "Hello world",
                "I love coding",
                "The quick brown fox",
                "Python is awesome",
                "Happy coding",
                "Programming is fun",
                "This is an example",
                "Let's solve it",
                "Coding is life",
                "I am a programmer",
                "This is a sentence",
                "Sorting is important",
                "I enjoy challenges",
                "Let's start coding",
                "The cat is black",
                "I am learning"
            ],
            "outputs": [
                "Is cool leetcode",
                "On and keep calm code",
                "To be or to be not",
                "A is this test",
                "Hello world",
                "I love coding",
                "The fox quick brown",
                "Is python awesome",
                "Coding happy",
                "Is fun programming",
                "An is this example",
                "Let's it solve",
                "Coding is life",
                "I am a programmer",
                "A is this sentence",
                "Is sorting important",
                "I enjoy challenges",
                "Let's coding start",
                "The cat is black",
                "I am learning"
            ]
        }
    },
    "1452": {
        "title": "Subset of Favorite Companies",
        "description": "Given an array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorite companies for the `ith` person (indexed from 0), return the indices of people whose list of favorite companies is not a subset of any other list of favorite companies. The indices should be returned in increasing order.",
        "example": "Example 1:\n\nInput: favoriteCompanies = [[\"leetcode\", \"google\", \"facebook\"],[\"google\", \"microsoft\"],[\"google\", \"facebook\"],[\"google\"],[\"amazon\"]]\nOutput: [0,1,4]\nExplanation: Person with index 2 has favoriteCompanies[2] = [\"google\", \"facebook\"] which is a subset of favoriteCompanies[0] = [\"leetcode\", \"google\", \"facebook\"] corresponding to the person with index 0. Person with index 3 has favoriteCompanies[3] = [\"google\"] which is a subset of favoriteCompanies[0] = [\"leetcode\", \"google\", \"facebook\"] and favoriteCompanies[1] = [\"google\", \"microsoft\"]. Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].\n\nExample 2:\n\nInput: favoriteCompanies = [[\"leetcode\", \"google\", \"facebook\"],[\"leetcode\", \"amazon\"],[\"facebook\", \"google\"]]\nOutput: [0,1]\nExplanation: In this case favoriteCompanies[2] = [\"facebook\", \"google\"] is a subset of favoriteCompanies[0] = [\"leetcode\", \"google\", \"facebook\"], therefore, the answer is [0,1].\n\nExample 3:\n\nInput: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\nOutput: [0,1,2,3]\nExplanation: All lists of favorite companies are distinct and not a subset of any other list, therefore, the answer is [0,1,2,3].",
        "level": "Medium",
        "tags": [
            "array",
            "subset",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[[\"leetcode\", \"google\", \"facebook\"],[\"google\", \"microsoft\"],[\"google\", \"facebook\"],[\"google\"],[\"amazon\"]]",
                "[[\"leetcode\", \"google\", \"facebook\"],[\"leetcode\", \"amazon\"],[\"facebook\", \"google\"]]",
                "[[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\", \"netflix\"]]",
                "[[\"apple\", \"microsoft\", \"google\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\", \"google\", \"facebook\"],[\"google\", \"facebook\"],[\"apple\", \"microsoft\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\"],[\"apple\", \"microsoft\", \"google\", \"facebook\", \"amazon\", \"netflix\", \"spotify\", \"twitter\", \"linkedin\", \"uber\", \"airbnb\", \"paypal\", \"ebay\", \"spotify\", \"netflix\", \"google\"]]"
            ],
            "outputs": [
                "[0,1,4]",
                "[0,1]",
                "[0,1,2,3]",
                "[0,1,2,3,4]",
                "[0,1,2,3,4,5]",
                "[0,1,2,3,4,5,6]",
                "[0,1,2,3,4,5,6,7]",
                "[0,1,2,3,4,5,6,7,8]",
                "[0,1,2,3,4,5,6,7,8,9]",
                "[0,1,2,3,4,5,6,7,8,9,10]",
                "[0,1,2,3,4,5,6,7,8,9,10,11]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
                "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]"
            ]
        }
    },
    "1453": {
        "title": "Maximum Darts on Dartboard",
        "description": "Alice is throwing `n` darts on a very large wall. You are given an array `darts` where `darts[i] = [xi, yi]` is the position of the `ith` dart that Alice threw on the wall.\n\nBob knows the positions of the `n` darts on the wall. He wants to place a dartboard of radius `r` on the wall so that the maximum number of darts that Alice throws lies on the dartboard.\n\nGiven the integer `r`, return the maximum number of darts that can lie on the dartboard.",
        "example": "Example 1:\n\nInput: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\nExample 2:\n\nInput: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).",
        "level": "Medium",
        "tags": [
            "geometry",
            "mathematics"
        ],
        "test_cases": {
            "inputs": [
                "[[0,0],[1,1],[2,2],[3,3],[4,4]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89]]",
                "[[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99]]"
            ],
            "outputs": [
                "5",
                "10",
                "11",
                "20",
                "21",
                "30",
                "31",
                "40",
                "41",
                "50"
            ]
        }
    },
    "1455": {
        "title": "Prefix Word Index",
        "description": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in the sentence. Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word, return -1. A prefix of a string s is any leading contiguous substring of s.",
        "example": "Example:\n\nInput: sentence = \"i love eating burger\", searchWord = \"burg\"\nOutput: 4\nExplanation: \"burg\" is a prefix of \"burger\" which is the 4th word in the sentence.",
        "level": "Easy",
        "tags": [
            "string",
            "search"
        ],
        "test_cases": {
            "inputs": [
                "\"i love eating burger\"",
                "\"burg\"",
                "\"this problem is an easy problem\"",
                "\"pro\"",
                "\"i am tired\"",
                "\"you\"",
                "\"hello world\"",
                "\"hello\"",
                "\"hello world\"",
                "\"world\"",
                "\"coding is fun\"",
                "\"coding\"",
                "\"coding is fun\"",
                "\"fun\"",
                "\"the quick brown fox jumps over the lazy dog\"",
                "\"quick\"",
                "\"the quick brown fox jumps over the lazy dog\"",
                "\"dog\"",
                "\"I can`t believe it\"",
                "\"can`t\"",
                "\"I don`t know\"",
                "\"don`t\"",
                "\"Bachelor`s degree\"",
                "\"Bachelor`s\""
            ],
            "outputs": [
                "4",
                "2",
                "-1",
                "2",
                "-1",
                "-1",
                "1",
                "1",
                "1",
                "2",
                "1",
                "1",
                "1",
                "3",
                "2",
                "1",
                "6",
                "9",
                "-1",
                "2",
                "-1",
                "2",
                "1",
                "1"
            ]
        }
    },
    "1456": {
        "title": "Maximum Vowels in Substring",
        "description": "Given a string `s` and an integer `k`, return the maximum number of vowel letters in any substring of `s` with length `k`. Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.",
        "example": "Example:\n\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.",
        "level": "Easy",
        "tags": [
            "string",
            "substring",
            "vowels"
        ],
        "test_cases": {
            "inputs": [
                "\"abciiidef\"",
                "\"aeiou\"",
                "\"leetcode\"",
                "\"hello\"",
                "\"programming\"",
                "\"algorithm\"",
                "\"python\"",
                "\"java\"",
                "\"coding\"",
                "\"problem\"",
                "\"computer\"",
                "\"science\"",
                "\"data\"",
                "\"structure\"",
                "\"algorithm\"",
                "\"code\"",
                "\"challenge\"",
                "\"interview\"",
                "\"practice\"",
                "\"solution\"",
                "\"test\""
            ],
            "outputs": [
                "3",
                "2",
                "2",
                "1",
                "2",
                "3",
                "1",
                "1",
                "1",
                "1",
                "2",
                "2",
                "1",
                "1",
                "2",
                "1",
                "2",
                "2",
                "1",
                "1"
            ]
        }
    },
    "1457": null,
    "1458": {
        "title": "Maximum Dot Product of Subsequences",
        "description": "Given two arrays `nums1` and `nums2`, find the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length. A subsequence of an array is a new array formed by deleting some (can be none) of the elements without changing the relative order of the remaining elements. For example, [2,3,5] is a subsequence of [1,2,3,4,5], while [1,5,3] is not.",
        "example": "Example 1:\n\nInput: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2. Their dot product is (2*3 + (-2)*(-6)) = 18.\n\nExample 2:\n\nInput: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2. Their dot product is (3*7) = 21.\n\nExample 3:\n\nInput: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2. Their dot product is -1.",
        "level": "Medium",
        "tags": [
            "array",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "[2,1,-2,5]",
                "[3,0,-6]",
                "[3,-2]",
                "[2,-6,7]",
                "[-1,-1]",
                "[1,1]",
                "[1,2,3,4,5]",
                "[2,3,5]",
                "[1,5,3]",
                "[-1,0,1]",
                "[0,0,0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[10,9,8,7,6,5,4,3,2,1]",
                "[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]"
            ],
            "outputs": [
                "18",
                "21",
                "-1",
                "18",
                "-1",
                "1",
                "55",
                "55",
                "0",
                "0",
                "0",
                "385",
                "385",
                "385",
                "385",
                "385",
                "-385",
                "-385",
                "-385",
                "-385"
            ]
        }
    },
    "1460": {
        "title": "Reverse Subarray to Target",
        "description": "You are given two integer arrays of equal length `target` and `arr`. In one step, you can select any **non-empty subarray** of `arr` and reverse it. You are allowed to make any number of steps. Return `true` if you can make `arr` equal to `target` or `false` otherwise.",
        "example": "Example:\n\nInput: target = [1,2,3,4], arr = [2,4,1,3]\nOutput: true\nExplanation: You can follow the next steps to convert arr to target:\n1- Reverse subarray [2,4,1], arr becomes [1,4,2,3]\n2- Reverse subarray [4,2], arr becomes [1,2,4,3]\n3- Reverse subarray [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so.",
        "level": "Medium",
        "tags": [
            "array",
            "subarray",
            "reversal"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4]",
                "[2,4,1,3]",
                "[7]",
                "[7]",
                "[3,7,9]",
                "[3,7,11]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1]",
                "[1,2,3,4,5]",
                "[1,2,3,5,4]",
                "[1,2,3,4,5]",
                "[1,2,3,4,6]",
                "[1,2,3,4,5]",
                "[5,4,3,2,6]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,6]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,7]",
                "[1,2,3,4,5]",
                "[5,4,3,2,1,5]"
            ],
            "outputs": [
                "true",
                "true",
                "true",
                "true",
                "false",
                "false",
                "true",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "1461": {
        "title": "Binary Substring Check",
        "description": "Given a binary string `s` and an integer `k`, return `true` if every binary code of length `k` is a substring of `s`. Otherwise, return `false`.",
        "example": "Example 1:\n\nInput: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\", and \"11\". They can all be found as substrings at indices 0, 1, 3, and 2 respectively.",
        "level": "Easy",
        "tags": [
            "String",
            "Substring",
            "Binary"
        ],
        "test_cases": {
            "inputs": [
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\"",
                "\"00110110\"",
                "\"0110\"",
                "\"0110\"",
                "\"00110110\""
            ],
            "outputs": [
                "2",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4",
                "0",
                "1",
                "2",
                "3",
                "4"
            ]
        }
    },
    "1462": {
        "title": "Course Prerequisites",
        "description": "You are given a list of courses labeled from 0 to numCourses - 1. Each course has a list of prerequisites that must be completed before taking the course. Prerequisites can be direct or indirect. You are given a list of queries, and for each query, you need to determine if the first course is a prerequisite of the second course.",
        "example": "For example, if numCourses = 3 and prerequisites = [[1,2],[1,0],[2,0]], and queries = [[1,0],[1,2]], the output should be [true,true]. The prerequisites are: 1 -> 2 -> 0, so 1 is a prerequisite of 0 and 2 is a prerequisite of 0.",
        "level": "Medium",
        "tags": [
            "Graphs",
            "Topological Sort"
        ],
        "test_cases": {
            "inputs": [
                [
                    2,
                    [
                        [
                            1,
                            0
                        ]
                    ],
                    [
                        [
                            0,
                            1
                        ],
                        [
                            1,
                            0
                        ]
                    ]
                ],
                [
                    2,
                    [],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            0,
                            1
                        ]
                    ]
                ],
                [
                    3,
                    [
                        [
                            1,
                            2
                        ],
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            0
                        ]
                    ],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            1,
                            2
                        ]
                    ]
                ],
                [
                    4,
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ]
                    ],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ]
                    ]
                ],
                [
                    5,
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            3
                        ]
                    ],
                    [
                        [
                            1,
                            0
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            4,
                            0
                        ]
                    ]
                ]
            ],
            "outputs": [
                [
                    false,
                    true
                ],
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ],
                [
                    true,
                    false,
                    false
                ],
                [
                    true,
                    false,
                    false,
                    false
                ]
            ]
        }
    },
    "1463": {
        "title": "Maximum Cherry Collection",
        "description": "You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\nYou have two robots that can collect cherries for you:\n\n*   **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n*   **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\nReturn the maximum number of cherries collected using both robots by following the rules below:\n\n*   From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`.\n*   When any robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell.\n*   When both robots stay in the same cell, only one takes the cherries.\n*   Both robots cannot move outside of the grid at any moment.\n*   Both robots should reach the bottom row in `grid`.",
        "example": "Example:\n\nInput: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\nOutput: 24\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal cherries collected: 12 + 12 = 24.",
        "level": "Medium",
        "tags": [
            "matrix",
            "dynamic programming",
            "greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    [
                        3,
                        1,
                        1
                    ],
                    [
                        2,
                        5,
                        1
                    ],
                    [
                        1,
                        5,
                        5
                    ],
                    [
                        2,
                        1,
                        1
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ]
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    [
                        7,
                        8,
                        9
                    ]
                ],
                [
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        0,
                        0
                    ]
                ],
                [
                    [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    [
                        3,
                        3,
                        3,
                        3,
                        3
                    ],
                    [
                        4,
                        4,
                        4,
                        4,
                        4
                    ]
                ],
                [
                    [
                        5
                    ]
                ],
                [
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ],
                    [
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ],
                    [
                        2,
                        0,
                        0,
                        0,
                        0,
                        3,
                        0
                    ],
                    [
                        2,
                        0,
                        9,
                        0,
                        0,
                        0,
                        0
                    ],
                    [
                        0,
                        3,
                        0,
                        5,
                        4,
                        0,
                        0
                    ],
                    [
                        1,
                        0,
                        2,
                        3,
                        0,
                        0,
                        6
                    ]
                ]
            ],
            "outputs": [
                24,
                28,
                17,
                0,
                20,
                5,
                140
            ]
        }
    },
    "1464": {
        "title": "Maximum Product of Two Elements in an Array",
        "description": "Given an array of integers `nums`, you need to choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.",
        "example": "Example 1:\n\nInput: nums = [3,4,5,2]\nOutput: 12\nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.\n\nExample 2:\n\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n\nExample 3:\n\nInput: nums = [3,7]\nOutput: 12",
        "level": "Easy",
        "tags": [
            "array",
            "math"
        ],
        "test_cases": {
            "inputs": [
                [
                    3,
                    4,
                    5,
                    2
                ],
                [
                    1,
                    5,
                    4,
                    5
                ],
                [
                    3,
                    7
                ],
                [
                    10,
                    20,
                    30,
                    40
                ],
                [
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    5,
                    10,
                    15,
                    20
                ],
                [
                    100,
                    200,
                    300,
                    400
                ],
                [
                    7,
                    8,
                    9,
                    10
                ],
                [
                    5,
                    5,
                    5,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    9,
                    8,
                    7,
                    6
                ],
                [
                    15,
                    25,
                    35,
                    45
                ],
                [
                    1000,
                    500,
                    250,
                    125
                ],
                [
                    2,
                    3,
                    5,
                    7
                ]
            ],
            "outputs": [
                12,
                16,
                12,
                1176,
                1,
                0,
                285,
                119600,
                72,
                16,
                6,
                56,
                1200,
                124875000,
                24
            ]
        }
    },
    "1465": {
        "title": "Maximum Area of a Piece of Cake",
        "description": "You are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts`. The `horizontalCuts` array represents the distances from the top of the rectangular cake to each horizontal cut, and the `verticalCuts` array represents the distances from the left of the rectangular cake to each vertical cut. Your task is to find the maximum area of a piece of cake after making the cuts at each horizontal and vertical position provided in the arrays. Return the maximum area modulo `10^9 + 7`.",
        "example": "For example, consider a rectangular cake of size 5x4. The `horizontalCuts` array is [1, 2, 4] and the `verticalCuts` array is [1, 3]. After making the cuts, the green piece of cake has the maximum area, which is 4.\n\nInput:\n\nh = 5, w = 4\nhorizontalCuts = [1, 2, 4]\nverticalCuts = [1, 3]\n\nOutput:\n\n4",
        "level": "Medium",
        "tags": [
            "Math",
            "Modulo",
            "Arrays"
        ],
        "test_cases": {
            "inputs": [
                [
                    5,
                    4,
                    [
                        1,
                        2,
                        4
                    ],
                    [
                        1,
                        3
                    ]
                ],
                [
                    5,
                    4,
                    [
                        3,
                        1
                    ],
                    [
                        1
                    ]
                ],
                [
                    5,
                    4,
                    [
                        3
                    ],
                    [
                        3
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    2,
                    2,
                    [
                        1
                    ],
                    [
                        1
                    ]
                ],
                [
                    1000000000,
                    1000000000,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ],
                [
                    10,
                    10,
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                ],
                [
                    2,
                    2,
                    [
                        1,
                        2
                    ],
                    [
                        1,
                        2
                    ]
                ]
            ],
            "outputs": [
                4,
                6,
                9,
                25,
                1,
                999999937,
                36,
                36,
                64,
                1
            ]
        }
    }
}