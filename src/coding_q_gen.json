{
    "1": {
        "title": "Two Sum",
        "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
        "example": "Given an array nums = [2,7,11,15] and target = 9, the output should be [0,1] because nums[0] + nums[1] = 2 + 7 = 9.",
        "level": "Easy",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums": [
                        2,
                        7,
                        11,
                        15
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        3,
                        2,
                        4
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        3,
                        3
                    ],
                    "target": 6
                },
                {
                    "nums": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "target": 9
                },
                {
                    "nums": [
                        10,
                        20,
                        30,
                        40,
                        50
                    ],
                    "target": 70
                },
                {
                    "nums": [
                        0,
                        0,
                        0,
                        0,
                        0
                    ],
                    "target": 0
                },
                {
                    "nums": [
                        -1,
                        -2,
                        -3,
                        -4,
                        -5
                    ],
                    "target": -8
                },
                {
                    "nums": [
                        100,
                        200,
                        300,
                        400,
                        500
                    ],
                    "target": 600
                },
                {
                    "nums": [
                        1,
                        3,
                        5,
                        7,
                        9
                    ],
                    "target": 12
                },
                {
                    "nums": [
                        2,
                        4,
                        6,
                        8,
                        10
                    ],
                    "target": 14
                },
                {
                    "nums": [
                        9,
                        8,
                        7,
                        6,
                        5
                    ],
                    "target": 14
                },
                {
                    "nums": [
                        5,
                        10,
                        15,
                        20,
                        25
                    ],
                    "target": 30
                },
                {
                    "nums": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "target": 2
                },
                {
                    "nums": [
                        2,
                        2,
                        2,
                        2,
                        2
                    ],
                    "target": 4
                },
                {
                    "nums": [
                        3,
                        6,
                        9,
                        12,
                        15
                    ],
                    "target": 18
                },
                {
                    "nums": [
                        4,
                        8,
                        12,
                        16,
                        20
                    ],
                    "target": 24
                },
                {
                    "nums": [
                        5,
                        5,
                        5,
                        5,
                        5
                    ],
                    "target": 10
                },
                {
                    "nums": [
                        6,
                        12,
                        18,
                        24,
                        30
                    ],
                    "target": 36
                },
                {
                    "nums": [
                        7,
                        14,
                        21,
                        28,
                        35
                    ],
                    "target": 42
                },
                {
                    "nums": [
                        8,
                        16,
                        24,
                        32,
                        40
                    ],
                    "target": 48
                }
            ],
            "outputs": [
                [
                    0,
                    1
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    1,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    2
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    3
                ],
                [
                    0,
                    1
                ],
                [
                    0,
                    1
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    4
                ],
                [
                    1,
                    3
                ],
                [
                    0,
                    2
                ],
                [
                    1,
                    3
                ]
            ]
        }
    },
    "3": {
        "title": "Longest Substring Without Repeating Characters",
        "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
        "example": "Example 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
        "level": "Medium",
        "tags": [
            "string",
            "sliding window",
            "hash table"
        ],
        "test_cases": {
            "inputs": [
                "\"abcabcbb\"",
                "\"bbbbb\"",
                "\"pwwkew\"",
                "\"\"",
                "\"a\"",
                "\"abcdefg\"",
                "\"aab\"",
                "\"abb\"",
                "\"abcabcabc\"",
                "\"abcdeffghijklmnopqrstuvwxyz\""
            ],
            "outputs": [
                "3",
                "1",
                "3",
                "0",
                "1",
                "7",
                "2",
                "2",
                "3",
                "26"
            ]
        }
    },
    "4": {
        "title": "Median of Two Sorted Arrays",
        "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
        "example": "Given nums1 = [1,3] and nums2 = [2], the merged array is [1,2,3] and the median is 2.0.",
        "level": "Medium",
        "tags": [
            "array",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                {
                    "nums1": [
                        1,
                        3
                    ],
                    "nums2": [
                        2
                    ]
                },
                {
                    "nums1": [
                        1,
                        2
                    ],
                    "nums2": [
                        3,
                        4
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        5,
                        9
                    ],
                    "nums2": [
                        3,
                        4,
                        6,
                        7,
                        8
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "nums2": [
                        6,
                        7,
                        8,
                        9,
                        10
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "nums2": [
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "nums2": [
                        7,
                        8,
                        9,
                        10,
                        11
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "nums2": [
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "nums2": [
                        8,
                        9,
                        10,
                        11,
                        12
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "nums2": [
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "nums2": [
                        9,
                        10,
                        11,
                        12,
                        13
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "nums2": [
                        9,
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "nums2": [
                        10,
                        11,
                        12,
                        13,
                        14
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "nums2": [
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "nums2": [
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "nums2": [
                        11,
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    "nums2": [
                        12,
                        13,
                        14,
                        15,
                        16
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11
                    ],
                    "nums2": [
                        12,
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "nums2": [
                        13,
                        14,
                        15,
                        16,
                        17
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "nums2": [
                        13,
                        14,
                        15,
                        16,
                        17,
                        18
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "nums2": [
                        14,
                        15,
                        16,
                        17,
                        18
                    ]
                },
                {
                    "nums1": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "nums2": [
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ]
                }
            ],
            "outputs": [
                2.0,
                2.5,
                5.5,
                5.5,
                6.0,
                6.0,
                6.5,
                6.5,
                7.0,
                7.0,
                7.5,
                7.5,
                8.0,
                8.0,
                8.5,
                8.5,
                9.0,
                9.0,
                9.5,
                9.5
            ]
        }
    },
    "6": {
        "title": "Zigzag Conversion",
        "description": "The string `PAYPALISHIRING` is written in a zigzag pattern on a given number of rows. Write a function `convert` that takes a string and the number of rows and returns the string in the zigzag pattern.",
        "example": "Example 1:\n\nInput: s = `PAYPALISHIRING`, numRows = 3\nOutput: `PAHNAPLSIIGYIR`\n\nExample 2:\n\nInput: s = `PAYPALISHIRING`, numRows = 4\nOutput: `PINALSIGYAHRPI`\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\nExample 3:\n\nInput: s = `A`, numRows = 1\nOutput: `A`",
        "level": "Medium",
        "tags": [
            "string",
            "pattern"
        ],
        "test_cases": {
            "inputs": [
                "`PAYPALISHIRING`",
                "`PAYPALISHIRING`",
                "`A`",
                "`HELLO`",
                "`WORLD`",
                "`ZIGZAG`",
                "`CONVERSION`",
                "`CODING`",
                "`QUESTION`",
                "`EXAMPLE`",
                "`TEST`",
                "`CASES`",
                "`ZIGZAGCONVERSION`",
                "`STRING`",
                "`PATTERN`",
                "`ALGORITHM`",
                "`PROGRAMMING`",
                "`CHALLENGE`",
                "`SOLUTION`",
                "`LEETCODE`"
            ],
            "outputs": [
                "`PAHNAPLSIIGYIR`",
                "`PINALSIGYAHRPI`",
                "`A`",
                "`HLOEL`",
                "`WDLRO`",
                "`ZGZAI`",
                "`CNOIOTVN`",
                "`CIGDNO`",
                "`QETNUSO`",
                "`EPEXMLA`",
                "`TSET`",
                "`SECA`",
                "`ZGZAIOTNNOVC`",
                "`SRTNI`",
                "`PTNREA`",
                "`AOLGMRITHM`",
                "`PORMGAMRIN`",
                "`CEGELLNAH`",
                "`NIOITULOS`",
                "`ETACODEEL`"
            ]
        }
    },
    "7": {
        "title": "Reverse Integer",
        "description": "Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).",
        "example": "Example 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21",
        "level": "Easy",
        "tags": [
            "Math"
        ],
        "test_cases": {
            "inputs": [
                123,
                -123,
                120,
                0,
                1,
                -1,
                10,
                -10,
                100,
                -100,
                123456789,
                -123456789,
                2147483647,
                -2147483648,
                2147483646,
                -2147483647,
                1534236469,
                -2147483412,
                0,
                987654321
            ],
            "outputs": [
                321,
                -321,
                21,
                0,
                1,
                -1,
                1,
                -1,
                1,
                -1,
                987654321,
                -987654321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                123456789
            ]
        }
    },
    "9": {
        "title": "Palindrome Integer",
        "description": "Given an integer `x`, determine if it is a palindrome. Return `true` if `x` is a palindrome, and `false` otherwise.",
        "example": "Example 1:\n\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.",
        "level": "Easy",
        "tags": [
            "math"
        ],
        "test_cases": {
            "inputs": [
                121,
                -121,
                10,
                12321,
                1234321,
                123454321,
                12345654321,
                123456654321,
                1234567654321,
                12345677654321,
                123456787654321,
                1234567887654321,
                12345678987654321,
                123456789987654321,
                1234567890987654321,
                12345678900987654321,
                123456789000987654321,
                1234567890000987654321,
                12345678900000987654321,
                123456789000000987654321
            ],
            "outputs": [
                true,
                false,
                false,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true,
                true
            ]
        }
    },
    "2": {
        "title": "Add Two Numbers as Linked Lists",
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
        "example": "Example:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.",
        "level": "Medium",
        "tags": [
            "linked list",
            "math"
        ],
        "test_cases": {
            "inputs": [
                "[2,4,3]",
                "[5,6,4]",
                "[0]",
                "[0]",
                "[9,9,9,9,9,9,9]",
                "[9,9,9,9]"
            ],
            "outputs": [
                "[7,0,8]",
                "[0]",
                "[8,9,9,9,0,0,0,1]"
            ]
        }
    },
    "5": {
        "title": "Longest Palindromic Substring",
        "description": "Given a string `s`, find and return the longest palindromic substring in `s`. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them.",
        "example": "Example 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"",
        "level": "Medium",
        "tags": [
            "String",
            "Dynamic Programming"
        ],
        "test_cases": {
            "inputs": [
                "\"babad\"",
                "\"cbbd\"",
                "\"a\"",
                "\"ac\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcbafg\"",
                "\"abcdefedcbagf\"",
                "\"abacdfgdcaba\"",
                "\"abacdfgdcabba\"",
                "\"abacdfgdcabbaa\"",
                "\"abacdfgdcabbaaa\"",
                "\"abacdfgdcabbaaaa\"",
                "\"abacdfgdcabbaaaaa\"",
                "\"abacdfgdcabbaaaaaa\"",
                "\"abacdfgdcabbaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaaa\"",
                "\"abacdfgdcabbaaaaaaaaaa\""
            ],
            "outputs": [
                "\"bab\"",
                "\"bb\"",
                "\"a\"",
                "\"a\"",
                "\"bb\"",
                "\"racecar\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"abcdeedcba\"",
                "\"abcdefedcba\"",
                "\"aba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\"",
                "\"abba\""
            ]
        }
    },
    "8": {
        "title": "String to Integer (atoi)",
        "description": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n1. Read in and ignore any leading whitespace.\n2. Check if the next character (if not already at the end of the string) is \"-\" or \"+\". Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4. Convert these digits into an integer (i.e. \"123 \" -> 123, \"0032 \" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n5. If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n6. Return the integer as the final result.\n\n**Note:**\n\n- Only the space character \" \" is considered a whitespace character.\n- **Do not ignore** any characters other than the leading whitespace or the rest of the string after the digits.",
        "example": "Example 1:\n\nInput: s = \"42 \"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42 \" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42 \" (no characters read because there is neither a \"-\" nor \"+\")\n         ^\nStep 3: \"42 \" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\n\nExample 2:\n\nInput: s = \"   -42 \"\nOutput: -42\nExplanation: Step 1: \"   -42 \" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42 \" (\"-\" is read, so the result should be negative)\n             ^\nStep 3: \"   -42 \" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n\nExample 3:\n\nInput: s = \"4193 with words \"\nOutput: 4193\nExplanation: Step 1: \"4193 with words \" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words \" (no characters read because there is neither a \"-\" nor \"+\")\n         ^\nStep 3: \"4193 with words \" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.",
        "level": "Medium",
        "tags": [
            "string",
            "parsing",
            "integer"
        ],
        "test_cases": {
            "inputs": [
                "\"42 \"",
                "\"   -42 \"",
                "\"4193 with words \"",
                "\"words and 987\"",
                "\"-91283472332\"",
                "\"3.14159\"",
                "\"-3.14159\"",
                "\"-1234567890123456789012345678901234567890\"",
                "\"1234567890123456789012345678901234567890\"",
                "\"\"",
                "\"0\"",
                "\"-\"",
                "\"+\"",
                "\"-0\"",
                "\"+0\"",
                "\"-123\"",
                "\"+123\"",
                "\"-000123\"",
                "\"+000123\"",
                "\"-000\"",
                "\"+000\""
            ],
            "outputs": [
                "42",
                "-42",
                "4193",
                "0",
                "-2147483648",
                "3",
                "-3",
                "-2147483648",
                "2147483647",
                "0",
                "0",
                "0",
                "0",
                "0",
                "-123",
                "123",
                "-123",
                "123",
                "0",
                "0"
            ]
        }
    },
    "10": {
        "title": "Regular Expression Matching",
        "description": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n*   `'.'` Matches any single character.\n*   `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).",
        "example": "Example:\n\nInput:\n\ns = \"aa \", p = \"a \"\nOutput:\nfalse\nExplanation:\n\"a \" does not match the entire string \"aa \".",
        "level": "Medium",
        "tags": [
            "string",
            "regular expression",
            "dynamic programming"
        ],
        "test_cases": {
            "inputs": [
                "\"aa \", \"a \"",
                "\"aa \", \"a* \"",
                "\"ab \", \".* \"",
                "\"abc \", \"a.c \"",
                "\"aab \", \"c*a*b \"",
                "\"mississippi \", \"mis*is*p*. \"",
                "\"aaa \", \"a*a \"",
                "\"aaa \", \"ab*a*c*a \"",
                "\"a \", \".*..a* \"",
                "\"a \", \"a*a \"",
                "\"a \", \"a* \"",
                "\"a \", \"a. \"",
                "\"a \", \"a.* \"",
                "\"a \", \"a.. \"",
                "\"a \", \"a... \"",
                "\"a \", \"a.... \"",
                "\"a \", \"a..... \"",
                "\"a \", \"a...... \"",
                "\"a \", \"a....... \"",
                "\"a \", \"a........ \""
            ],
            "outputs": [
                "false",
                "true",
                "true",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "true",
                "false",
                "true",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false",
                "false"
            ]
        }
    },
    "11": {
        "title": "Container With Most Water",
        "description": "Given an integer array `height` of length `n`, where each element represents the height of a vertical line, find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water the container can store.",
        "example": "Example:\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers",
            "Greedy"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    8,
                    6,
                    2,
                    5,
                    4,
                    8,
                    3,
                    7
                ],
                [
                    1,
                    1
                ],
                [
                    4,
                    3,
                    2,
                    1,
                    4
                ],
                [
                    1,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20
                ],
                [
                    20,
                    19,
                    18,
                    17,
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "outputs": [
                49,
                1,
                16,
                2,
                6,
                4,
                4,
                25,
                25,
                100,
                100
            ]
        }
    },
    "12": {
        "title": "Convert Integer to Roman Numeral",
        "description": "Given an integer, convert it to a Roman numeral. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. The symbols and their corresponding values are as follows:\n\n`I` - 1\n`V` - 5\n`X` - 10\n`L` - 50\n`C` - 100\n`D` - 500\n`M` - 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used. For example, `IV` represents 4, `IX` represents 9, `XL` represents 40, `XC` represents 90, `CD` represents 400, and `CM` represents 900.\n\nWrite a function `convertToRoman` that takes an integer `num` as input and returns its Roman numeral representation as a string.",
        "example": "Example:\n\nInput:\nnum = 3\n\nOutput:\n\"III\"\n\nExplanation:\n3 is represented as 3 ones.\n\nInput:\nnum = 58\n\nOutput:\n\"LVIII\"\n\nExplanation:\nL = 50, V = 5, III = 3.\n\nInput:\nnum = 1994\n\nOutput:\n\"MCMXCIV\"\n\nExplanation:\nM = 1000, CM = 900, XC = 90, and IV = 4.",
        "level": "Medium",
        "tags": [
            "Math",
            "String"
        ],
        "test_cases": {
            "inputs": [
                3,
                58,
                1994,
                4,
                9,
                40,
                90,
                400,
                900,
                3999,
                1,
                10,
                100,
                1000,
                399,
                444,
                555,
                666,
                777,
                888
            ],
            "outputs": [
                "III",
                "LVIII",
                "MCMXCIV",
                "IV",
                "IX",
                "XL",
                "XC",
                "CD",
                "CM",
                "MMMCMXCIX",
                "I",
                "X",
                "C",
                "M",
                "CCCXCIX",
                "CDXLIV",
                "DLV",
                "DCLXVI",
                "DCCLXXVII",
                "DCCCLXXXVIII"
            ]
        }
    },
    "13": {
        "title": "Roman Numeral to Integer Conversion",
        "description": "Given a Roman numeral, convert it to an integer. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. The symbols and their corresponding values are as follows: \n\n`I` - 1\n`V` - 5\n`X` - 10\n`L` - 50\n`C` - 100\n`D` - 500\n`M` - 1000\n\nRoman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used. For example, `IV` represents 4 (5 - 1) and `IX` represents 9 (10 - 1). The goal is to convert the given Roman numeral into its corresponding integer value.",
        "example": "Example:\n\nInput: \"III\"\nOutput: 3\nExplanation: The Roman numeral \"III\" represents the number 3.\n\nInput: \"LVIII\"\nOutput: 58\nExplanation: The Roman numeral \"LVIII\" represents the number 58. It can be broken down as follows: L (50) + V (5) + III (3).\n\nInput: \"MCMXCIV\"\nOutput: 1994\nExplanation: The Roman numeral \"MCMXCIV\" represents the number 1994. It can be broken down as follows: M (1000) + CM (900) + XC (90) + IV (4).",
        "level": "Easy",
        "tags": [
            "String",
            "Math"
        ],
        "test_cases": {
            "inputs": [
                "\"III\"",
                "\"LVIII\"",
                "\"MCMXCIV\"",
                "\"IV\"",
                "\"IX\"",
                "\"XL\"",
                "\"XC\"",
                "\"CD\"",
                "\"CM\"",
                "\"XIV\"",
                "\"XXIX\"",
                "\"XLV\"",
                "\"XCIX\"",
                "\"CDXLIV\"",
                "\"CMXCIX\"",
                "\"MMMCMXCIX\"",
                "\"I\"",
                "\"V\"",
                "\"X\"",
                "\"L\"",
                "\"C\"",
                "\"D\"",
                "\"M\""
            ],
            "outputs": [
                "3",
                "58",
                "1994",
                "4",
                "9",
                "40",
                "90",
                "400",
                "900",
                "14",
                "29",
                "45",
                "99",
                "444",
                "999",
                "3999",
                "1",
                "5",
                "10",
                "50",
                "100",
                "500",
                "1000"
            ]
        }
    },
    "14": {
        "title": "Longest Common Prefix",
        "description": "Write a function that takes an array of strings and returns the longest common prefix string among them. If there is no common prefix, return an empty string.",
        "example": "For example, given the input strs = [\"flower\", \"flow\", \"flight\"], the output should be \"fl\". \n\nExplanation: The longest common prefix among the strings is \"fl\".\n\nGiven the input strs = [\"dog\", \"racecar\", \"car\"], the output should be an empty string. \n\nExplanation: There is no common prefix among the strings.",
        "level": "Easy",
        "tags": [
            "Array",
            "String"
        ],
        "test_cases": {
            "inputs": [
                [
                    "flower",
                    "flow",
                    "flight"
                ],
                [
                    "dog",
                    "racecar",
                    "car"
                ],
                [
                    "apple",
                    "app",
                    "application"
                ],
                [
                    "coding",
                    "code",
                    "coder"
                ],
                [
                    "hello",
                    "hell",
                    "help"
                ],
                [
                    "prefix",
                    "pre",
                    "preparation"
                ],
                [
                    "",
                    "abc",
                    "def"
                ],
                [
                    "",
                    "",
                    ""
                ],
                [
                    "abc",
                    "abc",
                    "abc"
                ],
                [
                    "abc",
                    "abcd",
                    "abcde"
                ],
                [
                    "abc",
                    "def",
                    "ghi"
                ],
                [
                    "abc",
                    "ab",
                    "a"
                ],
                [
                    "abc",
                    "ab",
                    "abc"
                ],
                [
                    "abc",
                    "ab",
                    "abcd"
                ],
                [
                    "abc",
                    "ab",
                    "abcde"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefgh"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghi"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghij"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghijk"
                ],
                [
                    "abc",
                    "ab",
                    "abcdefghijkl"
                ]
            ],
            "outputs": [
                "fl",
                "",
                "app",
                "cod",
                "hel",
                "pre",
                "",
                "",
                "abc",
                "abc",
                "",
                "a",
                "ab",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc",
                "abc"
            ]
        }
    },
    "15": {
        "title": "Triplets with Zero Sum",
        "description": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets.",
        "example": "Example 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-1,0,1,2,-1,-4]",
                "[0,1,1]",
                "[0,0,0]",
                "[-2,0,1,1,2]",
                "[1,2,-2,-1]",
                "[3,0,-2,-1,1,2]",
                "[-1,-1,-1,0,0,0,1,1,1]",
                "[-1,0,1,2,-1,-4,5,6,7,8,9,10]",
                "[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[0,0,0,0,0,0,0,0,0,0]",
                "[1,1,1,1,1,1,1,1,1,1]"
            ],
            "outputs": [
                "[[-1,-1,2],[-1,0,1]]",
                "[]",
                "[[0,0,0]]",
                "[[-2,0,2],[-2,1,1]]",
                "[[-2,-1,3],[-2,0,2],[-1,0,1]]",
                "[[-2,-1,3],[-2,0,2],[-1,0,1]]",
                "[[-1,-1,2],[-1,0,1],[0,0,0]]",
                "[[-1,-1,2],[-1,0,1],[0,0,0]]",
                "[]",
                "[]",
                "[[0,0,0]]",
                "[]"
            ]
        }
    },
    "16": {
        "title": "Closest Three Sum",
        "description": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.",
        "example": "Example:\n\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",
        "level": "Medium",
        "tags": [
            "Array",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                "[-1,2,1,-4], 1",
                "[0,0,0], 1",
                "[1,2,3,4,5], 10",
                "[-10,-5,0,5,10], 0",
                "[1,1,1,1,1], 3",
                "[-1,-2,-3,-4,-5], -10",
                "[10,20,30,40,50], 100",
                "[0,0,0,0,0], 5",
                "[-1,-1,-1,-1,-1], -3",
                "[1,2,3,4,5], -10",
                "[1,2,3,4,5], 15",
                "[1,2,3,4,5], 6",
                "[1,2,3,4,5], 7",
                "[1,2,3,4,5], 8",
                "[1,2,3,4,5], 9",
                "[1,2,3,4,5], 10",
                "[1,2,3,4,5], 11",
                "[1,2,3,4,5], 12",
                "[1,2,3,4,5], 13"
            ],
            "outputs": [
                "2",
                "0",
                "9",
                "0",
                "3",
                "-9",
                "60",
                "0",
                "-3",
                "3",
                "15",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6",
                "6"
            ]
        }
    },
    "17": {
        "title": "Letter Combinations of a Phone Number",
        "description": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
        "example": "Example:\n\n**Input:** digits = \"23\"\n**Output:** [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\n\n**Input:** digits = \"\"\n**Output:** []\n\n**Input:** digits = \"2\"\n**Output:** [\"a\", \"b\", \"c\"]",
        "level": "Medium",
        "tags": [
            "String",
            "Recursion",
            "Backtracking"
        ],
        "test_cases": {
            "inputs": [
                "\"23\"",
                "\"\"",
                "\"2\"",
                "\"234\"",
                "\"567\"",
                "\"89\"",
                "\"999\"",
                "\"7777\"",
                "\"2222\"",
                "\"3333\"",
                "\"4444\"",
                "\"5555\"",
                "\"6666\"",
                "\"8888\"",
                "\"9999\"",
                "\"222\"",
                "\"333\"",
                "\"444\"",
                "\"555\"",
                "\"666\"",
                "\"777\"",
                "\"888\"",
                "\"999\"",
                "\"2222\"",
                "\"3333\"",
                "\"4444\"",
                "\"5555\"",
                "\"6666\"",
                "\"7777\"",
                "\"8888\"",
                "\"9999\""
            ],
            "outputs": [
                "[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]",
                "[]",
                "[\"a\", \"b\", \"c\"]",
                "[\"adg\", \"adh\", \"adi\", \"aeg\", \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\", \"bdg\", \"bdh\", \"bdi\", \"beg\", \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\", \"cdi\", \"ceg\", \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\"]",
                "[\"jm\", \"jn\", \"jo\", \"km\", \"kn\", \"ko\", \"lm\", \"ln\", \"lo\"]",
                "[\"tw\", \"tx\", \"ty\", \"uw\", \"ux\", \"uy\", \"vw\", \"vx\", \"vy\"]",
                "[\"w\", \"x\", \"y\", \"z\"]",
                "[\"aa\", \"ab\", \"ac\", \"ba\", \"bb\", \"bc\", \"ca\", \"cb\", \"cc\"]",
                "[\"aa\", \"ad\", \"ae\", \"af\", \"ba\", \"bd\", \"be\", \"bf\", \"ca\", \"cd\", \"ce\", \"cf\"]",
                "[\"dd\", \"de\", \"df\", \"ed\", \"ee\", \"ef\", \"fd\", \"fe\", \"ff\"]",
                "[\"gg\", \"gh\", \"gi\", \"hg\", \"hh\", \"hi\", \"ig\", \"ih\", \"ii\"]",
                "[\"jj\", \"jk\", \"jl\", \"kj\", \"kk\", \"kl\", \"lj\", \"lk\", \"ll\"]",
                "[\"pp\", \"pq\", \"pr\", \"ps\", \"qp\", \"qq\", \"qr\", \"qs\", \"rp\", \"rq\", \"rr\", \"rs\", \"sp\", \"sq\", \"sr\", \"ss\"]",
                "[\"tt\", \"tu\", \"tv\", \"ut\", \"uu\", \"uv\", \"vt\", \"vu\", \"vv\"]",
                "[\"ww\", \"wx\", \"wy\", \"wz\", \"xw\", \"xx\", \"xy\", \"xz\", \"yw\", \"yx\", \"yy\", \"yz\", \"zw\", \"zx\", \"zy\", \"zz\"]",
                "[\"aa\", \"ad\", \"ae\", \"af\", \"ba\", \"bd\", \"be\", \"bf\", \"ca\", \"cd\", \"ce\", \"cf\"]",
                "[\"dd\", \"de\", \"df\", \"ed\", \"ee\", \"ef\", \"fd\", \"fe\", \"ff\"]",
                "[\"gg\", \"gh\", \"gi\", \"hg\", \"hh\", \"hi\", \"ig\", \"ih\", \"ii\"]",
                "[\"jj\", \"jk\", \"jl\", \"kj\", \"kk\", \"kl\", \"lj\", \"lk\", \"ll\"]",
                "[\"pp\", \"pq\", \"pr\", \"ps\", \"qp\", \"qq\", \"qr\", \"qs\", \"rp\", \"rq\", \"rr\", \"rs\", \"sp\", \"sq\", \"sr\", \"ss\"]",
                "[\"tt\", \"tu\", \"tv\", \"ut\", \"uu\", \"uv\", \"vt\", \"vu\", \"vv\"]",
                "[\"ww\", \"wx\", \"wy\", \"wz\", \"xw\", \"xx\", \"xy\", \"xz\", \"yw\", \"yx\", \"yy\", \"yz\", \"zw\", \"zx\", \"zy\", \"zz\"]"
            ]
        }
    },
    "19": {
        "title": "Remove Nth Node From End of List",
        "description": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Two Pointers"
        ],
        "test_cases": {
            "inputs": [
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 2
                },
                {
                    "head": [
                        1
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 5
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 6
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": 0
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    "n": -1
                },
                {
                    "head": [],
                    "n": 1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 3
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 10
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                    "n": 11
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 3
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 5
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 6
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": 0
                },
                {
                    "head": [
                        1,
                        1,
                        1,
                        1,
                        1
                    ],
                    "n": -1
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 8
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 15
                },
                {
                    "head": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "n": 16
                }
            ],
            "outputs": [
                [
                    1,
                    2,
                    3,
                    5
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4
                ],
                [
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [],
                [
                    1,
                    2,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    1,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ]
            ]
        }
    },
    "20": null,
    "21": {
        "title": "Merge Sorted Linked Lists",
        "description": "You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists into one sorted list by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
        "example": "Example 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]",
        "level": "Easy",
        "tags": [
            "linked list",
            "sorting"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,4]",
                "[1,3,4]",
                "[]",
                "[]",
                "[]",
                "[0]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[6,7,8,9,10]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]",
                "[1,2,3,4,5]"
            ],
            "outputs": [
                "[1,1,2,3,4,4]",
                "[]",
                "[0]",
                "[]",
                "[0]",
                "[0]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]",
                "[1,1,2,2,3,3,4,4,5,5,6,7,8,9,10]"
            ]
        }
    },
    "22": {
        "title": "Generate All Combinations of Well-Formed Parentheses",
        "description": "Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses. A well-formed parentheses string is defined as a string consisting of opening and closing parentheses '(' and ')', where each opening parenthesis must have a corresponding closing parenthesis and the parentheses pairs must be properly nested. Implement a function `generateParentheses(n: int) -> List[str]` that will take an integer `n` as input and return a list of all possible well-formed parentheses combinations.",
        "example": "Example:\n\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n\nInput: n = 1\nOutput: [\"()\"]",
        "level": "Medium",
        "tags": [
            "Recursion",
            "Backtracking",
            "String"
        ],
        "test_cases": {
            "inputs": [
                3,
                1,
                2,
                4,
                0
            ],
            "outputs": [
                [
                    "((()))",
                    "(()())",
                    "(())()",
                    "()(())",
                    "()()()"
                ],
                [
                    "()"
                ],
                [
                    "(())",
                    "()()"
                ],
                [
                    "(((())))",
                    "((()()))",
                    "((())())",
                    "((()))()",
                    "(()(()))",
                    "(()()())",
                    "(()())()",
                    "(())(())",
                    "(())()()",
                    "()((()))",
                    "()(()())",
                    "()(())()",
                    "()()(())",
                    "()()()()"
                ],
                []
            ]
        }
    },
    "23": null,
    "24": {
        "title": "Swap Adjacent Nodes in Linked List",
        "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list`s nodes (i.e., only nodes themselves may be changed).",
        "example": "Example:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nInput: head = []\nOutput: []\n\nInput: head = [1]\nOutput: [1]",
        "level": "Medium",
        "tags": [
            "linked list",
            "recursion"
        ],
        "test_cases": {
            "inputs": [
                [
                    1,
                    2,
                    3,
                    4
                ],
                [],
                [
                    1
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                ],
                [
                    5,
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40,
                    45,
                    50
                ]
            ],
            "outputs": [
                [
                    2,
                    1,
                    4,
                    3
                ],
                [],
                [
                    1
                ],
                [
                    2,
                    1,
                    4,
                    3,
                    6,
                    5,
                    8,
                    7,
                    10,
                    9
                ],
                [
                    4,
                    2,
                    8,
                    6,
                    10
                ],
                [
                    3,
                    1,
                    7,
                    5,
                    9
                ],
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                [
                    2,
                    1,
                    4,
                    3,
                    6,
                    5,
                    8,
                    7,
                    10,
                    9,
                    12,
                    11,
                    14,
                    13,
                    15
                ],
                [
                    10,
                    5,
                    20,
                    15,
                    30,
                    25,
                    40,
                    35,
                    50,
                    45
                ]
            ]
        }
    },
    "25": {
        "title": "Reverse Linked List in Groups of K",
        "description": "Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return the modified list. If the number of nodes is not a multiple of `k`, the left-out nodes should remain as they are. You may not alter the values in the list's nodes, only nodes themselves may be changed.",
        "example": "Example 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExplanation: The linked list is 1 -> 2 -> 3 -> 4 -> 5. We need to reverse the nodes in groups of 2. After reversing, the linked list becomes 2 -> 1 -> 4 -> 3 -> 5.\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\nExplanation: The linked list is 1 -> 2 -> 3 -> 4 -> 5. We need to reverse the nodes in groups of 3. After reversing, the linked list becomes 3 -> 2 -> 1 -> 4 -> 5.",
        "level": "Medium",
        "tags": [
            "Linked List",
            "Reverse",
            "Grouping"
        ],
        "test_cases": {
            "inputs": [
                "[1,2,3,4,5]",
                "[1,2,3,4,5,6,7,8,9,10]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
                "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"
            ],
            "outputs": [
                "[2,1,4,3,5]",
                "[3,2,1,6,5,4,7,8,9,10]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,19,20]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,25]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58]",
                "[3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58,63,62,61,66,65,64,69,68,67,72,71,70,75,74,73,78,77,76,81,80,79,84,83,82,87,86,85,90,89,88,93,92,91,96,95,94,99,98,97,100]"
            ]
        }
    }
}