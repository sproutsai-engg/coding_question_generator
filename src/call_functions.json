{
    "1": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n    std::unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        if (map.find(complement) != map.end()) {\n            return {map[complement], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = 10;\n    std::vector<int> result = twoSum(nums, target);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = twoSum(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = twoSum(nums, target);\n    console.log(result);\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    int target = $args;\n    int[] result = twoSum(nums, target);\n    System.out.println(Arrays.toString(result));\n}"
        }
    },
    "3": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n#include <unordered_set>\n\nint lengthOfLongestSubstring(std::string s) {\n    int left = 0, right = 0, maxLength = 0;\n    std::unordered_set<char> characters;\n\n    while (right < s.size()) {\n        if (characters.find(s[right]) == characters.end()) {\n            characters.insert(s[right]);\n            maxLength = std::max(maxLength, right - left + 1);\n            right++;\n        } else {\n            characters.erase(s[left]);\n            left++;\n        }\n    }\n\n    return maxLength;\n}\n\nint main() {\n    std::string s = $args;\n    int result = lengthOfLongestSubstring(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = length_of_longest_substring(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = lengthOfLongestSubstring(s);\n    console.log(result);\n}",
            "java": "public int lengthOfLongestSubstring(String s) {\n    int left = 0, right = 0, maxLength = 0;\n    Set<Character> characters = new HashSet<>();\n\n    while (right < s.length()) {\n        if (!characters.contains(s.charAt(right))) {\n            characters.add(s.charAt(right));\n            maxLength = Math.max(maxLength, right - left + 1);\n            right++;\n        } else {\n            characters.remove(s.charAt(left));\n            left++;\n        }\n    }\n\n    return maxLength;\n}"
        }
    },
    "4": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Function Declaration\n\ndouble findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2);\n\nint main() {\n    // Argument Assignment\n    vector<int> nums1 = $args;\n    vector<int> nums2 = $args;\n    \n    // Function Invocation\n    double result = findMedianSortedArrays(nums1, nums2);\n    \n    // Output\n    cout << result << endl;\n    \n    return 0;\n}\n\n// Function Definition\n\ndouble findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() > nums2.size()) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n    \n    int x = nums1.size();\n    int y = nums2.size();\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxLeftX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];\n        int minRightX = (partitionX == x) ? INT_MAX : nums1[partitionX];\n        \n        int maxLeftY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];\n        int minRightY = (partitionY == y) ? INT_MAX : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((x + y) % 2 == 0) {\n                return (double(max(maxLeftX, maxLeftY) + min(minRightX, minRightY))) / 2;\n            } else {\n                return double(max(maxLeftX, maxLeftY));\n            }\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }    \n    return 0;\n}",
            "java": "public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n    \n    int x = nums1.length;\n    int y = nums2.length;\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\n        int minRightX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];\n        \n        int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\n        int minRightY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((x + y) % 2 == 0) {\n                return (double)(Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n            } else {\n                return (double)Math.max(maxLeftX, maxLeftY);\n            }\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }    \n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = findMedianSortedArrays(nums1, nums2)\n    print(result)",
            "javascript": "function findMedianSortedArrays(nums1, nums2) {\n    if (nums1.length > nums2.length) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n    \n    const x = nums1.length;\n    const y = nums2.length;\n    let low = 0;\n    let high = x;\n    \n    while (low <= high) {\n        const partitionX = Math.floor((low + high) / 2);\n        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;\n        \n        const maxLeftX = (partitionX === 0) ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];\n        const minRightX = (partitionX === x) ? Number.POSITIVE_INFINITY : nums1[partitionX];\n        \n        const maxLeftY = (partitionY === 0) ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];\n        const minRightY = (partitionY === y) ? Number.POSITIVE_INFINITY : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((x + y) % 2 === 0) {\n                return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n            } else {\n                return Math.max(maxLeftX, maxLeftY);\n            }\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }    \n    return 0;\n}"
        }
    },
    "5": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n\nstd::string longestPalindromicSubstring(std::string s);\n\nint main() {\n    std::string input = $args;\n    std::string result = longestPalindromicSubstring(input);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String longestPalindromicSubstring(String s) {\n    int n = s.length();\n    if (n == 0) return \"\";\n\n    int start = 0, maxLength = 1;\n\n    for (int i = 0; i < n; ++i) {\n        int l = i, r = i;\n\n        while (r < n - 1 && s.charAt(r) == s.charAt(r + 1))\n            r++;\n        i = r;\n\n        while (l > 0 && r < n - 1 && s.charAt(l - 1) == s.charAt(r + 1)) {\n            l--;\n            r++;\n        }\n\n        int length = r - l + 1;\n        if (length > maxLength) {\n            start = l;\n            maxLength = length;\n        }\n    }\n\n    return s.substring(start, start + maxLength);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args\n    result = longest_palindromic_substring(s)\n    print(result)",
            "javascript": "function main() {\n  const s = $args;\n  const result = longestPalindromicSubstring(s);\n  console.log(result);\n}"
        }
    },
    "7": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = $args;\n    long long res = 0;\n    while (x != 0) {\n        res = res * 10 + x % 10;\n        x /= 10;\n    }\n    int result = (res < INT_MIN || res > INT_MAX) ? 0 : res;\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int x = $args;\n    int result = reverse(x);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args[0]\n    result = reverse(x)\n    print(result)",
            "javascript": "function main() {\n    const x = $args;\n    let sign = x < 0 ? -1 : 1;\n    x = Math.abs(x);\n    let res = 0;\n    while (x !== 0) {\n        res = res * 10 + x % 10;\n        x = Math.floor(x / 10);\n    }\n    res *= sign;\n    const result = (res < -(2 ** 31) || res > 2 ** 31 - 1) ? 0 : res;\n    console.log(result);\n}"
        }
    },
    "9": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isPalindrome(int x) {\n    if (x < 0) return false;\n    int original = x, reversed = 0;\n    while (x > 0) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    return original == reversed;\n}\n\nint main() {\n    int n = $args;\n    bool result = isPalindrome(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int x = $args;\n    boolean result = isPalindrome(x);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args\n    result = is_palindrome(x)\n    print(result)\n",
            "javascript": "function main() {\n    const x = $args;\n    const result = isPalindrome(x);\n    console.log(result);\n}\n"
        }
    },
    "10": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n\nbool isMatch(std::string s, std::string p) {\n    int m = s.length(), n = p.length();\n    std::vector<std::vector<bool>> dp(m + 1, std::vector<bool>(n + 1, false));\n    dp[0][0] = true;\n\n    for (int j = 1; j <= n; j++) {\n        if (p[j - 1] == '*' && dp[0][j - 2]) {\n            dp[0][j] = true;\n        }\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (p[j - 1] == s[i - 1] || p[j - 1] == '.') {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else if (p[j - 1] == '*') {\n                dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));\n            }\n        }\n    }\n\n    return dp[m][n];\n}\n\nint main() {\n    std::string s = $args;\n    std::string p = $args;\n    bool result = isMatch(s, p);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isMatch(String s, String p) {\n    int m = s.length(), n = p.length();\n    boolean[][] dp = new boolean[m + 1][n + 1];\n    dp[0][0] = true;\n\n    for (int j = 1; j <= n; j++) {\n        if (p.charAt(j - 1) == '*' && dp[0][j - 2]) {\n            dp[0][j] = true;\n        }\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (p.charAt(j - 1) == s.charAt(i - 1) || p.charAt(j - 1) == '.') {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else if (p.charAt(j - 1) == '*') {\n                dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2) == '.'));\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    p = $args[1]\n    result = is_match(s, p)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const p = $args[1];\n    const result = isMatch(s, p);\n    console.log(result);\n}"
        }
    },
    "11": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint maxArea(vector<int>& height) {\n    int max_area = 0, left = 0, right = height.size() - 1;\n    while (left < right) {\n        max_area = max(max_area, min(height[left], height[right]) * (right - left));\n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return max_area;\n}\n\nint main() {\n    vector<int> height = $args;\n    int result = maxArea(height);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int[] height = $args;\n    int result = maxArea(height);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    height = $args[0]\n    result = max_area(height)\n    print(result)",
            "javascript": "function main() {\n    const height = $args;\n    const result = maxArea(height);\n    console.log(result);\n}"
        }
    },
    "6": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string convert(std::string s, int numRows) {\n    if (numRows == 1 || numRows >= s.size()) return s;\n\n    std::vector<std::string> rows(std::min(numRows, int(s.size())));\n    int curRow = 0;\n    bool goingDown = false;\n\n    for (char c : s) {\n        rows[curRow] += c;\n        if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\n        curRow += goingDown ? 1 : -1;\n    }\n\n    std::string result;\n    for (std::string row : rows) result += row;\n    return result;\n}\n\nint main() {\n    std::string s = $args;\n    int numRows = 3;\n    std::string result = convert(s, numRows);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    numRows = $args[1]\n    result = convert(s, numRows)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const numRows = $args[1];\n    const result = convert(s, numRows);\n    console.log(result);\n}",
            "java": "public String convert(String s, int numRows) {\n        if (numRows == 1 || numRows >= s.length()) return s;\n\n        StringBuilder[] rows = new StringBuilder[numRows];\n        for (int i = 0; i < numRows; i++) rows[i] = new StringBuilder();\n        \n        int curRow = 0;\n        boolean goingDown = false;\n\n        for (char c : s.toCharArray()) {\n            rows[curRow].append(c);\n            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\n            curRow += goingDown ? 1 : -1;\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (StringBuilder row : rows) result.append(row);\n        return result.toString();\n    }"
        }
    },
    "8": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint myAtoi(string s) {\n    long result = 0;\n    int i = 0, sign = 1;\n    while (s[i] == ' ') i++;\n    if (s[i] == '-' || s[i] == '+') sign = (s[i++] == '+') ? 1 : -1;\n    while (isdigit(s[i])) {\n        result = result * 10 + (s[i++] - '0');\n        if (result * sign > INT_MAX) return INT_MAX;\n        if (result * sign < INT_MIN) return INT_MIN;\n    }\n    return result * sign;\n}\n\nint main() {\n    string s = $args;\n    int result = myAtoi(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int myAtoi(String s) {\n    long result = 0;\n    int i = 0, sign = 1;\n    while (i < s.length() && s.charAt(i) == ' ') i++;\n    if (i < s.length() && (s.charAt(i) == '-' || s.charAt(i) == '+')) {\n        sign = (s.charAt(i++) == '+') ? 1 : -1;\n    }\n    while (i < s.length() && Character.isDigit(s.charAt(i))) {\n        result = result * 10 + (s.charAt(i++) - '0');\n        if (result * sign > Integer.MAX_VALUE) return Integer.MAX_VALUE;\n        if (result * sign < Integer.MIN_VALUE) return Integer.MIN_VALUE;\n    }\n    return (int) (result * sign);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = myAtoi(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = myAtoi(s);\n    console.log(result);\n}"
        }
    },
    "12": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string intToRoman(int num);\n\nint main() {\n    int n = $args;\n    std::string result = intToRoman(n);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public static void main(String[] args) {\n    int num = $args;\n    String result = intToRoman(num);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = int_to_roman(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = intToRoman(num);\n    console.log(result);\n}"
        }
    },
    "13": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nint romanToInt(string s) {\n    unordered_map<char, int> roman_values = { {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000} };\n    int total = 0;\n    int prev_value = 0;\n\n    for (char c : s) {\n        int current_value = roman_values[c];\n        if (current_value > prev_value)\n            total += current_value - (2 * prev_value);\n        else\n            total += current_value;\n        prev_value = current_value;\n    }\n\n    return total;\n}\n\nint main() {\n    string s = $args;\n    int result = romanToInt(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int romanToInt(String s) {\n    Map<Character, Integer> romanValues = new HashMap<>();\n    romanValues.put('I', 1);\n    romanValues.put('V', 5);\n    romanValues.put('X', 10);\n    romanValues.put('L', 50);\n    romanValues.put('C', 100);\n    romanValues.put('D', 500);\n    romanValues.put('M', 1000);\n\n    int total = 0;\n    int prevValue = 0;\n\n    for (char c : s.toCharArray()) {\n        int currValue = romanValues.get(c);\n        total += currValue > prevValue ? currValue - 2 * prevValue : currValue;\n        prevValue = currValue;\n    }\n\n    return total;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = roman_to_int(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = romanToInt(s);\n    console.log(result);\n}"
        }
    },
    "14": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring longestCommonPrefix(vector<string>& strs) {\n    if (strs.empty()) return \"\";\n\n    for (int i = 0; i < strs[0].size(); ++i) {\n        char c = strs[0][i];\n        for (int j = 1; j < strs.size(); ++j) {\n            if (i == strs[j].size() || strs[j][i] != c) {\n                return strs[0].substr(0, i);\n            }\n        }\n    }\n    return strs[0];\n}\n\nint main() {\n    vector<string> strs = $args;\n    string result = longestCommonPrefix(strs);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    String[] strs = $args;\n    String result = longestCommonPrefix(strs);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    result = longest_common_prefix(strs)\n    print(result)",
            "javascript": "function main() {\n    const strs = $args;\n    const result = longestCommonPrefix(strs);\n    console.log(result);\n}"
        }
    },
    "15": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::vector<int>> threeSum(std::vector<int>& nums) {\n    std::vector<std::vector<int>> result;\n    std::sort(nums.begin(), nums.end());\n\n    for (int i = 0; i < (int)nums.size() - 2; ++i) {\n        if (i == 0 || nums[i] != nums[i - 1]) {\n            int j = i + 1, k = nums.size() - 1;\n            while (j < k) {\n                int sum = nums[i] + nums[j] + nums[k];\n                if (sum == 0) {\n                    result.push_back({nums[i], nums[j], nums[k]});\n                    while (j < k && nums[j] == nums[j + 1]) ++j;\n                    while (j < k && nums[k] == nums[k - 1]) --k;\n                    ++j;\n                    --k;\n                } else if (sum < 0) {\n                    ++j;\n                } else {\n                    --k;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = threeSum(nums);\n\n    for (const auto& triplet : result) {\n        for (const auto& num : triplet) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = threeSum(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    nums.sort((a, b) => a - b);\n    const result = [];\n\n    for (let i = 0; i < nums.length - 2; i++) {\n        if (i == 0 || nums[i] != nums[i - 1]) {\n            let j = i + 1, k = nums.length - 1;\n            while (j < k) {\n                const sum = nums[i] + nums[j] + nums[k];\n                if (sum === 0) {\n                    result.push([nums[i], nums[j], nums[k]]);\n                    while (j < k && nums[j] === nums[j + 1]) j++;\n                    while (j < k && nums[k] === nums[k - 1]) k--;\n                    j++;\n                    k--;\n                } else if (sum < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n    }\n\n    console.log(result);\n}"
        }
    },
    "16": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n\nint threeSumClosest(std::vector<int>& nums, int target);\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = 0;\n    int result = threeSumClosest(nums, target);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = threeSumClosest(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = threeSumClosest(nums, target);\n    console.log(result);\n}"
        }
    },
    "17": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> letterCombinations(string digits) {\n    if(digits.empty()) return {};\n    vector<string> phone = {\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    vector<string> result = {\"\"};\n\n    for (char d : digits) {\n        vector<string> temp;\n        for (const string &s : result) {\n            for (char c : phone[d - '2']) {\n                temp.push_back(s + c);\n            }\n        }\n        result.swap(temp);\n    }\n    return result;\n}\n\nint main() {\n    string digits = $args;\n    vector<string> result = letterCombinations(digits);\n    for (const string &s : result) {\n        cout << s << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<String> letterCombinations(String digits) {\n    LinkedList<String> output = new LinkedList<>();\n    if(digits.isEmpty()) return output;\n    \n    String[] phone = new String[] {\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    output.add(\"\");\n    \n    for(char d : digits.toCharArray()){\n        while(output.peek().length() == digits.indexOf(d)){\n            String perm = output.remove();\n            for(char c : phone[d - '2'].toCharArray()){\n                output.add(perm + c);\n            }\n        }\n    }\n    \n    return output;\n}",
            "python": "if __name__ == \"__main__\":\n    digits = $args[0]\n    result = letter_combinations(digits)\n    print(result)",
            "javascript": "function letterCombinations(digits) {\n    if (digits.length === 0) return [];\n    \n    let phone = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"];\n    let result = [\"\"];\n\n    for (let i = 0; i < digits.length; i++) {\n        let digit = digits[i];\n        let temp = [];\n\n        for (let s of result) {\n            for (let c of phone[digit - 2]) {\n                temp.push(s + c);\n            }\n        }\n\n        result = temp;\n    }\n\n    return result;\n}"
        }
    },
    "18": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> fourSum(vector<int>& nums, int target) {\n    vector<vector<int>> result;\n    int n = nums.size();\n    if(n < 4)\n        return result;\n\n    sort(nums.begin(), nums.end());\n    for(int i = 0; i < n - 3; i++) {\n        if(i > 0 && nums[i] == nums[i-1])\n            continue;\n\n        for(int j = i + 1; j < n - 2; j++) {\n            if(j > i + 1 && nums[j] == nums[j-1])\n                continue;\n\n            int left = j + 1;\n            int right = n - 1;\n            while(left < right) {\n                int sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if(sum == target) {\n                    result.push_back({nums[i], nums[j], nums[left], nums[right]});\n                    ++left;\n                    --right;\n                    while(left < right && nums[left] == nums[left-1]) ++left;\n                    while(left < right && nums[right] == nums[right+1]) --right;\n                } else if(sum < target) {\n                    ++left;\n                } else {\n                    --right;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int target = 0;\n    vector<vector<int>> result = fourSum(nums, target);\n    for(auto res : result) {\n        for(auto num : res) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> callFourSum(int[] nums, int target) {\n    List<List<Integer>> result = new ArrayList<>();\n    if(nums == null || nums.length < 4)\n        return result;\n\n    Arrays.sort(nums);\n    for(int i = 0; i < nums.length - 3; i++) {\n        if(i > 0 && nums[i] == nums[i-1])\n            continue;\n\n        for(int j = i + 1; j < nums.length - 2; j++) {\n            if(j > i + 1 && nums[j] == nums[j-1])\n                continue;\n\n            int left = j + 1;\n            int right = nums.length - 1;\n            while(left < right) {\n                int sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if(sum == target) {\n                    result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));\n                    ++left;\n                    --right;\n                    while(left < right && nums[left] == nums[left - 1]) ++left;\n                    while(left < right && nums[right] == nums[right + 1]) --right;\n                } else if(sum < target) {\n                    ++left;\n                } else {\n                    --right;\n                }\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = fourSum(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = fourSum(nums, target);\n    console.log(result);\n}"
        }
    },
    "20": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nbool isValid(string s) {\n    stack<char> stack;\n\n    for (char c : s) {\n        if (c == '(' || c == '{' || c == '[') {\n            stack.push(c);\n        } else {\n            if (stack.empty()) return false;\n            if (c == ')' && stack.top() != '(') return false;\n            if (c == '}' && stack.top() != '{') return false;\n            if (c == ']' && stack.top() != '[') return false;\n            stack.pop();\n        }\n    }\n\n    return stack.empty();\n}\n\nint main() {\n    string s = $args;\n    bool result = isValid(s);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = is_valid(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = isValid(s);\n    console.log(result);\n}"
        }
    },
    "24": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nListNode* swapPairs(ListNode* head) {\n    if (!head || !head->next) return head;\n\n    ListNode* second = head->next;\n    head->next = swapPairs(second->next);\n    second->next = head;\n    \n    return second;\n}\n\nint main() {\n    ListNode* head = $args;\n    ListNode* result = swapPairs(head);\n    // Print the result\n    while (result) {\n        cout << result->val << \" \";\n        result = result->next;\n    }\n    cout << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    head = $args[0]\n    result = swapPairs(head)\n    print(result)",
            "javascript": "function swapPairs(head) {\n    if (!head || !head.next) return head;\n\n    let second = head.next;\n    head.next = swapPairs(second.next);\n    second.next = head;\n\n    return second;\n}"
        }
    },
    "26": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint removeDuplicates(vector<int>& nums) {\n    if (nums.empty()) return 0;\n    int i = 0;\n    for (int j = 1; j < nums.size(); j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int result = removeDuplicates(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j < nums.length; j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = removeDuplicates(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = removeDuplicates(nums);\n    console.log(result);\n}\n"
        }
    },
    "27": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint removeElement(vector<int>& nums, int val) {\n    int i = 0;\n    for (int j = 0; j < nums.size(); j++) {\n        if (nums[j] != val) {\n            nums[i] = nums[j];\n            i++;\n        }\n    }\n    return i;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int val = 5;\n    int result = removeElement(nums, val);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = {1, 2, 3, 4, 5};\n    int val = 3;\n    int result = removeElement(nums, val);\n    System.out.println(result);\n}",
            "javascript": "function main() {\n    const nums = $args[0];\n    const val = $args[1];\n    const result = removeElement(nums, val);\n    console.log(result);\n}"
        }
    },
    "29": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <climits>\nusing namespace std;\n\nint divide(int dividend, int divisor) {\n    if (dividend == INT_MIN && divisor == -1) {\n        return INT_MAX;\n    }\n\n    int sign = (dividend > 0) ^ (divisor > 0) ? -1 : 1;\n\n    long long dvd = labs(dividend);\n    long long dvs = labs(divisor);\n    int ans = 0;\n\n    while (dvd >= dvs) {\n        long long temp = dvs, multiple = 1;\n        while (dvd >= (temp << 1)) {\n            temp <<= 1;\n            multiple <<= 1;\n        }\n        dvd -= temp;\n        ans += multiple;\n    }\n\n    return ans * sign;\n}\n\nint main() {\n    int dividend = $args;\n    int divisor = $args;\n    int result = divide(dividend, divisor);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static int divide(int dividend, int divisor) {\n    if (dividend == Integer.MIN_VALUE && divisor == -1) {\n        return Integer.MAX_VALUE;\n    }\n\n    int sign = (dividend > 0) ^ (divisor > 0) ? -1 : 1;\n\n    long dvd = Math.abs((long) dividend);\n    long dvs = Math.abs((long) divisor);\n    int ans = 0;\n\n    while (dvd >= dvs) {\n        long temp = dvs, multiple = 1;\n        while (dvd >= (temp << 1)) {\n            temp <<= 1;\n            multiple <<= 1;\n        }\n        dvd -= temp;\n        ans += multiple;\n    }\n\n    return ans * sign;\n}",
            "python": "def call_divide(dividend, divisor):\n    if dividend == -(2**31) and divisor == -1:\n        return 2**31 - 1\n\n    sign = -1 if (dividend > 0) ^ (divisor > 0) else 1\n\n    dvd = abs(dividend)\n    dvs = abs(divisor)\n    ans = 0\n\n    while dvd >= dvs:\n        temp = dvs\n        multiple = 1\n        while dvd >= (temp << 1):\n            temp <<= 1\n            multiple <<= 1\n        dvd -= temp\n        ans += multiple\n\n    return ans * sign\n\n\nif __name__ == \"__main__\":\n    dividend = $args[0]\n    divisor = $args[1]\n    result = call_divide(dividend, divisor)\n    print(result)",
            "javascript": "function main() {\n    const dividend = $args[0];\n    const divisor = $args[1];\n    const result = divide(dividend, divisor);\n    console.log(result);\n}"
        }
    },
    "30": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<int> findSubstring(std::string s, std::vector<std::string>& words);\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> words = {\"word1\", \"word2\", \"word3\"}; // Replace with actual words\n    std::vector<int> result = findSubstring(s, words);\n    \n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public List<Integer> findSubstring(String s, String[] words) {\n    if (s == null || s.length() == 0 || words == null || words.length == 0) return new ArrayList<>();\n    \n    Map<String, Integer> word_count = new HashMap<>();\n    for (String word : words) {\n        word_count.put(word, word_count.getOrDefault(word, 0) + 1);\n    }\n    \n    int word_length = words[0].length();\n    int total_words = words.length;\n    int total_length = word_length * total_words;\n    List<Integer> result = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length() - total_length; i++) {\n        Map<String, Integer> temp_word_count = new HashMap<>();\n        for (int j = 0; j < total_words; j++) {\n            String current_word = s.substring(i + j * word_length, i + (j + 1) * word_length);\n            if (!word_count.containsKey(current_word)) break;\n            temp_word_count.put(current_word, temp_word_count.getOrDefault(current_word, 0) + 1);\n            if (temp_word_count.get(current_word) > word_count.get(current_word)) break;\n            if (j + 1 == total_words) result.add(i);\n        }\n    }\n    \n    return result;\n}",
            "python": "def call_findSubstring(s, words):\n    result = findSubstring(s, words)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    s = $args[0]\n    words = $args[1]\n    call_findSubstring(s, words)",
            "javascript": "function findSubstring(s, words) {\n    if (!s || !words || words.length === 0) return [];\n\n    const word_count = new Map();\n    for (const word of words) {\n        word_count.set(word, (word_count.get(word) || 0) + 1);\n    }\n\n    const word_length = words[0].length;\n    const total_words = words.length;\n    const total_length = word_length * total_words;\n    const result = [];\n\n    for (let i = 0; i <= s.length - total_length; i++) {\n        const temp_word_count = new Map();\n        for (let j = 0; j < total_words; j++) {\n            const current_word = s.substr(i + j * word_length, word_length);\n            if (!word_count.has(current_word)) break;\n            temp_word_count.set(current_word, (temp_word_count.get(current_word) || 0) + 1);\n            if (temp_word_count.get(current_word) > word_count.get(current_word)) break;\n            if (j + 1 === total_words) result.push(i);\n        }\n    }\n\n    return result;\n}"
        }
    },
    "31": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid nextPermutation(vector<int>& nums) {\n    int n = nums.size(), k, l;\n    for (k = n - 2; k >= 0; k--) {\n        if (nums[k] < nums[k + 1]) break;\n    }\n    if (k < 0) {\n        reverse(nums.begin(), nums.end());\n    } else {\n        for (l = n - 1; l > k; l--) {\n            if (nums[l] > nums[k]) break;\n        }\n        swap(nums[k], nums[l]);\n        reverse(nums.begin() + k + 1, nums.end());\n    }\n}\n\nint main() {\n    vector<int> nums = $args;\n    nextPermutation(nums);\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public void callNextPermutation(int[] nums) {\n    int n = nums.length, k = n - 2, l;\n    while(k >= 0 && nums[k] >= nums[k + 1]) k--;\n\n    if(k < 0) {\n        Arrays.sort(nums);\n    } else {\n        for (l = n - 1; l > k; l--) {\n            if (nums[l] > nums[k]) break;\n        }\n        int temp = nums[k];\n        nums[k] = nums[l];\n        nums[l] = temp;\n        Arrays.sort(nums, k + 1, n);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    nextPermutation(nums)\n    print(nums)",
            "javascript": "function nextPermutation(nums) {\n    let n = nums.length, k = n - 2, l;\n    while(k >= 0 && nums[k] >= nums[k + 1]) k--;\n\n    if(k < 0) {\n        nums.sort((a, b) => a - b);\n    } else {\n        for (l = n - 1; l > k; l--) {\n            if (nums[l] > nums[k]) break;\n        }\n        [nums[k], nums[l]] = [nums[l], nums[k]];\n        let tempArr = nums.slice(k + 1).sort((a, b) => a - b);\n        nums.splice(k + 1, n - k - 1, ...tempArr);\n    }\n}"
        }
    },
    "32": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <stack>\n\nint longestValidParentheses(string s) {\n    int n = s.length();\n    int result = 0;\n    std::stack<int> st;\n\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '(') {\n            st.push(i);\n        } else {\n            if (!st.empty() && s[st.top()] == '(') {\n                st.pop();\n            } else {\n                st.push(i);\n            }\n        }\n    }\n\n    if (st.empty()) {\n        result = n;\n    } else {\n        int right = n, left = 0;\n        while (!st.empty()) {\n            left = st.top();\n            st.pop();\n            result = std::max(result, right - left - 1);\n            right = left;\n        }\n        result = std::max(result, right);\n    }\n\n    return result;\n}\n\nint main() {\n    string s = $args;\n    int result = longestValidParentheses(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int longestValidParentheses(String s) {\n    int n = s.length();\n    int result = 0;\n    Stack<Integer> st = new Stack<>();\n\n    for (int i = 0; i < n; ++i) {\n        if (s.charAt(i) == '(') {\n            st.push(i);\n        } else {\n            if (!st.empty() && s.charAt(st.peek()) == '(') {\n                st.pop();\n            } else {\n                st.push(i);\n            }\n        }\n    }\n\n    if (st.empty()) {\n        result = n;\n    } else {\n        int right = n, left = 0;\n        while (!st.empty()) {\n            left = st.pop();\n            result = Math.max(result, right - left - 1);\n            right = left;\n        }\n        result = Math.max(result, right);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = longest_valid_parentheses(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const n = longestValidParentheses(s);\n    console.log(n);\n}"
        }
    },
    "33": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint search(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            return mid;\n        }\n        if (nums[mid] >= nums[left]) {\n            if (target >= nums[left] && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (target > nums[mid] && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int target = $args;\n    int result = search(nums, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            return mid;\n        }\n        if (nums[mid] >= nums[left]) {\n            if (target >= nums[left] && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (target > nums[mid] && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = search(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = search(nums, target);\n    console.log(result);\n}"
        }
    },
    "34": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n\nstd::vector<int> searchRange(std::vector<int>& nums, int target);\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = 5;\n    std::vector<int> result = searchRange(nums, target);\n    std::cout << \"[\" << result[0] << \", \" << result[1] << \"]\" << std::endl;\n    return 0;\n}\n",
            "java": "public int[] searchRange(int[] nums, int target) {\n    int start = -1, end = -1;\n    int left = 0, right = nums.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n            if (nums[mid] == target) {\n                start = mid;\n            }\n        }\n    }\n    \n    left = 0;\n    right = nums.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n            if (nums[mid] == target) {\n                end = mid;\n            }\n        }\n    }\n    \n    return new int[] {start, end};\n}",
            "javascript": "function searchRange(nums, target) {\n    let start = -1, end = -1;\n    let left = 0, right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n            if (nums[mid] === target) {\n                start = mid;\n            }\n        }\n    }\n\n    left = 0;\n    right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n            if (nums[mid] === target) {\n                end = mid;\n            }\n        }\n    }\n\n    return [start, end];\n}"
        }
    },
    "35": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint searchInsert(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return left;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int target = $args;\n    int result = searchInsert(nums, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = {1, 3, 5, 6};\n    int target = 5;\n    int result = searchInsert(nums, target);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = searchInsert(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = searchInsert(nums, target);\n    console.log(result);\n}"
        }
    },
    "37": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nbool isValid(vector<vector<char>>& board, int row, int col, char c) {\n    for (int i = 0; i < 9; i++) {\n        if (board[i][col] == c) return false; \n        if (board[row][i] == c) return false; \n        if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; \n    }\n    return true;\n}\n\nbool solveSudokuHelper(vector<vector<char>>& board) {\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            if (board[i][j] == '.') {\n                for (char c = '1'; c <= '9'; c++) {\n                    if (isValid(board, i, j, c)) {\n                        board[i][j] = c;\n\n                        if (solveSudokuHelper(board))\n                            return true;\n\n                        board[i][j] = '.';\n                    }\n                }\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvoid solveSudoku(vector<vector<char>>& board) {\n    solveSudokuHelper(board);\n}\n\nint main() {\n    vector<vector<char>> board = $args;\n    solveSudoku(board);\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            cout << board[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    solveSudoku(board)\n    print(board)",
            "javascript": "function solveSudoku(board) {\n    solveSudokuHelper(board);\n}"
        }
    },
    "38": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n\nstd::string countAndSay(int n) {\n    if (n == 1) return \"1\";\n    std::string previous = countAndSay(n-1);\n    std::string result = \"\";\n    int count = 1;\n    for (int i = 1; i < previous.length(); i++) {\n        if (previous[i] == previous[i-1]) {\n            count++;\n        } else {\n            result += std::to_string(count) + previous[i-1];\n            count = 1;\n        }\n    }\n    result += std::to_string(count) + previous.back();\n    return result;\n}\n\nint main() {\n    int n = $args;\n    std::string result = countAndSay(n);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "python": "def call_count_and_say(n):\n    result = count_and_say(n)\n    print(result)\n\nif __name__ == \"__main__\":\n    n = $args[0]\n    call_count_and_say(n)",
            "javascript": "function main() {\n    const n = $args;\n    const result = countAndSay(n);\n    console.log(result);\n}",
            "java": "public String countAndSay(int n) {\n    if (n == 1) return \"1\";\n    String previous = countAndSay(n-1);\n    StringBuilder result = new StringBuilder();\n    int count = 1;\n    for (int i = 1; i < previous.length(); i++) {\n        if (previous.charAt(i) == previous.charAt(i-1)) {\n            count++;\n        } else {\n            result.append(count).append(previous.charAt(i-1));\n            count = 1;\n        }\n    }\n    result.append(count).append(previous.charAt(previous.length()-1));\n    return result.toString();\n}"
        }
    },
    "39": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid findCombinations(std::vector<int>& candidates, int target, int startIndex, std::vector<int>& current, std::vector<std::vector<int>>& result) {\n    if (target == 0) {\n        result.push_back(current);\n        return;\n    }\n    if (startIndex == candidates.size() || target < 0) {\n        return;\n    }\n\n    findCombinations(candidates, target, startIndex + 1, current, result);\n\n    current.push_back(candidates[startIndex]);\n    findCombinations(candidates, target - candidates[startIndex], startIndex, current, result);\n    current.pop_back();\n}\n\nstd::vector<std::vector<int>> combinationSum(std::vector<int>& candidates, int target) {\n    std::vector<int> current;\n    std::vector<std::vector<int>> result;\n    findCombinations(candidates, target, 0, current, result);\n    return result;\n}\n\nint main() {\n    std::vector<int> candidates = $args;\n    int target = 10;\n    std::vector<std::vector<int>> result = combinationSum(candidates, target);\n\n    for (const auto& combination : result) {\n        for (const auto& num : combination) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    candidates = $args[0]\n    target = $args[1]\n    result = combinationSum(candidates, target)\n    print(result)",
            "javascript": "function main() {\n    const candidates = $args[0];\n    const target = $args[1];\n    const result = combinationSum(candidates, target);\n    console.log(result);\n}"
        }
    },
    "40": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid combine(std::vector<int>& candidates, int target, std::vector<std::vector<int>>& result, std::vector<int>& combination, int index) {\n    if (target == 0) {\n        result.push_back(combination);\n        return;\n    }\n\n    for (int i = index; i < candidates.size() && target >= candidates[i]; ++i) {\n        if (i == index || candidates[i] != candidates[i - 1]) {\n            combination.push_back(candidates[i]);\n            combine(candidates, target - candidates[i], result, combination, i + 1);\n            combination.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<int>> combinationSum2(std::vector<int>& candidates, int target) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> combination;\n    std::sort(candidates.begin(), candidates.end());\n    combine(candidates, target, result, combination, 0);\n    return result;\n}\n\nint main() {\n    std::vector<int> candidates = $args;\n    int target = 10;\n    std::vector<std::vector<int>> result = combinationSum2(candidates, target);\n    for (const auto& combination : result) {\n        for (const auto& num : combination) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    candidates = $args[0]\n    target = $args[1]\n    result = combinationSum2(candidates, target)\n    print(result)",
            "javascript": "function main() {\n    const candidates = $args[0];\n    const target = $args[1];\n    const result = combinationSum2(candidates, target);\n    console.log(result);\n}",
            "java": "public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n    List<List<Integer>> result = new ArrayList<>();\n    Arrays.sort(candidates);\n    combine(candidates, target, 0, result, new ArrayList<Integer>());\n    return result;\n}\n\nprivate void combine(int[] candidates, int target, int start, List<List<Integer>> result, List<Integer> current) {\n    if (target == 0) {\n        result.add(new ArrayList<>(current));\n        return;\n    }\n\n    for (int i = start; i < candidates.length && target >= candidates[i]; i++) {\n        if (i == start || candidates[i] != candidates[i - 1]) {\n            current.add(candidates[i]);\n            combine(candidates, target - candidates[i], i + 1, result, current);\n            current.remove(current.size() - 1);\n        }\n    }\n}"
        }
    },
    "41": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint firstMissingPositive(vector<int>& nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; ++i)\n        while(nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i])\n            swap(nums[i], nums[nums[i] - 1]);\n\n    for(int i = 0; i < n; ++i)\n        if(nums[i] != i + 1)\n            return i + 1;\n    return n + 1;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int result = firstMissingPositive(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int firstMissingPositive(int[] nums) {\n    int n = nums.length;\n    for(int i = 0; i < n; i++) {\n        while(nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {\n            int temp = nums[i];\n            nums[i] = nums[temp - 1];\n            nums[temp - 1] = temp;\n        }\n    }\n\n    for(int i = 0; i < n; i++) {\n        if(nums[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = firstMissingPositive(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = firstMissingPositive(nums);\n    console.log(result);\n}"
        }
    },
    "42": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> height = $args;\n    int result = trap(height);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int trap(int[] height) {\n    int n = height.length, left = 0, right = n - 1, maxLeft = 0, maxRight = 0, water = 0;\n\n    while (left < right) {\n        if (height[left] <= height[right]) {\n            maxLeft = Math.max(maxLeft, height[left]);\n            water += maxLeft - height[left];\n            left++;\n        } else {\n            maxRight = Math.max(maxRight, height[right]);\n            water += maxRight - height[right];\n            right--;\n        }\n    }\n\n    return water;\n}",
            "python": "if __name__ == \"__main__\":\n    height = $args[0]\n    result = trap(height)\n    print(result)",
            "javascript": "function main() {\n    const height = $args;\n    const result = trap(height);\n    console.log(result);\n}"
        }
    },
    "43": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring multiply(string num1, string num2) {\n    int m = num1.size(), n = num2.size();\n    string res(m + n, '0');\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n            int p1 = i + j, p2 = i + j + 1;\n            int mult = (num1[i] - '0') * (num2[j] - '0') + (res[p2] - '0');\n            res[p1] += mult / 10;\n            res[p2] = (mult % 10) + '0';\n        }\n    }\n    while (res.size() > 1 && res[0] == '0')\n        res.erase(res.begin());\n    return res;\n}\n\nint main() {\n    string num1 = $args;\n    string num2 = $args;\n    string result = multiply(num1, num2);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    num1 = $args[0]\n    num2 = $args[1]\n    result = multiply(num1, num2)\n    print(result)",
            "javascript": "function main() {\n    const num1 = $args[0];\n    const num2 = $args[1];\n    const result = multiply(num1, num2);\n    console.log(result);\n}",
            "java": "public String multiply(String num1, String num2) {\n    int m = num1.length(), n = num2.length();\n    int[] pos = new int[m + n];\n    \n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n            int mult = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');\n            int p1 = i + j, p2 = i + j + 1;\n            int sum = mult + pos[p2];\n            pos[p1] += sum / 10;\n            pos[p2] = sum % 10;\n        }\n    }\n    \n    StringBuilder res = new StringBuilder();\n    for (int p : pos) if (!(res.length() == 0 && p == 0)) res.append(p);\n    return res.length() == 0 ? \"0\" : res.toString();\n}"
        }
    },
    "44": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n\nbool isMatch(const std::string& s, const std::string& p) {\n    int m = s.size(), n = p.size();\n    int i = 0, j = 0, asterisk = -1, match;\n    while (i < m) {\n        if (j < n && (s[i] == p[j] || p[j] == '?')) {\n            i++; j++;\n        } else if (j < n && p[j] == '*') {\n            match = i;\n            asterisk = j++;\n        } else if (asterisk >= 0) {\n            i = ++match;\n            j = asterisk + 1;\n        } else {\n            return false;\n        }\n    }\n    while (j < n && p[j] == '*') j++;\n    return j == n;\n}\n\nint main() {\n    std::string s = $args;\n    std::string p = $args;\n    bool result = isMatch(s, p);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isMatch(String s, String p) {\n    int m = s.length(), n = p.length();\n    int i = 0, j = 0, asterisk = -1, match = 0;\n    while (i < m) {\n        if (j < n && (s.charAt(i) == p.charAt(j) || p.charAt(j) == '?')) {\n            i++; j++;\n        } else if (j < n && p.charAt(j) == '*') {\n            match = i;\n            asterisk = j++;\n        } else if (asterisk != -1) {\n            i = ++match;\n            j = asterisk + 1;\n        } else {\n            return false;\n        }\n    }\n    while (j < n && p.charAt(j) == '*') j++;\n    return j == n;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    p = $args[1]\n    result = is_match(s, p)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const p = $args[1];\n    const result = isMatch(s, p);\n    console.log(result);\n}"
        }
    },
    "45": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint jump(vector<int>& nums) {\n    int jumps = 0, current_end = 0, current_farthest = 0;\n    \n    for (int i = 0; i < nums.size() - 1; i++) {\n        current_farthest = max(current_farthest, i + nums[i]);\n        if (i == current_end) {\n            jumps++;\n            current_end = current_farthest;\n        }\n    }\n    return jumps;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int result = jump(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int jump(int[] nums) {\n    int jumps = 0, currentEnd = 0, currentFarthest = 0;\n    \n    for (int i = 0; i < nums.length - 1; i++) {\n        currentFarthest = Math.max(currentFarthest, i + nums[i]);\n        if (i == currentEnd) {\n            jumps++;\n            currentEnd = currentFarthest;\n        }\n    }\n    return jumps;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = jump(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = jump(nums);\n    console.log(result);\n}"
        }
    },
    "46": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid helper(std::vector<int>& nums, int index, std::vector<std::vector<int>>& results) {\n    if (index == nums.size() - 1) {\n        results.push_back(nums);\n        return;\n    }\n\n    for (int i = index; i < nums.size(); i++) {\n        std::swap(nums[index], nums[i]);\n        helper(nums, index + 1, results);\n        std::swap(nums[index], nums[i]);\n    }\n}\n\nstd::vector<std::vector<int>> permute(std::vector<int>& nums) {\n    std::vector<std::vector<int>> results;\n    helper(nums, 0, results);\n    return results;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = permute(nums);\n    for (const auto& res : result) {\n        for (const auto& num : res) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> results = new ArrayList<>();\n    helper(nums, 0, results);\n    return results;\n}\n\nprivate void helper(int[] nums, int index, List<List<Integer>> results) {\n    if (index == nums.length - 1) {\n        List<Integer> tempList = new ArrayList<>();\n        for (int n : nums) {\n            tempList.add(n);\n        }\n        results.add(tempList);\n        return;\n    }\n\n    for (int i = index; i < nums.length; i++) {\n        swap(nums, index, i);\n        helper(nums, index + 1, results);\n        swap(nums, index, i);\n    }\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    int temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = permute(nums)\n    print(result)",
            "javascript": "function main() {\n  const nums = $args;\n  const results = permute(nums);\n  console.log(results);\n}"
        }
    },
    "47": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid backtrack(std::vector<std::vector<int>>& result, std::vector<int>& nums, int start) {\n    if (start == nums.size()) {\n        result.push_back(nums);\n        return;\n    }\n    for (int i = start; i < nums.size(); i++) {\n        if (i > start && nums[i] == nums[start]) continue;\n        std::swap(nums[start], nums[i]);\n        backtrack(result, nums, start + 1);\n        std::swap(nums[start], nums[i]);\n    }\n}\n\nstd::vector<std::vector<int>> permuteUnique(std::vector<int>& nums) {\n    std::sort(nums.begin(), nums.end());\n    std::vector<std::vector<int>> result;\n    backtrack(result, nums, 0);\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = permuteUnique(nums);\n    for (const auto& res : result) {\n        for (const auto& num : res) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> permuteUnique(int[] nums) {\n    Arrays.sort(nums);\n    List<List<Integer>> result = new ArrayList<>();\n    boolean[] visited = new boolean[nums.length];\n    backtrack(result, new ArrayList<>(), nums, visited);\n    return result;\n}\n\nprivate void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums, boolean[] visited) {\n    if (tempList.size() == nums.length) {\n        result.add(new ArrayList<>(tempList));\n    } else {\n        for (int i = 0; i < nums.length; i++) {\n            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])) continue;\n            visited[i] = true;\n            tempList.add(nums[i]);\n            backtrack(result, tempList, nums, visited);\n            tempList.remove(tempList.size() - 1);\n            visited[i] = false;\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = permuteUnique(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    nums.sort((a, b) => a - b);\n    const result = [];\n    const visited = new Array(nums.length).fill(false);\n\n    function backtrack(tempList) {\n        if (tempList.length === nums.length) {\n            result.push([...tempList]);\n            return;\n        }\n        for (let i = 0; i < nums.length; i++) {\n            if (visited[i] || (i > 0 && nums[i] === nums[i - 1] && !visited[i - 1])) continue;\n            visited[i] = true;\n            tempList.push(nums[i]);\n            backtrack(tempList);\n            tempList.pop();\n            visited[i] = false;\n        }\n    }\n\n    backtrack([]);\n    console.log(result);\n}\n"
        }
    },
    "48": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid rotate(vector<vector<int>>& matrix) {\n    int n = matrix.size();\n    for (int i = 0; i < n / 2; i++) {\n        for (int j = i; j < n - i - 1; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = temp;\n        }\n    }\n}\n\nint main() {\n    vector<vector<int>> matrix = $args;\n    rotate(matrix);\n    for (int i = 0; i < matrix.size(); i++) {\n        for (int j = 0; j < matrix[i].size(); j++) {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public void rotate(int[][] matrix) {\n    int n = matrix.length;\n    for (int i = 0; i < n / 2; i++) {\n        for (int j = i; j < n - i - 1; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = temp;\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    rotate(matrix)\n    print(matrix)",
            "javascript": "function rotate(matrix) {\n    let n = matrix.length;\n    for (let i = 0; i < Math.floor(n / 2); i++) {\n        for (let j = i; j < n - i - 1; j++) {\n            let temp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = temp;\n        }\n    }\n}\n\nconst matrix = $args;\nrotate(matrix);\nconsole.log(matrix);"
        }
    },
    "49": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nstd::vector<std::vector<std::string>> groupAnagrams(std::vector<std::string>& strs) {\n    std::map<std::string, std::vector<std::string>> anagramMap;\n\n    for (std::string str : strs) {\n        std::string key = str;\n        std::sort(key.begin(), key.end());\n        anagramMap[key].push_back(str);\n    }\n\n    std::vector<std::vector<std::string>> result;\n    for (auto &entry : anagramMap) {\n        result.push_back(entry.second);\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<std::string> strs = $args;\n    std::vector<std::vector<std::string>> result = groupAnagrams(strs);\n\n    for (const auto& group : result) {\n        for (const auto& str : group) {\n            std::cout << str << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<String>> groupAnagrams(String[] strs) {\n    Map<String, List<String>> anagramMap = new HashMap<>();\n\n    for (String str : strs) {\n        char[] keyChars = str.toCharArray();\n        Arrays.sort(keyChars);\n        String key = new String(keyChars);\n\n        anagramMap.putIfAbsent(key, new ArrayList<>());\n        anagramMap.get(key).add(str);\n    }\n\n    return new ArrayList<>(anagramMap.values());\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    result = group_anagrams(strs)\n    print(result)",
            "javascript": "function main() {\n    const strs = $args;\n    const result = groupAnagrams(strs);\n    console.log(result);\n}"
        }
    },
    "50": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\ndouble myPow(double x, int n) {\n    if (n == 0) return 1;\n    if (n < 0) {\n        x = 1 / x;\n        n = -n;\n    }\n    double result = 1;\n    double currentProduct = x;\n    for (long long i = n; i; i /= 2) {\n        if ((i % 2) == 1) {\n            result = result * currentProduct;\n        }\n        currentProduct = currentProduct * currentProduct;\n    }\n    return result;\n}\n\nint main() {\n    double x = $args;\n    int n = $args;\n    double result = myPow(x, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    double x = $args[0];\n    int n = $args[1];\n    double result = myPow(x, n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args[0]\n    n = $args[1]\n    result = myPow(x, n)\n    print(result)",
            "javascript": "function main() {\n    const x = $args[0];\n    const n = $args[1];\n    const result = myPow(x, n);\n    console.log(result);\n}"
        }
    },
    "51": {
        "call_functions": {
            "c++": "std::vector<std::vector<std::string>> solveNQueens(int n) {\n    std::vector<std::vector<std::string>> result;\n    std::vector<std::string> board(n, std::string(n, '.'));\n    solve(result, board, n, 0);\n    return result;\n}",
            "java": "public List<List<String>> solveNQueens(int n) {\n    List<List<String>> result = new ArrayList<>();\n    solve(result, new ArrayList<>(), n, 0);\n    return result;\n}\n\nprivate void solve(List<List<String>> result, List<Integer> current, int n, int col) {\n    if (col == n) {\n        result.add(generateBoard(current, n));\n        return;\n    }\n    for (int row = 0; row < n; row++) {\n        if(isSafe(current, row, col)) {\n            current.add(row);\n            solve(result, current, n, col + 1);\n            current.remove(col);\n        }\n    }\n}\n\nprivate boolean isSafe(List<Integer> current, int row, int col) {\n    for (int i = 0; i < col; i++) {\n        int prevRow = current.get(i);\n        if (prevRow == row || (Math.abs(col - i) == Math.abs(row - prevRow))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate List<String> generateBoard(List<Integer> current, int n) {\n    List<String> board = new ArrayList<>();\n    for (int row : current) {\n        StringBuilder sb = new StringBuilder();\n        for (int col = 0; col < n; col++)\n            sb.append((col == row) ? \"Q\" : \".\");\n        board.add(sb.toString());\n    }\n    return board;\n}",
            "javascript": "function solveNQueens(n) {\n  function isSafe(board, row, col) {\n    for (let i = 0; i < col; i++)\n      if (board[row][i] == 'Q') return false;\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--)\n      if (board[i][j] == 'Q') return false;\n    for (let i = row, j = col; i < n && j >= 0; i++, j--)\n      if (board[i][j] == 'Q') return false;\n    return true;\n  }\n\n  function solve(result, board, n, col) {\n    if (col == n) {\n      result.push(board.map(row => row.join('')));\n      return;\n    }\n    for (let row = 0; row < n; row++) {\n      if (isSafe(board, row, col)) {\n        board[row][col] = 'Q';\n        solve(result, board, n, col + 1);\n        board[row][col] = '.';\n      }\n    }\n  }\n\n  const result = [];\n  const board = Array.from({ length: n }, () => Array(n).fill('.'));\n  solve(result, board, n, 0);\n  return result;\n}"
        }
    },
    "52": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = totalNQueens(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int totalNQueens(int n) {\n    ArrayList<Integer> cols = new ArrayList<>();\n    return backtrack(n, cols);\n}\n\npublic int backtrack(int n, ArrayList<Integer> cols) {\n    if (cols.size() == n) {\n        return 1;\n    }\n\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (isSafe(cols, i)) {\n            cols.add(i);\n            count += backtrack(n, cols);\n            cols.remove(cols.size() - 1);\n        }\n    }\n    return count;\n}\n\npublic boolean isSafe(ArrayList<Integer> cols, int row) {\n    int col = cols.size();\n    for (int i = 0; i < cols.size(); i++) {\n        if (cols.get(i) == row || Math.abs(i - col) == Math.abs(cols.get(i) - row)) {\n            return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = total_n_queens(n)\n    print(result)",
            "javascript": "function totalNQueens(n) {\n    let cols = [];\n    return backtrack(n, cols);\n}"
        }
    },
    "53": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = maxSubArray(nums);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maxSubArray(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = maxSubArray(nums);\n    console.log(result);\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    int result = maxSubArray(nums);\n    System.out.println(result);\n}"
        }
    },
    "54": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> matrix = $args;\n    vector<int> result = spiralOrder(matrix);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> spiralOrder(int[][] matrix) {\n    List<Integer> result = new ArrayList<>();\n    if (matrix == null || matrix.length == 0) return result;\n    int m = matrix.length, n = matrix[0].length;\n    int rowStart = 0, colStart = 0, rowEnd = m - 1, colEnd = n - 1;\n\n    while (rowStart <= rowEnd && colStart <= colEnd) {\n        for (int i = colStart; i <= colEnd; i++) {\n            result.add(matrix[rowStart][i]);\n        }\n        rowStart++;\n        for (int i = rowStart; i <= rowEnd; i++) {\n            result.add(matrix[i][colEnd]);\n        }\n        colEnd--;\n        if (rowStart <= rowEnd) {\n            for (int i = colEnd; i >= colStart; i--) {\n                result.add(matrix[rowEnd][i]);\n            }\n        }\n        rowEnd--;\n        if (colStart <= colEnd) {\n            for (int i = rowEnd; i >= rowStart; i--) {\n                result.add(matrix[i][colStart]);\n            }\n        }\n        colStart++;\n    }\n    return result;\n}",
            "javascript": "function main() {\n    const matrix = $args;\n    const result = spiralOrder(matrix);\n    console.log(result);\n}"
        }
    },
    "55": {
        "call_functions": {
            "c++": "bool canJump(vector<int>& nums) {\n    int maxReach = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (i > maxReach) return false;\n        maxReach = max(maxReach, i + nums[i]);\n    }\n    return true;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    boolean result = canJump(nums);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = canJump(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = canJump(nums);\n    console.log(result);\n}"
        }
    },
    "56": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    std::vector<std::vector<int>> result = merge(intervals);\n\n    for (const auto& interval : result) {\n        std::cout << '[' << interval[0] << ',' << interval[1] << ']';\n    }\n\n    return 0;\n}",
            "java": "public List<int[]> merge(int[][] intervals) {\n    if (intervals.length == 0) return new ArrayList<>();\n\n    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n    List<int[]> result = new ArrayList<>();\n    result.add(intervals[0]);\n\n    for (int i = 1; i < intervals.length; i++) {\n        if (result.get(result.size() - 1)[1] >= intervals[i][0]) {\n            result.get(result.size() - 1)[1] = Math.max(result.get(result.size() - 1)[1], intervals[i][1]);\n        } else {\n            result.add(intervals[i]);\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = merge(intervals)\n    print(result)",
            "javascript": "function merge(intervals) {\n    if (intervals.length === 0) return [];\n\n    intervals.sort((a, b) => a[0] - b[0]);\n    const result = [intervals[0]];\n\n    for (let i = 1; i < intervals.length; i++) {\n        if (result[result.length - 1][1] >= intervals[i][0]) {\n            result[result.length - 1][1] = Math.max(result[result.length - 1][1], intervals[i][1]);\n        } else {\n            result.push(intervals[i]);\n        }\n    }\n\n    return result;\n}"
        }
    },
    "57": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> intervals = $args;\n    vector<int> newInterval = $args;\n    vector<vector<int>> result = insert(intervals, newInterval);\n\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = 0; j < result[i].size(); j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    newInterval = $args[1]\n    result = insert(intervals, newInterval)\n    print(result)",
            "javascript": "function insert(intervals, newInterval) {\n    const result = [];\n    let start_pos = 0;\n\n    while (start_pos < intervals.length && intervals[start_pos][1] < newInterval[0]) {\n        result.push(intervals[start_pos]);\n        start_pos++;\n    }\n\n    while (start_pos < intervals.length && intervals[start_pos][0] <= newInterval[1]) {\n        newInterval[0] = Math.min(newInterval[0], intervals[start_pos][0]);\n        newInterval[1] = Math.max(newInterval[1], intervals[start_pos][1]);\n        start_pos++;\n    }\n\n    result.push(newInterval);\n\n    while (start_pos < intervals.length) {\n        result.push(intervals[start_pos]);\n        start_pos++;\n    }\n\n    return result;\n}",
            "java": "public List<int[]> insert(int[][] intervals, int[] newInterval) {\n    List<int[]> result = new ArrayList<>();\n    int start_pos = 0;\n\n    while (start_pos < intervals.length && intervals[start_pos][1] < newInterval[0]) {\n        result.add(intervals[start_pos]);\n        start_pos++;\n    }\n\n    while (start_pos < intervals.length && intervals[start_pos][0] <= newInterval[1]) {\n        newInterval[0] = Math.min(newInterval[0], intervals[start_pos][0]);\n        newInterval[1] = Math.max(newInterval[1], intervals[start_pos][1]);\n        start_pos++;\n    }\n\n    result.add(newInterval);\n\n    while (start_pos < intervals.length) {\n        result.add(intervals[start_pos]);\n        start_pos++;\n    }\n\n    return result;\n}"
        }
    },
    "58": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = lengthOfLastWord(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int lengthOfLastWord(String s) {\n    int length = 0;\n    int tail = s.length() - 1;\n    while (tail >= 0 && s.charAt(tail) == ' ') tail--;\n    while (tail >= 0 && s.charAt(tail) != ' ') {\n        length++;\n        tail--;\n    }\n    return length;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = length_of_last_word(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = lengthOfLastWord(s);\n    console.log(result);\n}"
        }
    },
    "59": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> result = generateMatrix(n);\n\n    for (const auto& row : result) {\n        for (const auto& num : row) {\n            std::cout << num << ' ';\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = generateMatrix(n)\n    print(result)",
            "javascript": "function generateMatrix(n) {\n    const matrix = Array.from({ length: n }, () => new Array(n).fill(0));\n    let value = 1, top = 0, bottom = n - 1, left = 0, right = n - 1;\n\n    while (value <= n * n) {\n        for (let i = left; i <= right; i++) {\n            matrix[top][i] = value++;\n        }\n\n        for (let i = top + 1; i <= bottom; i++) {\n            matrix[i][right] = value++;\n        }\n\n        if (top < bottom && left < right) {\n            for (let i = right - 1; i >= left; i--) {\n                matrix[bottom][i] = value++;\n            }\n\n            for (let i = bottom - 1; i > top; i--) {\n                matrix[i][left] = value++;\n            }\n        }\n\n        top++, bottom--, left++, right--;\n    }\n\n    return matrix;\n}"
        }
    },
    "60": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    int k = $args;\n    std::string result = getPermutation(n, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String getPermutation(int n, int k) {\n    List<Integer> nums = new ArrayList<>();\n    int[] factorials = new int[n];\n    StringBuilder sb = new StringBuilder();\n    int index;\n\n    factorials[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        nums.add(i);\n        factorials[i - 1] = i * factorials[i - 1];\n    }\n\n    k--;\n\n    for (int i = n; i >= 1; --i) {\n        index = k / factorials[i - 1];\n        k %= factorials[i - 1];\n        sb.append(nums.get(index));\n        nums.remove(index);\n    }\n\n    return sb.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = getPermutation(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const k = $args[1];\n    const result = getPermutation(n, k);\n    console.log(result);\n}"
        }
    },
    "65": {
        "call_functions": {
            "c++": "#include <regex>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    bool result = isNumber(s);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isNumber(String s) {\n        String pattern = \"^[-+]?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(e[-+]?[0-9]+)?$\";\n        return Pattern.matches(pattern, s);\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = is_number(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = isNumber(s);\n    console.log(result);\n}"
        }
    },
    "66": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> digits = $args;\n    std::vector<int> result = plusOne(digits);\n\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n",
            "python": "if __name__ == \"__main__\":\n    digits = $args[0]\n    result = plusOne(digits)\n    print(result)",
            "javascript": "function main() {\n    const digits = $args;\n    const result = plusOne(digits);\n    console.log(result);\n}"
        }
    },
    "67": {
        "call_functions": {
            "c++": "std::string addBinary(std::string a, std::string b) {\n    std::string result = \"\";\n    int i = a.size() - 1, j = b.size() - 1, carry = 0;\n    while (i >= 0 || j >= 0 || carry) {\n        if (i >= 0) carry += a[i--] - '0';\n        if (j >= 0) carry += b[j--] - '0';\n        result = char(carry % 2 + '0') + result;\n        carry /= 2;\n    }\n    return result;\n}\n\nint main() {\n    std::string a = $args;\n    std::string b = $args;\n    std::string result = addBinary(a, b);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String addBinary(String a, String b) {\n    StringBuilder result = new StringBuilder();\n    int i = a.length() - 1, j = b.length() - 1, carry = 0;\n    while (i >= 0 || j >= 0 || carry != 0) {\n        if (i >= 0) carry += a.charAt(i--) - '0';\n        if (j >= 0) carry += b.charAt(j--) - '0';\n        result.insert(0, carry % 2);\n        carry /= 2;\n    }\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = addBinary(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = addBinary(a, b);\n    console.log(result);\n}"
        }
    },
    "68": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> fullJustify(vector<string>& words, int maxWidth) {\n    vector<string> result;\n    int idx = 0;\n    while (idx < words.size()) {\n        int totalChars = words[idx].size();\n        int last = idx + 1;\n        while (last < words.size()) {\n            if (totalChars + 1 + words[last].length() > maxWidth) break;\n            totalChars += 1 + words[last].length();\n            last++;\n        }\n        int gaps = last - idx - 1;\n        stringstream line;\n        if (last == words.size() || gaps == 0) {\n            for (int i = idx; i < last; i++) {\n                line << words[i];\n                if (i < last - 1) line << \" \";\n            }\n            line << string(maxWidth - line.str().size(), ' ');\n        } else {\n            int evenSpaces = (maxWidth - totalChars) / gaps;\n            int extraSpaces = (maxWidth - totalChars) % gaps;\n            for (int i = idx; i < last; i++) {\n                line << words[i];\n                if (i < last - 1) {\n                    line << string(evenSpaces + (i - idx < extraSpaces ? 1 : 0), ' ');\n                }\n            }\n        }\n        idx = last;\n        result.push_back(line.str());\n    }\n    return result;\n}",
            "java": "public List<String> fullJustify(String[] words, int maxWidth) {\n    List<String> result = new ArrayList<>();\n    int idx = 0;\n    while (idx < words.length) {\n        int totalChars = words[idx].length();\n        int last = idx + 1;\n        while (last < words.length) {\n            if (totalChars + 1 + words[last].length() > maxWidth) break;\n            totalChars += 1 + words[last].length();\n            last++;\n        }\n        int gaps = last - idx - 1;\n        StringBuilder line = new StringBuilder();\n        if (last == words.length || gaps == 0) {\n            for (int i = idx; i < last; i++) {\n                line.append(words[i]);\n                if (i < last - 1) line.append(\" \");\n            }\n            while (line.length() < maxWidth) line.append(\" \");\n        } else {\n            int evenSpaces = (maxWidth - totalChars) / gaps;\n            int extraSpaces = (maxWidth - totalChars) % gaps;\n            for (int i = idx; i < last; i++) {\n                line.append(words[i]);\n                if (i < last - 1) {\n                    line.append(\" \".repeat(evenSpaces + (i - idx < extraSpaces ? 1 : 0)));\n                }\n            }\n        }\n        idx = last;\n        result.add(line.toString());\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    maxWidth = $args[1]\n    result = fullJustify(words, maxWidth)\n    print(result)",
            "javascript": "function fullJustify(words, maxWidth) {\n    const result = [];\n    let idx = 0;\n    while (idx < words.length) {\n        let totalChars = words[idx].length;\n        let last = idx + 1;\n        while (last < words.length) {\n            if (totalChars + 1 + words[last].length > maxWidth) break;\n            totalChars += 1 + words[last].length;\n            last++;\n        }\n        const gaps = last - idx - 1;\n        let line = \"\";\n        if (last === words.length || gaps === 0) {\n            for (let i = idx; i < last; i++) {\n                line += words[i];\n                if (i < last - 1) line += \" \";\n            }\n            while (line.length < maxWidth) line += \" \";\n        } else {\n            const evenSpaces = Math.floor((maxWidth - totalChars) / gaps);\n            const extraSpaces = (maxWidth - totalChars) % gaps;\n            for (let i = idx; i < last; i++) {\n                line += words[i];\n                if (i < last - 1) {\n                    line += \" \".repeat(evenSpaces + (i - idx < extraSpaces ? 1 : 0));\n                }\n            }\n        }\n        idx = last;\n        result.push(line);\n    }\n    return result;\n}"
        }
    },
    "69": {
        "call_functions": {
            "c++": "int main() {\n    int x = $args;\n    int result = mySqrt(x);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int mySqrt(int x) {\n    if (x == 0 || x == 1) return x;\n    int start = 1, end = x, ans = 0;\n    while (start <= end) {\n        int mid = (start + end) / 2;\n        if (mid * mid == x) return mid;\n        if (mid <= x / mid) {\n            start = mid + 1;\n            ans = mid;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args[0]\n    result = mySqrt(x)\n    print(result)",
            "javascript": "function main() {\n    const x = $args;\n    const result = mySqrt(x);\n    console.log(result);\n}"
        }
    },
    "71": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <sstream>\n\nint main() {\n    std::string path = $args;\n    std::string result = simplifyPath(path);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    path = $args[0]\n    result = simplifyPath(path)\n    print(result)",
            "javascript": "function main() {\n    const path = $args;\n    const result = simplifyPath(path);\n    console.log(result);\n}",
            "java": "public String simplifyPath(String path) {\n    String[] parts = path.split(\"/\");\n    LinkedList<String> stack = new LinkedList<>();\n\n    for (String part : parts) {\n        if (part.isEmpty() || part.equals(\".\")) continue;\n        if (part.equals(\"..\")) {\n            if (!stack.isEmpty()) stack.removeLast();\n        } else {\n            stack.addLast(part);\n        }\n    }\n\n    StringBuilder canonicalPath = new StringBuilder();\n    for (String piece : stack) {\n        canonicalPath.append('/').append(piece);\n    }\n    return stack.isEmpty() ? \"/\" : canonicalPath.toString();\n}"
        }
    },
    "72": {
        "call_functions": {
            "c++": "int minDistance(string word1, string word2) {\n    int m = word1.size();\n    int n = word2.size();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n    \n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0) {\n                dp[i][j] = j;\n            } else if (j == 0) {\n                dp[i][j] = i;\n            } else if (word1[i - 1] == word2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}",
            "java": "public int minDistance(String word1, String word2) {\n    int m = word1.length();\n    int n = word2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    \n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0) {\n                dp[i][j] = j;\n            } else if (j == 0) {\n                dp[i][j] = i;\n            } else if (word1.charAt(i - 1) == word2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    word1 = $args[0]\n    word2 = $args[1]\n    result = minDistance(word1, word2)\n    print(result)",
            "javascript": "function minDistance(word1, word2) {\n    const m = word1.length;\n    const n = word2.length;\n    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    \n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            if (i === 0) {\n                dp[i][j] = j;\n            } else if (j === 0) {\n                dp[i][j] = i;\n            } else if (word1[i - 1] === word2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"
        }
    },
    "73": {
        "call_functions": {
            "c++": "void setZeroes(vector<vector<int>>& matrix) {\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    bool firstRow = false, firstCol = false;\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (matrix[i][j] == 0) {\n                if (i == 0) firstRow = true;\n                if (j == 0) firstCol = true;\n                matrix[i][0] = 0;\n                matrix[0][j] = 0;\n            }\n        }\n    }\n\n    for (int i = 1; i < rows; i++) {\n        for (int j = 1; j < cols; j++) {\n            if (matrix[i][0] == 0 || matrix[0][j] == 0)\n                matrix[i][j] = 0;\n        }\n    }\n\n    if (firstRow) {\n        for (int j = 0; j < cols; j++)\n            matrix[0][j] = 0;\n    }\n\n    if (firstCol) {\n        for (int i = 0; i < rows; i++)\n            matrix[i][0] = 0;\n    }\n}",
            "java": "public void setZeroes(int[][] matrix)",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    setZeroes(matrix)\n    for row in matrix:\n        print(row)",
            "javascript": "function setZeroes(matrix) {\n    let rows = matrix.length;\n    let cols = matrix[0].length;\n    let firstRow = false;\n    let firstCol = false;\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (matrix[i][j] === 0) {\n                if (i === 0) firstRow = true;\n                if (j === 0) firstCol = true;\n                matrix[i][0] = 0;\n                matrix[0][j] = 0;\n            }\n        }\n    }\n\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            if (matrix[i][0] === 0 || matrix[0][j] === 0) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n\n    if (firstRow) {\n        for (let j = 0; j < cols; j++) \n            matrix[0][j] = 0;\n    }\n\n    if (firstCol) {\n        for (let i = 0; i < rows; i++)\n            matrix[i][0] = 0;\n    }\n}"
        }
    },
    "75": {
        "call_functions": {
            "c++": "void sortColors(vector<int>& nums) {\n    int red = 0, white = 0, blue = nums.size() - 1;\n    while (white <= blue) {\n        if (nums[white] == 0) {\n            swap(nums[red++], nums[white++]);\n        } else if (nums[white] == 1) {\n            white++;\n        } else {\n            swap(nums[white], nums[blue--]);\n        }\n    }\n}",
            "java": "public void sortColors(int[] nums) {\n    int red = 0, white = 0, blue = nums.length - 1;\n    while (white <= blue) {\n        if (nums[white] == 0) {\n            int temp = nums[red];\n            nums[red++] = nums[white];\n            nums[white++] = temp;\n        } else if (nums[white] == 1) {\n            white++;\n        } else {\n            int temp = nums[white];\n            nums[white] = nums[blue];\n            nums[blue--] = temp;\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    sortColors(nums)\n    print(nums)",
            "javascript": "function sortColors(nums) {\n    let red = 0, white = 0, blue = nums.length - 1;\n    while (white <= blue) {\n        if (nums[white] === 0) {\n            [nums[red], nums[white]] = [nums[white], nums[red]];\n            red++;\n            white++;\n        } else if (nums[white] === 1) {\n            white++;\n        } else {\n            [nums[white], nums[blue]] = [nums[blue], nums[white]];\n            blue--;\n        }\n    }\n}\n\nconst nums = $args;\n\nsortColors(nums);\nconsole.log(nums);"
        }
    },
    "76": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    std::string result = min_window(s, t);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String minWindow(String s, String t) {\n    HashMap<Character, Integer> need = new HashMap<>();\n    HashMap<Character, Integer> window = new HashMap<>();\n    for (char c : t.toCharArray()) need.put(c, need.getOrDefault(c, 0) + 1);\n    \n    int left = 0, right = 0;\n    int valid = 0;\n    int start = 0, length = Integer.MAX_VALUE;\n\n    while (right < s.length()) {\n        char c = s.charAt(right);\n        right++;\n        if (need.containsKey(c)) {\n            window.put(c, window.getOrDefault(c, 0) + 1);\n            if (window.get(c) <= need.get(c)) valid++;\n        }\n\n        while (valid == t.length()) {\n            if (right - left < length) {\n                start = left;\n                length = right - left;\n            }\n\n            char d = s.charAt(left);\n            left++;\n            if (need.containsKey(d)) {\n                if (window.get(d) <= need.get(d)) valid--;\n                window.put(d, window.get(d) - 1);\n            }\n        }\n    }\n    return length == Integer.MAX_VALUE ? \"\" : s.substring(start, start + length);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = min_window(s, t)\n    print(result)",
            "javascript": "function minWindow(s, t) {\n    const need = new Map();\n    const window = new Map();\n\n    for (const c of t) {\n        need.set(c, (need.get(c) || 0) + 1);\n    }\n    \n    let left = 0, right = 0;\n    let valid = 0;\n    let start = 0, length = Infinity;\n\n    while (right < s.length) {\n        const c = s[right];\n        right++;\n        if (need.has(c)) {\n            window.set(c, (window.get(c) || 0) + 1);\n            if (window.get(c) <= need.get(c)) valid++;\n        }\n\n        while (valid === t.length) {\n            if (right - left < length) {\n                start = left;\n                length = right - left;\n            }\n\n            const d = s[left];\n            left++;\n            if (need.has(d)) {\n                if (window.get(d) <= need.get(d)) valid--;\n                window.set(d, window.get(d) - 1);\n            }\n        }\n    }\n    return length === Infinity ? \"\" : s.substring(start, start + length);\n}"
        }
    },
    "77": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid backtrack(int n, int k, int start, std::vector<int>& current, std::vector<std::vector<int>>& result) {\n    if (current.size() == k) {\n        result.push_back(current);\n        return;\n    }\n\n    for (int i = start; i <= n; ++i) {\n        current.push_back(i);\n        backtrack(n, k, i + 1, current, result);\n        current.pop_back();\n    }\n}\n\nstd::vector<std::vector<int>> combine(int n, int k) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> current;\n    backtrack(n, k, 1, current, result);\n    return result;\n}\n\nint main() {\n    int n = $args;\n    int k = $args;\n    std::vector<std::vector<int>> result = combine(n, k);\n    for (const auto& combination : result) {\n        for (const auto& num : combination) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> combine(int n, int k) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(n, k, 1, new ArrayList<>(), result);\n    return result;\n}\n\nprivate void backtrack(int n, int k, int start, List<Integer> current, List<List<Integer>> result) {\n    if (current.size() == k) {\n        result.add(new ArrayList<>(current));\n        return;\n    }\n\n    for (int i = start; i <= n; i++) {\n        current.add(i);\n        backtrack(n, k, i + 1, current, result);\n        current.remove(current.size() - 1);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = combine(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const k = $args;\n    const result = combine(n, k);\n    console.log(result);\n}"
        }
    },
    "78": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<std::vector<int>> subsets(std::vector<int>& nums);\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = subsets(nums);\n\n    for (const auto& subset : result) {\n        std::cout << '[';\n        for (int i = 0; i < subset.size(); ++i) {\n            std::cout << subset[i];\n            if (i != subset.size() - 1) {\n                std::cout << ',';\n            }\n        }\n        std::cout << ']';\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n",
            "java": "public List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    int n = nums.length;\n    int num_subsets = 1 << n;\n\n    for (int i = 0; i < num_subsets; ++i) {\n        List<Integer> subset = new ArrayList<>();\n        for (int j = 0; j < n; ++j) {\n            if ((i & (1 << j)) != 0) {\n                subset.add(nums[j]);\n            }\n        }\n        result.add(subset);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = subsets(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = subsets(nums);\n    console.log(result);\n}"
        }
    },
    "79": {
        "call_functions": {
            "c++": "bool exist(vector<vector<char>>& board, string word) {\n    int m = board.size();\n    int n = board[0].size();\n    \n    function<bool(int, int, int)> dfs = [&](int i, int j, int k) {\n        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != word[k])\n            return false;\n        if (k == word.length() - 1)\n            return true;\n        \n        char temp = board[i][j];\n        board[i][j] = '/';\n        bool res = dfs(i + 1, j, k + 1) || dfs(i - 1, j, k + 1) || dfs(i, j + 1, k + 1) || dfs(i, j - 1, k + 1);\n        board[i][j] = temp;\n        return res;\n    };\n    \n    for (int i = 0; i < m; i++)\n        for (int j = 0; j < n; j++)\n            if (dfs(i, j, 0))\n                return true;\n    return false;\n}",
            "java": "public boolean exist(char[][] board, String word) {\n    int m = board.length;\n    int n = board[0].length;\n\n    boolean[][] visited = new boolean[m][n];\n\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (dfs(board, i, j, 0, word, visited)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean dfs(char[][] board, int i, int j, int k, String word, boolean[][] visited) {\n    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(k) || visited[i][j]) {\n        return false;\n    }\n\n    if (k == word.length() - 1) {\n        return true;\n    }\n\n    visited[i][j] = true;\n    boolean result = dfs(board, i + 1, j, k + 1, word, visited)\n            || dfs(board, i - 1, j, k + 1, word, visited)\n            || dfs(board, i, j + 1, k + 1, word, visited)\n            || dfs(board, i, j - 1, k + 1, word, visited);\n    visited[i][j] = false;\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    word = $args[1]\n    result = exist(board, word)\n    print(result)",
            "javascript": "function exist(board, word) {\n    const m = board.length;\n    const n = board[0].length;\n\n    function dfs(i, j, k) {\n        if (i < 0 || i === m || j < 0 || j === n || board[i][j] !== word[k])\n            return false;\n        if (k === word.length - 1)\n            return true;\n        \n        const temp = board[i][j];\n        board[i][j] = '/';\n        const res = dfs(i + 1, j, k +1) || dfs(i - 1, j, k + 1) || dfs(i, j + 1, k + 1) || dfs(i, j - 1, k + 1);\n        board[i][j] = temp;\n        return res;\n    }\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (dfs(i, j, 0))\n                return true;\n        }\n    }\n    return false;\n}"
        }
    },
    "84": {
        "call_functions": {
            "c++": "int largestRectangleArea(vector<int>& heights) {\n    heights.push_back(0);\n    stack<int> s;\n    int max_area = 0;\n    for (int i = 0; i < heights.size(); i++) {\n        while (!s.empty() && heights[s.top()] > heights[i]) {\n            int height = heights[s.top()];\n            s.pop();\n            int width = s.empty() ? i : i - s.top() - 1;\n            max_area = max(max_area, height * width);\n        }\n        s.push(i);\n    }\n    return max_area;\n}",
            "java": "public int largestRectangleArea(int[] heights) {\n    Stack<Integer> stack = new Stack<>();\n    int max_area = 0;\n    for (int i = 0; i <= heights.length; i++) {\n        int height = (i == heights.length) ? 0 : heights[i];\n        while (!stack.isEmpty() && heights[stack.peek()] > height) {\n            int h = heights[stack.pop()];\n            int w = stack.isEmpty() ? i : i - stack.peek() - 1;\n            max_area = Math.max(max_area, h * w);\n        }\n        stack.push(i);\n    }\n    return max_area;\n}",
            "python": "if __name__ == \"__main__\":\n    heights = $args[0]\n    result = largestRectangleArea(heights)\n    print(result)",
            "javascript": "function main() {\n    const heights = $args;\n    const result = largestRectangleArea(heights);\n    console.log(result);\n}"
        }
    },
    "85": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<char>> matrix = $args;\n    int result = maximalRectangle(matrix);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maximalRectangle(char[][] matrix) {\n    if (matrix.length == 0) return 0;\n\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[] height = new int[n + 1];\n    int maxArea = 0;\n\n    for (int i = 0; i < m; ++i) {\n        Stack<Integer> s = new Stack<>();\n        for (int j = 0; j <= n; ++j) {\n            if (j < n) {\n                height[j] = matrix[i][j] == '1' ? height[j] + 1 : 0;\n            }\n            while (!s.empty() && height[j] < height[s.peek()]) {\n                int h = height[s.pop()];\n                int w = s.empty() ? j : j - s.peek() - 1;\n                maxArea = Math.max(maxArea, h * w);\n            }\n            s.push(j);\n        }\n    }\n\n    return maxArea;\n}\n",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = maximalRectangle(matrix)\n    print(result)",
            "javascript": "function maximalRectangle(matrix) {\n    if (!matrix.length) return 0;\n\n    let m = matrix.length;\n    let n = matrix[0].length;\n    let height = Array(n + 1).fill(0);\n    let maxArea = 0;\n\n    for (let i = 0; i < m; i++) {\n        let s = [];\n        for (let j = 0; j <= n; j++) {\n            if (j < n) {\n                height[j] = matrix[i][j] === '1' ? height[j] + 1 : 0;\n            }\n            while (s.length && height[j] < height[s[s.length - 1]]) {\n                let h = height[s.pop()];\n                let w = !s.length ? j : j - s[s.length - 1] - 1;\n                maxArea = Math.max(maxArea, h * w);\n            }\n            s.push(j);\n        }\n    }\n\n    return maxArea;\n}"
        }
    },
    "87": {
        "call_functions": {
            "c++": "bool result = isScramble($args);\nreturn result;",
            "java": "public boolean isScramble(String s1, String s2) {\n    if (s1.equals(s2)) return true;\n    if (sorted(s1).equals(sorted(s2)) == false) return false;\n\n    for (int i = 1; i < s1.length(); i++) {\n        if (isScramble(s1.substring(0, i), s2.substring(0, i)) && isScramble(s1.substring(i), s2.substring(i)))\n            return true;\n        if (isScramble(s1.substring(0, i), s2.substring(s2.length() - i)) && isScramble(s1.substring(i), s2.substring(0, s2.length() - i)))\n            return true;\n    }\n    return false;\n}\n\nprivate String sorted(String s) {\n    char[] chars = s.toCharArray();\n    Arrays.sort(chars);\n    return new String(chars);\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = isScramble(s1, s2)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const result = isScramble(s1, s2);\n    console.log(result);\n}"
        }
    },
    "88": {
        "call_functions": {
            "c++": "void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int i = m - 1, j = n - 1, k = m + n - 1;\n    while (i >= 0 && j >= 0) {\n        if (nums1[i] > nums2[j])\n            nums1[k--] = nums1[i--];\n        else\n            nums1[k--] = nums2[j--];\n    }\n    while (j >= 0) {\n        nums1[k--] = nums2[j--];\n    }\n}\n\nint main() {\n    vector<int> nums1 = $args;\n    int m = nums1.size();\n    vector<int> nums2;\n    int n = nums2.size();\n    merge(nums1, m, nums2, n);\n    for (int i = 0; i < m + n; i++) {\n        cout << nums1[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    m = $args[1]\n    nums2 = $args[2]\n    n = $args[3]\n    merge(nums1, m, nums2, n)\n    print(nums1)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const m = $args[1];\n    const nums2 = $args[2];\n    const n = $args[3];\n    merge(nums1, m, nums2, n);\n    console.log(nums1);\n}"
        }
    },
    "89": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<int> result = grayCode(n);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = grayCode(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = grayCode(n);\n    console.log(result);\n}"
        }
    },
    "90": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\nusing namespace std;\n\nvoid backtrack(vector<int>& nums, int index, vector<int>& subset, set<vector<int>>& result);\n\nvector<vector<int>> subsetsWithDup(vector<int>& nums) {\n    set<vector<int>> result;\n    vector<int> subset;\n    sort(nums.begin(), nums.end());\n    backtrack(nums, 0, subset, result);\n    return vector<vector<int>>(result.begin(), result.end());\n}\n\nvoid backtrack(vector<int>& nums, int index, vector<int>& subset, set<vector<int>>& result) {\n    result.insert(subset);\n    for (int i = index; i < nums.size(); i++) {\n        subset.push_back(nums[i]);\n        backtrack(nums, i + 1, subset, result);\n        subset.pop_back();\n    }\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<vector<int>> result = subsetsWithDup(nums);\n    for (auto subset : result) {\n        for (auto num : subset) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> subsetsWithDup(int[] nums) {\n    Set<List<Integer>> result = new HashSet<>();\n    Arrays.sort(nums);\n    backtrack(nums, 0, new ArrayList<Integer>(), result);\n    return new ArrayList<>(result);\n}\n\nprivate void backtrack(int[] nums, int index, List<Integer> subset, Set<List<Integer>> result) {\n    result.add(new ArrayList<>(subset));\n    for (int i = index; i < nums.length; i++) {\n        subset.add(nums[i]);\n        backtrack(nums, i + 1, subset, result);\n        subset.remove(subset.size() - 1);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = subsetsWithDup(nums)\n    print(result)",
            "javascript": "function main() {\n  const nums = $args;\n  const result = subsetsWithDup(nums);\n  console.log(result);\n}"
        }
    },
    "91": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = numDecodings(s);\n    cout << result << endl;\n    return 0;\n}",
            "python": "def call_numDecodings(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1 if s[0] != '0' else 0\n\n    for i in range(2, n + 1):\n        one_digit = int(s[i - 1:i])\n        two_digits = int(s[i - 2:i])\n\n        if one_digit >= 1:\n            dp[i] += dp[i - 1]\n        if two_digits >= 10 and two_digits <= 26:\n            dp[i] += dp[i - 2]\n    return dp[n]\n\nif __name__ == \"__main__\":\n    s = $args[0]\n    result = call_numDecodings(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const n = s.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = s[0] !== '0' ? 1 : 0;\n\n    for (let i = 2; i <= n; i++) {\n        const oneDigit = parseInt(s.slice(i - 1, i), 10);\n        const twoDigits = parseInt(s.slice(i - 2, i), 10);\n\n        if (oneDigit >= 1)\n            dp[i] += dp[i - 1];\n        if (twoDigits >= 10 && twoDigits <= 26)\n            dp[i] += dp[i - 2];\n    }\n    const result = dp[n];\n    console.log(result);\n}",
            "java": "public int numDecodings(String s) {\n    int n = s.length();\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = s.charAt(0) != '0' ? 1 : 0;\n\n    for (int i = 2; i <= n; i++) {\n        int oneDigit = Integer.parseInt(s.substring(i - 1, i));\n        int twoDigits = Integer.parseInt(s.substring(i - 2, i));\n\n        if (oneDigit >= 1)\n            dp[i] += dp[i - 1];\n        if (twoDigits >= 10 && twoDigits <= 26)\n            dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}"
        }
    },
    "92": {
        "call_functions": {
            "c++": "ListNode* reverseBetween(ListNode* head, int left, int right) {\n    if (!head || left == right) return head;\n    ListNode dummy(0);\n    dummy.next = head;\n    ListNode* pre = &dummy;\n    for (int i = 1; i < left; ++i) pre = pre->next;\n    ListNode* cur = pre->next;\n    for (int i = left; i < right; ++i) {\n        ListNode* t = cur->next;\n        cur->next = t->next;\n        t->next = pre->next;\n        pre->next = t;\n    }\n    return dummy.next;\n}",
            "java": "public ListNode reverseBetween(ListNode head, int left, int right) {\n    if (head == null || left == right) return head;\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode pre = dummy;\n    for (int i = 1; i < left; ++i) pre = pre.next;\n    ListNode cur = pre.next;\n    for (int i = left; i < right; ++i) {\n        ListNode t = cur.next;\n        cur.next = t.next;\n        t.next = pre.next;\n        pre.next = t;\n    }\n    return dummy.next;\n}",
            "python": "if __name__ == \"__main__\":\n    head = $args[0]\n    left = $args[1]\n    right = $args[2]\n    result = reverseBetween(head, left, right)\n    print(result)",
            "javascript": "function reverseBetween(head, left, right) {\n    if (!head || left === right) return head;\n    const dummy = new ListNode(0);\n    dummy.next = head;\n    let pre = dummy;\n    for (let i = 1; i < left; ++i) pre = pre.next;\n    let cur = pre.next;\n    for (let i = left; i < right; ++i) {\n        const t = cur.next;\n        cur.next = t.next;\n        t.next = pre.next;\n        pre.next = t;\n    }\n    return dummy.next;\n}"
        }
    },
    "93": {
        "call_functions": {
            "c++": "#include<vector>\n#include<string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    vector<string> result = restore_ip_address(s);\n    for (string ip : result) {\n        cout << ip << endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> restoreIpAddresses(String s) {\n    List<String> result = new ArrayList<>();\n    dfs(s, 0, \"\", result, 0);\n    return result;\n}\n\nprivate void dfs(String s, int start, String ip, List<String> result, int part) {\n    if (part == 4 && start == s.length()) {\n        result.add(ip.substring(0, ip.length() - 1));\n        return;\n    }\n    if (part == 4 || start >= s.length()) return;\n\n    int num = 0;\n    for (int i = start; i < s.length(); i++) {\n        num = num * 10 + (s.charAt(i) - '0');\n        if (num > 255) break;\n        dfs(s, i + 1, ip + s.charAt(i) + \".\", result, part + 1);\n        if (num == 0) break;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = restore_ip_addresses(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = restoreIpAddresses(s);\n    console.log(result);\n}"
        }
    },
    "97": {
        "call_functions": {
            "c++": "bool isInterleave(string s1, string s2, string s3) {\n    int m = s1.length(), n = s2.length();\n    if (m + n != s3.length()) return false;\n\n    vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\n    dp[0][0] = true;\n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i - 1][0] && s1[i - 1] == s3[i - 1];\n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j - 1] && s2[j - 1] == s3[j - 1];\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||\n                       (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\n        }\n    }\n\n    return dp[m][n];\n}",
            "java": "public boolean isInterleave(String s1, String s2, String s3) {\n    int m = s1.length(), n = s2.length();\n    if (m + n != s3.length()) return false;\n\n    boolean[][] dp = new boolean[m + 1][n + 1];\n    dp[0][0] = true;\n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);\n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) ||\n                       (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    s3 = $args[2]\n    result = isInterleave(s1, s2, s3)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const s3 = $args[2];\n    const result = isInterleave(s1, s2, s3);\n    console.log(result);\n}"
        }
    },
    "99": {
        "call_functions": {
            "c++": "void recoverTree(TreeNode* root) {\n    TreeNode *first = nullptr, *second = nullptr, *prev = nullptr;\n    inorder(root, first, second, prev);\n    std::swap(first->val, second->val);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    nodes = [None, None, None]\n    inorder(root, nodes)\n    nodes[0].val, nodes[2].val = nodes[2].val, nodes[0].val\n    print(nodes[0].val, nodes[2].val)",
            "javascript": "function main() {\n    const root = $args;\n    const nodes = [null, null, null];\n    inorder(root, nodes);\n    const temp = nodes[0].val;\n    nodes[0].val = nodes[2].val;\n    nodes[2].val = temp;\n}",
            "java": "void recoverTree(TreeNode root) {\n    TreeNode[] nodes = new TreeNode[3];\n    inorder(root, nodes);\n    int temp = nodes[0].val;\n    nodes[0].val = nodes[2].val;\n    nodes[2].val = temp;\n}"
        }
    },
    "101": {
        "call_functions": {
            "c++": "bool isSymmetric(TreeNode* root) {\n    return checkSymmetry(root, root);\n}\n\nbool checkSymmetry(TreeNode* node1, TreeNode* node2) {\n    if (!node1 && !node2) return true;\n    if (!node1 || !node2) return false;\n    return (node1->val == node2->val) && checkSymmetry(node1->right, node2->left) && checkSymmetry(node1->left, node2->right);\n}",
            "java": "public boolean isSymmetric(TreeNode root) {\n    return checkSymmetry(root, root);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = isSymmetric(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = isSymmetric(root);\n    console.log(result);\n}"
        }
    },
    "104": {
        "call_functions": {
            "c++": "int main() {\n    TreeNode* root = $args;\n    int result = maxDepth(root);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = maxDepth(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = maxDepth(root);\n    console.log(result);\n}",
            "java": "public static void main(String[] args) {\n    TreeNode root = $args;\n    int result = maxDepth(root);\n    System.out.println(result);\n}"
        }
    },
    "107": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n\nint main() {\n    TreeNode* root = $args;\n    std::vector<std::vector<int>> result = levelOrderBottom(root);\n\n    for (const auto& level : result) {\n        for (const auto& val : level) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<Integer>> levelOrderBottom(TreeNode root) {\n    List<List<Integer>> result = new ArrayList<>();\n    if (root == null) return result;\n\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n        List<Integer> level = new ArrayList<>();\n        int size = queue.size();\n\n        for (int i = 0; i < size; i++) {\n            TreeNode current = queue.poll();\n            level.add(current.val);\n\n            if (current.left != null) queue.add(current.left);\n            if (current.right != null) queue.add(current.right);\n        }\n        result.add(0, level);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = levelOrderBottom(root)\n    print(result)",
            "javascript": "function levelOrderBottom(root) {\n    const result = [];\n    if (!root) return result;\n\n    const queue = [root];\n\n    while (queue.length > 0) {\n        const level = [];\n        const size = queue.length;\n\n        for (let i = 0; i < size; i++) {\n            const current = queue.shift();\n            level.push(current.val);\n\n            if (current.left) queue.push(current.left);\n            if (current.right) queue.push(current.right);\n        }\n        result.unshift(level);\n    }\n\n    return result;\n}"
        }
    },
    "115": {
        "call_functions": {
            "c++": "int numDistinct(string s, string t) {\n    int m = s.size(), n = t.size();\n    vector<vector<unsigned int>> dp(m + 1, vector<unsigned int>(n + 1, 0));\n\n    for (int i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (s[i - 1] == t[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "java": "public int numDistinct(String s, String t) {\n    int m = s.length(), n = t.length();\n    int[][] dp = new int[m + 1][n + 1];\n\n    for (int i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (s.charAt(i - 1) == t.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = numDistinct(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = numDistinct(s, t);\n    console.log(result);\n}"
        }
    },
    "116": {
        "call_functions": {
            "c++": "void connect(Node* root) {\n    if (!root) return;\n    if (root->left) {\n        root->left->next = root->right;\n        if (root->next) {\n            root->right->next = root->next->left;\n        }\n    }\n    connect(root->left);\n    connect(root->right);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = connect(root)\n    print(result)",
            "javascript": "function connect(root) {\n    if (root === null || root.left === null) return root;\n    root.left.next = root.right;\n    if (root.next !== null) {\n        root.right.next = root.next.left;\n    }\n    connect(root.left);\n    connect(root.right);\n    return root;\n}",
            "java": "public void connect(TreeLinkNode root) {\n    if (root == null || root.left == null) return;\n    root.left.next = root.right;\n    if (root.next != null) {\n        root.right.next = root.next.left;\n    }\n    connect(root.left);\n    connect(root.right);\n}"
        }
    },
    "118": {
        "call_functions": {
            "c++": "vector<vector<int>> generate(int numRows) {\n    vector<vector<int>> pascalsTriangle(numRows);\n    for (int i = 0; i < numRows; i++) {\n        pascalsTriangle[i].resize(i + 1);\n        pascalsTriangle[i][0] = pascalsTriangle[i][i] = 1;\n        for (int j = 1; j < i; j++) {\n            pascalsTriangle[i][j] = pascalsTriangle[i - 1][j - 1] + pascalsTriangle[i - 1][j];\n        }\n    }\n    return pascalsTriangle;\n}",
            "java": "public List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> pascalsTriangle = new ArrayList<>();\n    for (int i = 0; i < numRows; i++) {\n        List<Integer> row = new ArrayList<>();\n        row.add(1);\n        for (int j = 1; j < i; j++) {\n            row.add(pascalsTriangle.get(i - 1).get(j - 1) + pascalsTriangle.get(i - 1).get(j));\n        }\n        if (i > 0) row.add(1);\n        pascalsTriangle.add(row);\n    }\n    return pascalsTriangle;\n}",
            "python": "if __name__ == \"__main__\":\n    numRows = $args[0]\n    result = generate(numRows)\n    print(result)",
            "javascript": "function main() {\n    const numRows = $args;\n    const result = generate(numRows);\n    console.log(result);\n}"
        }
    },
    "120": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<int>> triangle = $args;\n    int result = minimumTotal(triangle);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minimumTotal(List<List<Integer>> triangle) {\n    for (int row = triangle.size() - 2; row >= 0; row--) {\n        for (int col = 0; col < triangle.get(row).size(); col++) {\n            int minSum = Math.min(triangle.get(row + 1).get(col), triangle.get(row + 1).get(col + 1));\n            triangle.get(row).set(col, triangle.get(row).get(col) + minSum);\n        }\n    }\n    return triangle.get(0).get(0);\n}",
            "python": "if __name__ == \"__main__\":\n    triangle = $args[0]\n    result = minimumTotal(triangle)\n    print(result)",
            "javascript": "function main() {\n    const triangle = $args;\n    const result = minimumTotal(triangle);\n    console.log(result);\n}"
        }
    },
    "121": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    result = maxProfit(prices)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args;\n    const result = maxProfit(prices);\n    console.log(result);\n}"
        }
    },
    "122": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxProfit(int[] prices) {\n    int max_profit = 0;\n    for (int i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max_profit += prices[i] - prices[i - 1];\n        }\n    }\n    return max_profit;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    result = max_profit(prices)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args;\n    const result = maxProfit(prices);\n    console.log(result);\n}"
        }
    },
    "123": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxProfit(int[] prices) {\n    int buy1 = Integer.MAX_VALUE, buy2 = Integer.MAX_VALUE;\n    int profit1 = 0, profit2 = 0;\n    \n    for (int price : prices) {\n        buy1 = Math.min(buy1, price);\n        profit1 = Math.max(profit1, price - buy1);\n        buy2 = Math.min(buy2, price - profit1);\n        profit2 = Math.max(profit2, price - buy2);\n    }\n    \n    return profit2;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    result = maxProfit(prices)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args;\n    const result = maxProfit(prices);\n    console.log(result);\n}"
        }
    },
    "125": {
        "call_functions": {
            "c++": "#include <cctype>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    bool result = isPalindrome(s);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isPalindrome(String s) {\n    StringBuilder cleaned = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLetterOrDigit(c)) {\n            cleaned.append(Character.toLowerCase(c));\n        }\n    }\n    int left = 0, right = cleaned.length() - 1;\n    while (left < right) {\n        if (cleaned.charAt(left++) != cleaned.charAt(right--)) return false;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = isPalindrome(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = isPalindrome(s);\n    console.log(result);\n}"
        }
    },
    "126": {
        "call_functions": {
            "c++": "std::vector<std::vector<std::string>> findLadders(std::string beginWord, std::string endWord, std::vector<std::string>& wordList) {\n    std::unordered_set<std::string> dict(wordList.begin(), wordList.end());\n    if (dict.find(endWord) == dict.end()) {\n        return {};\n    }\n    std::unordered_map<std::string, std::vector<std::string>> adjacent;\n    std::unordered_map<std::string, int> distance;\n    \n    auto neighbors = [&](const std::string& word) {\n        std::vector<std::string> result;\n        std::string temp = word;\n        for (char& ch : temp) {\n            char original = ch;\n            for (int i = 'a'; i <= 'z'; ++i) {\n                ch = i;\n                if (dict.count(temp) && temp != word) {\n                    result.push_back(temp);\n                }\n            }\n            ch = original;\n        }\n        return result;\n    };\n    \n    std::queue<std::string> q;\n    q.push(beginWord);\n    distance[beginWord] = 0;\n    \n    while (!q.empty()) {\n        std::string current = q.front();\n        q.pop();\n        if (current == endWord) {\n            break;\n        }\n        for (const std::string& neighbor : neighbors(current)) {\n            if (!distance.count(neighbor)) {\n                distance[neighbor] = distance[current] + 1;\n                q.push(neighbor);\n            }\n            if (distance[neighbor] == distance[current] + 1) {\n                adjacent[current].push_back(neighbor);\n            }\n        }\n    }\n    \n    std::vector<std::vector<std::string>> result;\n    std::vector<std::string> path = {beginWord};\n    std::function<void(const std::string&)> backtrack = [&](const std::string& word) {\n        if (word == endWord) {\n            result.push_back(path);\n            return;\n        }\n        for (const std::string& next : adjacent[word]) {\n            path.push_back(next);\n            backtrack(next);\n            path.pop_back();\n        }\n    };\n    \n    backtrack(beginWord);\n    return result;\n}",
            "java": "public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n    Set<String> dict = new HashSet<>(wordList);\n    if (!dict.contains(endWord)) {\n        return Collections.emptyList();\n    }\n\n    Map<String, List<String>> adjacent = new HashMap<>();\n    Map<String, Integer> distance = new HashMap<>();\n    Queue<String> queue = new LinkedList<>();\n    queue.offer(beginWord);\n    distance.put(beginWord, 0);\n\n    while (!queue.isEmpty()) {\n        String current = queue.poll();\n        if (current.equals(endWord)) {\n            break;\n        }\n        for (String neighbor : neighbors(current)) {\n            if (!dict.contains(neighbor)) {\n                continue;\n            }\n            if (!distance.containsKey(neighbor)) {\n                distance.put(neighbor, distance.get(current) + 1);\n                queue.offer(neighbor);\n            }\n            if (distance.get(neighbor).equals(distance.get(current) + 1)) {\n                adjacent.computeIfAbsent(current, k -> new ArrayList<>()).add(neighbor);\n            }\n        }\n    }\n\n    List<List<String>> result = new ArrayList<>();\n    List<String> path = new ArrayList<>();\n    path.add(beginWord);\n    backtrack(beginWord, endWord, path, adjacent, result);\n    return result;\n}\n\nprivate void backtrack(String current, String endWord, List<String> path, Map<String, List<String>> adjacent, List<List<String>> result) {\n    if (current.equals(endWord)) {\n        result.add(new ArrayList<>(path));\n        return;\n    }\n    for (String next : adjacent.getOrDefault(current, Collections.emptyList())) {\n        path.add(next);\n        backtrack(next, endWord, path, adjacent, result);\n        path.remove(path.size() - 1);\n    }\n}\n\nprivate List<String> neighbors(String word) {\n    List<String> result = new ArrayList<>();\n    char[] chars = word.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        char original = chars[i];\n        for (char j = 'a'; j <= 'z'; j++) {\n            if (j == original) {\n                continue;\n            }\n            chars[i] = j;\n            result.add(new String(chars));\n        }\n        chars[i] = original;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    beginWord = $args[0]\n    endWord = $args[1]\n    wordList = $args[2]\n    result = findLadders(beginWord, endWord, wordList)\n    print(result)",
            "javascript": "function findLadders(beginWord, endWord, wordList) {\n    const dict = new Set(wordList);\n    if (!dict.has(endWord)) {\n        return [];\n    }\n\n    const adjacent = new Map();\n    const distance = new Map();\n    const queue = [beginWord];\n    distance.set(beginWord, 0);\n    \n    function neighbors(word) {\n        const result = [];\n        for (let i = 0; i < word.length; i++) {\n            for (let j = 'a'.charCodeAt(0); j <= 'z'.charCodeAt(0); j++) {\n                const next = word.slice(0, i) + String.fromCharCode(j) + word.slice(i + 1);\n                if (next !== word) {\n                    result.push(next);\n                }\n            }\n        }\n        return result;\n    }\n    \n    while (queue.length > 0) {\n        const current = queue.shift();\n        if (current === endWord) {\n            break;\n        }\n        for (const neighbor of neighbors(current)) {\n            if (!dict.has(neighbor)) {\n                continue;\n            }\n            if (!distance.has(neighbor)) {\n                distance.set(neighbor, distance.get(current) + 1);\n                queue.push(neighbor);\n            }\n            if (distance.get(neighbor) === distance.get(current) + 1) {\n                if (!adjacent.has(current)) {\n                    adjacent.set(current, []);\n                }\n                adjacent.get(current).push(neighbor);\n            }\n        }\n    }\n\n    const result = [];\n    const path = [beginWord];\n\n    function backtrack(word) {\n        if (word === endWord) {\n            result.push([...path]);\n            return;\n        }\n        for (const next of (adjacent.get(word) || [])) {\n            path.push(next);\n            backtrack(next);\n            path.pop();\n        }\n    }\n    \n    backtrack(beginWord);\n    return result;\n}"
        }
    },
    "127": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n\nint main() {\n    std::string beginWord = $args;\n    std::string endWord = $args;\n    std::vector<std::string> wordList = $args;\n    int result = ladderLength(beginWord, endWord, wordList);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n    Set<String> dict = new HashSet<>(wordList);\n    if (!dict.contains(endWord)) return 0;\n\n    Queue<String> q = new LinkedList<>();\n    q.offer(beginWord);\n    int steps = 1;\n\n    while (!q.isEmpty()) {\n        int size = q.size();\n        for (int i = 0; i < size; ++i) {\n            String currentWord = q.poll();\n            if (currentWord.equals(endWord)) return steps;\n\n            char[] charArray = currentWord.toCharArray();\n            for (int j = 0; j < charArray.length; ++j) {\n                char originalChar = charArray[j];\n                for (int k = 0; k < 26; ++k) {\n                    charArray[j] = (char) ('a' + k);\n                    String newWord = new String(charArray);\n                    if (dict.remove(newWord)) {\n                        q.offer(newWord);\n                    }\n                }\n                charArray[j] = originalChar;\n            }\n        }\n        ++steps;\n    }\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    beginWord = $args[0]\n    endWord = $args[1]\n    wordList = $args[2]\n    result = ladderLength(beginWord, endWord, wordList)\n    print(result)",
            "javascript": "function ladderLength(beginWord, endWord, wordList) {\n    const wordSet = new Set(wordList);\n    if (!wordSet.has(endWord)) return 0;\n\n    const q = [beginWord];\n    let steps = 1;\n\n    while (q.length > 0) {\n        const size = q.length;\n        const currentLevel = new Set();\n\n        for (let i = 0; i < size; ++i) {\n            const currentWord = q.shift();\n            if (currentWord === endWord) return steps;\n\n            const wordChars = currentWord.split('');\n            for (let j = 0; j < wordChars.length; ++j) {\n                const originalChar = wordChars[j];\n                for (let k = 0; k < 26; ++k) {\n                    wordChars[j] = String.fromCharCode('a'.charCodeAt(0) + k);\n                    const newWord = wordChars.join('');\n                    if (wordSet.has(newWord)) {\n                        q.push(newWord);\n                        currentLevel.add(newWord);\n                    }\n                }\n                wordChars[j] = originalChar;\n            }\n        }\n        steps++;\n        for (const word of currentLevel) {\n            wordSet.delete(word);\n        }\n    }\n    return 0;\n}"
        }
    },
    "128": {
        "call_functions": {
            "c++": "int longestConsecutive(vector<int>& nums) {\n    unordered_set<int> elements(nums.begin(), nums.end());\n    int longestSeq = 0;\n    \n    for (int num : nums) {\n        if (elements.find(num - 1) == elements.end()) {\n            int currentNum = num;\n            int currentSeq = 1;\n            \n            while (elements.find(currentNum + 1) != elements.end()) {\n                currentNum += 1;\n                currentSeq += 1;\n            }\n            \n            longestSeq = max(longestSeq, currentSeq);\n        }\n    }\n    return longestSeq;\n}",
            "java": "public int longestConsecutive(int[] nums) {\n    Set<Integer> elements = new HashSet<>();\n    for (int num : nums) {\n        elements.add(num);\n    }\n    \n    int longestSeq = 0;\n    \n    for (int num : nums) {\n        if (!elements.contains(num - 1)) {\n            int currentNum = num;\n            int currentSeq = 1;\n            \n            while (elements.contains(currentNum + 1)) {\n                currentNum++;\n                currentSeq++;\n            }\n            \n            longestSeq = Math.max(longestSeq, currentSeq);\n        }\n    }\n    return longestSeq;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = longest_consecutive(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = longestConsecutive(nums);\n    console.log(result);\n}"
        }
    },
    "129": {
        "call_functions": {
            "c++": "int main() {\n    TreeNode* root = $args;\n    int result = sumNumbers(root);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int sumNumbers(TreeNode root) {\n    return sumNumbersHelper(root, 0);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = sumNumbers(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = sumNumbers(root);\n    console.log(result);\n}\n"
        }
    },
    "131": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nbool isPalindrome(const std::string& s, int start, int end) {\n    while (start < end) {\n        if (s[start++] != s[end--]) return false;\n    }\n    return true;\n}\n\nvoid dfs(const std::string& s, int start, std::vector<std::vector<std::string>>& results, std::vector<std::string> current) {\n    if (start == s.length()) {\n        results.push_back(current);\n        return;\n    }\n    \n    for (int end = start; end < s.length(); ++end) {\n        if (isPalindrome(s, start, end)) {\n            current.push_back(s.substr(start, end - start + 1));\n            dfs(s, end + 1, results, current);\n            current.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<std::string>> partition(std::string s) {\n    std::vector<std::vector<std::string>> results;\n    std::vector<std::string> current;\n    dfs(s, 0, results, current);\n    return results;\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<std::vector<std::string>> result = partition(s);\n    for (const auto& vec : result) {\n        for (const auto& str : vec) {\n            std::cout << str << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<String>> partition(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = partition(s)\n    print(result)",
            "javascript": "function partition(s) {\n    let results = [];\n    dfs(s, 0, results, []);\n    return results;\n}"
        }
    },
    "132": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    int result = minCut(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minCut(String s) {\n    int n = $args.length();\n    int[] dp = new int[n + 1];\n    boolean[][] isPalindrome = new boolean[n][n];\n    \n    for (int i=0; i <= n; i++) {\n        dp[i] = i - 1;\n    }\n    \n    for (int j=1; j < n; j++) {\n        for (int i=j; i >= 0; i--) {\n            if ($args.charAt(i) == $args.charAt(j) && (j - i < 2 || isPalindrome[i + 1][j - 1])) {\n                isPalindrome[i][j] = true;\n                dp[j + 1] = Math.min(dp[j + 1], dp[i] + 1);\n            }\n        }\n    }\n    \n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = minCut(s)\n    print(result)",
            "javascript": "function minCut(s) {\n    const n = s.length;\n    const dp = Array.from({ length: n + 1 }, (_, i) => i - 1);\n    const isPalindrome = Array.from({ length: n }, () => Array(n).fill(false));\n    \n    for (let j = 1; j < n; j++) {\n        for (let i = j; i >= 0; i--) {\n            if (s[i] === s[j] && (j - i < 2 || isPalindrome[i + 1][j - 1])) {\n                isPalindrome[i][j] = true;\n                dp[j + 1] = Math.min(dp[j + 1], dp[i] + 1);\n            }\n        }\n    }\n    \n    return dp[n];\n}"
        }
    },
    "134": {
        "call_functions": {
            "c++": "int can_complete_circuit(vector<int>& gas, vector<int>& cost) {\n    int total_gas = 0, total_cost = 0, start = 0, gas_tank = 0;\n    for (int i = 0; i < gas.size(); ++i) {\n        total_gas += gas[i];\n        total_cost += cost[i];\n        gas_tank += gas[i] - cost[i];\n        if (gas_tank < 0) {\n            start = i + 1;\n            gas_tank = 0;\n        }\n    }\n    return (total_gas < total_cost) ? -1 : start;\n}",
            "python": "if __name__ == \"__main__\":\n    gas = $args[0]\n    cost = $args[1]\n    result = can_complete_circuit(gas, cost)\n    print(result)",
            "javascript": "function main() {\n    const gas = $args[0];\n    const cost = $args[1];\n    const result = canCompleteCircuit(gas, cost);\n    console.log(result);\n}"
        }
    },
    "135": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> ratings = $args;\n    int result = minCandies(ratings);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minCandies(int[] ratings) {\n    int n = ratings.length;\n    int[] candies = new int[n];\n    for (int i = 0; i < n; i++) candies[i] = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (ratings[i] > ratings[i - 1]) candies[i] = candies[i - 1] + 1;\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        if (ratings[i] > ratings[i + 1]) candies[i] = Math.max(candies[i], candies[i + 1] + 1);\n    }\n\n    int sum = 0;\n    for (int candy : candies) sum += candy;\n\n    return sum;\n}",
            "python": "if __name__ == \"__main__\":\n    ratings = $args[0]\n    result = min_candies(ratings)\n    print(result)",
            "javascript": "function main() {\n    const ratings = $args;\n    const n = ratings.length;\n    const candies = Array(n).fill(1);\n\n    for (let i = 1; i < n; i++) {\n        if (ratings[i] > ratings[i - 1]) candies[i] = candies[i - 1] + 1;\n    }\n    for (let i = n - 2; i >= 0; i--) {\n        if (ratings[i] > ratings[i + 1]) candies[i] = Math.max(candies[i], candies[i + 1] + 1);\n    }\n\n    const result = candies.reduce((a, b) => a + b, 0);\n    console.log(result);\n}"
        }
    },
    "136": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = singleNumber(nums);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = singleNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = singleNumber(nums);\n    console.log(result);\n}"
        }
    },
    "137": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = singleNumber(nums);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = singleNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = singleNumber(nums);\n    console.log(result);\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    int result = singleNumber(nums);\n    System.out.println(result);\n}"
        }
    },
    "139": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\n#include <iostream>\n\nbool wordBreak(std::string s, std::vector<std::string>& wordDict) {\n    std::unordered_set<std::string> dict(wordDict.begin(), wordDict.end());\n    std::vector<bool> dp(s.size() + 1, false);\n    dp[0] = true;\n    for (size_t i = 1; i <= s.size(); ++i) {\n        for (size_t j = 0; j < i; ++j) {\n            if (dp[j] && dict.find(s.substr(j, i - j)) != dict.end()) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[s.size()];\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> wordDict = {\"leet\", \"code\"};\n    bool result = wordBreak(s, wordDict);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean wordBreak(String s, List<String> wordDict) {\n    Set<String> dict = new HashSet<>(wordDict);\n    boolean[] dp = new boolean[s.length() + 1];\n    dp[0] = true;\n    for (int i = 1; i <= s.length(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (dp[j] && dict.contains(s.substring(j, i))) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[s.length()];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    word_dict = $args[1]\n    result = word_break(s, word_dict)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const wordDict = $args[1];\n    const result = wordBreak(s, wordDict);\n    console.log(result);\n}"
        }
    },
    "140": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\n\nstd::vector<std::string> helper(const std::string& s, const std::unordered_set<std::string>& dict, std::unordered_map<std::string, std::vector<std::string>>& memo);\n\nstd::vector<std::string> wordBreak(std::string s, std::vector<std::string>& wordDict);\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> wordDict = {\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"};\n    std::vector<std::string> result = wordBreak(s, wordDict);\n    for (const auto& res : result) {\n        std::cout << res << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> wordBreak(String s, List<String> wordDict) {\n    HashSet<String> dict = new HashSet<>(wordDict);\n    HashMap<String, List<String>> memo = new HashMap<>();\n    return helper(s, dict, memo);\n}\n\nprivate List<String> helper(String s, HashSet<String> dict, HashMap<String, List<String>> memo) {\n    if (memo.containsKey(s)) {\n        return memo.get(s);\n    }\n    \n    List<String> res = new ArrayList<>();\n    if (dict.contains(s)) {\n        res.add(s);\n    }\n    \n    for (int i = 1; i < s.length(); ++i) {\n        String prefix = s.substring(0, i);\n        if (!dict.contains(prefix)) continue;\n        String suffix = s.substring(i);\n        List<String> temp = helper(suffix, dict, memo);\n        for (String t : temp) {\n            res.add(prefix + \" \" + t);\n        }\n    }\n\n    memo.put(s, res);\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    word_dict = $args[1]\n    result = word_break(s, word_dict)\n    print(result)",
            "javascript": "function wordBreak(s, wordDict) {\n    const dict = new Set(wordDict);\n    const memo = {};\n\n    function helper(s, dict, memo) {\n        if (s in memo) {\n            return memo[s];\n        }\n        \n        const res = [];\n        if (dict.has(s)) {\n            res.push(s);\n        }\n        \n        for (let i = 1; i < s.length; ++i) {\n            const prefix = s.slice(0, i);\n            if (!dict.has(prefix)) continue;\n            const suffix = s.slice(i);\n            const temp = helper(suffix, dict, memo);\n            for (const t of temp) {\n                res.push(prefix + \" \" + t);\n            }\n        }\n\n        memo[s] = res;\n        return res;\n    }\n\n    return helper(s, dict, memo);\n}"
        }
    },
    "141": {
        "call_functions": {
            "c++": "bool hasCycle(ListNode *head) {\n    ListNode *slow = head, *fast = head;\n    while (fast != nullptr && fast->next != nullptr) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean hasCycle(ListNode head) {\n    ListNode slow = head, fast = head;\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    head = $args[0]\n    result = hasCycle(head)\n    print(result)",
            "javascript": "function main() {\n    const head = $args;\n    const result = hasCycle(head);\n    console.log(result);\n}"
        }
    },
    "146": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <list>\nusing namespace std;\n\nint main() {\n    int capacity = $args;\n    LRUCache lru(capacity);\n    int result = lru.get(1);\n    lru.put(1, 1);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int get(int key) {\n        Node node = cache.get(key);\n        if (node == null) return -1;\n        moveToHead(node);\n        return node.value;\n    }",
            "python": "if __name__ == \"__main__\":\n    capacity = $args[0]\n    cache = LRUCache(capacity)\n    cache.put(1, 1)\n    cache.put(2, 2)\n    print(cache.get(1))\n    cache.put(3, 3)\n    print(cache.get(2))\n    cache.put(4, 4)\n    print(cache.get(1))\n    print(cache.get(3))\n    print(cache.get(4))",
            "javascript": "function main() {\n    const capacity = $args;\n    const cache = new LRUCache(capacity);\n    cache.put(1, 1);\n    cache.put(2, 2);\n    const value1 = cache.get(1);\n    console.log(value1);\n    cache.put(3, 3);\n    const value2 = cache.get(2);\n    console.log(value2);\n}"
        }
    },
    "149": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\nusing namespace std;\n\nint maxPoints(vector<vector<int>>& points) {\n    int n = points.size();\n    if (n <= 2) return n;\n    int max_count = 0;\n\n    for (int i = 0; i < n; i++) {\n        std::unordered_map<string, int> slope_map;\n        int duplicates = 0, local_max = 0;\n\n        for (int j = i + 1; j < n; j++) {\n            int deltaX = points[j][0] - points[i][0];\n            int deltaY = points[j][1] - points[i][1];\n\n            if (deltaX == 0 && deltaY == 0) {\n                duplicates++;\n                continue;\n            }\n\n            int gcd = std::gcd(deltaX, deltaY);\n            deltaX /= gcd;\n            deltaY /= gcd;\n\n            string key = to_string(deltaX) + \"_\" + to_string(deltaY);\n            slope_map[key]++;\n            local_max = max(local_max, slope_map[key]);\n        }\n        max_count = max(max_count, local_max + duplicates + 1);\n    }\n\n    return max_count;\n}\n\nint main() {\n    vector<vector<int>> points = $args;\n    int result = maxPoints(points);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxPoints(int[][] points) {\n    int n = points.length;\n    if (n <= 2) return n;\n    int maxCount = 0;\n\n    for (int i = 0; i < n-1; i++) {\n        HashMap<String, Integer> slopeMap = new HashMap<>();\n        int duplicates = 0, localMax = 0;\n\n        for (int j = i+1; j < n; j++) {\n            int deltaX = points[j][0] - points[i][0];\n            int deltaY = points[j][1] - points[i][1];\n\n            if (deltaX == 0 && deltaY == 0) {\n                duplicates++;\n                continue;\n            }\n\n            int gcd = gcd(deltaX, deltaY);\n            deltaX /= gcd;\n            deltaY /= gcd;\n\n            String key = deltaX + \"_\" + deltaY;\n            slopeMap.put(key, slopeMap.getOrDefault(key, 0) + 1);\n            localMax = Math.max(localMax, slopeMap.get(key));\n        }\n        maxCount = Math.max(maxCount, localMax + duplicates + 1);\n    }\n\n    return maxCount;\n}",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = maxPoints(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = maxPoints(points);\n    console.log(result);\n}"
        }
    },
    "150": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <stack>\n#include <iostream>\n\nint main() {\n    vector<string> tokens = $args;\n    int result = evalRPN(tokens);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    tokens = $args[0]\n    result = evalRPN(tokens)\n    print(result)",
            "javascript": "function evalRPN(tokens) {\n    const stack = [];\n    for (const token of tokens) {\n        if (token === \"+\" || token === \"-\" || token === \"*\" || token === \"/\") {\n            const b = stack.pop();\n            const a = stack.pop();\n            if (token === \"+\") stack.push(a + b);\n            else if (token === \"-\") stack.push(a - b);\n            else if (token === \"*\") stack.push(a * b);\n            else stack.push(Math.trunc(a / b));\n        } else {\n            stack.push(parseInt(token));\n        }\n    }\n    return stack.pop();\n}\n\nconst tokens = $args;\nconst result = evalRPN(tokens);\nconsole.log(result);"
        }
    },
    "151": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string s = $args;\n    std::string result = reverseWords(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String reverseWords(String s) {\n    String[] words = s.trim().split(\"\\\\s+\");\n    Collections.reverse(Arrays.asList(words));\n    return String.join(\" \", words);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = reverseWords(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = reverseWords(s);\n    console.log(result);\n}"
        }
    },
    "152": {
        "call_functions": {
            "c++": "int maxProduct(vector<int>& nums) {\n    int max_so_far = nums[0];\n    int min_so_far = nums[0];\n    int result = nums[0];\n    \n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] < 0)\n            swap(max_so_far, min_so_far);\n        \n        max_so_far = max(nums[i], max_so_far * nums[i]);\n        min_so_far = min(nums[i], min_so_far * nums[i]);\n        result = max(result, max_so_far);\n    }\n    return result;\n}",
            "java": "public int maxProduct(int[] nums) {\n    int max_so_far = nums[0];\n    int min_so_far = nums[0];\n    int result = nums[0];\n    \n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] < 0) {\n            int temp = max_so_far;\n            max_so_far = min_so_far;\n            min_so_far = temp;\n        }\n        \n        max_so_far = Math.max(nums[i], max_so_far * nums[i]);\n        min_so_far = Math.min(nums[i], min_so_far * nums[i]);\n        result = Math.max(result, max_so_far);\n    }\n    return result;\n}"
        }
    },
    "153": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = findMin(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findMin(int[] nums) {\n    int left = 0, right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] > nums[right]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return nums[left];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = find_min(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findMin(nums);\n    console.log(result);\n}"
        }
    },
    "154": {
        "call_functions": {
            "c++": "int findMin(vector<int>& nums) {\n    int low = 0, high = nums.size() - 1;\n    \n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] > nums[high]) {\n            low = mid + 1;\n        } else if (nums[mid] < nums[high]) {\n            high = mid;\n        } else {\n            high--;\n        }\n    }\n    return nums[low];\n}",
            "java": "public int findMin(int[] nums) {\n    int low = 0, high = nums.length - 1;\n    \n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] > nums[high]) {\n            low = mid + 1;\n        } else if (nums[mid] < nums[high]) {\n            high = mid;\n        } else {\n            high--;\n        }\n    }\n    return nums[low];\n}"
        }
    },
    "159": {
        "call_functions": {
            "c++": "int lengthOfLongestSubstringTwoDistinct(string s) {\n    int l = 0, r = 0, max_len = 0, cur_len = 0;\n    unordered_map<char, int> char_count;\n\n    while (r < s.length()) {\n        char_count[s[r]]++;\n        if (char_count.size() <= 2) {\n            cur_len++;\n        } else {\n            while (char_count.size() > 2 && l <= r) {\n                char_count[s[l]]--;\n                if (char_count[s[l]] == 0) {\n                    char_count.erase(s[l]);\n                }\n                l++;\n                cur_len--;\n            }\n            cur_len++;\n        }\n        max_len = max(max_len, cur_len);\n        r++;\n    }\n    return max_len;\n}",
            "java": "public int lengthOfLongestSubstringTwoDistinct(String s) {\n    int l = 0, r = 0, max_len = 0, cur_len = 0;\n    HashMap<Character, Integer> char_count = new HashMap<>();\n\n    while (r < s.length()) {\n        char_count.put(s.charAt(r), char_count.getOrDefault(s.charAt(r), 0) + 1);\n        if (char_count.size() <= 2) {\n            cur_len++;\n        } else {\n            while (char_count.size() > 2 && l <= r) {\n                char_count.put(s.charAt(l), char_count.get(s.charAt(l)) - 1);\n                if (char_count.get(s.charAt(l)) == 0) {\n                    char_count.remove(s.charAt(l));\n                }\n                l++;\n                cur_len--;\n            }\n            cur_len++;\n        }\n        max_len = Math.max(max_len, cur_len);\n        r++;\n    }\n    return max_len;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = lengthOfLongestSubstringTwoDistinct(s)\n    print(result)",
            "javascript": "function lengthOfLongestSubstringTwoDistinct(s) {\n    const input = $args;\n    let l = 0, r = 0, max_len = 0, cur_len = 0;\n    const char_count = new Map();\n\n    while (r < input.length) {\n        char_count.set(input[r], (char_count.get(input[r]) || 0) + 1);\n        if (char_count.size <= 2) {\n            cur_len++;\n        } else {\n            while (char_count.size > 2 && l <= r) {\n                char_count.set(input[l], char_count.get(input[l]) - 1);\n                if (char_count.get(input[l]) === 0) {\n                    char_count.delete(input[l]);\n                }\n                l++;\n                cur_len--;\n            }\n            cur_len++;\n        }\n        max_len = Math.max(max_len, cur_len);\n        r++;\n    }\n    return max_len;\n}"
        }
    },
    "161": {
        "call_functions": {
            "c++": "bool isOneEditDistance(string s, string t) {\n    int m = s.length(), n = t.length();\n    if (m > n) {\n        return isOneEditDistance(t, s);\n    }\n    if (n - m > 1) {\n        return false;\n    }\n    bool flag = false;\n    for (int i = 0; i < m; ++i) {\n      if (s[i] != t[i]) {\n          if (m < n) {\n              return s.substr(i) == t.substr(i + 1);\n          } else {\n              return s.substr(i + 1) == t.substr(i + 1);\n          }\n      }\n    }\n    return m + 1 == n;\n}\n\nint main() {\n    string s = $args;\n    string t = $args;\n    bool result = isOneEditDistance(s, t);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean isOneEditDistance(String s, String t) {\n    int m = s.length();\n    int n = t.length();\n    if (m > n) {\n        return isOneEditDistance(t, s);\n    }\n    if (n - m > 1) {\n        return false;\n    }\n    for (int i = 0; i < m; ++i) {\n        if (s.charAt(i) != t.charAt(i)) {\n            if (m < n) {\n                return s.substring(i).equals(t.substring(i + 1));\n            } else {\n                return s.substring(i + 1).equals(t.substring(i + 1));\n            }\n        }\n    }\n    return m + 1 == n;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = isOneEditDistance(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = isOneEditDistance(s, t);\n    console.log(result);\n}"
        }
    },
    "162": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = findPeakElement(nums);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "163": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int lower = 0;\n    int upper = 10;\n    std::vector<std::string> result = findMissingRanges(nums, lower, upper);\n\n    for (const auto& range : result) {\n        std::cout << range << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<String> findMissingRanges(int[] nums, int lower, int upper) {\n    List<String> result = new ArrayList<>();\n    long prev = (long) lower - 1;\n\n    for (int i = 0; i <= nums.length; ++i) {\n        long cur = (i == nums.length) ? (long) upper + 1 : nums[i];\n        if (cur - prev >= 2) {\n            result.add(Long.toString(prev + 1) + (cur - prev == 2 ? \"\" : \"->\") + Long.toString(cur - 1));\n        }\n        prev = cur;\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    lower = $args[1]\n    upper = $args[2]\n    result = find_missing_ranges(nums, lower, upper)\n    print(result)",
            "javascript": "function findMissingRanges(nums, lower, upper) {\n    const result = findMissingRanges(nums, lower, upper);\n    console.log(result);\n}"
        }
    },
    "164": {
        "call_functions": {
            "c++": "int maximumGap(vector<int>& nums) {\n    if (nums.size() < 2) return 0;\n    \n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    int len = nums.size();\n    int bucket_size = max(1, (max_val - min_val) / (len - 1));\n    int bucket_num = (max_val - min_val) / bucket_size + 1;\n    vector<pair<int, int>> buckets(bucket_num, {INT_MAX, INT_MIN});\n\n    for (int num : nums) {\n        int idx = (num - min_val) / bucket_size;\n        buckets[idx].first = min(buckets[idx].first, num);\n        buckets[idx].second = max(buckets[idx].second, num);\n    }\n\n    int max_gap = 0, prev_max = min_val;\n    for (auto& bucket : buckets) {\n        if (bucket.first == INT_MAX) continue;\n        max_gap = max(max_gap, bucket.first - prev_max);\n        prev_max = bucket.second;\n    }\n    return max_gap;\n}",
            "java": "public int maximumGap(int[] nums) {\n    if (nums.length < 2) return 0;\n\n    int min_val = Arrays.stream(nums).min().getAsInt();\n    int max_val = Arrays.stream(nums).max().getAsInt();\n    int len = nums.length;\n    int bucket_size = Math.max(1, (max_val - min_val) / (len - 1));\n    int bucket_num = (max_val - min_val) / bucket_size + 1;\n    int[][] buckets = new int[bucket_num][2];\n    for (int i = 0; i < bucket_num; i++) {\n        buckets[i] = new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE};\n    }\n\n    for (int num : nums) {\n        int idx = (num - min_val) / bucket_size;\n        buckets[idx][0] = Math.min(buckets[idx][0], num);\n        buckets[idx][1] = Math.max(buckets[idx][1], num);\n    }\n\n    int max_gap = 0, prev_max = min_val;\n    for (int[] bucket : buckets) {\n        if (bucket[0] == Integer.MAX_VALUE) continue;\n        max_gap = Math.max(max_gap, bucket[0] - prev_max);\n        prev_max = bucket[1];\n    }\n    return max_gap;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maximumGap(nums)\n    print(result)",
            "javascript": "function maximumGap(nums) {\n    if (nums.length < 2) return 0;\n\n    let min_val = Math.min(...nums);\n    let max_val = Math.max(...nums);\n    let len = nums.length;\n    let bucket_size = Math.max(1, Math.floor((max_val - min_val) / (len - 1)));\n    let bucket_num = Math.floor((max_val - min_val) / bucket_size) + 1;\n    let buckets = Array.from({ length: bucket_num }, () => [Infinity, -Infinity]);\n\n    for (let num of nums) {\n        let idx = Math.floor((num - min_val) / bucket_size);\n        buckets[idx][0] = Math.min(buckets[idx][0], num);\n        buckets[idx][1] = Math.max(buckets[idx][1], num);\n    }\n\n    let max_gap = 0, prev_max = min_val;\n    for (let bucket of buckets) {\n        if (bucket[0] === Infinity) continue;\n        max_gap = Math.max(max_gap, bucket[0] - prev_max);\n        prev_max = bucket[1];\n    }\n    return max_gap;\n}"
        }
    },
    "165": {
        "call_functions": {
            "c++": "int compareVersion(string version1, string version2) {\n    int i = 0, j = 0;\n    while (i < version1.size() || j < version2.size()) {\n        int num1 = 0, num2 = 0;\n        while (i < version1.size() && version1[i] != '.') {\n            num1 = num1 * 10 + (version1[i++] - '0');\n        }\n        while (j < version2.size() && version2[j] != '.') {\n            num2 = num2 * 10 + (version2[j++] - '0');\n        }\n        if (num1 < num2) return -1;\n        if (num1 > num2) return 1;\n        i++; j++;\n    }\n    return 0;\n}",
            "java": "public int compareVersion(String version1, String version2) {\n    int i = 0, j = 0;\n    while (i < version1.length() || j < version2.length()) {\n        int num1 = 0, num2 = 0;\n        while (i < version1.length() && version1.charAt(i) != '.') {\n            num1 = num1 * 10 + (version1.charAt(i++) - '0');\n        }\n        while (j < version2.length() && version2.charAt(j) != '.') {\n            num2 = num2 * 10 + (version2.charAt(j++) - '0');\n        }\n        if (num1 < num2) return -1;\n        if (num1 > num2) return 1;\n        i++; j++;\n    }\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    version1 = $args[0]\n    version2 = $args[1]\n    result = compare_version(version1, version2)\n    print(result)",
            "javascript": "function main() {\n    const version1 = $args;\n    const version2 = $args;\n    const result = compareVersion(version1, version2);\n    console.log(result);\n}"
        }
    },
    "166": {
        "call_functions": {
            "c++": "#include <unordered_map>\nstd::string fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0) return \"0\";\n    std::string res;\n    if ((numerator > 0) ^ (denominator > 0)) res += '-';\n    long num = std::abs((long)numerator), den = std::abs((long)denominator);\n    res += std::to_string(num / den);\n    num %= den;\n    if (num == 0) return res;\n    res += '.';\n    std::unordered_map<int, int> map;\n    while (num) {\n        if (map.find(num) != map.end()) {\n            res.insert(map[num], \"(\");\n            res += \")\";\n            break;\n        }\n        map[num] = res.size();\n        num *= 10;\n        res += std::to_string(num / den);\n        num %= den;\n    }\n    return res;\n}\n\nint main() {\n    int numerator = $args;\n    int denominator = $args;\n    std::string result = fractionToDecimal(numerator, denominator);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0) return \"0\";\n    StringBuilder res = new StringBuilder();\n    if ((numerator > 0) ^ (denominator > 0)) res.append('-');\n    long num = Math.abs((long)numerator), den = Math.abs((long)denominator);\n    res.append(num / den);\n    num %= den;\n    if (num == 0) return res.toString();\n    res.append('.');\n    HashMap<Long, Integer> map = new HashMap<>();\n    while (num != 0) {\n        if (map.containsKey(num)) {\n            res.insert(map.get(num), \"(\");\n            res.append(\")\");\n            break;\n        }\n        map.put(num, res.length());\n        num *= 10;\n        res.append(num / den);\n        num %= den;\n    }\n    return res.toString();\n}"
        }
    },
    "168": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int columnNumber = $args;\n    std::string result = convertToTitle(columnNumber);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String convertToTitle(int columnNumber) {\n    StringBuilder result = new StringBuilder();\n    while (columnNumber > 0) {\n        columnNumber--;\n        result.insert(0, (char) ('A' + columnNumber % 26));\n        columnNumber /= 26;\n    }\n    return result.toString();\n}"
        }
    },
    "169": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = majorityElement(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int[] args) {\n    int[] nums = args;\n    int count = 0;\n    Integer candidate = null;\n\n    for (int num : nums) {\n        if (count == 0) {\n            candidate = num;\n        }\n        count += (num == candidate) ? 1 : -1;\n    }\n\n    return candidate;\n}"
        }
    },
    "171": {
        "call_functions": {
            "c++": "int main() {\n    string columnTitle = $args;\n    int result = titleToNumber(columnTitle);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int titleToNumber(String columnTitle) {\n    int result = 0;\n    for (char c : columnTitle.toCharArray()) {\n        result = result * 26 + (c - 'A' + 1);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    column_title = $args[0]\n    result = title_to_number(column_title)\n    print(result)",
            "javascript": "function main() {\n    const columnTitle = $args;\n    const result = titleToNumber(columnTitle);\n    console.log(result);\n}"
        }
    },
    "174": {
        "call_functions": {
            "c++": "#include<vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> dungeon = $args;\n    int result = calculateMinimumHP(dungeon);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "179": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\n#include <vector>\n#include <iostream>\n\nbool compare(std::string a, std::string b) {\n    return a+b > b+a;\n}\n\nstd::string largestNumber(std::vector<int>& nums) {\n    std::vector<std::string> asStrs;\n    for (int num : nums) asStrs.push_back(std::to_string(num));\n    std::sort(asStrs.begin(), asStrs.end(), compare);\n    std::string res;\n    for (std::string s: asStrs) res += s;\n    return res[0] == '0' ? \"0\" : res;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::string result = largestNumber(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String largestNumber(int[] nums) {\n        String[] strNums = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            strNums[i] = String.valueOf(nums[i]);\n        }\n        Arrays.sort(strNums, (a, b) -> (b + a).compareTo(a + b));\n        if (strNums[0].equals(\"0\")) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String str : strNums) sb.append(str);\n        return sb.toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = largestNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = largestNumber(nums);\n    console.log(result);\n}"
        }
    },
    "187": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> result = findRepeatedDnaSequences(s);\n    for (const std::string& sequence : result) {\n        std::cout << sequence << std::endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> findRepeatedDnaSequences(String s) {\n    List<String> result = new ArrayList<>();\n    HashMap<String, Integer> dnaCounter = new HashMap<>();\n\n    for (int i = 0; i <= s.length() - 10; i++) {\n        String sequence = s.substring(i, i + 10);\n        dnaCounter.put(sequence, dnaCounter.getOrDefault(sequence, 0) + 1);\n        if (dnaCounter.get(sequence) == 2) {\n            result.add(sequence);\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = findRepeatedDnaSequences(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = findRepeatedDnaSequences(s);\n    console.log(result);\n}"
        }
    },
    "188": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n\nint main() {\n    int k = $args;\n    std::vector<int> prices = {1, 2, 3, 4, 5};\n    int result = maxProfit(k, prices);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int maxProfit(int k, int[] prices) {\n    int n = prices.length;\n    if (k > n / 2) {\n        int maxProfit = 0;\n        for (int i = 1; i < n; ++i)\n            maxProfit += Math.max(prices[i] - prices[i - 1], 0);\n        return maxProfit;  \n    }\n\n    int[][] dp = new int[k + 1][n];\n    for (int i = 1; i <= k; ++i) {\n        int maxDiff = -prices[0];\n        for (int j = 1; j < n; ++j) {\n            dp[i][j] = Math.max(dp[i][j - 1], prices[j] + maxDiff);\n            maxDiff = Math.max(maxDiff, dp[i - 1][j] - prices[j]);\n        }\n    }\n    return dp[k][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    prices = $args[1]\n    result = maxProfit(k, prices)\n    print(result)",
            "javascript": "function maxProfit(k, prices) {\n    let n = prices.length;\n    if (k > n / 2) {\n        let maxProfit = 0;\n        for (let i = 1; i < n; ++i)\n            maxProfit += Math.max(prices[i] - prices[i - 1], 0);\n        return maxProfit;  \n    }\n\n    let dp = new Array(k + 1).fill(null).map(() => new Array(n).fill(0));\n    for (let i = 1; i <= k; ++i) {\n        let maxDiff = -prices[0];\n        for (let j = 1; j < n; ++j) {\n            dp[i][j] = Math.max(dp[i][j - 1], prices[j] + maxDiff);\n            maxDiff = Math.max(maxDiff, dp[i - 1][j] - prices[j]);\n        }\n    }\n    return dp[k][n - 1];\n}"
        }
    },
    "189": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int k = $args;\n    rotate(nums, k);\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << \" \";\n    }\n    return 0;\n}",
            "java": "public void rotate(int[] nums, int k) {\n    int n = nums.length;\n    k %= n;\n    reverse(nums, 0, n - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, n - 1);\n}\n\nprivate void reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start++] = nums[end];\n        nums[end--] = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = rotate(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    rotate(nums, k);\n    console.log(nums);\n}"
        }
    },
    "190": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nunsigned int reverseBits(unsigned int n) {\n    unsigned int res = 0;\n    for (int i = 0; i < 32; ++i) {\n        res <<= 1;\n        res |= n & 1;\n        n >>= 1;\n    }\n    return res;\n}\n\nint main() {\n    unsigned int n = $args;\n    unsigned int result = reverseBits(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "191": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    uint32_t n = $args;\n    int result = hammingWeight(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "194": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <sstream>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> content;\n    std::string line;\n    while (std::getline(std::cin, line)) {\n        content.push_back(line);\n    }\n\n    std::vector<std::string> result = transpose(content);\n\n    for (const std::string& word : result) {\n        std::cout << word << std::endl;\n    }\n\n    return 0;\n}\n",
            "java": "public List<String> transpose(List<String> content) {\n    List<List<String>> data = new ArrayList<>();\n    for (String line : content) {\n        List<String> row = new ArrayList<>(Arrays.asList(line.split(\" \")));\n        data.add(row);\n    }\n\n    List<String> result = new ArrayList<>(Collections.nCopies(data.get(0).size(), \"\"));\n    for (int i = 0; i < data.get(0).size(); i++) {\n        for (int j = 0; j < data.size(); j++) {\n            result.set(i, result.get(i) + (j > 0 ? \" \" : \"\") + data.get(j).get(i));\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    content = $args[0]\n    result = transpose(content)\n    print(result)",
            "javascript": "function main() {\n    const content = $args;\n    const result = transpose(content);\n    console.log(result);\n}"
        }
    },
    "198": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = rob(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rob(int[] nums) {\n    int prev1 = 0, prev2 = 0;\n    for (int num : nums) {\n        int temp = prev1;\n        prev1 = Math.max(prev2 + num, prev1);\n        prev2 = temp;\n    }\n    return prev1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = rob(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = rob(nums);\n    console.log(result);\n}"
        }
    },
    "200": {
        "call_functions": {
            "c++": "void dfs(vector<vector<char>>& grid, int i, int j) {\n    if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == '0')\n        return;\n\n    grid[i][j] = '0';\n    dfs(grid, i + 1, j);\n    dfs(grid, i - 1, j);\n    dfs(grid, i, j + 1);\n    dfs(grid, i, j - 1);\n}\n\nint numIslands(vector<vector<char>>& grid) {\n    int count = 0;\n    for(int i = 0; i < grid.size(); i++) {\n        for(int j = 0; j < grid[0].size(); j++) {\n            if(grid[i][j] == '1') {\n                count++;\n                dfs(grid, i, j);\n            }\n        }\n    }\n    return count;\n}",
            "java": "public int numIslands(char[][] grid) {\n        int count = 0;\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                if(grid[i][j] == '1') {\n                    count++;\n                    dfs(grid, i, j);\n                }\n            }\n        }\n        return count;\n    }",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = numIslands(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = numIslands(grid);\n    console.log(result);\n}"
        }
    },
    "202": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    bool result = isHappy(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean isHappy(int n) {\n    int slow = n, fast = getNext(n);\n    while (fast != 1 && slow != fast) {\n        slow = getNext(slow);\n        fast = getNext(getNext(fast));\n    }\n    return fast == 1;\n}"
        }
    },
    "204": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = countPrimes(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "205": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <iostream>\n\nbool isIsomorphic(std::string s, std::string t);\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    bool result = isIsomorphic(s, t);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n\nbool isIsomorphic(std::string s, std::string t) {\n    std::unordered_map<char, char> map1, map2;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (map1.find(s[i]) == map1.end()) {\n            map1[s[i]] = t[i];\n        }\n        if (map2.find(t[i]) == map2.end()) {\n            map2[t[i]] = s[i];\n        }\n        if (map1[s[i]] != t[i] || map2[t[i]] != s[i]) {\n            return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean isIsomorphic(String s, String t) {\n    HashMap<Character, Character> map1 = new HashMap<>();\n    HashMap<Character, Character> map2 = new HashMap<>();\n    \n    for (int i = 0; i < s.length(); i++) {\n        char sChar = s.charAt(i);\n        char tChar = t.charAt(i);\n        \n        if (!map1.containsKey(sChar)) {\n            map1.put(sChar, tChar);\n        }\n        if (!map2.containsKey(tChar)) {\n            map2.put(tChar, sChar);\n        }\n        \n        if (map1.get(sChar) != tChar || map2.get(tChar) != sChar) {\n           return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = is_isomorphic(s, t)\n    print(result)",
            "javascript": "function isIsomorphic(s, t) {\n    let map1 = new Map();\n    let map2 = new Map();\n    for (let i = 0; i < s.length; i++) {\n        let sChar = s[i];\n        let tChar = t[i];\n\n        if (!map1.has(sChar)) {\n            map1.set(sChar, tChar);\n        }\n        if (!map2.has(tChar)) {\n            map2.set(tChar, sChar);\n        }\n\n        if (map1.get(sChar) !== tChar || map2.get(tChar) !== sChar) {\n            return false;\n        }\n    }\n    return true;\n}"
        }
    },
    "207": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <iostream>\n\nint main() {\n    int numCourses = $args;\n    std::vector<std::vector<int>> prerequisites;\n    bool result = canFinish(numCourses, prerequisites);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean canFinish(int numCourses, int[][] prerequisites) {\n    List<List<Integer>> adj = new ArrayList<>(numCourses);\n    int[] inDegree = new int[numCourses];\n    \n    for (int i = 0; i < numCourses; i++)\n        adj.add(new ArrayList<>());\n    \n    for (int[] p : prerequisites) {\n        adj.get(p[1]).add(p[0]);\n        inDegree[p[0]]++;\n    }\n    \n    Queue<Integer> q = new LinkedList<>();\n    for (int i = 0; i < numCourses; i++) {\n        if (inDegree[i] == 0) q.add(i);\n    }\n    \n    while (!q.isEmpty()) {\n        int currCourse = q.poll();\n        numCourses--;\n        \n        for (int nextCourse : adj.get(currCourse)) {\n            inDegree[nextCourse]--;\n            if (inDegree[nextCourse] == 0) q.add(nextCourse);\n        }\n    }\n    \n    return numCourses == 0;\n}",
            "python": "if __name__ == \"__main__\":\n    numCourses = $args[0]\n    prerequisites = $args[1]\n    result = canFinish(numCourses, prerequisites)\n    print(result)",
            "javascript": "function main() {\n    const numCourses = $args[0];\n    const prerequisites = $args[1];\n    const result = canFinish(numCourses, prerequisites);\n    console.log(result);\n}"
        }
    },
    "209": {
        "call_functions": {
            "c++": "#include <climits>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint minSubArrayLen(int target, vector<int>& nums) {\n    int left = 0, cur_sum = 0, min_len = INT_MAX;\n    for (int right = 0; right < nums.size(); right++) {\n        cur_sum += nums[right];\n        while (cur_sum >= target) {\n            min_len = min(min_len, right - left + 1);\n            cur_sum -= nums[left++];\n        }\n    }\n    return min_len == INT_MAX ? 0 : min_len;\n}\n\nint main() {\n    int target = $args;\n    vector<int> nums = {1, 4, 4};\n    int result = minSubArrayLen(target, nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minSubArrayLen(int target, int[] nums) {\n    int left = 0, cur_sum = 0, min_len = Integer.MAX_VALUE;\n    for (int right = 0; right < nums.length; right++) {\n        cur_sum += nums[right];\n        while (cur_sum >= target) {\n            min_len = Math.min(min_len, right - left + 1);\n            cur_sum -= nums[left++];\n        }\n    }\n    return min_len == Integer.MAX_VALUE ? 0 : min_len;\n}"
        }
    },
    "210": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nint main() {\n    int numCourses = $args;\n    vector<vector<int>> prerequisites;\n    // populate prerequisites vector\n    vector<int> result = findOrder(numCourses, prerequisites);\n    // print result\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] findOrder(int numCourses, int[][] prerequisites) {\n    int[] inDegree = new int[numCourses];\n    List<List<Integer>> adjList = new ArrayList<>();\n    \n    for (int i = 0; i < numCourses; i++) {\n        adjList.add(new ArrayList<>());\n    }\n    \n    for (int[] p : prerequisites) {\n        adjList.get(p[1]).add(p[0]);\n        inDegree[p[0]]++;\n    }\n    \n    Queue<Integer> q = new LinkedList<>();\n    for (int i = 0; i < numCourses; i++) {\n        if (inDegree[i] == 0) {\n            q.offer(i);\n        }\n    }\n    \n    int[] order = new int[numCourses];\n    int index = 0;\n    \n    while (!q.isEmpty()) {\n        int curr = q.poll();\n        order[index++] = curr;\n        for (int next : adjList.get(curr)) {\n            if (--inDegree[next] == 0) {\n                q.offer(next);\n            }\n        }\n    }\n    \n    return (index == numCourses) ? order : new int[0];\n}",
            "python": "if __name__ == \"__main__\":\n    numCourses = $args[0]\n    prerequisites = $args[1]\n    result = findOrder(numCourses, prerequisites)\n    print(result)",
            "javascript": "function findOrder(numCourses, prerequisites) {\n    const inDegree = new Array(numCourses).fill(0);\n    const adjList = Array.from({ length: numCourses }, () => []);\n    \n    for (const p of prerequisites) {\n        adjList[p[1]].push(p[0]);\n        inDegree[p[0]]++;\n    }\n    \n    const q = [];\n    for (let i = 0; i < numCourses; i++) {\n        if (inDegree[i] === 0) {\n            q.push(i);\n        }\n    }\n    \n    const order = [];\n    \n    while (q.length) {\n        const curr = q.shift();\n        order.push(curr);\n        for (const next of adjList[curr]) {\n            if (--inDegree[next] === 0) {\n                q.push(next);\n            }\n        }\n    }\n    \n    return (order.length === numCourses) ? order : [];\n}"
        }
    },
    "212": {
        "call_functions": {
            "c++": "std::vector<std::string> findWords(std::vector<std::vector<char>>& board, std::vector<std::string>& words) {\n    std::vector<std::string> result;\n    for (const auto& word : words) {\n        bool found = false;\n        std::vector<std::vector<bool>> visited(board.size(), std::vector<bool>(board[0].size(), false));\n        for (int i = 0; i < board.size() && !found; ++i) {\n            for (int j = 0; j < board[0].size() && !found; ++j) {\n                dfs(board, word, 0, i, j, visited, found);\n            }\n        }\n        if (found) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n",
            "java": "public List<String> findWords(char[][] board, String[] words) {\n    List<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (exist(board, word)) {\n            result.add(word);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    words = $args[1]\n    result = findWords(board, words)\n    print(result)",
            "javascript": "function findWords(board, words) {\n    function dfs(board, word, index, i, j, visited) {\n        if (index === word.length) {\n            return true;\n        }\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j] || board[i][j] !== word.charAt(index)) {\n            return false;\n        }\n        visited[i][j] = true;\n        const found = dfs(board, word, index + 1, i - 1, j, visited) ||\n                      dfs(board, word, index + 1, i + 1, j, visited) ||\n                      dfs(board, word, index + 1, i, j - 1, visited) ||\n                      dfs(board, word, index + 1, i, j + 1, visited);\n        visited[i][j] = false;\n        return found;\n    }\n\n    const res = [];\n    for (const word of words) {\n        let found = false;\n        for (let i = 0; i < board.length && !found; i++) {\n            for (let j = 0; j < board[0].length && !found; j++) {\n                if (dfs(board, word, 0, i, j, Array.from({ length: board.length }, () => Array(board[0].length).fill(false)))) {\n                    found = true;\n                }\n            }\n        }\n        if (found) {\n            res.push(word);\n        }\n    }\n    return res;\n}"
        }
    },
    "213": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = rob(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rob(int[] nums) {\n    if (nums.length == 1) return nums[0];\n    int prev = 0, curr = 0;\n    for (int i = 0; i < nums.length - 1; i++) {\n        int temp = Math.max(curr, prev + nums[i]);\n        prev = curr;\n        curr = temp;\n    }\n    int res = curr;\n    prev = 0;\n    curr = 0;\n    for (int i = 1; i < nums.length; i++) {\n        int temp = Math.max(curr, prev + nums[i]);\n        prev = curr;\n        curr = temp;\n    }\n    return Math.max(res, curr);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = rob(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = rob(nums);\n    console.log(result);\n}"
        }
    },
    "214": {
        "call_functions": {
            "c++": "#include <string>\n#include <iostream>\n\nstd::string shortestPalindrome(std::string s);\n\nint main() {\n    std::string s = $args;\n    std::string result = shortestPalindrome(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String shortestPalindrome(String s) {\n    int n = s.length();\n    String rev_s = new StringBuilder(s).reverse().toString();\n    \n    for (int i = 0; i < n; ++i) {\n        if(s.substring(0, n - i).equals(rev_s.substring(i)))\n            return rev_s.substring(0, i) + s;\n    }\n    return \"\";\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = shortest_palindrome(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = shortestPalindrome(s);\n    console.log(result);\n}\n"
        }
    },
    "216": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid helper(int k, int n, int current, std::vector<int>& current_comb, std::vector<std::vector<int>>& result) {\n    if (k == 0 && n == 0) {\n        result.push_back(current_comb);\n    } else if (k > 0 && n > 0) {\n        for (int i = current + 1; i <= 9; ++i) {\n            current_comb.push_back(i);\n            helper(k - 1, n - i, i, current_comb, result);\n            current_comb.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<int>> combinationSum3(int k, int n) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> current_comb;\n    helper(k, n, 0, current_comb, result);\n    return result;\n}\n\nint main() {\n    int k = $args;\n    int n = $args;\n    std::vector<std::vector<int>> result = combinationSum3(k, n);\n    for (const auto& comb : result) {\n        for (const auto& num : comb) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> combinationSum3(int k, int n) {\n    List<List<Integer>> result = new ArrayList<>();\n    helper(k, n, 0, new ArrayList<>(), result);\n    return result;\n}"
        }
    },
    "217": {
        "call_functions": {
            "c++": "bool containsDuplicate(vector<int>& nums) {\n    unordered_set<int> s;\n    for (int num : nums) {\n        if (s.find(num) != s.end()) {\n            return true;\n        }\n        s.insert(num);\n    }\n    return false;\n}",
            "java": "public boolean containsDuplicate(int[] nums) {\n    Set<Integer> set = new HashSet<Integer>();\n    for (int num : nums) {\n        if (!set.add(num)) {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = containsDuplicate(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = containsDuplicate(nums);\n    console.log(result);\n}\n"
        }
    },
    "218": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> buildings = $args;\n    vector<vector<int>> result = getSkyline(buildings);\n    for (const auto &r : result) {\n        cout << r[0] << \" \" << r[1] << endl;\n    }\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n"
        }
    },
    "219": {
        "call_functions": {
            "c++": "bool containsNearbyDuplicate(vector<int>& nums, int k) {\n    unordered_map<int, int> valueIndexMap;\n    for (int i = 0; i < nums.size(); i++) {\n        if (valueIndexMap.find(nums[i]) != valueIndexMap.end() && i - valueIndexMap[nums[i]] <= k) {\n            return true;\n        }\n        valueIndexMap[nums[i]] = i;\n    }\n    return false;\n}",
            "java": "public boolean containsNearbyDuplicate(int[] nums, int k) {\n    HashMap<Integer, Integer> valueIndexMap = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        if (valueIndexMap.containsKey(nums[i]) && i - valueIndexMap.get(nums[i]) <= k) {\n            return true;\n        }\n        valueIndexMap.put(nums[i], i);\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = containsNearbyDuplicate(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = containsNearbyDuplicate(nums, k);\n    console.log(result);\n}"
        }
    },
    "220": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int k = $args;\n    int t = $args;\n    bool result = containsNearbyAlmostDuplicate(nums, k, t);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {\n    TreeSet<Long> window = new TreeSet<>();\n    for(int i = 0; i < nums.length; i++) {\n        if(i > k) {\n            window.remove((long)nums[i - k - 1]);\n        }\n        Long ceil = window.ceiling((long)nums[i] - t);\n        if(ceil != null && ceil - nums[i] <= t) {\n            return true;\n        }\n        window.add((long)nums[i]);\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    t = $args[2]\n    result = containsNearbyAlmostDuplicate(nums, k, t)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const t = $args[2];\n    const result = containsNearbyAlmostDuplicate(nums, k, t);\n    console.log(result);\n}"
        }
    },
    "221": {
        "call_functions": {
            "c++": "int maximalSquare(vector<vector<char>>& matrix) {\n    int m = matrix.size();\n    int n = matrix[0].size();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n    int maxSize = 0;\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (matrix[i - 1][j - 1] == '1') {\n                dp[i][j] = min({dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]}) + 1;\n                maxSize = max(maxSize, dp[i][j]);\n            }\n        }\n    }\n\n    return maxSize * maxSize;\n}",
            "java": "public int maximalSquare(char[][] matrix) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[][] dp = new int[m + 1][n + 1];\n    int maxSize = 0;\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (matrix[i - 1][j - 1] == '1') {\n                dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n                maxSize = Math.max(maxSize, dp[i][j]);\n            }\n        }\n    }\n\n    return maxSize * maxSize;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = maximalSquare(matrix)\n    print(result)",
            "javascript": "function maximalSquare(matrix) {\n    const m = matrix.length;\n    const n = matrix[0].length;\n    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    let maxSize = 0;\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (matrix[i - 1][j - 1] === '1') {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n                maxSize = Math.max(maxSize, dp[i][j]);\n            }\n        }\n    }\n\n    return maxSize * maxSize;\n}"
        }
    },
    "224": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = calculate(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int calculate(String s) {\n    int result = 0, sign = 1, num = 0;\n    Stack<Integer> st = new Stack<>();\n    for (char c : s.toCharArray()) {\n        if (Character.isDigit(c)) {\n            num = num * 10 + (c - '0');\n        } else {\n            result += sign * num;\n            num = 0;\n            if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                st.push(result);\n                st.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                int prev_sign = st.pop();\n                int prev_result = st.pop();\n                result = prev_result + prev_sign * result;\n            }\n        }\n    }\n    result += sign * num;\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = calculate(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = calculate(s);\n    console.log(result);\n}"
        }
    },
    "225": {
        "call_functions": {
            "c++": "void push(int x) {\n        q2.push(x);\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        std::swap(q1, q2);\n    }\n\n    int pop() {\n        int top = q1.front();\n        q1.pop();\n        return top;\n    }\n\n    int top() {\n        return q1.front();\n    }\n\n    bool empty() {\n        return q1.empty();\n    }",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    stack = MyStack()\n    stack.push($args[0])\n    stack.push($args[1])\n    stack.push($args[2])\n    result1 = stack.pop()\n    result2 = stack.top()\n    result3 = stack.empty()\n    print(result1)\n    print(result2)\n    print(result3)",
            "javascript": "function main() {\n    const stack = new MyStack();\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    const result1 = stack.pop();\n    const result2 = stack.top();\n    const result3 = stack.empty();\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n}"
        }
    },
    "227": {
        "call_functions": {
            "c++": "int calculate(string s) {\n    int result = 0, num = 0, sign = 1;\n    stack<int> st;\n    \n    for (char c : s) {\n        if (isdigit(c)) {\n            num = num * 10 + (c - '0');\n        } else if (c == '+') {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += sign * num;\n            num = 0;\n            sign = -1;\n        } else if (c == '(') {\n            st.push(result);\n            st.push(sign);\n            result = 0;\n            sign = 1;\n        } else if (c == ')') {\n            result += sign * num;\n            num = 0;\n            result *= st.top(); st.pop();\n            result += st.top(); st.pop();\n        }\n    }\n    if (num) result += sign * num;\n    return result;\n}"
        }
    },
    "228": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::string> result = find_ranges(nums);\n    for (const std::string& range : result) {\n        std::cout << range << std::endl;\n    }\n    return 0;\n}"
        }
    },
    "229": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> majorityElement(vector<int>& nums) {\n    int n = nums.size();\n    unordered_map<int, int> count;\n    vector<int> result;\n\n    for (int num : nums) {\n        if (count.find(num) == count.end()) {\n            count[num] = 1;\n        } else {\n            count[num]++;\n        }\n        if (count[num] > n / 3 && find(result.begin(), result.end(), num) == result.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = majorityElement(nums);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> majorityElement(int[] nums) {\n    int n = nums.length;\n    HashMap<Integer, Integer> count = new HashMap<>();\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int num : nums) {\n        count.put(num, count.getOrDefault(num, 0) + 1);\n        if (count.get(num) > n / 3 && !result.contains(num)) {\n            result.add(num);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = majorityElement(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = majorityElement(nums);\n    console.log(result);\n}"
        }
    },
    "233": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = countDigitOne(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "237": {
        "call_functions": {
            "c++": "void deleteNode(ListNode* node) {\n    ListNode* nextNode = node->next;\n    *node = *nextNode;\n    delete nextNode;\n}"
        }
    },
    "238": {
        "call_functions": {
            "c++": "vector<int> productExceptSelf(vector<int>& nums) {\n    int n = nums.size();\n    vector<int> answer(n, 1);\n    \n    int left = 1;\n    for (int i = 0; i < n; i++) {\n        answer[i] *= left;\n        left *= nums[i];\n    }\n    \n    int right = 1;\n    for (int i = n - 1; i >= 0; i--) {\n        answer[i] *= right;\n        right *= nums[i];\n    }\n    \n    return answer;\n}"
        }
    },
    "239": {
        "call_functions": {
            "c++": "#include <vector>\n#include <deque>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = 3;\n    std::vector<int> result = maxSlidingWindow(nums, k);\n\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n\n    return 0;\n}\n",
            "java": "public int[] maxSlidingWindow(int[] nums, int k) {\n    if (nums == null || nums.length == 0) return new int[0];\n    int[] result = new int[nums.length - k + 1];\n    int idx = 0;\n    Deque<Integer> deque = new LinkedList<Integer>();\n    \n    for (int i = 0; i < nums.length; i++) {\n        if (!deque.isEmpty() && deque.peekFirst() == i - k) deque.poll();\n            \n        while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {\n            deque.removeLast();\n        }    \n            \n        deque.offer(i);\n        if (i >= k - 1) {\n            result[idx++] = nums[deque.peek()];\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = maxSlidingWindow(nums, k)\n    print(result)",
            "javascript": "function maxSlidingWindow(nums, k) {\n  let result = [];\n  let dq = [];\n\n  for (let i = 0; i < nums.length; i++) {\n    while (dq.length && dq[0] < i - k + 1) {\n      dq.shift();\n    }\n\n    while (dq.length && nums[dq[dq.length - 1]] < nums[i]) {\n      dq.pop();\n    }\n\n    dq.push(i);\n\n    if (i >= k - 1) {\n      result.push(nums[dq[0]]);\n    }\n  }\n\n  return result;\n}"
        }
    },
    "241": {
        "call_functions": {
            "c++": "#include<vector>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nvector<int> diffWaysToCompute(string input) {\n    vector<int> result;\n    for (int i = 0; i < input.size(); i++) {\n        char c = input[i];\n        if (c == '+' || c == '-' || c == '*') {\n            auto left = diffWaysToCompute(input.substr(0, i));\n            auto right = diffWaysToCompute(input.substr(i + 1));\n            for (int l : left) {\n                for (int r : right) {\n                    if (c == '+') result.push_back(l + r);\n                    else if (c == '-') result.push_back(l - r);\n                    else if (c == '*') result.push_back(l * r);\n                }\n            }\n        }\n    }\n    if (result.empty()) result.push_back(stoi(input));\n    return result;\n}\n\nint main() {\n    string input = $args;\n    vector<int> result = diffWaysToCompute(input);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        }
    },
    "243": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <climits>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> wordsDict = $args;\n    std::string word1 = $args;\n    std::string word2 = $args;\n    int result = shortestDistance(wordsDict, word1, word2);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int shortestDistance(String[] wordsDict, String word1, String word2) {\n    int idx1 = -1, idx2 = -1, minDistance = Integer.MAX_VALUE;\n    for (int i = 0; i < wordsDict.length; i++) {\n        if (word1.equals(wordsDict[i])) idx1 = i;\n        if (word2.equals(wordsDict[i])) idx2 = i;\n        if (idx1 != -1 && idx2 != -1)\n            minDistance = Math.min(minDistance, Math.abs(idx1 - idx2));\n    }\n    return minDistance;\n}",
            "python": "if __name__ == \"__main__\":\n    wordsDict = $args[0]\n    word1 = $args[1]\n    word2 = $args[2]\n    result = shortestDistance(wordsDict, word1, word2)\n    print(result)",
            "javascript": "function shortestDistance(wordsDict, word1, word2) {\n    const result = shortestDistance(wordsDict, word1, word2);\n    console.log(result);\n}"
        }
    },
    "245": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <limits>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> wordsDict = $args;\n    std::string word1 = $args;\n    std::string word2 = $args;\n    int result = shortestDistance(wordsDict, word1, word2);\n    std::cout << result << std::endl;\n    return 0;\n}\n"
        }
    },
    "246": {
        "call_functions": {
            "c++": "bool isStrobogrammatic(string num) {\n    unordered_map<char, char> lookup {{'0', '0'}, {'1', '1'}, {'6', '9'}, {'8', '8'}, {'9', '6'}};\n    int left = 0, right = num.size() - 1;\n    while(left <= right) {\n        if(lookup[num[left]] != num[right]) return false;\n        left++;\n        right--;\n    }\n    return true;\n}",
            "java": "public boolean isStrobogrammatic(String num) {\n    HashMap<Character, Character> lookup = new HashMap<Character, Character>() {{\n        put('0', '0');\n        put('1', '1');\n        put('6', '9');\n        put('8', '8');\n        put('9', '6');\n    }};\n    int left = 0, right = num.length() - 1;\n    while(left <= right) {\n        if(!lookup.containsKey(num.charAt(left)) || lookup.get(num.charAt(left)) != num.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}"
        }
    },
    "247": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nstd::vector<std::string> findStrobogrammatic(int n) {\n    return helper(n, n);\n}\n\nstd::vector<std::string> helper(int n, int m) {\n    if (n == 0) return {\"\"};\n    if (n == 1) return {\"0\", \"1\", \"8\"};\n    \n    std::vector<std::string> list = helper(n - 2, m);\n    std::vector<std::string> res;\n\n    for (int i = 0; i < list.size(); i++) {\n        std::string s = list[i];\n        \n        if (n != m) res.push_back(\"0\" + s + \"0\");\n\n        res.push_back(\"1\" + s + \"1\");\n        res.push_back(\"6\" + s + \"9\");\n        res.push_back(\"8\" + s + \"8\");\n        res.push_back(\"9\" + s + \"6\");\n    }\n\n    return res;\n}",
            "java": "public List<String> findStrobogrammatic(int n) {\n    return helper(n, n);\n}\n\nprivate List<String> helper(int n, int m) {\n    if (n == 0) return new ArrayList<>(Arrays.asList(\"\"));\n    if (n == 1) return new ArrayList<>(Arrays.asList(\"0\", \"1\", \"8\"));\n    \n    List<String> list = helper(n - 2, m);\n    List<String> res = new ArrayList<>();\n\n    for (int i = 0; i < list.size(); i++) {\n        String s = list.get(i);\n        \n        if (n != m) res.add(\"0\" + s + \"0\");\n\n        res.add(\"1\" + s + \"1\");\n        res.add(\"6\" + s + \"9\");\n        res.add(\"8\" + s + \"8\");\n        res.add(\"9\" + s + \"6\");\n    }\n\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findStrobogrammatic(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = findStrobogrammatic(n);\n    console.log(result);\n}"
        }
    },
    "248": {
        "call_functions": {
            "c++": "int strobogrammaticInRange(string low, string high) {\n    int count = 0;\n    for(int len = low.size(); len <= high.size(); ++len)\n        count += helper(len, len) <= high ? helper(len, len) >= low ? 1 : 0 : 0;\n    return count;\n}\n\nstring helper(int m, int n) {\n    if(m == 0) return \"\";\n    if(m == 1) return \"0 1 8\";\n    if(n == 0) return \"11 69 88 96\";\n    string res = \"\";\n    for(auto a : helper(m - 2, n)) {\n        if(m != n) res += a + \"0\" + a;\n        res += a + \"1\" + a;\n        res += a + \"6\" + a;\n        res += a + \"8\" + a;\n        res += a + \"9\" + a;\n    }\n    return res;\n}",
            "java": "public int strobogrammaticInRange(String low, String high) {\n    int count = 0;\n    for(int len = low.length(); len <= high.length(); ++len)\n        count += withinRange(helper(len, len), low, high) ? 1 : 0;\n    return count;\n}"
        }
    },
    "249": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nint main() {\n    std::vector<std::string> strings = $args;\n    std::vector<std::vector<std::string>> result = groupStrings(strings);\n    \n    // Print the result\n    for (const auto& group : result) {\n        for (const auto& str : group) {\n            std::cout << str << \" \";\n        }\n        std::cout << std::endl;\n    }\n    \n    return 0;\n}\n"
        }
    },
    "252": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    bool result = canAttendMeetings(intervals);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}"
        }
    },
    "253": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    int result = minMeetingRooms(intervals);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minMeetingRooms(int[][] intervals) {\n    if (intervals == null || intervals.length == 0) return 0;\n    \n    Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n    \n    minHeap.add(intervals[0][1]);\n    for (int i = 1; i < intervals.length; i++) {\n        if (intervals[i][0] >= minHeap.peek()) {\n            minHeap.poll();\n        }\n        minHeap.add(intervals[i][1]);\n    }\n    \n    return minHeap.size();\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = minMeetingRooms(intervals)\n    print(result)",
            "javascript": "function main() {\n    const intervals = $args;\n    const result = minMeetingRooms(intervals);\n    console.log(result);\n}"
        }
    },
    "254": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid helper(int n, int start, std::vector<int>& path, std::vector<std::vector<int>>& result) {\n    if (n == 1) {\n        if (path.size() > 1) {\n            result.push_back(path);\n        }\n        return;\n    }\n\n    for (int i = start; i <= n; ++i) {\n        if (n % i == 0) {\n            path.push_back(i);\n            helper(n / i, i, path, result);\n            path.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<int>> getFactors(int n) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> path;\n    helper(n, 2, path, result);\n    return result;\n}\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> result = getFactors(n);\n    for (const auto& factors : result) {\n        for (const auto& factor : factors) {\n            std::cout << factor << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> getFactors(int n) {\n    List<List<Integer>> result = new ArrayList<>();\n    helper(n, 2, new ArrayList<Integer>(), result);\n    return result;\n}\n\nprivate void helper(int n, int start, List<Integer> path, List<List<Integer>> result) {\n    if (n == 1) {\n        if (path.size() > 1) {\n            result.add(new ArrayList<>(path));\n        }\n        return;\n    }\n\n    for (int i = start; i <= n; i++) {\n        if (n % i == 0) {\n            path.add(i);\n            helper(n / i, i, path, result);\n            path.remove(path.size() - 1);\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = getFactors(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = getFactors(n);\n    console.log(result);\n}"
        }
    },
    "255": {
        "call_functions": {
            "c++": "bool isValidPreorder(vector<int>& preorder) {\n    stack<int> stk;\n    int lower_bound = INT_MIN;\n    for (int num : preorder) {\n        if (num < lower_bound) return false;\n        while (!stk.empty() && num > stk.top()) {\n            lower_bound = stk.top();\n            stk.pop();\n        }\n        stk.push(num);\n    }\n    return true;\n}",
            "java": "public static void main(String[] args) {\n    int[] preorder = $args;\n    boolean result = isValidPreorder(preorder);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    preorder = $args[0]\n    result = isValidPreorder(preorder)\n    print(result)",
            "javascript": "function main() {\n    const preorder = $args;\n    let stack = [];\n    let lowerBound = Number.MIN_SAFE_INTEGER;\n    for (let num of preorder) {\n        if (num < lowerBound) return false;\n        while (stack.length > 0 && num > stack[stack.length - 1]) {\n            lowerBound = stack.pop();\n        }\n        stack.push(num);\n    }\n    return true;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "256": {
        "call_functions": {
            "c++": "int minCost(vector<vector<int>>& costs) {\n    if (costs.empty()) return 0;\n    for (int i = 1; i < costs.size(); ++i) {\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2]);\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2]);\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1]);\n    }\n    return min(costs.back()[0], min(costs.back()[1], costs.back()[2]));\n}"
        }
    },
    "258": {
        "call_functions": {
            "c++": "int main() {\n    int num = $args;\n    int result = addDigits(num);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "259": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int target = $args;\n    int result = threeSumSmaller(nums, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int threeSumSmaller(int[] nums, int target) {\n    int count = 0;\n    Arrays.sort(nums);\n    for (int i = 0; i < nums.length; ++i) {\n        int j = i + 1, k = nums.length - 1;\n        while (j < k) {\n            if (nums[i] + nums[j] + nums[k] < target) {\n                count += k - j;\n                ++j;\n            } else {\n                --k;\n            }\n        }\n    }\n    return count;\n}"
        }
    },
    "260": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = singleNumber(nums);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] singleNumber(int[] nums) {\n    int xor_all = 0;\n    for (int num : nums) {\n        xor_all ^= num;\n    }\n\n    int bit = xor_all & -xor_all;\n    int n1 = 0;\n    int n2 = 0;\n    for (int num : nums) {\n        if ((num & bit) != 0) {\n            n1 ^= num;\n        } else {\n            n2 ^= num;\n        }\n    }\n\n    return new int[]{n1, n2};\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = singleNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = singleNumber(nums);\n    console.log(result);\n}"
        }
    },
    "261": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nbool hasCycle(const std::vector<std::vector<int>>& neighbors, std::vector<bool>& visited, int parent, int node);\n\nbool isTree(int n, std::vector<std::vector<int>>& edges) {\n    std::vector<std::vector<int>> neighbors(n);\n    for (const auto& edge : edges) {\n        neighbors[edge[0]].push_back(edge[1]);\n        neighbors[edge[1]].push_back(edge[0]);\n    }\n    std::vector<bool> visited(n, false);\n    if(hasCycle(neighbors, visited, -1, 0)) return false;\n    for (const auto& visit : visited)\n        if (!visit) return false;\n    return true;\n}\n\nbool hasCycle(const std::vector<std::vector<int>>& neighbors, std::vector<bool>& visited, int parent, int node) {\n    visited[node] = true;\n    for (const auto& neighbor : neighbors[node])\n        if ((neighbor != parent && visited[neighbor]) || (!visited[neighbor] && hasCycle(neighbors, visited, node, neighbor))) return true;\n    return false;\n}\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> edges;\n    // Fill the edges vector with input values\n    bool result = isTree(n, edges);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isTree(int n, int[][] edges) {\n    List<List<Integer>> neighbors = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) neighbors.add(new ArrayList<>());\n    for (int[] edge : edges) {\n        neighbors.get(edge[0]).add(edge[1]);\n        neighbors.get(edge[1]).add(edge[0]);\n    }\n    boolean[] visited = new boolean[n];\n    if(hasCycle(neighbors, visited, -1, 0)) return false;\n    for (boolean visit : visited)\n        if (!visit) return false;\n    return true;\n}\n\nprivate boolean hasCycle(List<List<Integer>> neighbors, boolean[] visited, int parent, int node) {\n    visited[node] = true;\n    for (int neighbor : neighbors.get(node))\n        if ((neighbor != parent && visited[neighbor]) || (!visited[neighbor] && hasCycle(neighbors, visited, node, neighbor))) return true;\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = isTree(n, edges)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const edges = $args[1];\n    const result = isTree(n, edges);\n    console.log(result);\n}"
        }
    },
    "264": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = nthUglyNumber(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "265": {
        "call_functions": {
            "c++": "int minCost(vector<vector<int>>& costs) {\n    if (costs.empty()) return 0;\n\n    int n = costs.size();\n    int k = costs[0].size();\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < k; ++j) {\n            int minCost = INT_MAX;\n            for (int l = 0; l < k; ++l) {\n                if (l == j) continue;\n                minCost = min(minCost, costs[i - 1][l]);\n            }\n            costs[i][j] += minCost;\n        }\n    }\n    return *min_element(costs[n - 1].begin(), costs[n - 1].end());\n}",
            "java": "public int minCost(int[][] costs) {\n    if (costs == null || costs.length == 0) return 0;\n\n    int n = costs.length;\n    int k = costs[0].length;\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < k; j++) {\n            int minCost = Integer.MAX_VALUE;\n            for (int l = 0; l < k; l++) {\n                if (l == j) continue;\n                minCost = Math.min(minCost, costs[i - 1][l]);\n            }\n            costs[i][j] += minCost;\n        }\n    }\n    return Arrays.stream(costs[n - 1]).min().getAsInt();\n}",
            "python": "if __name__ == \"__main__\":\n    costs = $args[0]\n    result = min_cost(costs)\n    print(result)",
            "javascript": "function main() {\n    const costs = $args;\n    const result = minCost(costs);\n    console.log(result);\n}"
        }
    },
    "266": {
        "call_functions": {
            "c++": "bool canPermutePalindrome(string s) {\n    unordered_map<char, int> count;\n    for (char c : s) {\n        count[c]++;\n    }\n    int odd_count = 0;\n    for (auto it = count.begin(); it != count.end(); ++it) {\n        if (it->second % 2) {\n            odd_count++;\n        }\n    }\n    return odd_count <= 1;\n}"
        }
    },
    "267": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<string> generatePalindromes(string s) {\n    unordered_map<char, int> charCount;\n    for (const char &c : s) {\n        charCount[c]++;\n    }\n    \n    int numOdds = 0;\n    string halfStr = \"\", midChar = \"\";\n    for (const auto &entry : charCount) {\n        if (entry.second % 2 == 1) {\n            numOdds++;\n            midChar = entry.first;\n        }\n        halfStr += string(entry.second / 2, entry.first);\n        \n        if (numOdds > 1) {\n            return {};\n        }\n    }\n    \n    vector<string> result;\n    sort(halfStr.begin(), halfStr.end());\n    do {\n        string palindrome = halfStr + midChar + string(halfStr.rbegin(), halfStr.rend());\n        result.push_back(palindrome);\n    } while (next_permutation(halfStr.begin(), halfStr.end()));\n    \n    return result;\n}\n\nint main() {\n    string s = $args;\n    vector<string> result = generatePalindromes(s);\n    for (const string &palindrome : result) {\n        cout << palindrome << endl;\n    }\n    return 0;\n}",
            "java": "public List<String> generatePalindromes(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = generatePalindromes(s)\n    print(result)",
            "javascript": "function generatePalindromes(s) {\n    const result = [];\n    const charCount = new Map();\n    for (const c of s) {\n        charCount.set(c, (charCount.get(c) || 0) + 1);\n    }\n\n    let midChar = \"\";\n    const halfChars = [];\n    let numOdds = 0;\n    charCount.forEach((count, char) => {\n        if (count % 2 === 1) {\n            numOdds++;\n            midChar = char;\n        }\n        for (let i = 0; i < Math.floor(count / 2); i++) {\n            halfChars.push(char);\n        }\n\n        if (numOdds > 1) {\n            return [];\n        }\n    });\n\n    function btPerm(idx, current) {\n        if (idx === halfChars.length) {\n            const firstHalf = current.join('');\n            result.push(firstHalf + midChar + firstHalf.split('').reverse().join(''));\n            return;\n        }\n\n        for (let i = 0; i < halfChars.length; i++) {\n            if (i > 0 && halfChars[i] === halfChars[i - 1]) {\n                continue;\n            }\n            const char = halfChars.splice(i, 1)[0];\n            current.push(char);\n            btPerm(idx + 1, current);\n            current.pop();\n            halfChars.splice(i, 0, char);\n        }\n    }\n\n    halfChars.sort();\n    btPerm(0, []);\n\n    return result;\n}"
        }
    },
    "268": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = missingNumber(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    int result = missingNumber(nums);\n    System.out.println(result);\n}"
        }
    },
    "269": {
        "call_functions": {
            "c++": "std::string alienOrder(std::vector<std::string> &words) {\n    std::unordered_map<char, std::unordered_set<char>> graph;\n    std::unordered_map<char, int> inDegree;\n    \n    for (const std::string &word : words)\n        for (char c : word)\n            inDegree[c] = 0;\n    \n    for (int i = 0; i < words.size() - 1; i++) {\n        std::string word1 = words[i], word2 = words[i + 1];\n        \n        bool found = false;\n        for (int j = 0; j < std::min(word1.size(), word2.size()); j++) {\n            char c1 = word1[j], c2 = word2[j];\n            if (c1 != c2) {\n                if (!graph[c1].count(c2)) {\n                    graph[c1].insert(c2);\n                    inDegree[c2]++;\n                }\n                found = true;\n                break;\n            }\n        }\n        \n        if (!found && word1.size() > word2.size())\n            return \"\";\n    }\n\n    std::queue<char> q;\n    for (auto &[c, deg] : inDegree)\n        if (deg == 0)\n            q.push(c);\n    \n    std::string result;\n    while (!q.empty()) {\n        char c = q.front();\n        q.pop();\n        result += c;\n        \n        for (char neigh : graph[c]) {\n            inDegree[neigh]--;\n            if (inDegree[neigh] == 0)\n                q.push(neigh);\n        }\n    }\n    \n    if (result.size() < inDegree.size())\n        return \"\";\n    \n    return result;\n}",
            "java": "public String alienOrder(String[] words) {\n    Map<Character, Set<Character>> graph = new HashMap<>();\n    Map<Character, Integer> inDegree = new HashMap<>();\n    \n    for (String word : words) {\n        for (char c : word.toCharArray())\n            inDegree.put(c, 0);\n    }\n    \n    for (int i = 0; i < words.length - 1; i++) {\n        String word1 = words[i], word2 = words[i + 1];\n        \n        boolean found = false;\n        for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {\n            char c1 = word1.charAt(j), c2 = word2.charAt(j);\n            if (c1 != c2) {\n                graph.putIfAbsent(c1, new HashSet<>());\n                if (!graph.get(c1).contains(c2)) {\n                    graph.get(c1).add(c2);\n                    inDegree.put(c2, inDegree.get(c2) + 1);\n                }\n                found = true;\n                break;\n            }\n        }\n        \n        if (!found && word1.length() > word2.length())\n            return \"\";\n    }\n\n    Queue<Character> q = new LinkedList<>();\n    for (Map.Entry<Character, Integer> entry : inDegree.entrySet())\n        if (entry.getValue() == 0)\n            q.offer(entry.getKey());\n    \n    StringBuilder result = new StringBuilder();\n    while (!q.isEmpty()) {\n        char c = q.poll();\n        result.append(c);\n        \n        if (graph.containsKey(c)) {\n            for (char neigh : graph.get(c)) {\n                inDegree.put(neigh, inDegree.get(neigh) - 1);\n                if (inDegree.get(neigh) == 0)\n                    q.offer(neigh);\n            }\n        }\n    }\n    \n    if (result.length() < inDegree.size())\n        return \"\";\n    \n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = alienOrder(words)\n    print(result)",
            "javascript": "function alienOrder(words) {\n    const graph = new Map();\n    const inDegree = new Map();\n    \n    for (const word of words)\n        for (const c of word)\n            inDegree.set(c, 0);\n    \n    for (let i = 0; i < words.length - 1; i++) {\n        const word1 = words[i], word2 = words[i + 1];\n        \n        let found = false;\n        for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n            const c1 = word1[j], c2 = word2[j];\n            if (c1 !== c2) {\n                if (!graph.has(c1)) graph.set(c1, new Set());\n                if (!graph.get(c1).has(c2)) {\n                    graph.get(c1).add(c2);\n                    inDegree.set(c2, inDegree.get(c2) + 1);\n                }\n                found = true;\n                break;\n            }\n        }\n        \n        if (!found && word1.length > word2.length)\n            return \"\";\n    }\n\n    const q = [];\n    for (const [c, deg] of inDegree.entries())\n        if (deg === 0)\n            q.push(c);\n    \n    let result = \"\";\n    while (q.length) {\n        const c = q.shift();\n        result += c;\n        \n        if (graph.has(c)) {\n            for (const neigh of graph.get(c)) {\n                inDegree.set(neigh, inDegree.get(neigh) - 1);\n                if (inDegree.get(neigh) === 0)\n                    q.push(neigh);\n            }\n        }\n    }\n    \n    if (result.length < inDegree.size)\n        return \"\";\n    \n    return result;\n}"
        }
    },
    "271": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> strs = $args;\n    std::string encoded_string = encode(strs);\n    std::cout << encoded_string << std::endl;\n\n    std::string decoded_string = decode(encoded_string);\n    for (const auto& s : decoded_string) {\n        std::cout << s << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public String encode(List<String> strs) {\n    StringBuilder encodedString = new StringBuilder();\n    for (String s : strs) {\n        encodedString.append(s.length()).append('#').append(s);\n    }\n    return encodedString.toString();\n}\n\npublic List<String> decode(String s) {\n    List<String> strs = new ArrayList<>();\n    int i = 0;\n    while (i < s.length()) {\n        int delimiterPos = s.indexOf('#', i);\n        int length = Integer.parseInt(s.substring(i, delimiterPos));\n        strs.add(s.substring(delimiterPos + 1, delimiterPos + 1 + length));\n        i = delimiterPos + 1 + length;\n    }\n    return strs;\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    encoded = encode(strs)\n    print(encoded)\n    decoded = decode(encoded)\n    print(decoded)",
            "javascript": "function main() {\n    const strs = $args;\n    const encodedString = encode(strs);\n    console.log(encodedString);\n\n    const decodedStrings = decode(encodedString);\n    console.log(decodedStrings);\n}"
        }
    },
    "272": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <cstdlib>\nusing namespace std;\n\nint main() {\n    TreeNode* root = $args;\n    double target = $args;\n    int k = $args;\n    vector<int> result = closestKValues(root, target, k);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> closestKValues(TreeNode root, double target, int k) {\n    PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> Double.compare(b[1], a[1]));\n    List<Integer> values = new ArrayList<>();\n\n    inorderTraversal(root, target, k, maxHeap);\n\n    while (!maxHeap.isEmpty()) {\n        values.add(maxHeap.poll()[0]);\n    }\n    return values;\n}\n\nvoid inorderTraversal(TreeNode node, double target, int k, PriorityQueue<int[]> maxHeap) {\n    if (node == null) return;\n\n    inorderTraversal(node.left, target, k, maxHeap);\n    maxHeap.offer(new int[]{node.val, Math.abs(node.val - target)});\n    if (maxHeap.size() > k) maxHeap.poll();\n    inorderTraversal(node.right, target, k, maxHeap);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    target = $args[1]\n    k = $args[2]\n    result = closestKValues(root, target, k)\n    print(result)",
            "javascript": "function closestKValues(root, target, k) {\n    const values = [];\n    const maxHeap = [];\n\n    function inorderTraversal(node) {\n        if (!node) return;\n        inorderTraversal(node.left);\n        maxHeap.push({diff: Math.abs(node.val - target), val: node.val});\n        maxHeap.sort((a, b) => b.diff - a.diff);\n        if (maxHeap.length > k) maxHeap.pop();\n        inorderTraversal(node.right);\n    }\n\n    inorderTraversal(root);\n    for (let item of maxHeap) {\n        values.push(item.val);\n    }\n    return values;\n}"
        }
    },
    "22": {
        "call_functions": {
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = generate_parenthesis(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = generateParenthesis(n);\n    console.log(result);\n}"
        }
    },
    "28": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint strStr(string haystack, string needle) {\n    if(needle.empty()) return 0;\n\n    size_t pos = haystack.find(needle);\n    if(pos != string::npos)\n        return pos;\n    return -1;\n}\n\nint main() {\n    string haystack = $args;\n    string needle = $args;\n    int result = strStr(haystack, needle);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    String haystack = $args[0];\n    String needle = $args[1];\n    \n    int result = strStr(haystack, needle);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    haystack = $args[0]\n    needle = $args[1]\n    result = strStr(haystack, needle)\n    print(result)",
            "javascript": "function main() {\n    const haystack = $args[0];\n    const needle = $args[1];\n    const result = strStr(haystack, needle);\n    console.log(result);\n}"
        }
    },
    "36": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nbool isValidSudoku(vector<vector<char>>& board) {\n    unordered_set<string> seen;\n    \n    for(int i = 0; i < 9; i++) {\n        for(int j = 0; j < 9; j++) {\n            char current_val = board[i][j];\n            if(current_val != '.') {\n                string row = to_string(current_val) + \" in row \" + to_string(i);\n                string col = to_string(current_val) + \" in col \" + to_string(j);\n                string box = to_string(current_val) + \" in box \" + to_string(i/3) + \"-\" + to_string(j/3);\n                if(seen.count(row) || seen.count(col) || seen.count(box)) {\n                    return false;\n                }\n                seen.insert(row);\n                seen.insert(col);\n                seen.insert(box);\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<vector<char>> board = $args;\n    bool result = isValidSudoku(board);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean isValidSudoku(char[][] board) {\n    HashSet<String> seen = new HashSet<>();\n    \n    for(int i = 0; i < 9; i++) {\n        for(int j = 0; j < 9; j++) {\n            char current_val = board[i][j];\n            if(current_val != '.') {\n                String row = current_val + \" in row \" + i;\n                String col = current_val + \" in col \" + j;\n                String box = current_val + \" in box \" + i / 3 + \"-\" + j / 3;\n                if(seen.contains(row) || seen.contains(col) || seen.contains(box)) {\n                    return false;\n                }\n                seen.add(row);\n                seen.add(col);\n                seen.add(box);\n            }\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = isValidSudoku(board)\n    print(result)",
            "javascript": "function main() {\n    const board = $args;\n    const result = isValidSudoku(board);\n    console.log(result);\n}"
        }
    },
    "62": {
        "call_functions": {
            "c++": "int main() {\n    int m = $args;\n    int n = $args;\n    int result = uniquePaths(m, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int uniquePaths(int m, int n) {\n    int[][] dp = new int[m][n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n    }\n    return dp[m - 1][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    result = uniquePaths(m, n)\n    print(result)",
            "javascript": "function main() {\n    const m = $args[0];\n    const n = $args[1];\n    const result = uniquePaths(m, n);\n    console.log(result);\n}"
        }
    },
    "63": {
        "call_functions": {
            "c++": "int uniquePathsWithObstacles(vector<vector<int>>& grid) {\n    int m = grid.size();\n    int n = grid[0].size();\n    if (grid[0][0] == 1) return 0;\n    \n    grid[0][0] = 1;\n    for (int i = 1; i < m; ++i)\n        grid[i][0] = (grid[i][0] == 0 && grid[i - 1][0] == 1) ? 1 : 0;\n    for (int i = 1; i < n; ++i)\n        grid[0][i] = (grid[0][i] == 0 && grid[0][i - 1] == 1) ? 1 : 0;\n\n    for (int i = 1; i < m; ++i)\n        for (int j = 1; j < n; ++j)\n            if (grid[i][j] == 0) \n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\n            else \n                grid[i][j] = 0;\n\n    return grid[m - 1][n - 1];\n}",
            "java": "public int uniquePathsWithObstacles(int[][] grid) {\n    int m = grid.length;\n    int n = grid[0].length;\n    if (grid[0][0] == 1) return 0;\n    \n    grid[0][0] = 1;\n    for (int i = 1; i < m; ++i)\n        grid[i][0] = (grid[i][0] == 0 && grid[i - 1][0] == 1) ? 1 : 0;\n    for (int i = 1; i < n; ++i)\n        grid[0][i] = (grid[0][i] == 0 && grid[0][i - 1] == 1) ? 1 : 0;\n\n    for (int i = 1; i < m; ++i)\n        for (int j = 1; j < n; ++j)\n            if (grid[i][j] == 0)\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\n            else\n                grid[i][j] = 0;\n\n    return grid[m - 1][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = uniquePathsWithObstacles(grid)\n    print(result)",
            "javascript": "function uniquePathsWithObstacles(grid) {\n    const m = grid.length;\n    const n = grid[0].length;\n    if (grid[0][0] === 1) return 0;\n\n    grid[0][0] = 1;\n    for (let i = 1; i < m; ++i) {\n        grid[i][0] = (grid[i][0] === 0 && grid[i - 1][0] === 1) ? 1 : 0;\n    }\n    for (let i = 1; i < n; ++i) {\n        grid[0][i] = (grid[0][i] === 0 && grid[0][i - 1] === 1) ? 1 : 0;\n    }\n\n    for (let i = 1; i < m; ++i) {\n        for (let j = 1; j < n; ++j) {\n            if (grid[i][j] === 0) {\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\n            } else {\n                grid[i][j] = 0;\n            }\n        }\n    }\n\n    return grid[m - 1][n - 1];\n}"
        }
    },
    "64": {
        "call_functions": {
            "c++": "int minPathSum(vector<vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    \n    for(int i = 1; i < m; i++)\n        grid[i][0] += grid[i - 1][0];\n        \n    for(int i = 1; i < n; i++)\n        grid[0][i] += grid[0][i - 1];\n        \n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]);\n        }\n    }\n    return grid[m - 1][n - 1];\n}",
            "java": "public int minPathSum(int[][] grid) {\n    int m = grid.length, n = grid[0].length;\n    \n    for(int i = 1; i < m; i++)\n        grid[i][0] += grid[i - 1][0];\n    \n    for(int i = 1; i < n; i++)\n        grid[0][i] += grid[0][i - 1];\n    \n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);\n        }\n    }\n    return grid[m - 1][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = minPathSum(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = minPathSum(grid);\n    console.log(result);\n}"
        }
    },
    "70": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = climbStairs(n);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = climbStairs(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = climbStairs(n);\n    console.log(result);\n}"
        }
    },
    "74": {
        "call_functions": {
            "c++": "bool searchMatrix(vector<vector<int>>& matrix, int target) {\n    int m = matrix.size();\n    int n = matrix[0].size();\n    int l = 0, r = m * n - 1;\n    \n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        int midVal = matrix[mid / n][mid % n];\n        \n        if (midVal == target) {\n            return true;\n        } else if (midVal < target) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    \n    return false;\n}",
            "java": "public boolean searchMatrix(int[][] matrix, int target) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int l = 0, r = m * n - 1;\n\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        int midVal = matrix[mid / n][mid % n];\n\n        if (midVal == target) {\n            return true;\n        } else if (midVal < target) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    target = $args[1]\n    result = searchMatrix(matrix, target)\n    print(result)",
            "javascript": "function searchMatrix(matrix, target) {\n    const m = matrix.length;\n    const n = matrix[0].length;\n    let l = 0, r = m * n - 1;\n\n    while (l <= r) {\n        const mid = l+ Math.floor((r - l) / 2);\n        const midVal = matrix[Math.floor(mid / n)][mid % n];\n\n        if (midVal === target) {\n            return true;\n        } else if (midVal < target) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    return false;\n}"
        }
    },
    "80": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = removeDuplicates(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int removeDuplicates(int[] nums) {\n    int i = 0;\n    for (int num : nums) {\n        if (i < 2 || num > nums[i - 2]) {\n            nums[i++] = num;\n        }\n    }\n    return i;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = remove_duplicates(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = removeDuplicates(nums);\n    console.log(result);\n}"
        }
    },
    "81": {
        "call_functions": {
            "c++": "bool search(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return true;\n\n        if (nums[mid] == nums[left]) {\n            left++;\n        } else if (nums[mid] > nums[left]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}",
            "java": "public boolean search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return true;\n\n        if (nums[mid] == nums[left]) {\n            left++;\n        } else if (nums[mid] > nums[left]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = search(nums, target)\n    print(result)",
            "javascript": "function search(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return true;\n\n        if (nums[mid] === nums[left]) {\n            left++;\n        } else if (nums[mid] > nums[left]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}"
        }
    },
    "96": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = numTrees(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numTrees(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        for (int j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i - j - 1];\n        }\n    }\n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = numTrees(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = numTrees(n);\n    console.log(result);\n}"
        }
    },
    "111": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint minDepth(TreeNode* root) {\n    if (!root) return 0;\n    int left = minDepth(root->left);\n    int right = minDepth(root->right);\n    return (left == 0 || right == 0) ? left + right + 1 : min(left, right) + 1;\n}\n\nint main() {\n    TreeNode* root = $args;\n    int result = minDepth(root);\n    cout << result << endl;\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = minDepth(root)\n    print(result)"
        }
    },
    "114": {
        "call_functions": {
            "c++": "void flatten(TreeNode* root) {\n    if (!root) return;\n    flatten(root->left);\n    flatten(root->right);\n    if (root->left) {\n        TreeNode* temp = root->right;\n        root->right = root->left;\n        root->left = nullptr;\n        while (root->right) root = root->right;\n        root->right = temp;\n    }\n}",
            "java": "public void flatten(TreeNode root) {\n    if (root == null) return;\n    flatten(root.left);\n    flatten(root.right);\n    if (root.left != null) {\n        TreeNode temp = root.right;\n        root.right = root.left;\n        root.left = null;\n        while (root.right != null) root = root.right;\n        root.right = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    flatten(root)\n    print(root)",
            "javascript": "function main() {\n    const root = $args;\n    flatten(root);\n    console.log(root);\n}"
        }
    },
    "119": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int rowIndex = $args;\n    vector<int> result = getRow(rowIndex);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> getRow(int rowIndex) {\n    List<Integer> row = new ArrayList<>();\n    for (int i = 0; i <= rowIndex; i++) {\n        row.add(1);\n        for (int j = i - 1; j > 0; j--) {\n            row.set(j, row.get(j) + row.get(j - 1));\n        }\n    }\n    return row;\n}",
            "python": "if __name__ == \"__main__\":\n    rowIndex = $args[0]\n    result = get_row(rowIndex)\n    print(result)",
            "javascript": "function main() {\n    const rowIndex = $args;\n    const result = getRow(rowIndex);\n    console.log(result);\n}"
        }
    },
    "157": {
        "call_functions": {
            "c++": "int main() {\n    char buf[$args];\n    int n = sizeof(buf);\n    int result = read(buf, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int read(char[] buf, int n) {\n    int totalRead = 0;\n    char[] buf4 = new char[4];\n\n    while (totalRead < n) {\n        int read4Count = read4(buf4);\n        for (int i = 0; i < read4Count && totalRead < n; i++) {\n            buf[totalRead++] = buf4[i];\n        }\n        if (read4Count < 4) break;\n    }\n\n    return totalRead;\n}",
            "python": "if __name__ == \"__main__\":\n    buf = $args[0]\n    n = $args[1]\n    result = read(buf, n)\n    print(result)",
            "javascript": "function main() {\n    const buf = $args[0];\n    const n = $args[1];\n    const result = read(buf, n);\n    console.log(result);\n}"
        }
    },
    "167": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = $args;\n    int target = $args;\n    vector<int> result = twoSum(numbers, target);\n    for (int i : result) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] twoSum(int[] numbers, int target) {\n    int left = 0, right = numbers.length - 1;\n    while (left < right) {\n        int current_sum = numbers[left] + numbers[right];\n        if (current_sum == target) {\n            return new int[]{left + 1, right + 1};\n        } else if (current_sum < target) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return new int[]{};\n}",
            "python": "if __name__ == \"__main__\":\n    numbers = $args[0]\n    target = $args[1]\n    result = twoSum(numbers, target)\n    print(result)",
            "javascript": "function main() {\n    const numbers = $args[0];\n    const target = $args[1];\n    const result = twoSum(numbers, target);\n    console.log(result);\n}"
        }
    },
    "172": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = trailingZeroes(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int trailingZeroes(int n) {\n    int count = 0;\n    while (n > 0) {\n        n = n / 5;\n        count += n;\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = trailing_zeroes(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = trailingZeroes(n);\n    console.log(result);\n}\n"
        }
    },
    "186": {
        "call_functions": {
            "c++": "void reverseWords(vector<char>& s) {\n    reverse(s.begin(), s.end());\n    int start = 0, end;\n    while ((end = find(s.begin() + start, s.end(), ' ') - s.begin()) < s.size()) {\n        reverse(s.begin() + start, s.begin() + end);\n        start = end + 1;\n    }\n    reverse(s.begin() + start, s.end());\n}",
            "java": "public void reverseWords(char[] s) {\n    reverse(s, 0, s.length - 1);\n    int start = 0;\n    for (int i = 0; i <= s.length; i++) {\n        if (i == s.length || s[i] == ' ') {\n            reverse(s, start, i - 1);\n            start = i + 1;\n        }\n    }\n}\n\nprivate void reverse(char[] s, int start, int end) {\n    while (start < end) {\n        char temp = s[start];\n        s[start++] = s[end];\n        s[end--] = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    reverseWords(s)\n    print(s)",
            "javascript": "function main() {\n    const s = $args;\n    reverseWords(s);\n    console.log(s);\n}"
        }
    },
    "201": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int left = $args;\n    int right = $args;\n    int result = rangeBitwiseAnd(left, right);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rangeBitwiseAnd(int left, int right) {\n    int shift = 0;\n    while (left != right) {\n        left >>= 1;\n        right >>= 1;\n        shift++;\n    }\n    return left << shift;\n}",
            "python": "if __name__ == \"__main__\":\n    left = $args[0]\n    right = $args[1]\n    result = range_bitwise_and(left, right)\n    print(result)",
            "javascript": "function main() {\n    const left = $args[0];\n    const right = $args[1];\n    const result = rangeBitwiseAnd(left, right);\n    console.log(result);\n}"
        }
    },
    "215": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = $args;\n    int result = findKthLargest(nums, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int findKthLargest(int[] nums, int k) {\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n    for (int num : nums) {\n        minHeap.add(num);\n        if (minHeap.size() > k) {\n            minHeap.poll();\n        }\n    }\n    return minHeap.poll();\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = findKthLargest(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = findKthLargest(nums, k);\n    console.log(result);\n}"
        }
    },
    "223": {
        "call_functions": {
            "c++": "int main() {\n    int ax1 = $args;\n    int ay1 = $args;\n    int ax2 = $args;\n    int ay2 = $args;\n    int bx1 = $args;\n    int by1 = $args;\n    int bx2 = $args;\n    int by2 = $args;\n\n    int result = totalArea(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "231": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfTwo(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isPowerOfTwo(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = is_power_of_two(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfTwo(n);\n    console.log(result);\n}"
        }
    },
    "240": {
        "call_functions": {
            "c++": "bool searchMatrix(vector<vector<int>>& matrix, int target) {\n    int row = matrix.size() - 1, col = 0;\n    while (row >= 0 && col < matrix[0].size()) {\n        if (matrix[row][col] > target) {\n            row--;\n        } else if (matrix[row][col] < target) {\n            col++;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean searchMatrix(int[][] matrix, int target) {\n    int row = matrix.length - 1, col = 0;\n    while (row >= 0 && col < matrix[0].length) {\n        if (matrix[row][col] > target) {\n            row--;\n        } else if (matrix[row][col] < target) {\n            col++;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    target = $args[1]\n    result = searchMatrix(matrix, target)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args[0];\n    const target = $args[1];\n    const result = searchMatrix(matrix, target);\n    console.log(result);\n}"
        }
    },
    "242": {
        "call_functions": {
            "c++": "bool isAnagram(std::string s, std::string t) {\n    if(s.size() != t.size())\n        return false;\n    \n    std::unordered_map<char, int> counts;\n    for(char c : s)\n        counts[c]++;\n        \n    for(char c : t) {\n        if(counts[c] == 0)\n            return false;\n        counts[c]--;\n    }\n    \n    return true;\n}",
            "java": "public boolean isAnagram(String s, String t) {\n    if(s.length() != t.length())\n        return false;\n\n    int[] counts = new int[26];\n    for(char c : s.toCharArray())\n        counts[c - 'a']++;\n\n    for(char c : t.toCharArray()) {\n        if(counts[c - 'a'] == 0)\n            return false;\n        counts[c - 'a']--;\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = is_anagram(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = isAnagram(s, t);\n    console.log(result);\n}"
        }
    },
    "263": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    bool result = isUgly(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isUgly(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = is_ugly(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isUgly(n);\n    console.log(result);\n}"
        }
    },
    "274": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> citations = $args;\n    int result = hIndex(citations);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int hIndex(int[] citations) {\n    Arrays.sort(citations);\n    int h = 0;\n    for (int i = citations.length - 1; i >= 0; i--) {\n        int rank = citations.length - i;\n        if (citations[i] >= rank) {\n            h = rank;\n        } else {\n            break;\n        }\n    }\n    return h;\n}",
            "python": "if __name__ == \"__main__\":\n    citations = $args[0]\n    result = hIndex(citations)\n    print(result)",
            "javascript": "function main() {\n    const citations = $args;\n    const result = hIndex(citations);\n    console.log(result);\n}"
        }
    },
    "275": {
        "call_functions": {
            "c++": "int hIndex(vector<int>& citations) {\n    int n = citations.size();\n    int left = 0, right = n - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (citations[mid] == n - mid) {\n            return n - mid;\n        } else if (citations[mid] < n - mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return n - left;\n}",
            "java": "public int hIndex(int[] citations) {\n    int n = citations.length;\n    int left = 0, right = n - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (citations[mid] == n - mid) {\n            return n - mid;\n        } else if (citations[mid] < n - mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return n - left;\n}",
            "python": "if __name__ == \"__main__\":\n    citations = $args[0]\n    result = hIndex(citations)\n    print(result)",
            "javascript": "function main() {\n    const citations = $args;\n    const n = citations.length;\n    let left = 0, right = n - 1;\n\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (citations[mid] === n - mid) {\n            return n - mid;\n        } else if (citations[mid] < n - mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return n - left;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "276": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int k = $args;\n    int result = numWays(n, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int callNumWays(int n, int k) {\n    int result = numWays(n, k);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = numWays(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const k = $args[1];\n    const result = numWays(n, k);\n    console.log(result);\n}"
        }
    },
    "277": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = findCelebrity(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findCelebrity(int n) {\n    int candidate = 0;\n    for (int i = 1; i < n; i++) {\n        if (knows(candidate, i)) {\n            candidate = i;\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        if (i != candidate && (knows(candidate, i) || !knows(i, candidate))) {\n            return -1;\n        }\n    }\n    return candidate;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findCelebrity(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = findCelebrity(n);\n    console.log(result);\n}"
        }
    },
    "278": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = firstBadVersion(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int firstBadVersion(int n) {\n    int left = 1;\n    int right = n;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (isBadVersion(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = first_bad_version(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = firstBadVersion(n);\n    console.log(result);\n}\n"
        }
    },
    "279": {
        "call_functions": {
            "c++": "#include <vector>\n#include <limits>\n#include <cmath>\n\nint main() {\n    int n = $args;\n    int result = numSquares(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numSquares(int n) {\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    dp[0] = 0;\n    \n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j * j <= i; j++) {\n            dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n        }\n    }\n    \n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = numSquares(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = numSquares(n);\n    console.log(result);\n}"
        }
    },
    "280": {
        "call_functions": {
            "c++": "void wiggleSort(vector<int>& nums) {\n    for (int i = 1; i < nums.size(); i++) {\n        if (i%2 == 0 && nums[i] > nums[i-1] || i%2 == 1 && nums[i] < nums[i-1]) {\n            swap(nums[i], nums[i-1]);\n        }\n    }\n}"
        }
    },
    "282": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nvoid helper(const std::string &num, int target, int pos, long long currVal, long long prevVal, std::string currExpr, std::vector<std::string> &res) {\n    if (pos == num.size()) {\n        if (currVal == target) {\n            res.push_back(currExpr);\n        }\n        return;\n    }\n\n    for (int i = pos; i < num.size(); ++i) {\n        if (i != pos && num[pos] == '0') break;\n        long long val = std::stoll(num.substr(pos, i - pos + 1));\n        if (pos == 0) {\n            helper(num, target, i + 1, val, val, currExpr + num.substr(pos, i - pos + 1), res);\n        } else {\n            helper(num, target, i + 1, currVal + val, val, currExpr + \"+\" + num.substr(pos, i - pos + 1), res);\n            helper(num, target, i + 1, currVal - val, -val, currExpr + \"-\" + num.substr(pos, i - pos + 1), res);\n            helper(num, target, i + 1, currVal - prevVal + prevVal * val, prevVal * val, currExpr + \"*\" + num.substr(pos, i - pos + 1), res);\n        }\n    }\n}\n\nstd::vector<std::string> addOperators(std::string num, int target) {\n    std::vector<std::string> res;\n    helper(num, target, 0, 0, 0, \"\", res);\n    return res;\n}\n\nint main() {\n    std::string num = $args;\n    int target = 10;\n    std::vector<std::string> result = addOperators(num, target);\n    for (const std::string& expr : result) {\n        std::cout << expr << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> addOperators(String num, int target) {\n    List<String> res = new ArrayList<>();\n    helper(num, target, 0, 0, 0, \"\", res);\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    target = $args[1]\n    result = addOperators(num, target)\n    print(result)",
            "javascript": "function addOperators(num, target) {\n    const res = [];\n    const helper = (num, target, pos, currVal, prevVal, currExpr) => {\n        if (pos === num.length) {\n            if (currVal === target) {\n                res.push(currExpr);\n            }\n            return;\n        }\n\n        for (let i = pos; i < num.length; ++i) {\n            if (i !== pos && num[pos] === '0') break;\n\n            const val = parseInt(num.substring(pos, i + 1));\n            if (pos === 0) {\n                helper(num, target, i + 1, val, val, currExpr + num.substring(pos, i + 1));\n            } else {\n                helper(num, target, i + 1, currVal + val, val, currExpr + '+' + num.substring(pos, i + 1));\n                helper(num, target, i + 1, currVal - val, -val, currExpr + '-' + num.substring(pos, i + 1));\n                helper(num, target, i + 1, currVal - prevVal + prevVal * val, prevVal * val, currExpr + '*' + num.substring(pos, i + 1));\n            }\n        }\n    }\n\n    helper(num, target, 0, 0, 0, '');\n    return res;\n}"
        }
    },
    "283": {
        "call_functions": {
            "c++": "void moveZeroes(vector<int>& nums) {\n    int index = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] != 0) {\n            nums[index++] = nums[i];\n        }\n    }\n    for (int i = index; i < nums.size(); i++) {\n        nums[i] = 0;\n    }\n}"
        }
    },
    "286": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nvoid wallsAndGates(vector<vector<int>>& rooms) {\n    const int INF = 2147483647;\n    int m = rooms.size();\n    int n = rooms[0].size();\n    queue<pair<int, int>> q;\n\n    for(int i = 0; i < m; i++) {\n        for(int j = 0; j < n; j++) {\n            if(rooms[i][j] == 0) {\n                q.push(make_pair(i, j));\n            }\n        }\n    }\n\n    int directions[][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    while(!q.empty()) {\n        int i = q.front().first;\n        int j = q.front().second;\n        q.pop();\n\n        for(auto d : directions) {\n            int ni = i + d[0];\n            int nj = j + d[1];\n\n            if(ni >= 0 && ni < m && nj >= 0 && nj < n && rooms[ni][nj] == INF) {\n                rooms[ni][nj] = rooms[i][j] + 1;\n                q.push(make_pair(ni, nj));\n            }\n        }\n    }\n}",
            "java": "public void wallsAndGates(int[][] rooms)",
            "python": "if __name__ == \"__main__\":\n    rooms = $args[0]\n    result = wallsAndGates(rooms)\n    print(result)",
            "javascript": "function wallsAndGates(rooms) {\n    const m = rooms.length;\n    const n = rooms[0].length;\n    const q = [];\n    const INF = 2147483647;\n    \n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (rooms[i][j] === 0) {\n                q.push([i, j]);\n            }\n        }\n    }\n\n    const directions = [\n        [0, 1],\n        [0, -1],\n        [1, 0],\n        [-1, 0]\n    ];\n\n    while (q.length) {\n        const [i, j] = q.shift();\n\n        directions.forEach(([di, dj]) => {\n            const ni = i + di;\n            const nj = j + dj;\n\n            if (ni >= 0 && ni < m && nj >= 0 && nj < n && rooms[ni][nj] === INF) {\n                rooms[ni][nj] = rooms[i][j] + 1;\n                q.push([ni, nj]);\n            }\n        });\n    }\n}"
        }
    },
    "287": {
        "call_functions": {
            "c++": "int findDuplicate(vector<int>& nums) {\n    int slow = nums[0];\n    int fast = nums[0];\n\n    do {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    } while (slow != fast);\n\n    slow = nums[0];\n\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n\n    return slow;\n}",
            "java": "public int findDuplicate(int[] nums) {\n    int slow = nums[0];\n    int fast = nums[0];\n\n    do {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    } while (slow != fast);\n\n    slow = nums[0];\n\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n\n    return slow;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findDuplicate(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findDuplicate(nums);\n    console.log(result);\n}"
        }
    },
    "289": {
        "call_functions": {
            "c++": "#include <vector>\n\nstd::vector<std::vector<int>> gameOfLife(std::vector<std::vector<int>>& board) {\n    int m = board.size();\n    int n = board[0].size();\n    std::vector<std::vector<int>> result(m, std::vector<int>(n, 0));\n    \n    std::vector<std::vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            int liveNeighbors = 0;\n            \n            for (std::vector<int> dir : dirs) {\n                int newRow = i + dir[0];\n                int newCol = j + dir[1];\n                \n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && board[newRow][newCol] == 1) {\n                    liveNeighbors++;\n                }\n            }\n            \n            if (board[i][j] == 1 && (liveNeighbors == 2 || liveNeighbors == 3)) {\n                result[i][j] = 1;\n            } else if (board[i][j] == 0 && liveNeighbors == 3) {\n                result[i][j] = 1;\n            }\n        }\n    }\n    \n    return result;\n}",
            "java": "public int[][] gameOfLife(int[][] board)",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = gameOfLife(board)\n    print(result)",
            "javascript": "function gameOfLife(board) {\n    let m = board.length;\n    let n = board[0].length;\n    let result = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    let dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            let liveNeighbors = 0;\n\n            for (let dir of dirs) {\n                let newRow = i + dir[0];\n                let newCol = j + dir[1];\n\n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && board[newRow][newCol] === 1) {\n                    liveNeighbors++;\n                }\n            }\n\n            if (board[i][j] === 1 && (liveNeighbors === 2 || liveNeighbors === 3)) {\n                result[i][j] = 1;\n            } else if (board[i][j] === 0 && liveNeighbors === 3) {\n                result[i][j] = 1;\n            }\n        }\n    }\n\n    return result;\n}"
        }
    },
    "290": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string pattern = $args;\n    string s = $args;\n    bool result = wordPattern(pattern, s);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
            "java": "public boolean wordPattern(String pattern, String s) {\n    String[] words = s.split(\" \");\n    if (pattern.length() != words.length) return false;\n\n    Map<Character, String> charMap = new HashMap<>();\n    Map<String, Character> wordMap = new HashMap<>();\n\n    for (int i = 0; i < pattern.length(); i++) {\n        char c = pattern.charAt(i);\n        String word = words[i];\n        if (!charMap.containsKey(c) && !wordMap.containsKey(word)) {\n            charMap.put(c, word);\n            wordMap.put(word, c);\n        } else {\n            if (!word.equals(charMap.get(c)) || c != wordMap.get(word)) return false;\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    pattern = $args[0]\n    s = $args[1]\n    result = word_pattern(pattern, s)\n    print(result)",
            "javascript": "function main() {\n    const pattern = $args[0];\n    const s = $args[1];\n    const result = wordPattern(pattern, s);\n    console.log(result);\n}"
        }
    },
    "291": {
        "call_functions": {
            "c++": "bool wordPatternMatch(string pattern, string s) {\n    unordered_map<char, string> pattern_map;\n    unordered_set<string> words;\n    return backtrack(pattern, 0, s, 0, pattern_map, words);\n}\n\nbool backtrack(string& pattern, int p_index, string& s, int s_index, unordered_map<char, string>& pattern_map, unordered_set<string>& words) {\n    if (p_index == pattern.size() && s_index == s.size()) return true;\n    if (p_index == pattern.size() || s_index == s.size()) return false;\n\n    char p = pattern[p_index];\n    if (pattern_map.count(p)) {\n        string word = pattern_map[p];\n        if (s.substr(s_index, word.size()) != word) return false;\n        return backtrack(pattern, p_index + 1, s, s_index + word.size(), pattern_map, words);\n    } else {\n        for (int length = 1; length <= s.size() - s_index; length++) {\n            string word = s.substr(s_index, length);\n            if (words.count(word)) continue;\n            pattern_map[p] = word;\n            words.insert(word);\n            if (backtrack(pattern, p_index + 1, s, s_index + length, pattern_map, words)) return true;\n            pattern_map.erase(p);\n            words.erase(word);\n        }\n    }\n    return false;\n}",
            "java": "public boolean wordPatternMatch(String pattern, String s) {\n    Map<Character, String> patternMap = new HashMap<>();\n    Set<String> words = new HashSet<>();\n    return backtrack(pattern, 0, s, 0, patternMap, words);\n}\n\nprivate boolean backtrack(String pattern, int pIndex, String s, int sIndex, Map<Character, String> patternMap, Set<String> words) {\n    if (pIndex == pattern.length() && sIndex == s.length()) return true;\n    if (pIndex == pattern.length() || sIndex == s.length()) return false;\n\n    char p = pattern.charAt(pIndex);\n    if (patternMap.containsKey(p)) {\n        String word = patternMap.get(p);\n        if (!s.startsWith(word, sIndex)) return false;\n        return backtrack(pattern, pIndex + 1, s, sIndex + word.length(), patternMap, words);\n    } else {\n        for (int length = 1; length <= s.length() - sIndex; length++) {\n            String word = s.substring(sIndex, sIndex + length);\n            if (words.contains(word)) continue;\n            patternMap.put(p, word);\n            words.add(word);\n            if (backtrack(pattern, pIndex + 1, s, sIndex + length, patternMap, words)) return true;\n            patternMap.remove(p);\n            words.remove(word);\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    pattern = $args[0]\n    s = $args[1]\n    result = wordPatternMatch(pattern, s)\n    print(result)",
            "javascript": "function wordPatternMatch(pattern, s) {\n    const patternMap = new Map();\n    const words = new Set();\n    return backtrack(pattern, 0, s, 0, patternMap, words);\n    \n    function backtrack(pattern, pIndex, s, sIndex, patternMap, words) {\n        if (pIndex == pattern.length && sIndex == s.length) return true;\n        if (pIndex == pattern.length || sIndex == s.length) return false;\n\n        let p = pattern[pIndex];\n        if (patternMap.has(p)) {\n            let word = patternMap.get(p);\n            if (s.slice(sIndex, sIndex + word.length) !== word) return false;\n            return backtrack(pattern, pIndex + 1, s, sIndex + word.length, patternMap, words);\n        } else {\n            for (let length = 1; length <= s.length - sIndex; length++) {\n                let word = s.substr(sIndex, length);\n                if (words.has(word)) continue;\n                patternMap.set(p, word);\n                words.add(word);\n                if (backtrack(pattern, pIndex + 1, s, sIndex + length, patternMap, words)) return true;\n                patternMap.delete(p);\n                words.delete(word);\n            }\n        }\n        return false;\n    }\n}"
        }
    },
    "292": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = canWinNim(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = canWinNim(n);\n        System.out.println(result);\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = canWinNim(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = canWinNim(n);\n    console.log(result);\n}"
        }
    },
    "293": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string currentState = $args;\n    std::vector<std::string> result = generatePossibleNextMoves(currentState);\n    for (const auto& str : result) {\n        std::cout << str << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> generatePossibleNextMoves(String currentState) {\n    List<String> result = new ArrayList<>();\n    for (int i = 1; i < currentState.length(); i++) {\n        if (currentState.charAt(i) == '+' && currentState.charAt(i - 1) == '+') {\n            result.add(currentState.substring(0, i - 1) + \"--\" + currentState.substring(i + 1));\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    current_state = $args[0]\n    result = generate_possible_next_moves(current_state)\n    print(result)",
            "javascript": "function main() {\n    const currentState = $args;\n    const result = generatePossibleNextMoves(currentState);\n    console.log(result);\n}"
        }
    },
    "294": {
        "call_functions": {
            "c++": "bool canWin(string currentState) {\n    for (int i = 0; i < currentState.size() - 1; ++i) {\n        if (currentState[i] == '+' && currentState[i + 1] == '+') {\n            currentState[i] = '-';\n            currentState[i + 1] = '-';\n            bool opponentWins = canWin(currentState);\n            currentState[i] = '+';\n            currentState[i + 1] = '+';\n            if (!opponentWins) return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean canWin(String currentState) {\n    for (int i = 0; i < currentState.length() - 1; ++i) {\n        if (currentState.charAt(i) == '+' && currentState.charAt(i + 1) == '+') {\n            String temp = currentState.substring(0, i) + \"--\" + currentState.substring(i + 2);\n            if (!canWin(temp)) return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    currentState = $args[0]\n    result = canWin(currentState)\n    print(result)",
            "javascript": "function main() {\n    const currentState = $args;\n    const result = canWin(currentState);\n    console.log(result);\n}"
        }
    },
    "295": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    MedianFinder obj;\n    int n = $args;\n    obj.addNum(n);\n    double result = obj.findMedian();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public void addNum(int num) {\n        if (left.isEmpty() || num <= left.peek()) {\n            left.offer(num);\n        } else {\n            right.offer(num);\n        }\n        \n        if (left.size() < right.size()) {\n            left.offer(right.poll());\n        } else if (left.size() > right.size() + 1) {\n            right.offer(left.poll());\n        }\n    }\n    \n    public double findMedian() {\n        if (left.size() == right.size()) {\n            return (left.peek() + right.peek()) / 2.0;\n        } else {\n            return left.peek();\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    mf = MedianFinder()\n    nums = $args[0]\n    for num in nums:\n        mf.addNum(num)\n    result = mf.findMedian()\n    print(result)",
            "javascript": "function main() {\n    const mf = new MedianFinder();\n    const nums = $args;\n    for (let i = 0; i < nums.length; i++) {\n        mf.addNum(nums[i]);\n    }\n    const result = mf.findMedian();\n    console.log(result);\n}"
        }
    },
    "296": {
        "call_functions": {
            "c++": "int minTotalDistance(vector<vector<int>>& grid) {\n    vector<int> rows, cols;\n    int m = grid.size(), n = grid[0].size();\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j]) {\n                rows.push_back(i);\n                cols.push_back(j);\n            }\n        }\n    }\n    sort(cols.begin(), cols.end());\n    int row_median = rows[rows.size() / 2], col_median = cols[cols.size() / 2];\n    int distance = 0;\n    for (int i : rows) distance += abs(i - row_median);\n    for (int j : cols) distance += abs(j - col_median);\n    return distance;\n}",
            "java": "public int minTotalDistance(int[][] grid) {\n    List<Integer> rows = new ArrayList<Integer>();\n    List<Integer> cols = new ArrayList<Integer>();\n    int m = grid.length, n = grid[0].length;\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                rows.add(i);\n                cols.add(j);\n            }\n        }\n    }\n    Collections.sort(cols);\n    int row_median = rows.get(rows.size() / 2), col_median = cols.get(cols.size() / 2);\n    int distance = 0;\n    for (int i : rows) distance += Math.abs(i - row_median);\n    for (int j : cols) distance += Math.abs(j - col_median);\n    return distance;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = minTotalDistance(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = minTotalDistance(grid);\n    console.log(result);\n}"
        }
    },
    "299": {
        "call_functions": {
            "c++": "std::string getHint(std::string secret, std::string guess) {\n    int bulls = 0, cows = 0;\n    std::vector<int> secret_count(10, 0);\n    std::vector<int> guess_count(10, 0);\n\n    for (size_t i = 0; i < secret.length(); i++) {\n        if (secret[i] == guess[i]) {\n            bulls++;\n        } else {\n            secret_count[secret[i] - '0']++;\n            guess_count[guess[i] - '0']++;\n        }\n    }\n\n    for (size_t i = 0; i < 10; i++) {\n        cows += std::min(secret_count[i], guess_count[i]);\n    }\n\n    return std::to_string(bulls) + \"A\" + std::to_string(cows) + \"B\";\n}",
            "java": "public String getHint(String secret, String guess) {\n    int bulls = 0, cows = 0;\n    int[] secretCount = new int[10];\n    int[] guessCount = new int[10];\n\n    for (int i = 0; i < secret.length(); i++) {\n        if (secret.charAt(i) == guess.charAt(i)) {\n            bulls++;\n        } else {\n            secretCount[secret.charAt(i) - '0']++;\n            guessCount[guess.charAt(i) - '0']++;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        cows += Math.min(secretCount[i], guessCount[i]);\n    }\n\n    return bulls + \"A\" + cows + \"B\";\n}",
            "python": "if __name__ == \"__main__\":\n    secret = $args[0]\n    guess = $args[1]\n    result = get_hint(secret, guess)\n    print(result)",
            "javascript": "function getHint(secret, guess) {\n    let bulls = 0, cows = 0;\n    let secretCount = Array(10).fill(0);\n    let guessCount = Array(10).fill(0);\n\n    for (let i = 0; i < secret.length; i++) {\n        if (secret[i] === guess[i]) {\n            bulls++;\n        } else {\n            secretCount[parseInt(secret[i])]++;\n            guessCount[parseInt(guess[i])]++;\n        }\n    }\n\n    for (let i = 0; i < 10; i++) {\n        cows += Math.min(secretCount[i], guessCount[i]);\n    }\n\n    return `${bulls}A${cows}B`;\n}"
        }
    },
    "300": {
        "call_functions": {
            "c++": "int lengthOfLIS(vector<int>& nums) {\n    vector<int> dp(nums.size(), 1);\n    int max_length = 1;\n    for (int i = 1; i < nums.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        max_length = max(max_length, dp[i]);\n    }\n    return max_length;\n}",
            "java": "public int lengthOfLIS(int[] nums) {\n    int[] dp = new int[nums.length];\n    int max_length = 1;\n    Arrays.fill(dp, 1);\n    for (int i = 1; i < nums.length; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        max_length = Math.max(max_length, dp[i]);\n    }\n    return max_length;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = lengthOfLIS(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = lengthOfLIS(nums);\n    console.log(result);\n}"
        }
    },
    "301": {
        "call_functions": {
            "c++": "vector<string> removeInvalidParentheses(string s) {\n    set<string> visited;\n    queue<string> q;\n    vector<string> result;\n    bool found = false;\n\n    visited.insert(s);\n    q.push(s);\n\n    while (!q.empty()) {\n        string cur = q.front();\n        q.pop();\n\n        if (isValid(cur)) {\n            found = true;\n            result.push_back(cur);\n        }\n\n        if (found) continue;\n\n        for (int i = 0; i < cur.length(); ++i) {\n            if (cur[i] == '(' || cur[i] == ')') {\n                string next = cur.substr(0, i) + cur.substr(i+1);\n                if (visited.find(next) == visited.end()) {\n                    visited.insert(next);\n                    q.push(next);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nbool isValid(const string &s) {\n    int count = 0;\n    for (char c : s) {\n        if (c == '(') count++;\n        if (c == ')') count--;\n        if (count < 0) return false;\n    }\n    return count == 0;\n}",
            "java": "public List<String> removeInvalidParentheses(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    solution = Solution()\n    result = solution.removeInvalidParentheses(s)\n    print(result)",
            "javascript": "removeInvalidParentheses(s)"
        }
    },
    "302": {
        "call_functions": {
            "c++": "int minArea(vector<vector<char>>& image, int x, int y) {\n    int top = x, bottom = x, left = y, right = y;\n    for (int i = 0; i < image.size(); ++i) {\n        for (int j = 0; j < image[i].size(); ++j) {\n            if (image[i][j] == '1') {\n                top = min(top, i);\n                bottom = max(bottom, i);\n                left = min(left, j);\n                right = max(right, j);\n            }\n        }\n    }\n    return (bottom - top + 1) * (right - left + 1);\n}",
            "java": "public int minArea(char[][] image, int x, int y) {\n    int top = x, bottom = x, left = y, right = y;\n    for (int i = 0; i < image.length; ++i) {\n        for (int j = 0; j < image[i].length; ++j) {\n            if (image[i][j] == '1') {\n                top = Math.min(top, i);\n                bottom = Math.max(bottom, i);\n                left = Math.min(left, j);\n                right = Math.max(right, j);\n            }\n        }\n    }\n    return (bottom - top + 1) * (right - left + 1);\n}",
            "python": "if __name__ == \"__main__\":\n    image = $args[0]\n    x = $args[1]\n    y = $args[2]\n    result = minArea(image, x, y)\n    print(result)",
            "javascript": "function main() {\n    const image = $args[0];\n    const x = $args[1];\n    const y = $args[2];\n    const result = minArea(image, x, y);\n    console.log(result);\n}"
        }
    },
    "305": {
        "call_functions": {
            "c++": "#include <vector>\n\nusing namespace std;\n\nint main() {\n    int m = $args;\n    int n = $args;\n    vector<vector<int>> positions = $args;\n    vector<int> result = numIslands2(m, n, positions);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> numIslands2(int m, int n, int[][] positions) {\n    int[] roots = new int[m * n];\n    Arrays.fill(roots, -1);\n    int[][] dirs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n    int islandCount = 0;\n    List<Integer> result = new ArrayList<>();\n\n    for (int[] position : positions) {\n        int i = position[0], j = position[1], index = i * n + j;\n        if (roots[index] != -1) {\n            result.add(islandCount);\n            continue;\n        }\n        islandCount++;\n        roots[index] = index;\n        for (int[] dir : dirs) {\n            int ni = i + dir[0], nj = j + dir[1], neighbor = ni * n + nj;\n            if (ni >= 0 && ni < m && nj >= 0 && nj < n && roots[neighbor] != -1) {\n                int rootNb = find(roots, neighbor);\n                if (index != rootNb) {\n                    roots[rootNb] = index;\n                    islandCount--;\n                }\n            }\n        }\n        result.add(islandCount);\n    }\n    return result;\n}\n\nprivate int find(int[] roots, int x) {\n    if (roots[x] != x) roots[x] = find(roots, roots[x]);\n    return roots[x];\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    positions = $args[2]\n    result = numIslands2(m, n, positions)\n    print(result)",
            "javascript": "function numIslands2(m, n, positions) {\n    const roots = new Array(m * n).fill(-1);\n    const dirs = [[0, 1], [1, 0], [-1, 0], [0, -1]];\n    let islandCount = 0;\n    const result = [];\n\n    const index = (x, y) => x * n + y;\n    \n    function find(x) {\n        if (roots[x] !== x) roots[x] = find(roots[x]);\n        return roots[x];\n    }\n\n    for (const [i, j] of positions) {\n        const idx = index(i, j);\n        if (roots[idx] !== -1) {\n            result.push(islandCount);\n            continue;\n        }\n        islandCount++;\n        roots[idx] = idx;\n        for (const [dx, dy] of dirs) {\n            const ni = i + dx, nj = j + dy;\n            const neighbor = index(ni, nj);\n            if (ni >= 0 && ni < m && nj >= 0 && nj < n && roots[neighbor] !== -1) {\n                const root_neighbor = find(neighbor);\n                if (idx !== root_neighbor) {\n                    roots[root_neighbor] = idx;\n                    islandCount--;\n                }\n            }\n        }\n        result.push(islandCount);\n    }\n    return result;\n}"
        }
    },
    "306": {
        "call_functions": {
            "c++": "bool isAdditiveNumber(std::string num) {\n    for (int i = 1; i <= num.length() / 2; i++) {\n        for (int j = 1; j <= (num.length() - i) / 2; j++) {\n            if (check(num.substr(0, i), num.substr(i, j), num.substr(i + j))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nbool check(std::string num1, std::string num2, std::string remaining) {\n    if ((num1.size() > 1 && num1[0] == '0') || (num2.size() > 1 && num2[0] == '0')) {\n        return false;\n    }\n    std::string sum = add(num1, num2);\n    if (remaining == sum) {\n        return true;\n    }\n    if (remaining.substr(0, sum.size()) != sum) {\n        return false;\n    }\n    return check(num2, sum, remaining.substr(sum.size()));\n}\n\nstd::string add(std::string num1, std::string num2) {\n    int carry = 0;\n    std::string result;\n    for (int i = num1.size() - 1, j = num2.size() - 1;\n         i >= 0 || j >= 0 || carry > 0; i--, j--) {\n        int n1 = i >= 0 ? num1[i] - '0' : 0;\n        int n2 = j >= 0 ? num2[j] - '0' : 0;\n        int sum = n1 + n2 + carry;\n        carry = sum / 10;\n        result.push_back('0' + sum % 10);\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n}",
            "java": "public boolean isAdditiveNumber(String num) {\n    for (int i = 1; i <= num.length() / 2; i++) {\n        for (int j = 1; j <= (num.length() - i) / 2; j++) {\n            if (check(num.substring(0, i), num.substring(i, i + j), num.substring(i + j))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean check(String num1, String num2, String remaining) {\n    if ((num1.length() > 1 && num1.charAt(0) == '0') || (num2.length() > 1 && num2.charAt(0) == '0')) {\n        return false;\n    }\n    String sum = add(num1, num2);\n    if (remaining.equals(sum)) {\n        return true;\n    }\n    if (!remaining.startsWith(sum)) {\n        return false;\n    }\n    return check(num2, sum, remaining.substring(sum.length()));\n}\n\nprivate String add(String num1, String num2) {\n    int carry = 0;\n    StringBuilder result = new StringBuilder();\n    for (int i = num1.length() - 1, j = num2.length() - 1;\n         i >= 0 || j >= 0 || carry > 0; i--, j--) {\n        int n1 = i >= 0 ? num1.charAt(i) - '0' : 0;\n        int n2 = j >= 0 ? num2.charAt(j) - '0' : 0;\n        int sum = n1 + n2 + carry;\n        carry = sum / 10;\n        result.append((char) ('0' + sum % 10));\n    }\n    return result.reverse().toString();\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = isAdditiveNumber(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = isAdditiveNumber(num);\n    console.log(result);\n}"
        }
    },
    "309": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxProfit(int[] prices) {\n    int profit = 0;\n    for (int i = 1; i < prices.length; i++) {\n        profit += Math.max(prices[i] - prices[i - 1], 0);\n    }\n    return profit;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    result = maxProfit(prices)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args;\n    const result = maxProfit(prices);\n    console.log(result);\n}"
        }
    },
    "310": {
        "call_functions": {
            "c++": "vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n    if (n == 1) return {0};\n\n    vector<int> degrees(n, 0);\n    vector<vector<int>> adjList(n);\n    for (const auto &edge : edges) {\n        adjList[edge[0]].push_back(edge[1]);\n        adjList[edge[1]].push_back(edge[0]);\n        degrees[edge[0]]++;\n        degrees[edge[1]]++;\n    }\n\n    queue<int> q;\n    for (int i = 0; i < n; ++i) {\n        if (degrees[i] == 1) q.push(i);\n    }\n\n    while (n > 2) {\n        int leaves_size = q.size();\n        n -= leaves_size;\n        for (int i = 0; i < leaves_size; i++) {\n            int leaf = q.front(); q.pop();\n            for (int neighbor : adjList[leaf]) {\n                if (--degrees[neighbor] == 1) q.push(neighbor);\n            }\n        }\n    }\n\n    vector<int> result;\n    while (!q.empty()) {\n        result.push_back(q.front());\n        q.pop();\n    }\n\n    return result;\n}",
            "java": "public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n    if (n == 1) {\n        List<Integer> result = new ArrayList<>();\n        result.add(0);\n        return result;\n    }\n\n    int[] degrees = new int[n];\n    List<List<Integer>> adjList = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) {\n        adjList.add(new ArrayList<>());\n    }\n\n    for (int[] edge : edges) {\n        adjList.get(edge[0]).add(edge[1]);\n        adjList.get(edge[1]).add(edge[0]);\n        degrees[edge[0]]++;\n        degrees[edge[1]]++;\n    }\n\n    Queue<Integer> queue = new LinkedList<>();\n    for (int i = 0; i < n; i++) {\n        if (degrees[i] == 1) queue.add(i);\n    }\n\n    while (n > 2) {\n        int leavesSize = queue.size();\n        n -= leavesSize;\n        for (int i = 0; i < leavesSize; i++) {\n            int leaf = queue.poll();\n            for (int neighbor : adjList.get(leaf)) {\n                if (--degrees[neighbor] == 1) queue.add(neighbor);\n            }\n        }\n    }\n\n    return new ArrayList<>(queue);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = find_min_height_trees(n, edges)\n    print(result)",
            "javascript": "function main() {\n  const n = $args;\n  const edges = $args;\n  const result = findMinHeightTrees(n, edges);\n  console.log(result);\n}"
        }
    },
    "311": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> multiply(vector<vector<int>>& mat1, vector<vector<int>>& mat2) {\n    int m = mat1.size();\n    int k = mat1[0].size();\n    int n = mat2[0].size();\n    vector<vector<int>> result(m, vector<int>(n, 0));\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < k; j++) {\n            if (mat1[i][j] != 0) {\n                for (int l = 0; l < n; l++) {\n                    result[i][l] += mat1[i][j] * mat2[j][l];\n                }\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<vector<int>> mat1 = $args;\n    vector<vector<int>> mat2 = $args;\n    vector<vector<int>> result = multiply(mat1, mat2);\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = 0; j < result[0].size(); j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public int[][] multiply(int[][] mat1, int[][] mat2) {\n    int m = mat1.length;\n    int k = mat1[0].length;\n    int n = mat2[0].length;\n    int[][] result = new int[m][n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < k; j++) {\n            if (mat1[i][j] != 0) {\n                for (int l = 0; l < n; l++) {\n                    result[i][l] += mat1[i][j] * mat2[j][l];\n                }\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    mat1 = $args[0]\n    mat2 = $args[1]\n    result = multiply(mat1, mat2)\n    print(result)",
            "javascript": "function main() {\n    const mat1 = $args[0];\n    const mat2 = $args[1];\n    const result = multiply(mat1, mat2);\n    console.log(result);\n}"
        }
    },
    "312": {
        "call_functions": {
            "c++": "int maxCoins(vector<int>& nums) {\n    int n = nums.size();\n    nums.insert(nums.begin(), 1);\n    nums.push_back(1);\n\n    vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));\n    for (int len = 1; len <= n; len++) {\n        for (int left = 1; left <= n - len + 1; left++) {\n            int right = left + len - 1;\n            for (int i = left; i <= right; i++) {\n                dp[left][right] = max(dp[left][right], nums[left - 1] * nums[i] * nums[right + 1] + dp[left][i - 1] + dp[i + 1][right]);\n            }\n        }\n    }\n\n    return dp[1][n];\n}",
            "java": "public int maxCoins(int[] nums) {\n    int n = nums.length;\n    int[] newNums = new int[n + 2];\n    newNums[0] = 1;\n    newNums[n + 1] = 1;\n    for (int i = 1; i <= n; i++) {\n        newNums[i] = nums[i - 1];\n    }\n\n    int[][] dp = new int[n + 2][n + 2];\n    for (int len = 1; len <= n; len++) {\n        for (int left = 1; left <= n - len + 1; left++) {\n            int right = left + len - 1;\n            for (int i = left; i <= right; i++) {\n                dp[left][right] = Math.max(dp[left][right], newNums[left - 1] * newNums[i] * newNums[right + 1] + dp[left][i - 1] + dp[i + 1][right]);\n            }\n        }\n    }\n\n    return dp[1][n];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maxCoins(nums)\n    print(result)",
            "javascript": "function maxCoins(nums) {\n    nums.unshift(1);\n    nums.push(1);\n    const n = nums.length;\n\n    const dp = [];\n    for (let i = 0; i < n; i++) {\n        dp.push(new Array(n).fill(0));\n    }\n\n    for (let len = 1; len <= n - 2; len++) {\n        for (let left = 1; left <= n - len - 1; left++) {\n            const right = left + len - 1;\n            for (let i = left; i <= right; i++) {\n                dp[left][right] = Math.max(dp[left][right], nums[left - 1] * nums[i] * nums[right + 1] + dp[left][i - 1] + dp[i + 1][right]);\n            }\n        }\n    }\n\n    return dp[1][n - 2];\n}"
        }
    },
    "313": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    vector<int> primes = {2, 3, 5};\n    int result = nthSuperUglyNumber(n, primes);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int nthSuperUglyNumber(int n, int[] primes) {\n    int[] ugly = new int[n];\n    ugly[0] = 1;\n    int[] indices = new int[primes.length];\n\n    for (int i = 1; i < n; i++) {\n        int minVal = Integer.MAX_VALUE;\n\n        for (int j = 0; j < primes.length; j++)\n            minVal = Math.min(minVal, ugly[indices[j]] * primes[j]);\n\n        ugly[i] = minVal;\n\n        for (int j = 0; j < primes.length; j++)\n            if (ugly[i] == ugly[indices[j]] * primes[j])\n                indices[j]++;\n    }\n\n    return ugly[n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    primes = $args[1]\n    result = nthSuperUglyNumber(n, primes)\n    print(result)",
            "javascript": "function nthSuperUglyNumber(n, primes) {\n    let ugly = new Array(n);\n    ugly[0] = 1;\n    let indices = new Array(primes.length).fill(0);\n\n    for (let i = 1; i < n; i++) {\n        let minVal = Number.MAX_SAFE_INTEGER;\n\n        for (let j = 0; j < primes.length; j++)\n            minVal = Math.min(minVal, ugly[indices[j]] * primes[j]);\n\n        ugly[i] = minVal;\n\n        for (let j = 0; j < primes.length; j++)\n            if (ugly[i] == ugly[indices[j]] * primes[j])\n                indices[j]++;\n    }\n\n    return ugly[n - 1];\n}"
        }
    },
    "314": {
        "call_functions": {
            "c++": "#include <vector>\n#include <map>\n#include <queue>\n\nclass TreeNode {\npublic:\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n\nstd::vector<std::vector<int>> verticalOrder(TreeNode* root) {\n    if (!root) return {};\n\n    std::map<int, std::vector<int>> columnTable;\n    std::queue<std::pair<TreeNode*, int>> q;\n    q.push({root, 0});\n\n    while (!q.empty()) {\n        TreeNode* curNode = q.front().first;\n        int column = q.front().second;\n        q.pop();\n\n        if (curNode) {\n            columnTable[column].push_back(curNode->val);\n            q.push({curNode->left, column - 1});\n            q.push({curNode->right, column + 1});\n        }\n    }\n\n    std::vector<std::vector<int>> result;\n    for (auto& [_, values] : columnTable) {\n        result.push_back(std::move(values));\n    }\n\n    return result;\n}\n\nint main() {\n    TreeNode* root = $args;\n    std::vector<std::vector<int>> result = verticalOrder(root);\n\n    // Print the result\n    for (const auto& row : result) {\n        for (const auto& val : row) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<Integer>> verticalOrder(TreeNode root)",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = verticalOrder(root)\n    print(result)",
            "javascript": "var verticalOrder = function(root) {\n    if (!root) return [];\n    \n    const columnTable = new Map();\n    const q = [[root, 0]];\n\n    while (q.length) {\n        const [curNode, column] = q.shift();\n\n        if (curNode) {\n            if (!columnTable.has(column)) columnTable.set(column, []);\n            columnTable.get(column).push(curNode.val);\n            q.push([curNode.left, column - 1]);\n            q.push([curNode.right, column + 1]);\n        }\n    }\n\n    return Array.from(columnTable.entries()).sort((a, b) => a[0] - b[0]).map(entry => entry[1]);\n};"
        }
    },
    "315": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvoid mergeSort(vector<int>& nums, vector<int>& indices, vector<int>& result, int left, int right);\n\nvector<int> countSmaller(vector<int>& nums) {\n    vector<int> result(nums.size(), 0);\n    vector<int> indices(nums.size(), 0);\n\n    for (int i = 0; i < nums.size(); ++i) {\n        indices[i] = i;\n    }\n\n    mergeSort(nums, indices, result, 0, nums.size() - 1);\n    return result;\n}\n\nvoid mergeSort(vector<int>& nums, vector<int>& indices, vector<int>& result, int left, int right) {\n    if (left >= right) {\n        return;\n    }\n\n    int mid = left + (right - left) / 2;\n    mergeSort(nums, indices, result, left, mid);\n    mergeSort(nums, indices, result, mid + 1, right);\n\n\n    int I = left;\n    int J = mid + 1;\n    int K = 0;\n    vector<int> temp(right - left + 1);\n    while (I <= mid && J <= right) {\n        if (nums[indices[I]] <= nums[indices[J]]) {\n            result[indices[I]] += (J - mid - 1);\n            temp[K++] = indices[I++];\n        } else {\n            temp[K++] = indices[J++];\n        }\n    }\n\n    while (I <= mid) {\n        result[indices[I]] += (J - mid - 1);\n        temp[K++] = indices[I++];\n    }\n\n    while (J <= right) {\n        temp[K++] = indices[J++];\n    }\n\n    for (int i = left, k = 0; i <= right; ++i, ++k) {\n        indices[i] = temp[k];\n    }\n}\n",
            "java": "public List<Integer> countSmaller(int[] nums) {\n    int n = nums.length;\n    int[] indices = new int[n];\n    int[] counts = new int[n];\n    \n    for (int i = 0; i < n; i++) {\n        indices[i] = i;\n    }\n    \n    mergeSort(nums, indices, counts, 0, n - 1);\n    List<Integer> result = new ArrayList<>();\n    for (int count : counts) {\n        result.add(count);\n    }\n    return result;\n}\n\nprivate void mergeSort(int[] nums, int[] indices, int[] counts, int left, int right) {\n    if (left >= right) {\n        return;\n    }\n    \n    int mid = left + (right - left) / 2;\n    mergeSort(nums, indices, counts, left, mid);\n    mergeSort(nums, indices, counts, mid + 1, right);\n    \n    int[] temp = new int[right - left + 1];\n    int i = left, j = mid + 1, k = 0;\n    while (i <= mid && j <= right) {\n        if (nums[indices[i]] <= nums[indices[j]]) {\n            counts[indices[i]] += j - mid - 1;\n            temp[k++] = indices[i++];\n        } else {\n            temp[k++] = indices[j++];\n        }\n    }\n    \n    while (i <= mid) {\n        counts[indices[i]] += j - mid - 1;\n        temp[k++] = indices[i++];\n    }\n    \n    while (j <= right) {\n        temp[k++] = indices[j++];\n    }\n    \n    System.arraycopy(temp, 0, indices, left, right - left + 1);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = countSmaller(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = countSmaller(nums);\n    console.log(result);\n}"
        }
    },
    "316": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nstring removeDuplicateLetters(string s) {\n    vector<int> count(256, 0);\n    vector<bool> visited(256, false);\n    stack<char> st;\n    \n    for (char ch : s) {\n        count[ch]++;\n    }\n    \n    for (char ch : s) {\n        count[ch]--;\n        if (visited[ch]) continue;\n        while (!st.empty() && ch < st.top() && count[st.top()] > 0) {\n            visited[st.top()] = false;\n            st.pop();\n        }\n        st.push(ch);\n        visited[ch] = true;\n    }\n    \n    string result = \"\";\n    while (!st.empty()) {\n        result = st.top() + result;\n        st.pop();\n    }\n    return result;\n}\n\nint main() {\n    string s = $args;\n    string result = removeDuplicateLetters(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String removeDuplicateLetters(String s) {\n        int[] count = new int[256];\n        boolean[] visited = new boolean[256];\n        Stack<Character> st = new Stack<>();\n        \n        for (char ch : s.toCharArray()) {\n            count[ch]++;\n        }\n        \n        for (char ch : s.toCharArray()) {\n            count[ch]--;\n            if (visited[ch]) continue;\n            while (!st.isEmpty() && ch < st.peek() && count[st.peek()] > 0) {\n                visited[st.pop()] = false;\n            }\n            st.push(ch);\n            visited[ch] = true;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (!st.empty()) {\n            result.append(st.pop());\n        }\n        return result.reverse().toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = removeDuplicateLetters(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = removeDuplicateLetters(s);\n    console.log(result);\n}"
        }
    },
    "317": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n\nusing namespace std;\n\nint main() {\n    vector<vector<int>> grid = $args;\n    int result = shortestDistance(grid);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int shortestDistance(int[][] grid) {\n    int m = grid.length;\n    int n = grid[0].length;\n    \n    int[][] total_count = new int[m][n];\n    int[][] dist_sum = new int[m][n];\n    int house_count = 0;\n    \n    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                house_count++;\n                Queue<int[]> q = new LinkedList<>();\n                q.offer(new int[]{i, j});\n                boolean[][] visited = new boolean[m][n];\n                int level = 1;\n                while (!q.isEmpty()) {\n                    int sz = q.size();\n                    for (int q_i = 0; q_i < sz; q_i++) {\n                        int[] cur = q.poll();\n                        int x = cur[0];\n                        int y = cur[1];\n                        for (int[] dir : dirs) {\n                            int x_new = x + dir[0];\n                            int y_new = y + dir[1];\n                            if (x_new >= 0 && x_new < m && y_new >= 0 && y_new < n && !visited[x_new][y_new] && grid[x_new][y_new] == 0) {\n                                visited[x_new][y_new] = true;\n                                q.offer(new int[]{x_new, y_new});\n                                dist_sum[x_new][y_new] += level;\n                                total_count[x_new][y_new]++;\n                            }\n                        }\n                    }\n                    level++;\n                }\n            }\n        }\n    }\n                                         \n    int min_dist = Integer.MAX_VALUE;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (total_count[i][j] == house_count) {\n                min_dist = Math.min(min_dist, dist_sum[i][j]);\n            }\n        }\n    }\n    \n    return min_dist == Integer.MAX_VALUE ? -1 : min_dist;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = shortestDistance(grid)\n    print(result)",
            "javascript": "function shortestDistance(grid) {\n    let m = grid.length;\n    let n = grid[0].length;\n    \n    let total_count = Array.from({length: m}, () => Array(n).fill(0));\n    let dist_sum = Array.from({length: m}, () => Array(n).fill(0));\n    let house_count = 0;\n    \n    let dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    \n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                house_count++;\n                let q = [{x: i, y: j}];\n                let visited = Array.from({length: m}, () => Array(n).fill(false));\n                let level = 1;\n                while (q.length) {\n                    let sz = q.length;\n                    for (let q_i = 0; q_i < sz; q_i++) {\n                        let { x, y } = q.shift();\n                        dirs.forEach(([dx, dy]) => {\n                            let x_new = x + dx;\n                            let y_new = y + dy;\n                            if (x_new >= 0 && x_new < m && y_new >= 0 && y_new < n && !visited[x_new][y_new] && grid[x_new][y_new] === 0) {\n                                visited[x_new][y_new] = true;\n                                q.push({ x: x_new, y: y_new });\n                                dist_sum[x_new][y_new] += level;\n                                total_count[x_new][y_new]++;\n                            }\n                        });\n                    }\n                    level++;\n                }\n            }\n        }\n    }\n                                          \n    let min_dist = Infinity;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (total_count[i][j] === house_count) {\n                min_dist = Math.min(min_dist, dist_sum[i][j]);\n            }\n        }\n    }\n    \n    return min_dist === Infinity ? -1 : min_dist;\n}"
        }
    },
    "318": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    int result = maxProduct(words);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int maxProduct(String[] words) {\n        int n = words.length;\n        int[] mask = new int[n];\n        for (int i = 0; i < n; i++) {\n            for (char c : words[i].toCharArray()) {\n                mask[i] |= (1 << (c - 'a'));\n            }\n        }\n\n        int maxProduct = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((mask[i] & mask[j]) == 0) {\n                    maxProduct = Math.max(maxProduct, words[i].length() * words[j].length());\n                }\n            }\n        }\n\n        return maxProduct;\n    }",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = maxProduct(words)\n    print(result)",
            "javascript": "function main() {\n    const words = $args;\n    const result = maxProduct(words);\n    console.log(result);\n}"
        }
    },
    "319": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = bulbSwitch(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "320": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nstd::vector<std::string> generateAbbreviations(std::string word);\n\nint main() {\n    std::string word = $args;\n    std::vector<std::string> result = generateAbbreviations(word);\n    for (const std::string& res : result) {\n        std::cout << res << std::endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> generateAbbreviations(String word) {\n    List<String> res = new ArrayList<>();\n    res.add(word.isEmpty() ? \"\" : Integer.toString(word.length()));\n    for (int i = 0; i < word.length(); ++i) {\n        String pre = word.substring(0, i);\n        for (String abbr : generateAbbreviations(word.substring(i + 1))) {\n            int num = abbr.chars().findFirst_NEG_INT().getAsInt();\n            if (abbr.isEmpty() || num > 0) {\n                res.add(pre + '1' + abbr);\n            }\n            if (i == 0 || abbr.isEmpty() || abbr.charAt(0) > '9') {\n                res.add(word.substring(0, i + 1) + abbr);\n            }\n        }\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    word = $args[0]\n    result = generateAbbreviations(word)\n    print(result)",
            "javascript": "function main() {\n    const word = $args;\n    const result = generateAbbreviations(word);\n    console.log(result);\n}"
        }
    },
    "321": {
        "call_functions": {
            "c++": "std::vector<int> maxNumber(std::vector<int>& nums1, std::vector<int>& nums2, int k) {\n    int m = nums1.size(), n = nums2.size();\n    std::vector<int> ans(k, 0);\n    for (int i = std::max(0, k - n); i <= k && i <= m; ++i) {\n        std::vector<int> candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);\n        if (greater(candidate, 0, ans, 0)) ans = candidate;\n    }\n    return ans;\n}\n\nstd::vector<int> maxArray(std::vector<int>& nums, int k) {\n    int n = nums.size();\n    std::vector<int> ans(k, 0);\n    for (int i = 0, j = 0; i < n; ++i) {\n        while (n - i > k - j && j > 0 && ans[j - 1] < nums[i]) j--;\n        if (j < k) ans[j++] = nums[i];\n    }\n    return ans;\n}\n\nstd::vector<int> merge(std::vector<int>& nums1, std::vector<int>& nums2, int k) {\n    std::vector<int> ans(k, 0);\n    for (int i = 0, j = 0, r = 0; r < k; ++r)\n        ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];\n    return ans;\n}\n\nbool greater(std::vector<int>& nums1, int i, std::vector<int>& nums2, int j) {\n    while (i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]) {\n        i++;\n        j++;\n    }\n    return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);\n}",
            "java": "public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n    int[] ans = new int[k];\n    int m = nums1.length, n = nums2.length;\n    \n    for (int i = Math.max(0, k - n); i <= k && i <= m; i++) {\n        int[] candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);\n        if (greater(candidate, 0, ans, 0)) ans = candidate;\n    }\n    return ans;\n}\n\nprivate int[] maxArray(int[] nums, int k) {\n    int n = nums.length;\n    int[] ans = new int[k];\n    for (int i = 0, j = 0; i < n; i++) {\n        while (n - i > k - j && j > 0 && ans[j - 1] < nums[i]) j--;\n        if (j < k) ans[j++] = nums[i];\n    }\n    return ans;\n}\n\nprivate int[] merge(int[] nums1, int[] nums2, int k) {\n    int[] ans = new int[k];\n    for (int i = 0, j = 0, r = 0; r < k; r++)\n        ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];\n    return ans;\n}\n\nprivate boolean greater(int[] nums1, int i, int[] nums2, int j) {\n    while (i < nums1.length && j < nums2.length && nums1[i] == nums2[j]) {\n        i++;\n        j++;\n    }\n    return j == nums2.length || (i < nums1.length && nums1[i] > nums2[j]);\n}",
            "javascript": "def main():\n    nums1 = $args[0]\n    nums2 = $args[1]\n    k = $args[2]\n    \n    def maxArray(nums, k):\n        ans = []\n        for i, num in enumerate(nums):\n            while len(ans) + len(nums) - i > k and ans and ans[-1] < num:\n                ans.pop()\n            if len(ans) < k:\n                ans.append(num)\n        return ans\n\n    def merge(nums1, nums2):\n        return [max(nums1, nums2).pop(0) for _ in nums1 + nums2]\n\n    result = max(merge(maxArray(nums1, i), maxArray(nums2, k - i))\n               for i in range(k + 1)\n               if i <= len(nums1) and k - i <= len(nums2))\n    print(result)\n\nmain()",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    k = $args[2]\n    result = maxNumber(nums1, nums2, k)\n    print(result)"
        }
    },
    "322": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> coins = $args;\n    int amount = $args;\n    int result = coinChange(coins, amount);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int coinChange(int[] coins, int amount) {\n    int[] dp = new int[amount + 1];\n    Arrays.fill(dp, amount + 1);\n    dp[0] = 0;\n    \n    for (int coin : coins) {\n        for (int i = coin; i <= amount; i++) {\n            dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n        }\n    }\n\n    return dp[amount] <= amount ? dp[amount] : -1;\n}",
            "python": "if __name__ == \"__main__\":\n    coins = $args[0]\n    amount = $args[1]\n    result = coinChange(coins, amount)\n    print(result)",
            "javascript": "function main() {\n    const coins = $args[0];\n    const amount = $args[1];\n    const result = coinChange(coins, amount);\n    console.log(result);\n}"
        }
    },
    "323": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> edges = { {0, 1}, {1, 2}, {3, 4} }; // Example input\n    int result = countComponents(n, edges);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int countComponents(int n, int[][] edges) {\n    List<List<Integer>> adjList = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n        adjList.add(new ArrayList<>());\n    }\n    for (int[] edge : edges) {\n        adjList.get(edge[0]).add(edge[1]);\n        adjList.get(edge[1]).add(edge[0]);\n    }\n\n    boolean[] visited = new boolean[n];\n    int connectedComponents = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (!visited[i]) {\n            dfs(i, visited, adjList);\n            connectedComponents++;\n        }\n    }\n    return connectedComponents;\n}\n\nvoid dfs(int node, boolean[] visited, List<List<Integer>> adjList) {\n    visited[node] = true;\n    for (int neighbor : adjList.get(node)) {\n        if (!visited[neighbor]) {\n            dfs(neighbor, visited, adjList);\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = countComponents(n, edges)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const edges = $args[1];\n    const result = countComponents(n, edges);\n    console.log(result);\n}"
        }
    },
    "324": {
        "call_functions": {
            "c++": "#include <algorithm>\n\nvoid wiggleSort(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    for (int i = 1; i < nums.size() - 1; i += 2) {\n        swap(nums[i], nums[i + 1]);\n    }\n}\n\nint main() {\n    vector<int> nums = $args;\n    wiggleSort(nums);\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << \" \";\n    }\n    return 0;\n}",
            "java": "public void wiggleSort(int[] nums)",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = wiggleSort(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    wiggleSort(nums);\n    console.log(nums);\n}"
        }
    },
    "325": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int k = $args;\n    int result = maxSubArrayLen(nums, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxSubArrayLen(int[] nums, int k) {\n    Map<Integer, Integer> sumIndex = new HashMap<>();\n    int maxLength = 0, sum = 0;\n    for(int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum == k) maxLength = i + 1;\n        if (sumIndex.containsKey(sum - k)) maxLength = Math.max(maxLength, i - sumIndex.get(sum - k));\n        if (!sumIndex.containsKey(sum)) sumIndex.put(sum, i);\n    }\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = maxSubArrayLen(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = maxSubArrayLen(nums, k);\n    console.log(result);\n}"
        }
    },
    "326": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfThree(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isPowerOfThree(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = is_power_of_three(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfThree(n);\n    console.log(result);\n}"
        }
    },
    "327": {
        "call_functions": {
            "c++": "int countRangeSum(vector<int>& nums, int lower, int upper) {\n    int n = nums.size();\n    vector<long> sums(n + 1, 0);\n    for (int i = 0; i < n; ++i)\n        sums[i + 1] = sums[i] + nums[i];\n\n    function<int(int, int)> mergeSort = [&](int start, int end) {\n        if (start == end)\n            return 0;\n        int mid = start + (end - start) / 2;\n        int count = mergeSort(start, mid) + mergeSort(mid + 1, end);\n\n        int j = mid + 1, k = mid + 1;\n        for (int i = start; i <= mid; ++i) {\n            while (j <= end && sums[j] - sums[i] < lower) ++j;\n            while (k <= end && sums[k] - sums[i] <= upper) ++k;\n            count += k - j;\n        }\n\n        inplace_merge(sums.begin() + start, sums.begin() + mid + 1, sums.begin() + end + 1);\n        return count;\n    };\n\n    return mergeSort(0, n);\n}",
            "java": "public int countRangeSum(int[] nums, int lower, int upper) {\n    long[] sums = new long[nums.length + 1];\n    for (int i = 0; i < nums.length; ++i)\n        sums[i + 1] = sums[i] + nums[i];\n\n    return countWhileMergeSort(sums, lower, upper, 0, nums.length);\n}\n\nprivate int countWhileMergeSort(long[] sums, int lower, int upper, int start, int end) {\n    if (start >= end)\n        return 0;\n\n    int mid = start + (end - start) / 2;\n    int count = countWhileMergeSort(sums, lower, upper, start, mid) + countWhileMergeSort(sums, lower, upper, mid + 1, end);\n\n    int j = mid + 1, k = mid + 1;\n    for (int i = start; i <= mid; ++i) {\n        while (j <= end && sums[j] - sums[i] < lower) ++j;\n        while (k <= end && sums[k] - sums[i] <= upper) ++k;\n        count += k - j;\n    }\n\n    Arrays.sort(sums, start, end + 1);\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    lower = $args[1]\n    upper = $args[2]\n    result = countRangeSum(nums, lower, upper)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const lower = $args[1];\n    const upper = $args[2];\n    const result = countRangeSum(nums, lower, upper);\n    console.log(result);\n}"
        }
    },
    "329": {
        "call_functions": {
            "c++": "int longestIncreasingPath(vector<vector<int>>& matrix) {\n    int m = matrix.size(), n = matrix[0].size();\n    \n    vector<vector<int>> memo(m, vector<int>(n, 0));\n    \n    int ans = 0;\n    for (int i = 0; i < m; ++i)\n        for (int j = 0; j < n; ++j)\n            ans = max(ans, dfs(matrix, memo, i, j));\n    \n    return ans;\n}",
            "java": "public int longestIncreasingPath(int[][] matrix) {\n    int m = matrix.length, n = matrix[0].length;\n    \n    int[][] memo = new int[m][n];\n    \n    int ans = 0;\n    for (int i = 0; i < m; ++i)\n        for (int j = 0; j < n; ++j)\n            ans = Math.max(ans, dfs(matrix, memo, i, j));\n    \n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = longest_increasing_path(matrix)\n    print(result)",
            "javascript": "function longestIncreasingPath(matrix) {\n    const m = matrix.length, n = matrix[0].length;\n    \n    const memo = Array.from({length: m}, () => Array.from({length: n}, () => 0));\n    \n    let ans = 0;\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            ans = Math.max(ans, dfs(matrix, memo, i, j));\n        }\n    }\n    \n    return ans;\n}"
        }
    },
    "330": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int n = $args;\n    int result = minPatches(nums, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minPatches(int[] nums, int n) {\n    long maxSum = 0;\n    int patches = 0, i = 0;\n    \n    while (maxSum < n) {\n        if (i < nums.length && nums[i] <= maxSum + 1) {\n            maxSum += nums[i];\n            i++;\n        } else {\n            maxSum += maxSum + 1;\n            patches++;\n        }\n    }\n    return patches;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    n = $args[1]\n    result = minPatches(nums, n)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const n = $args[1];\n    const result = minPatches(nums, n);\n    console.log(result);\n}"
        }
    },
    "331": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <vector>\n\nint main() {\n    std::string preorder = $args;\n    bool result = isValidSerialization(preorder);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    String preorder = $args;\n    boolean result = isValidSerialization(preorder);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    preorder = $args[0]\n    result = is_valid_serialization(preorder)\n    print(result)",
            "javascript": "function main() {\n    const preorder = $args;\n    const result = isValidSerialization(preorder);\n    console.log(result);\n}"
        }
    },
    "332": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <set>\n\nusing namespace std;\n\nint main() {\n    vector<vector<string>> tickets = $args;\n    vector<string> result = findItinerary(tickets);\n    \n    for (const auto& airport : result) {\n        cout << airport << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
            "java": "public List<String> findItinerary(List<List<String>> tickets)",
            "python": "if __name__ == \"__main__\":\n    tickets = $args[0]\n    result = findItinerary(tickets)\n    print(result)",
            "javascript": "function main() {\n    const tickets = $args;\n    const result = findItinerary(tickets);\n    console.log(result);\n}"
        }
    },
    "334": {
        "call_functions": {
            "c++": "bool findTriplets(vector<int>& nums) {\n    int first = INT_MAX, second = INT_MAX;\n\n    for (int num : nums) {\n        if (num <= first) {\n            first = num;\n        } else if (num <= second) {\n            second = num;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean findTriplets(int[] nums) {\n    int first = Integer.MAX_VALUE;\n    int second = Integer.MAX_VALUE;\n\n    for (int num : nums) {\n        if (num <= first) {\n            first = num;\n        } else if (num <= second) {\n            second = num;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findTriplets(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findTriplets(nums);\n    console.log(result);\n}"
        }
    },
    "335": {
        "call_functions": {
            "c++": "bool isPathCrossing(const std::vector<int>& distance) {\n    std::unordered_set<std::pair<int, int>, pair_hash> visited;\n    int x = 0, y = 0;\n    visited.insert({x, y});\n    int dx[] = {0, -1, 0, 1};\n    int dy[] = {1, 0, -1, 0};\n    \n    for (int i = 0; i < distance.size(); ++i) {\n        int direction = i % 4;\n        for (int j = 0; j < distance[i]; ++j) {\n            x += dx[direction];\n            y += dy[direction];\n            if (!visited.insert({x, y}).second) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
            "java": "public boolean isPathCrossing(int[] distance) {\n    Set<Pair<Integer, Integer>> visited = new HashSet<>();\n    int x = 0, y = 0;\n    visited.add(new Pair<>(x, y));\n    int[] dx = {0, -1, 0, 1};\n    int[] dy = {1, 0, -1, 0};\n    \n    for (int i = 0; i < distance.length; i++) {\n        int direction = i % 4;\n        for (int j = 0; j < distance[i]; j++) {\n            x += dx[direction];\n            y += dy[direction];\n            Pair<Integer, Integer> point = new Pair<>(x, y);\n            if (!visited.add(point)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    distance = $args[0]\n    result = is_path_crossing(distance)\n    print(result)",
            "javascript": "function main() {\n    const distance = $args;\n    const result = isPathCrossing(distance);\n    console.log(result);\n}"
        }
    },
    "336": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nstd::vector<std::pair<int, int>> palindromePairs(const std::vector<std::string> &words) {\n    std::vector<std::pair<int, int>> result;\n\n    for (size_t i = 0; i < words.size(); i++) {\n        for (size_t j = 0; j < words.size(); j++) {\n            if (i == j) continue;\n            std::string concat = words[i] + words[j];\n\n            bool is_palindrome = true;\n            for (size_t left = 0, right = concat.size() - 1; left < right; left++, right--) {\n                if (concat[left] != concat[right]) {\n                    is_palindrome = false;\n                    break;\n                }\n            }\n\n            if (is_palindrome) {\n                result.push_back(std::make_pair(i, j));\n            }\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<std::string> words = $args;\n    std::vector<std::pair<int, int>> result = palindromePairs(words);\n\n    for (const auto& pair : result) {\n        std::cout << pair.first << \" \" << pair.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<Integer>> palindromePairs(String[] words) {\n    List<List<Integer>> result = new ArrayList<>();\n\n    for (int i = 0; i < words.length; i++) {\n        for (int j = 0; j < words.length; j++) {\n            if (i == j) continue;\n            String concat = words[i] + words[j];\n\n            boolean isPalindrome = true;\n            for (int left = 0, right = concat.length() - 1; left < right; left++, right--) {\n                if (concat.charAt(left) != concat.charAt(right)) {\n                    isPalindrome = false;\n                    break;\n                }\n            }\n\n            if (isPalindrome) {\n                List<Integer> pair = new ArrayList<>();\n                pair.add(i);\n                pair.add(j);\n                result.add(pair);\n            }\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = palindrome_pairs(words)\n    print(result)",
            "javascript": "function palindromePairs(words) {\n    function isPalindrome(s) {\n        return s === s.split('').reverse().join('');\n    }\n\n    const result = palindromePairs(words);\n\n    return result;\n}"
        }
    },
    "337": {
        "call_functions": {
            "c++": "int rob(TreeNode* root) {\n    int includeNode = 0, excludeNode = 0;\n    return robHelper(root, includeNode, excludeNode);\n}",
            "java": "public int rob(TreeNode root) {\n    int[] result = robHelper(root);\n    return Math.max(result[0], result[1]);\n}\n\nprivate int[] robHelper(TreeNode node) {\n    if (node == null) return new int[2];\n\n    int[] left = robHelper(node.left);\n    int[] right = robHelper(node.right);\n    int[] result = new int[2];\n\n    result[0] = node.val + left[1] + right[1];\n    result[1] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = rob(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const [withNode, withoutNode] = robHelper(root);\n    return Math.max(withNode, withoutNode);\n}\n\nfunction robHelper(node) {\n    if (!node) return [0, 0];\n\n    const [leftWithNode, leftWithoutNode] = robHelper(node.left);\n    const [rightWithNode, rightWithoutNode] = robHelper(node.right);\n\n    const withNode = node.val + leftWithoutNode + rightWithoutNode;\n    const withoutNode = Math.max(leftWithNode, leftWithoutNode) + Math.max(rightWithNode, rightWithoutNode);\n    return [withNode, withoutNode];\n}\n\nconst root = $args;\nconst result = main(root);\nconsole.log(result);"
        }
    },
    "338": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    vector<int> result = countBits(n);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] countBits(int n) {\n    int[] ans = new int[n + 1];\n    for (int i = 1; i <= n; ++i) {\n        ans[i] = ans[i & (i - 1)] + 1;\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = countBits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = countBits(n);\n    console.log(result);\n}"
        }
    },
    "339": {
        "call_functions": {
            "c++": "#include <vector>\n#include <variant>\n#include <iostream>\n\nusing NestedList = std::vector<std::variant<int, std::vector<std::variant<int, std::vector<int>>>>>;\n\nint depthSumHelper(NestedList nestedList, int depth) {\n    int sum = 0;\n    for (auto& element : nestedList) {\n        if (std::holds_alternative<int>(element)) {\n            sum += std::get<int>(element) * depth;\n        } else {\n            sum += depthSumHelper(std::get<std::vector<std::variant<int, std::vector<int>>>>(element), depth + 1);\n        }\n    }\n    return sum;\n}\n\nint depthSum(NestedList nestedList) {\n    return depthSumHelper(nestedList, 1);\n}\n\nint main() {\n    NestedList nestedList = $args;\n    int result = depthSum(nestedList);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int depthSum(List<?> nestedList) {\n    return depthSumHelper(nestedList, 1);\n}",
            "python": "if __name__ == \"__main__\":\n    nested_list = $args[0]\n    result = depth_sum(nested_list)\n    print(result)",
            "javascript": "function main() {\n    const nestedList = $args;\n    const result = depthSum(nestedList);\n    console.log(result);\n}"
        }
    },
    "340": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    int k = $args;\n    int result = lengthOfLongestSubstringKDistinct(s, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int lengthOfLongestSubstringKDistinct(String s, int k) {\n    HashMap<Character, Integer> charCount = new HashMap<>();\n    int left = 0, maxLength = 0;\n\n    for (int right = 0; right < s.length(); ++right) {\n        charCount.put(s.charAt(right), charCount.getOrDefault(s.charAt(right), 0) + 1);\n\n        while (charCount.size() > k) {\n            charCount.put(s.charAt(left), charCount.get(s.charAt(left)) - 1);\n            if (charCount.get(s.charAt(left)) == 0) {\n                charCount.remove(s.charAt(left));\n            }\n            left++;\n        }\n\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = length_of_longest_substring_k_distinct(s, k)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const k = $args[1];\n    const result = lengthOfLongestSubstringKDistinct(s, k);\n    console.log(result);\n}"
        }
    },
    "342": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isPowerOfFour(int n);\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfFour(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isPowerOfFour(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = isPowerOfFour(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfFour(n);\n    console.log(result);\n}"
        }
    },
    "343": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = integerBreak(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int args) {\n    int n = args;\n    int result = integerBreak(n);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = integer_break(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = integerBreak(n);\n    console.log(result);\n}"
        }
    },
    "344": {
        "call_functions": {
            "c++": "void reverseString(vector<char>& s) {\n    int left = 0, right = s.size() - 1;\n    while (left < right) {\n        swap(s[left++], s[right--]);\n    }\n}",
            "java": "public void reverseString(char[] s) {\n    int left = 0, right = s.length - 1;\n    while (left < right) {\n        char temp = s[left];\n        s[left++] = s[right];\n        s[right--] = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    reverseString(s)\n    print(s)",
            "javascript": "function main() {\n    const s = $args;\n    reverseString(s);\n    console.log(s);\n}"
        }
    },
    "345": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\n\nstd::string reverseVowels(std::string s) {\n    int i = 0, j = s.size() - 1;\n    while (i < j) {\n        if (!isVowel(s[i])) {\n            i++;\n        } else if (!isVowel(s[j])) {\n            j--;\n        } else {\n            std::swap(s[i], s[j]);\n            i++;\n            j--;\n        }\n    }\n    return s;\n}\n\nbool isVowel(char c) {\n    c = std::tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\nint main() {\n    std::string s = $args;\n    std::string result = reverseVowels(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String reverseVowels(String s) {\n    int i = 0, j = s.length() - 1;\n    char[] result = new char[s.length()];\n    Set<Character> vowels = new HashSet<>();\n    for (char c : \"aeiouAEIOU\".toCharArray()) {\n        vowels.add(c);\n    }\n    while (i <= j) {\n        char ci = s.charAt(i);\n        char cj = s.charAt(j);\n        if (!vowels.contains(ci)) {\n            result[i++] = ci;\n        } else if (!vowels.contains(cj)) {\n            result[j--] = cj;\n        } else {\n            result[i++] = cj;\n            result[j--] = ci;\n        }\n    }\n    return new String(result);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = reverseVowels(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = reverseVowels(s);\n    console.log(result);\n}"
        }
    },
    "346": {
        "call_functions": {
            "c++": "#include <queue>\nusing namespace std;\n\nint main() {\n    int size = $args;\n    MovingAverage obj(size);\n    double result = obj.next(5);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public double next(int val) {\n        if (queue.size() == maxSize) {\n            sum -= queue.remove();\n        }\n        queue.add(val);\n        sum += val;\n        return sum / queue.size();\n    }",
            "python": "if __name__ == \"__main__\":\n    size = $args[0]\n    values = $args[1]\n    obj = MovingAverage(size)\n    result = []\n    for val in values:\n        result.append(obj.next(val))\n    print(result)",
            "javascript": "function main() {\n    const size = $args;\n    const obj = new MovingAverage(size);\n    const result = obj.next(val);\n    console.log(result);\n}"
        }
    },
    "347": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <queue>\nusing namespace std;\n\nvector<int> kMostFrequent(vector<int>& nums, int k) {\n    unordered_map<int, int> frequency;\n    for (int num : nums) {\n        frequency[num]++;\n    }\n\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> min_heap;\n    for (const auto& entry : frequency) {\n        min_heap.push({entry.second, entry.first});\n        if (min_heap.size() > k) {\n            min_heap.pop();\n        }\n    }\n\n    vector<int> result;\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top().second);\n        min_heap.pop();\n    }\n\n    return result;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int k = 3;\n    vector<int> result = kMostFrequent(nums, k);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> kMostFrequent(int[] nums, int k) {\n    Map<Integer, Integer> frequency = new HashMap<>();\n    for (int num : nums) {\n        frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n    }\n\n    PriorityQueue<Map.Entry<Integer, Integer>> min_heap = new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));\n    for (Map.Entry<Integer, Integer> entry : frequency.entrySet()) {\n        min_heap.offer(entry);\n        if (min_heap.size() > k) {\n            min_heap.poll();\n        }\n    }\n\n    List<Integer> result = new ArrayList<>();\n    while (!min_heap.isEmpty()) {\n        result.add(min_heap.poll().getKey());\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = k_most_frequent(nums, k)\n    print(result)",
            "javascript": "function kMostFrequent(nums, k) {\n  const frequency = new Map();\n  for (const num of nums) {\n    frequency.set(num, (frequency.get(num) || 0) + 1);\n  }\n\n  const minHeap = [];\n\n  for (const [num, freq] of frequency) {\n    minHeap.push([freq, num]);\n    if (minHeap.length > k) {\n      minHeap.sort((a, b) => a[0] - b[0]).shift();\n    }\n  }\n\n  return minHeap.map(entry => entry[1]);\n}\n"
        }
    },
    "349": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n\nstd::vector<int> intersection(std::vector<int>& nums1, std::vector<int>& nums2) {\n    std::set<int> set1(nums1.begin(), nums1.end());\n    std::set<int> result;\n    for (int num : nums2) {\n        if (set1.count(num)) {\n            result.insert(num);\n        }\n    }\n    return std::vector<int>(result.begin(), result.end());\n}\n\nint main() {\n    std::vector<int> nums1 = $args;\n    std::vector<int> nums2 = $args;\n    std::vector<int> result = intersection(nums1, nums2);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] intersection(int[] nums1, int[] nums2) {\n    Set<Integer> set1 = new HashSet<>();\n    for (int num : nums1) {\n        set1.add(num);\n    }\n    \n    Set<Integer> resultSet = new HashSet<>();\n    for (int num : nums2) {\n        if (set1.contains(num)) {\n            resultSet.add(num);\n        }\n    }\n    \n    int[] result = new int[resultSet.size()];\n    int i = 0;\n    for (int num : resultSet) {\n        result[i++] = num;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = intersection(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const set1 = new Set(nums1);\n    const resultSet = new Set();\n\n    for (const num of nums2) {\n        if (set1.has(num)) {\n            resultSet.add(num);\n        }\n    }\n\n    const result = Array.from(resultSet);\n    console.log(result);\n}"
        }
    },
    "350": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums1 = $args;\n    std::vector<int> nums2 = $args;\n    std::vector<int> result = intersect(nums1, nums2);\n    \n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public int[] intersect(int[] nums1, int[] nums2) {\n    HashMap<Integer, Integer> countMap = new HashMap<>();\n    ArrayList<Integer> result = new ArrayList<>();\n    \n    for (int num : nums1) {\n        countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n    }\n    \n    for (int num : nums2) {\n        if (countMap.getOrDefault(num, 0) > 0) {\n            result.add(num);\n            countMap.put(num, countMap.get(num) - 1);\n        }\n    }\n\n    return result.stream().mapToInt(i -> i).toArray();\n}\n",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = intersect(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const countMap = {};\n    const result = [];\n    \n    for (const num of nums1) {\n        countMap[num] = (countMap[num] || 0) + 1;\n    }\n    \n    for (const num of nums2) {\n        if (countMap[num] > 0) {\n            result.push(num);\n            countMap[num]--;\n        }\n    }\n\n    console.log(result);\n}"
        }
    },
    "351": {
        "call_functions": {
            "c++": "int main() {\n    int m = $args;\n    int n = $args;\n    int result = numberOfPatterns(m, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numberOfPatterns(int m, int n) {\n    int[][] jumps = new int[10][10];\n    jumps[1][3] = jumps[3][1] = 2;\n    jumps[1][7] = jumps[7][1] = 4;\n    jumps[3][9] = jumps[9][3] = 6;\n    jumps[7][9] = jumps[9][7] = 8;\n    jumps[1][9] = jumps[9][1] = jumps[2][8] = jumps[8][2] = jumps[3][7] = jumps[7][3] = jumps[4][6] = jumps[6][4] = 5;\n\n    boolean[] visited = new boolean[10];\n\n    int cnt = 0;\n    for (int i = m; i <= n; ++i) {\n        cnt += dfs(jumps, visited, 1, i - 1) * 4; // 1, 3, 7, 9\n        cnt += dfs(jumps, visited, 2, i - 1) * 4; // 2, 4, 6, 8\n        cnt += dfs(jumps, visited, 5, i - 1);     // 5\n    }\n\n    return cnt;\n}\n\nprivate int dfs(int[][] jumps, boolean[] visited, int curr, int remaining) {\n    if (remaining < 0) return 0;\n    if (remaining == 0) return 1;\n\n    visited[curr] = true;\n    int cnt = 0;\n    for (int next = 1; next <= 9; ++next) {\n        if (!visited[next] && (jumps[curr][next] == 0 || visited[jumps[curr][next]])) {\n            cnt += dfs(jumps, visited, next, remaining - 1);\n        }\n    }\n    visited[curr] = false;\n\n    return cnt;\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    result = numberOfPatterns(m, n)\n    print(result)",
            "javascript": "function numberOfPatterns(m, n) {\n    const jumps = Array.from({length: 10}, () => Array(10).fill(0));\n    jumps[1][3] = jumps[3][1] = 2;\n    jumps[1][7] = jumps[7][1] = 4;\n    jumps[3][9] = jumps[9][3] = 6;\n    jumps[7][9] = jumps[9][7] = 8;\n    jumps[1][9] = jumps[9][1] = jumps[2][8] = jumps[8][2] = jumps[3][7] = jumps[7][3] = jumps[4][6] = jumps[6][4] = 5;\n\n    const visited = Array(10).fill(false);\n\n    let cnt = 0;\n    for (let i = m; i <= n; ++i) {\n        cnt += dfs(jumps, visited, 1, i - 1) * 4; // 1, 3, 7, 9\n        cnt += dfs(jumps, visited, 2, i - 1) * 4; // 2, 4, 6, 8\n        cnt += dfs(jumps, visited, 5, i - 1);     // 5\n    }\n\n    return cnt;\n}\n\nfunction dfs(jumps, visited, curr, remaining) {\n    if (remaining < 0) return 0;\n    if (remaining === 0) return 1;\n\n    visited[curr] = true;\n    let cnt = 0;\n    for (let next = 1; next <= 9; ++next) {\n        if (!visited[next] && (jumps[curr][next] === 0 || visited[jumps[curr][next]])) {\n            cnt += dfs(jumps, visited, next, remaining - 1);\n        }\n    }\n    visited[curr] = false;\n\n    return cnt;\n}"
        }
    },
    "352": {
        "call_functions": {
            "c++": "void addNum(int val) {\n        if (intervals.empty() || intervals.begin()->first > val + 1) {\n            intervals[val] = val;\n        } else {\n            auto it = intervals.lower_bound(val);\n            auto left = prev(it), right = it;\n            \n            if (left != intervals.end() && left->second + 1 == val) {\n                left->second++;\n                if (right != intervals.end() && val + 1 == right->first) {\n                    left->second = right->second;\n                    intervals.erase(right);\n                }\n            } else if (right != intervals.end() && val + 1 == right->first) {\n                intervals[val] = right->second;\n                intervals.erase(right);\n            } else {\n                intervals[val] = val;\n            }\n        }\n    }\n\n    vector<vector<int>> getIntervals() {\n        vector<vector<int>> result;\n        for (const auto& interval : intervals) {\n            result.push_back({interval.first, interval.second});\n        }\n        return result;\n    }",
            "java": "public void addNum(int val) {\n        if (intervals.isEmpty() || intervals.firstKey() > val + 1) {\n            intervals.put(val, val);\n            return;\n        }\n        Integer lower = intervals.lowerKey(val);\n        Integer upper = intervals.higherKey(val);\n        if (lower != null && intervals.get(lower) + 1 == val) {\n            intervals.put(lower, intervals.get(lower) + 1);\n\n            if (upper != null && val + 1 == upper) {\n                intervals.put(lower, intervals.get(upper));\n                intervals.remove(upper);\n            }\n        } else if (upper != null && val + 1 == upper) {\n            intervals.put(val, intervals.get(upper));\n            intervals.remove(upper);\n        } else {\n            intervals.put(val, val);\n        }\n    }\n\n    public List<List<Integer>> getIntervals() {\n        List<List<Integer>> result = new ArrayList<>();\n        for (Integer key : intervals.keySet()) {\n            List<Integer> range = new ArrayList<>();\n            range.add(key);\n            range.add(intervals.get(key));\n            result.add(range);\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = SummaryRanges()\n    nums = $args[0]\n    for num in nums:\n        obj.addNum(num)\n    result = obj.getIntervals()\n    print(result)",
            "javascript": "class SummaryRanges {\n    constructor() {\n        this.intervals = new Map();\n    }\n\n    addNum(val) {\n        if (!this.intervals.size || [...this.intervals.keys()][0] > val + 1) {\n            this.intervals.set(val, val);\n        } else {\n            let keys = [...this.intervals.keys()];\n            let index = keys.findIndex(key => key > val);\n\n            if (index > 0 && keys[index - 1] <= val && val <= this.intervals.get(keys[index - 1])) {\n                return;\n            } else if (index !== -1 && val + 1 === keys[index]) {\n                this.intervals.set(val, this.intervals.get(keys[index]));\n                this.intervals.delete(keys[index]);\n            } else {\n                this.intervals.set(val, val);\n            }\n        }\n    }\n\n    getIntervals() {\n        return [...this.intervals.entries()].map(([start, end]) => [start, end]);\n    }\n}\n"
        }
    },
    "353": {
        "call_functions": {
            "c++": "int main() {\n    int width = $args;\n    int height = $args;\n    std::vector<std::vector<int>> food = $args;\n\n    SnakeGame game(width, height, food);\n\n    std::string direction;\n    while (std::cin >> direction) {\n        int result = game.move(direction);\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public int move(String direction)",
            "python": "if __name__ == \"__main__\":\n    width = $args[0]\n    height = $args[1]\n    food = $args[2]\n    game = SnakeGame(width, height, food)\n    directions = $args[3]\n    result = []\n    for direction in directions:\n        score = game.move(direction)\n        result.append(score)\n    print(result)",
            "javascript": "function main() {\n    const width = $args[0];\n    const height = $args[1];\n    const food = $args[2];\n\n    const game = new SnakeGame(width, height, food);\n    const direction = $args[3];\n    const result = game.move(direction);\n\n    console.log(result);\n}"
        }
    },
    "354": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint maxEnvelopes(std::vector<std::vector<int>>& envelopes) {\n    std::sort(envelopes.begin(), envelopes.end(), [](const std::vector<int>& a, const std::vector<int>& b) {\n        return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];\n    });\n    \n    std::vector<int> dp;\n    for (const auto& envelope : envelopes) {\n        auto it = std::lower_bound(dp.begin(), dp.end(), envelope[1]);\n        if (it == dp.end()) {\n            dp.push_back(envelope[1]);\n        } else {\n            *it = envelope[1];\n        }\n    }\n    \n    return dp.size();\n}\n\nint main() {\n    std::vector<std::vector<int>> envelopes = $args;\n    int result = maxEnvelopes(envelopes);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int maxEnvelopes(int[][] envelopes) {\n    Arrays.sort(envelopes, new Comparator<int[]>() {\n        public int compare(int[] a, int[] b) {\n            return a[0] == b[0] ? b[1] - a[1] : a[0] - b[0];\n        }\n    });\n\n    int[] dp = new int[envelopes.length];\n    int len = 0;\n    for (int[] envelope : envelopes) {\n        int idx = Arrays.binarySearch(dp, 0, len, envelope[1]);\n        if (idx < 0) {\n            idx = -(idx + 1);\n        }\n        dp[idx] = envelope[1];\n        if (idx == len) {\n            len++;\n        }\n    }\n\n    return len;\n}",
            "python": "if __name__ == \"__main__\":\n    envelopes = $args[0]\n    result = max_envelopes(envelopes)\n    print(result)",
            "javascript": "function main() {\n    const envelopes = $args;\n    envelopes.sort((a, b) => a[0] === b[0] ? b[1] - a[1] : a[0] - b[0]);\n    const dp = [];\n\n    for (const envelope of envelopes) {\n        const idx = lowerBound(dp, envelope[1]);\n        if (idx === dp.length) {\n            dp.push(envelope[1]);\n        } else {\n            dp[idx] = envelope[1];\n        }\n    }\n\n    return dp.length;\n\n    function lowerBound(arr, target) {\n        let low = 0, high = arr.length;\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (arr[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}"
        }
    },
    "355": {
        "call_functions": {
            "c++": "vector<int> result = getNewsFeed($args);",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    userId = $args[0]\n    tweetId = $args[1]\n    twitter = Twitter()\n    twitter.postTweet(userId, tweetId)\n    result = twitter.getNewsFeed(userId)\n    print(result)",
            "javascript": "function main() {\n    const twitter = new Twitter();\n\n    // Call postTweet\n    twitter.postTweet($args[0], $args[1]);\n\n    // Call getNewsFeed\n    const feed = twitter.getNewsFeed($args[2]);\n    console.log(feed);\n\n    // Call follow\n    twitter.follow($args[3], $args[4]);\n\n    // Call unfollow\n    twitter.unfollow($args[5], $args[6]);\n}"
        }
    },
    "356": {
        "call_functions": {
            "c++": "bool isReflected(vector<vector<int>>& points) {\n    int minX = INT_MAX;\n    int maxX = INT_MIN;\n\n    unordered_set<string> pointSet;\n    for(const auto& point : points) {\n        minX = min(minX, point[0]);\n        maxX = max(maxX, point[0]);\n        pointSet.insert(to_string(point[0]) + \",\" + to_string(point[1]));\n    }\n\n    int sum = minX + maxX;\n    for(const auto& point : points) {\n        if(!pointSet.count(to_string(sum - point[0]) + \",\" + to_string(point[1]))) {\n            return false;\n        }\n    }\n\n    return true;\n}",
            "java": "public boolean isReflected(int[][] points) {\n    int minX = Integer.MAX_VALUE;\n    int maxX = Integer.MIN_VALUE;\n    Set<String> pointSet = new HashSet<>();\n\n    for (int[] point : points) {\n        minX = Math.min(minX, point[0]);\n        maxX = Math.max(maxX, point[0]);\n        pointSet.add(point[0] + \",\" + point[1]);\n    }\n\n    int sum = minX + maxX;\n    for (int[] point : points) {\n        if (!pointSet.contains((sum - point[0]) + \",\" + point[1])) {\n            return false;\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = isReflected(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = isReflected(points);\n    console.log(result);\n}"
        }
    },
    "357": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = countNumbersWithUniqueDigits(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int countNumbersWithUniqueDigits(int n) {\n    if (n == 0) return 1;\n\n    int total = 10;\n    int uniqueDigits = 9;\n    int currentAvailableDigits = 9;\n\n    while (n-- > 1 && currentAvailableDigits > 0) {\n        uniqueDigits *= currentAvailableDigits;\n        total += uniqueDigits;\n        currentAvailableDigits--;\n    }\n\n    return total;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = countNumbersWithUniqueDigits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = countNumbersWithUniqueDigits(n);\n    console.log(result);\n}"
        }
    },
    "358": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nstring rearrangeString(string s, int k);\n\nint main() {\n    string s = $args;\n    int k = 3;\n    string result = rearrangeString(s, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String rearrangeString(String s, int k) {\n        if (k == 0) return s;\n\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n\n        PriorityQueue<Map.Entry<Character, Integer>> maxHeap =\n                new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());\n        maxHeap.addAll(freqMap.entrySet());\n\n        StringBuilder result = new StringBuilder();\n        while (!maxHeap.isEmpty()) {\n            List<Map.Entry<Character, Integer>> temp = new ArrayList<>();\n\n            for (int i = 0; i < k && !maxHeap.isEmpty(); i++) {\n                Map.Entry<Character, Integer> curr = maxHeap.poll();\n\n                result.append(curr.getKey());\n                if (curr.getValue() - 1 > 0) {\n                    curr.setValue(curr.getValue() - 1);\n                    temp.add(curr);\n                }\n            }\n\n            maxHeap.addAll(temp);\n\n            if (maxHeap.isEmpty()) break;\n            if (result.length() < s.length()) {\n                int spaces = k - temp.size();\n                while (spaces-- > 0) result.append(\" \");\n            }\n        }\n\n        if (result.length() < s.length()) return \"\";\n        return result.toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = rearrange_string(s, k)\n    print(result)",
            "javascript": "function main() {\n  const s = $args[0];\n  const k = $args[1];\n  const result = rearrangeString(s, k);\n  console.log(result);\n}"
        }
    },
    "360": {
        "call_functions": {
            "c++": "vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {\n    vector<int> result(nums.size());\n    int i = 0, j = nums.size() - 1, index = (a >= 0) ? nums.size() - 1 : 0;\n    \n    while (i <= j) {\n        int left = nums[i] * nums[i] * a + nums[i] * b + c;\n        int right = nums[j] * nums[j] * a + nums[j] * b + c;\n        \n        if (a >= 0) {\n            if (left >= right) {\n                result[index--] = left;\n                i++;\n            } else {\n                result[index--] = right;\n                j--;\n            }\n        } else {\n            if (left <= right) {\n                result[index++] = left;\n                i++;\n            } else {\n                result[index++] = right;\n                j--;\n            }\n        }\n    }\n    return result;\n}",
            "java": "public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\n    int[] result = new int[nums.length];\n    int i = 0, j = nums.length - 1, index = (a >= 0) ? nums.length - 1 : 0;\n    \n    while (i <= j) {\n        int left = nums[i] * nums[i] * a + nums[i] * b + c;\n        int right = nums[j] * nums[j] * a + nums[j] * b + c;\n        \n        if (a >= 0) {\n            if (left >= right) {\n                result[index--] = left;\n                i++;\n            } else {\n                result[index--] = right;\n                j--;\n            }\n        } else {\n            if (left <= right) {\n                result[index++] = left;\n                i++;\n            } else {\n                result[index++] = right;\n                j--;\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    a = $args[1]\n    b = $args[2]\n    c = $args[3]\n    result = sort_transformed_array(nums, a, b, c)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const a = $args[1];\n    const b = $args[2];\n    const c = $args[3];\n    const result = sortTransformedArray(nums, a, b, c);\n    console.log(result);\n}"
        }
    },
    "361": {
        "call_functions": {
            "c++": "int maxKilledEnemies(vector<vector<char>>& grid) {\n    if (grid.empty()) return 0;\n    int m = grid.size(), n = grid[0].size(), result = 0, rowhits = 0;\n    vector<int> colhits(n, 0);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (j == 0 || grid[i][j - 1] == 'W') {\n                rowhits = 0;\n                for (int k = j; k < n && grid[i][k] != 'W'; k++)\n                    rowhits += grid[i][k] == 'E';\n            }\n            if (i == 0 || grid[i - 1][j] == 'W') {\n                colhits[j] = 0;\n                for (int k = i; k < m && grid[k][j] != 'W'; k++)\n                    colhits[j] += grid[k][j] == 'E';\n            }\n            if (grid[i][j] == '0') result = max(result, rowhits + colhits[j]);\n        }\n    }\n    return result;\n}",
            "java": "public int maxKilledEnemies(char[][] grid) {\n    if (grid.length == 0) return 0;\n    int m = grid.length, n = grid[0].length, result = 0, rowhits;\n    int[] colhits = new int[n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (j == 0 || grid[i][j-1] == 'W') {\n                rowhits = 0;\n                for (int k = j; k < n && grid[i][k] != 'W'; k++)\n                    rowhits += grid[i][k] == 'E' ? 1 : 0;\n            }\n            if (i == 0 || grid[i-1][j] == 'W') {\n                colhits[j] = 0;\n                for (int k = i; k < m && grid[k][j] != 'W'; k++)\n                    colhits[j] += grid[k][j] == 'E' ? 1 : 0;\n            }\n            if (grid[i][j] == '0') result = Math.max(result, rowhits + colhits[j]);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = maxKilledEnemies(grid)\n    print(result)",
            "javascript": "function maxKilledEnemies(grid) {\n    if (!grid.length) return 0;\n    let m = grid.length, n = grid[0].length, result = 0, rowhits;\n    let colhits = new Array(n).fill(0);\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (j === 0 || grid[i][j - 1] === 'W') {\n                rowhits = 0;\n                for (let k = j; k < n && grid[i][k] !== 'W'; k++)\n                    rowhits += grid[i][k] === 'E' ? 1 : 0;\n            }\n            if (i === 0 || grid[i - 1][j] === 'W') {\n                colhits[j] = 0;\n                for (let k = i; k < m && grid[k][j] !== 'W'; k++)\n                    colhits[j] += grid[k][j] === 'E' ? 1 : 0;\n            }\n            if (grid[i][j] === '0') result = Math.max(result, rowhits + colhits[j]);\n        }\n    }\n    return result;\n}"
        }
    },
    "362": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    HitCounter hc;\n    int timestamp = $args;\n    hc.hit(timestamp);\n    int result = hc.getHits(timestamp);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getHits(int timestamp) {\n        while (!queue.isEmpty() && queue.peek() <= (timestamp - 300)) {\n            queue.poll();\n        }\n        return queue.size();\n    }",
            "python": "if __name__ == \"__main__\":\n    hit_counter = HitCounter()\n    hits = $args[0]\n    for hit in hits:\n        hit_counter.hit(hit)\n    timestamp = $args[1]\n    result = hit_counter.getHits(timestamp)\n    print(result)",
            "javascript": "function main() {\n  const hitCounter = new HitCounter();\n  const timestamp1 = $args[0];\n  const timestamp2 = $args[1];\n  hitCounter.hit(timestamp1);\n  hitCounter.hit(timestamp2);\n  const result = hitCounter.getHits(timestamp2);\n  console.log(result);\n}"
        }
    },
    "363": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> matrix = $args;\n    int k = 5;\n    int result = maxSumSubmatrix(matrix, k);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int maxSumSubmatrix(int[][] matrix, int k) {\n    int rows = matrix.length;\n    int cols = matrix[0].length;\n    int maxSum = Integer.MIN_VALUE;\n\n    for (int l = 0; l < cols; ++l) {\n        int[] sums = new int[rows];\n        for (int r = l; r < cols; ++r) {\n            for (int i = 0; i < rows; ++i) {\n                sums[i] += matrix[i][r];\n            }\n\n            TreeSet<Integer> sortedSums = new TreeSet<>();\n            sortedSums.add(0);\n            int currSum = 0;\n            for (int sum : sums) {\n                currSum += sum;\n                Integer it = sortedSums.ceiling(currSum - k);\n                if (it != null)\n                    maxSum = Math.max(maxSum, currSum - it);\n                sortedSums.add(currSum);\n            }\n        }\n    }\n\n    return maxSum;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    k = $args[1]\n    result = maxSumSubmatrix(matrix, k)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args[0];\n    const k = $args[1];\n    const result = maxSumSubmatrix(matrix, k);\n    console.log(result);\n}"
        }
    },
    "364": {
        "call_functions": {
            "c++": "#include <variant>\n#include <vector>\n\nusing NestedInteger = std::variant<int, std::vector<std::variant<int, std::vector<NestedInteger>>>>;\n\nint sumHelper(NestedInteger& nested, int depth) {\n    int sum = 0;\n    if (auto pInt = std::get_if<int>(&nested)) {\n        sum += depth * (*pInt);\n    } else {\n        auto& list = std::get<std::vector<NestedInteger>>(nested);\n        for (auto& element : list) {\n            sum += sumHelper(element, depth - 1);\n        }\n    }\n    return sum;\n}\n\nint maxDepth(NestedInteger& nested) {\n    if (std::holds_alternative<int>(nested)) return 0;\n    int depth = 1;\n    for (auto& element : std::get<std::vector<NestedInteger>>(nested)) {\n        depth = std::max(depth, 1 + maxDepth(element));\n    }\n    return depth;\n}\n\nint depthSumInverse(std::vector<NestedInteger>& nestedList) {\n    int max_depth = 1;\n    for (auto& nested : nestedList) {\n        max_depth = std::max(max_depth, 1 + maxDepth(nested));\n    }\n    int sum = 0;\n    for (auto& nested : nestedList) {\n        sum += sumHelper(nested, max_depth);\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<NestedInteger> nestedList = $args;\n    int result = depthSumInverse(nestedList);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int depthSumInverse(List<NestedInteger> nestedList) {\n    int maxDepth = maxDepth(nestedList);\n    return sumHelper(nestedList, maxDepth);\n}\n\nprivate int maxDepth(List<NestedInteger> nestedList) {\n    int depth = 1;\n    for (NestedInteger nested : nestedList) {\n        if (!nested.isInteger()) {\n            depth = Math.max(depth, 1 + maxDepth(nested.getList()));\n        }\n    }\n    return depth;\n}\n\nprivate int sumHelper(List<NestedInteger> nestedList, int depth) {\n    int sum = 0;\n    for (NestedInteger nested : nestedList) {\n        if (nested.isInteger()) {\n            sum += depth * nested.getInteger();\n        } else {\n            sum += sumHelper(nested.getList(), depth - 1);\n        }\n    }\n    return sum;\n}",
            "python": "if __name__ == \"__main__\":\n    nestedList = $args[0]\n    result = depthSumInverse(nestedList)\n    print(result)",
            "javascript": "function depthSumInverse(nestedList) {\n    function maxDepthHelper(nestedList) {\n        let depth = 1;\n        for (let nested of nestedList) {\n            if (Array.isArray(nested)) {\n                depth = Math.max(depth, 1 + maxDepthHelper(nested));\n            }\n        }\n        return depth;\n    }\n    function sumHelper(nestedList, depth) {\n        let sum = 0;\n        for (let nested of nestedList) {\n            if (typeof nested === \"number\") {\n                sum += depth * nested;\n            } else {\n                sum += sumHelper(nested, depth - 1);\n            }\n        }\n        return sum;\n    }\n    let maxDepth = maxDepthHelper(nestedList);\n    return sumHelper(nestedList, maxDepth);\n}"
        }
    },
    "365": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity) {\n    if (targetCapacity > jug1Capacity + jug2Capacity) return false;\n    if (jug1Capacity == targetCapacity || jug2Capacity == targetCapacity \n        || jug1Capacity + jug2Capacity == targetCapacity) return true;\n    return targetCapacity % gcd(jug1Capacity, jug2Capacity) == 0;\n}\n\nint gcd(int a, int b) {\n    while (b) {\n        int tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}\n\nint main() {\n    int jug1Capacity = $args;\n    int jug2Capacity = $args;\n    int targetCapacity = $args;\n    bool result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity) {\n    if (targetCapacity > jug1Capacity + jug2Capacity) return false;\n    if (jug1Capacity == targetCapacity || jug2Capacity == targetCapacity \n        || jug1Capacity + jug2Capacity == targetCapacity) return true;\n    return targetCapacity % gcd(jug1Capacity, jug2Capacity) == 0;\n}\n\nprivate int gcd(int a, int b) {\n    while (b != 0) {\n        int tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    int jug1Capacity = $args;\n    int jug2Capacity = $args;\n    int targetCapacity = $args;\n    boolean result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    jug1Capacity = $args[0]\n    jug2Capacity = $args[1]\n    targetCapacity = $args[2]\n    result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n    print(result)",
            "javascript": "function main() {\n    const jug1Capacity = $args[0];\n    const jug2Capacity = $args[1];\n    const targetCapacity = $args[2];\n    const result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity);\n    console.log(result);\n}"
        }
    },
    "367": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isPerfectSquare(int num) {\n    if (num < 2) return true;\n    long long left = 2, right = num / 2, mid, square;\n    while (left <= right) {\n        mid = left + (right - left) / 2;\n        square = mid * mid;\n        if (square == num) return true;\n        if (square > num) right = mid - 1;\n        else left = mid + 1;\n    }\n    return false;\n}\n\nint main() {\n    int num = $args;\n    bool result = isPerfectSquare(num);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int num = $args;\n    boolean result = isPerfectSquare(num);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = is_perfect_square(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = isPerfectSquare(num);\n    console.log(result);\n}"
        }
    },
    "368": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> largestDivisibleSubset(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    int n = nums.size();\n    vector<int> count(n, 1), prev(n, -1), res;\n    int max_idx = 0;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (nums[i] % nums[j] == 0 && count[i] < count[j] + 1) {\n                count[i] = count[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (count[max_idx] < count[i]) max_idx = i;\n    }\n\n    for (int i = max_idx; i >= 0; i = prev[i]) {\n        res.push_back(nums[i]);\n    }\n\n    return res;\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = largestDivisibleSubset(nums);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> largestDivisibleSubset(int[] nums) {\n    Arrays.sort(nums);\n    int n = nums.length;\n    int[] count = new int[n];\n    int[] prev = new int[n];\n    int max_idx = 0;\n    Arrays.fill(prev, -1);\n    Arrays.fill(count, 1);\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] % nums[j] == 0 && count[i] < count[j] + 1) {\n                count[i] = count[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (count[max_idx] < count[i]) max_idx = i;\n    }\n\n    List<Integer> res = new ArrayList<>();\n    for (int i = max_idx; i >= 0; i = prev[i]) {\n        res.add(nums[i]);\n    }\n\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = largestDivisibleSubset(nums)\n    print(result)",
            "javascript": "function largestDivisibleSubset(nums) {\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    const count = new Array(n).fill(1);\n    const prev = new Array(n).fill(-1);\n    let max_idx = 0;\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (nums[i] % nums[j] === 0 && count[i] < count[j] + 1) {\n                count[i] = count[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (count[max_idx] < count[i]) {\n            max_idx = i;\n        }\n    }\n\n    const res = [];\n    for (let i = max_idx; i >= 0; i = prev[i]) {\n        res.push(nums[i]);\n    }\n\n    return res;\n}"
        }
    },
    "370": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int length = $args;\n    vector<vector<int>> updates = {{1, 3, 2}, {2, 4, 3}, {0, 2, -2}};\n    vector<int> result = getUpdatedArray(length, updates);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        }
    },
    "371": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = $args;\n    int b = $args;\n    int result = add(a, b);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int add(int a, int b) {\n    while (b != 0) {\n        int carry = a & b;\n        a = a ^ b;\n        b = carry << 1;\n    }\n    return a;\n}",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = add(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = add(a, b);\n    console.log(result);\n}"
        }
    },
    "372": {
        "call_functions": {
            "c++": "int main() {\n    int a = $args[0];\n    vector<int> b = $args[1];\n    int result = superPow(a, b);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int superPow(int a, int[] b)",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = superPow(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = superPow(a, b);\n    console.log(result);\n}"
        }
    },
    "373": {
        "call_functions": {
            "c++": "vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n    auto comp = [&nums1, &nums2](pair<int, int> a, pair<int, int> b) {\n        return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];\n    };\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> min_heap(comp);\n    vector<vector<int>> result;\n\n    if (nums1.empty() || nums2.empty()) return result;\n\n    for (int i = 0; i < nums1.size(); ++i) {\n        min_heap.emplace(i, 0);\n    }\n\n    while (k-- && !min_heap.empty()) {\n        auto curr = min_heap.top();\n        min_heap.pop();\n        result.push_back({nums1[curr.first], nums2[curr.second]});\n        if (curr.second + 1 < nums2.size()) {\n            min_heap.emplace(curr.first, curr.second + 1);\n        }\n    }\n    return result;\n}",
            "java": "public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n    PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> (a[0] + a[1]) - (b[0] + b[1]));\n    List<int[]> result = new ArrayList<>();\n\n    if (nums1.length == 0 || nums2.length == 0 || k == 0) {\n        return result;\n    }\n\n    for (int i = 0; i < nums1.length && i < k; i++) {\n        minHeap.offer(new int[]{nums1[i], nums2[0], 0});\n    }\n\n    while (k-- > 0 && !minHeap.isEmpty()) {\n        int[] curr = minHeap.poll();\n        result.add(new int[]{curr[0], curr[1]});\n        if (curr[2] == nums2.length - 1) {\n            continue;\n        }\n        minHeap.offer(new int[]{curr[0], nums2[curr[2] + 1], curr[2] + 1});\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    k = $args[2]\n    result = kSmallestPairs(nums1, nums2, k)\n    print(result)",
            "javascript": "function kSmallestPairs(nums1, nums2, k) {\n    const minHeap = new PriorityQueue(k, (a, b) => a[0] + a[1] - (b[0] + b[1]));\n    const result = [];\n\n    if (nums1.length === 0 || nums2.length === 0 || k === 0) {\n        return result;\n    }\n\n    for (let i = 0; i < nums1.length && i < k; i++) {\n        minHeap.offer([nums1[i], nums2[0], 0]);\n    }\n\n    while (k-- > 0 && !minHeap.isEmpty()) {\n        const curr = minHeap.poll();\n        result.push([curr[0], curr[1]]);\n        if (curr[2] === nums2.length - 1) {\n            continue;\n        }\n        minHeap.offer([curr[0], nums2[curr[2] + 1], curr[2] + 1]);\n    }\n\n    return result;\n}"
        }
    },
    "374": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = guessNumber(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int guessNumber(int n) {\n    int low = 1, high = n;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        int result = guess(mid);\n        if (result == 0) {\n            return mid;\n        } else if (result < 0) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = guessNumber(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = guessNumber(n);\n    console.log(result);\n}"
        }
    },
    "375": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = getMoneyAmount(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getMoneyAmount(int n) {\n    int[][] dp = new int[n + 1][n + 1];\n    for (int i = n - 1; i >= 1; i--) {\n        for (int j = i + 1; j <= n; j++) {\n            int min_cost = Integer.MAX_VALUE;\n            for (int k = i; k < j; k++) {\n                int cost = k + Math.max(dp[i][k - 1], dp[k + 1][j]);\n                min_cost = Math.min(min_cost, cost);\n            }\n            dp[i][j] = min_cost;\n        }\n    }\n    return dp[1][n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = getMoneyAmount(n)\n    print(result)",
            "javascript": "function getMoneyAmount(n) {\n    const dp = Array.from(Array(n + 1), () => Array(n + 1).fill(0));\n    for (let i = n - 1; i >= 1; i--) {\n        for (let j = i + 1; j <= n; j++) {\n            let min_cost = Infinity;\n            for (let k = i; k < j; k++) {\n                const cost = k + Math.max(dp[i][k - 1], dp[k + 1][j]);\n                min_cost = Math.min(min_cost, cost);\n            }\n            dp[i][j] = min_cost;\n        }\n    }\n    return dp[1][n];\n}"
        }
    },
    "376": {
        "call_functions": {
            "c++": "int wiggleMaxLength(vector<int>& nums) {\n    int len = nums.size();\n    if (len < 2) return len;\n\n    int up = 1, down = 1;\n    for (int i = 1; i < len; ++i) {\n        if (nums[i] > nums[i - 1])\n            up = down + 1;\n        else if (nums[i] < nums[i - 1])\n            down = up + 1;\n    }\n    return max(up, down);\n}"
        }
    },
    "377": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int target = $args;\n    int result = combinationSum(nums, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int combinationSum(int[] nums, int target) {\n    int[] dp = new int[target + 1];\n    dp[0] = 1;\n\n    for(int num : nums) {\n        for(int i = num; i <= target; i++) {\n            dp[i] += dp[i - num];\n        }\n    }\n\n    return dp[target];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = combination_sum(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = combinationSum(nums, target);\n    console.log(result);\n}"
        }
    },
    "378": {
        "call_functions": {
            "c++": "#include <queue>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> matrix = $args;\n    int k = $args;\n    int result = kthSmallest(matrix, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int kthSmallest(int[][] matrix, int k) {\n    int n = matrix.length;\n    PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n\n    for (int i = 0; i < n; i++) {\n        minHeap.offer(new int[]{matrix[i][0], i, 0});\n    }\n\n    while (--k > 0) {\n        int[] element = minHeap.poll();\n        int row = element[1];\n        int col = element[2];\n\n        if (col + 1 < n) {\n            minHeap.offer(new int[]{matrix[row][col + 1], row, col + 1});\n        }\n    }\n\n    return minHeap.peek()[0];\n}\n",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    k = $args[1]\n    result = kthSmallest(matrix, k)\n    print(result)",
            "javascript": "function kthSmallest(matrix, k) {\n    const n = matrix.length;\n    const minHeap = [];\n\n    for (let i = 0; i < n; i++) {\n        minHeap.push({ value: matrix[i][0], row: i, col: 0 });\n    }\n\n    minHeap.sort((a, b) => a.value - b.value);\n\n    while (--k) {\n        const { value, row, col } = minHeap.shift();\n\n        if (col + 1 < n) {\n            const newVal = { value: matrix[row][col + 1], row: row, col: col + 1 };\n            insertSorted(minHeap, newVal, (a, b) => a.value - b.value);\n        }\n    }\n\n    return minHeap[0].value;\n}\n\nfunction insertSorted(arr, item, comparator) {\n    const insertIndex = arr.findIndex((el) => comparator(el, item) > 0);\n\n    if (insertIndex === -1) {\n        arr.push(item);\n    } else {\n        arr.splice(insertIndex, 0, item);\n    }\n}\n"
        }
    },
    "379": {
        "call_functions": {
            "c++": "int main() {\n    int maxNumbers = $args;\n    PhoneDirectory pd(maxNumbers);\n    int result1 = pd.get();\n    bool result2 = pd.check(result1);\n    pd.release(result1);\n    cout << result1 << endl;\n    cout << boolalpha << result2 << endl;\n    return 0;\n}",
            "java": "public int get() {\n        if (!released.isEmpty()) {\n            int number = released.poll();\n            available[number] = false;\n            return number;\n        }\n        for (int i = 0; i < available.length; i++) {\n            if (available[i]) {\n                available[i] = false;\n                return i;\n            }\n        }\n        return -1;\n    }",
            "python": "if __name__ == \"__main__\":\n    maxNumbers = $args[0]\n    phoneDirectory = PhoneDirectory(maxNumbers)\n    result1 = phoneDirectory.get()\n    result2 = phoneDirectory.check($args[1])\n    phoneDirectory.release($args[2])\n    print(result1)\n    print(result2)",
            "javascript": "function main() {\n    const maxNumbers = $args;\n    const phoneDirectory = new PhoneDirectory(maxNumbers);\n    const result1 = phoneDirectory.get();\n    const result2 = phoneDirectory.check(0);\n    phoneDirectory.release(0);\n    const result3 = phoneDirectory.get();\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n}"
        }
    },
    "380": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    RandomizedSet obj;\n    bool result;\n\n    // Insert function call\n    result = obj.insert($args);\n    cout << boolalpha << result << endl;\n\n    // Remove function call\n    result = obj.remove($args);\n    cout << boolalpha << result << endl;\n\n    // getRandom function call\n    int random = obj.getRandom();\n    cout << random << endl;\n\n    return 0;\n}",
            "java": "public boolean insert(int val) {\n        if (indexMap.containsKey(val)) return false;\n\n        indexMap.put(val, nums.size());\n        nums.add(val);\n        return true;\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = RandomizedSet()\n    insert_val = $args[0]\n    remove_val = $args[1]\n    insert_result = obj.insert(insert_val)\n    remove_result = obj.remove(remove_val)\n    random_val = obj.getRandom()\n    print(insert_result)\n    print(remove_result)\n    print(random_val)",
            "javascript": "class RandomizedSet {\n    constructor() {\n        this.indexMap = new Map();\n        this.nums = [];\n    }\n\n    insert(val) {\n        if (this.indexMap.has(val)) return false;\n\n        this.indexMap.set(val, this.nums.length);\n        this.nums.push(val);\n        return true;\n    }\n\n    remove(val) {\n        if (!this.indexMap.has(val)) return false;\n\n        const last = this.nums[this.nums.length - 1];\n        this.indexMap.set(last, this.indexMap.get(val));\n        this.nums[this.indexMap.get(val)] = last;\n\n        this.nums.pop();\n        this.indexMap.delete(val);\n        return true;\n    }\n\n    getRandom() {\n        return this.nums[Math.floor(Math.random() * this.nums.length)];\n    }\n}"
        }
    },
    "381": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    RandomizedCollection obj;\n    obj.insert($args);\n    obj.remove($args);\n    int result = obj.getRandom();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getRandom() {\n        int index = (int) (Math.random() * nums.size());\n        return nums.get(index);\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = RandomizedCollection()\n    obj.insert($args[0])\n    obj.remove($args[1])\n    result = obj.getRandom()\n    print(result)",
            "javascript": "function main() {\n    const val = $args;\n    const collection = new RandomizedCollection();\n    const insertResult = collection.insert(val);\n    const removeResult = collection.remove(val);\n    const randomResult = collection.getRandom();\n    console.log(insertResult);\n    console.log(removeResult);\n    console.log(randomResult);\n}"
        }
    },
    "382": {
        "call_functions": {
            "c++": "#include <cstdlib>\n#include <ctime>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    ListNode* head = new ListNode($args);\n    Solution obj(head);\n    int result = obj.getRandom();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getRandom() {\n        ListNode current = head;\n        int result = current.val, i;\n        for (i = 1; current != null; i++) {\n            if (random.nextInt(i) == 0) {\n                result = current.val;\n            }\n            current = current.next;\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    head = ListNode($args[0])\n    obj = Solution(head)\n    result = obj.getRandom()\n    print(result)",
            "javascript": "function getRandom() {\n    let current = this.head;\n    let result = current.val;\n    for (let i = 1; current !== null; i++) {\n        if (Math.floor(Math.random() * i) === 0) {\n            result = current.val;\n        }\n        current = current.next;\n    }\n    return result;\n}"
        }
    },
    "383": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <iostream>\n\nbool canConstruct(std::string ransomNote, std::string magazine) {\n    std::unordered_map<char, int> letterCount;\n    for (char c : magazine) {\n        letterCount[c]++;\n    }\n    \n    for (char c : ransomNote) {\n        if (letterCount[c] == 0) {\n            return false;\n        }\n        letterCount[c]--;\n    }\n\n    return true;\n}\n\nint main() {\n    std::string ransomNote = $args;\n    std::string magazine = $args;\n    bool result = canConstruct(ransomNote, magazine);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean canConstruct(String ransomNote, String magazine) {\n    HashMap<Character, Integer> letterCount = new HashMap<>();\n    \n    for (char c : magazine.toCharArray()) {\n        letterCount.put(c, letterCount.getOrDefault(c, 0) + 1);\n    }\n    \n    for (char c : ransomNote.toCharArray()) {\n        if (!letterCount.containsKey(c) || letterCount.get(c) == 0) {\n            return false;\n        }\n        letterCount.put(c, letterCount.get(c) - 1);\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    ransom_note = $args[0]\n    magazine = $args[1]\n    result = can_construct(ransom_note, magazine)\n    print(result)",
            "javascript": "function main() {\n    const ransomNote = $args[0];\n    const magazine = $args[1];\n    const result = canConstruct(ransomNote, magazine);\n    console.log(result);\n}"
        }
    },
    "384": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <ctime>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    Solution obj(nums);\n    std::vector<int> reset_result = obj.reset();\n    std::vector<int> shuffle_result = obj.shuffle();\n    \n    std::cout << \"Reset Result: \";\n    for (int num : reset_result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    std::cout << \"Shuffle Result: \";\n    for (int num : shuffle_result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public int[] reset() {\n        return original;\n    }",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    obj = Solution(nums)\n    param_1 = obj.reset()\n    param_2 = obj.shuffle()\n    print(param_1)\n    print(param_2)",
            "javascript": "function main() {\n    const nums = $args;\n    const obj = new Solution(nums);\n    const resetResult = obj.reset();\n    const shuffleResult = obj.shuffle();\n    console.log(resetResult);\n    console.log(shuffleResult);\n}"
        }
    },
    "386": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nvoid lexicographicalOrderHelper(int current, int n, std::vector<int>& result) {\n    if (current > n) return;\n\n    result.push_back(current);\n    for (int i = 0; i <= 9; ++i) {\n        lexicographicalOrderHelper(current * 10 + i, n, result);\n    }\n}\n\nstd::vector<int> lexicalOrder(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= 9; ++i) {\n        lexicographicalOrderHelper(i, n, result);\n    }\n    return result;\n}\n\nint main() {\n    int n = $args;\n    std::vector<int> result = lexicalOrder(n);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public static List<Integer> lexicalOrder(int n) {\n    List<Integer> result = new ArrayList<>();\n    for (int i = 1; i <= 9; ++i) {\n        lexicographicalOrderHelper(i, n, result);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = lexical_order(n)\n    print(result)",
            "javascript": "function lexicalOrder(n) {\n    let result = [];\n    for (let i = 1; i <= 9; ++i) {\n        lexicographicalOrderHelper(i, n, result);\n    }\n    return result;\n}"
        }
    },
    "387": {
        "call_functions": {
            "c++": "int main() {\n    std::string s = $args;\n    int result = firstUniqChar(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int firstUniqChar(String s) {\n    HashMap<Character, Integer> charCount = new HashMap<>();\n    for (char c : s.toCharArray())\n        charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n    for (int i = 0; i < s.length(); i++)\n        if (charCount.get(s.charAt(i)) == 1)\n            return i;\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = firstUniqChar(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = firstUniqChar(s);\n    console.log(result);\n}\n"
        }
    },
    "388": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string input = $args;\n    int result = lengthLongestPath(input);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int lengthLongestPath(String input) {\n    Stack<Integer> dirLengthStack = new Stack<>();\n    String[] lines = input.split(\"\\n\");\n    int maxFileLength = 0;\n\n    for (String line : lines) {\n        int level = line.lastIndexOf('\\t') + 1;\n        line = line.substring(level);\n\n        while (dirLengthStack.size() > level) {\n            dirLengthStack.pop();\n        }\n\n        int length = (dirLengthStack.isEmpty()) ? line.length() : dirLengthStack.peek() + line.length() + 1;\n        dirLengthStack.push(length);\n\n        if (line.contains(\".\")) {\n            maxFileLength = Math.max(maxFileLength, length);\n        }\n    }\n\n    return maxFileLength;\n}\n",
            "python": "if __name__ == \"__main__\":\n    input = $args[0]\n    result = length_longest_path(input)\n    print(result)",
            "javascript": "function main() {\n    const input = $args;\n    const result = lengthLongestPath(input);\n    console.log(result);\n}"
        }
    },
    "389": {
        "call_functions": {
            "c++": "char findTheDifference(std::string s, std::string t) {\n    int sum_s = 0, sum_t = 0;\n    for(char c : s) sum_s += c;\n    for(char c : t) sum_t += c;\n    return sum_t - sum_s;\n}\n\nint main() {\n    std::string s = $args[0];\n    std::string t = $args[1];\n    char result = findTheDifference(s, t);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public char findTheDifference(String s, String t) {\n    int sum_s = 0, sum_t = 0;\n    for(char c : s.toCharArray()) sum_s += c;\n    for(char c : t.toCharArray()) sum_t += c;\n    return (char)(sum_t - sum_s);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = findTheDifference(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = findTheDifference(s, t);\n    console.log(result);\n}"
        }
    },
    "390": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = lastRemaining(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int lastRemaining(int n) {\n    boolean direction = true;\n    int head = 1, remaining = n, step = 1;\n\n    while (remaining > 1) {\n        if (direction || remaining % 2 == 1) {\n            head += step;\n        }\n        remaining /= 2;\n        step *= 2;\n        direction = !direction;\n    }\n\n    return head;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = last_remaining(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = lastRemaining(n);\n    console.log(result);\n}"
        }
    },
    "391": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n\nbool isRectangleCover(std::vector<std::vector<int>>& rectangles) {\n    int area = 0;\n    std::set<std::pair<int, int>> points;\n    int lx = INT_MAX, ly = INT_MAX, rx = INT_MIN, ry = INT_MIN;\n\n    for (auto& rect : rectangles) {\n        lx = std::min(lx, rect[0]);\n        ly = std::min(ly, rect[1]);\n        rx = std::max(rx, rect[2]);\n        ry = std::max(ry, rect[3]);\n\n        area += (rect[2] - rect[0]) * (rect[3] - rect[1]);\n\n        std::pair<int, int> p1(rect[0], rect[1]);\n        std::pair<int, int> p2(rect[0], rect[3]);\n        std::pair<int, int> p3(rect[2], rect[1]);\n        std::pair<int, int> p4(rect[2], rect[3]);\n\n        if (!points.erase(p1)) points.insert(p1);\n        if (!points.erase(p2)) points.insert(p2);\n        if (!points.erase(p3)) points.insert(p3);\n        if (!points.erase(p4)) points.insert(p4);\n    }\n\n    if (points.count({lx, ly}) && points.count({lx, ry}) &&\n        points.count({rx, ly}) && points.count({rx, ry}) &&\n        points.size() == 4)\n        return area == (rx - lx) * (ry - ly);\n\n    return false;\n}\n\nint main() {\n    std::vector<std::vector<int>> rectangles = $args;\n    bool result = isRectangleCover(rectangles);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isRectangleCover(int[][] rectangles) {\n        int area = 0;\n        Set<Point> points = new HashSet<>();\n        int lx = Integer.MAX_VALUE, ly = Integer.MAX_VALUE, rx = Integer.MIN_VALUE, ry = Integer.MIN_VALUE;\n\n        for (int[] rect : rectangles) {\n            lx = Math.min(lx, rect[0]);\n            ly = Math.min(ly, rect[1]);\n            rx = Math.max(rx, rect[2]);\n            ry = Math.max(ry, rect[3]);\n\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1]);\n\n            Point p1 = new Point(rect[0], rect[1]);\n            Point p2 = new Point(rect[0], rect[3]);\n            Point p3 = new Point(rect[2], rect[1]);\n            Point p4 = new Point(rect[2], rect[3]);\n\n            if (!points.remove(p1)) points.add(p1);\n            if (!points.remove(p2)) points.add(p2);\n            if (!points.remove(p3)) points.add(p3);\n            if (!points.remove(p4)) points.add(p4);\n        }\n\n        if (points.contains(new Point(lx, ly)) && points.contains(new Point(lx, ry)) &&\n            points.contains(new Point(rx, ly)) && points.contains(new Point(rx, ry)) &&\n            points.size() == 4)\n            return area == (rx - lx) * (ry - ly);\n\n        return false;\n    }",
            "python": "if __name__ == \"__main__\":\n    rectangles = $args[0]\n    result = isRectangleCover(rectangles)\n    print(result)",
            "javascript": "function isRectangleCover(rectangles) {\n    let area = 0;\n    let points = new Set();\n    let lx = Infinity, ly = Infinity, rx = -Infinity, ry = -Infinity;\n\n    for (let rect of rectangles) {\n        lx = Math.min(lx, rect[0]);\n        ly = Math.min(ly, rect[1]);\n        rx = Math.max(rx, rect[2]);\n        ry = Math.max(ry, rect[3]);\n\n        area += (rect[2] - rect[0]) * (rect[3] - rect[1]);\n\n        let p1 = rect[0] + \",\" + rect[1];\n        let p2 = rect[0] + \",\" + rect[3];\n        let p3 = rect[2] + \",\" + rect[1];\n        let p4 = rect[2] + \",\" + rect[3];\n\n        if (points.has(p1)) points.delete(p1);\n        else points.add(p1);\n        if (points.has(p2)) points.delete(p2);\n        else points.add(p2);\n        if (points.has(p3)) points.delete(p3);\n        else points.add(p3);\n        if (points.has(p4)) points.delete(p4);\n        else points.add(p4);\n    }\n\n    return points.size === 4 &&\n           points.has(lx + \",\" + ly) && points.has(lx + \",\" + ry) &&\n           points.has(rx + \",\" + ly) && points.has(rx + \",\" + ry) &&\n           area === (rx - lx) * (ry - ly);\n}"
        }
    },
    "392": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isSubsequence(std::string s, std::string t) {\n    int si = 0, ti = 0;\n\n    while (si < s.size() && ti < t.size()) {\n        if (s[si] == t[ti])\n            si++;\n        ti++;\n    }\n\n    return si == s.size();\n}\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    bool result = isSubsequence(s, t);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    String s = $args[0];\n    String t = $args[1];\n    boolean result = isSubsequence(s, t);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = is_subsequence(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = isSubsequence(s, t);\n    console.log(result);\n}"
        }
    },
    "393": {
        "call_functions": {
            "c++": "bool validUtf8(vector<int>& data) {\n    int count = 0;\n    for (int byte : data) {\n        if (count == 0) { \n            if ((byte >> 5) == 0b110) count = 1;\n            else if ((byte >> 4) == 0b1110) count = 2;\n            else if ((byte >> 3) == 0b11110) count = 3;\n            else if ((byte >> 7)) return false; \n        } else { \n            if ((byte >> 6) != 0b10) return false;\n            count--;\n        }\n    }\n    return count == 0;\n}",
            "java": "public boolean validUtf8(int[] data) {\n    int count = 0;\n    for (int byteValue : data) {\n        if (count == 0) {\n            if ((byteValue >> 5) == 0b110) count = 1;\n            else if ((byteValue >> 4) == 0b1110) count = 2;\n            else if ((byteValue >> 3) == 0b11110) count = 3;\n            else if ((byteValue >> 7) == 1) return false;\n        } else {\n            if ((byteValue >> 6) != 0b10) return false;\n            count--;\n        }\n    }\n    return count == 0;\n}",
            "python": "if __name__ == \"__main__\":\n    data = $args[0]\n    result = validUtf8(data)\n    print(result)",
            "javascript": "function main() {\n    const data = $args;\n    const result = validUtf8(data);\n    console.log(result);\n}"
        }
    },
    "394": {
        "call_functions": {
            "c++": "#include <string>\n#include <stack>\n\nstd::string decodeString(const std::string &s) {\n    std::stack<int> counts;\n    std::stack<std::string> results;\n    std::string current;\n    int ptr = 0;\n\n    while (ptr < s.size()) {\n        if (isdigit(s[ptr])) {\n            int count = 0;\n            while (isdigit(s[ptr])) {\n                count = count * 10 + (s[ptr] - '0');\n                ptr++;\n            }\n            counts.push(count);\n        } else if (s[ptr] == '[') {\n            results.push(current);\n            current = \"\";\n            ptr++;\n        } else if (s[ptr] == ']') {\n            std::string prev = results.top();\n            results.pop();\n            int count = counts.top();\n            counts.pop();\n            for (int i = 0; i < count; i++) {\n                prev += current;\n            }\n            current = prev;\n            ptr++;\n        } else {\n            current += s[ptr];\n            ptr++;\n        }\n    }\n\n    return current;\n}\n\nint main() {\n    std::string s = $args;\n    std::string result = decodeString(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = decodeString(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = decodeString(s);\n    console.log(result);\n}"
        }
    },
    "395": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nint longestSubstring(const std::string& s, int k);\nstd::vector<std::string> split(const std::string& s, char delimiter);\n\nint main() {\n    std::string s = $args[0];\n    int k = $args[1];\n    int result = longestSubstring(s, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int longestSubstring(String s, int k) {\n    if (s == null || s.length() == 0 || k <= 0) return 0;\n\n    Map<Character, Integer> charCount = new HashMap<>();\n    for (char ch : s.toCharArray())\n        charCount.put(ch, charCount.getOrDefault(ch, 0) + 1);\n\n    for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {\n        if (entry.getValue() < k) {\n            int res = 0;\n            for (String str : s.split(Character.toString(entry.getKey())))\n                res = Math.max(res, longestSubstring(str, k));\n            return res;\n        }\n    }\n    return s.length();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = longestSubstring(s, k)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const k = $args[1];\n    const result = longestSubstring(s, k);\n    console.log(result);\n}"
        }
    },
    "396": {
        "call_functions": {
            "c++": "int maxRotateFunction(vector<int>& nums) {\n    int n = nums.size();\n    int total_sum = 0;\n    int f = 0;\n\n    for (int i = 0; i < n; i++) {\n        total_sum += nums[i];\n        f += i * nums[i];\n    }\n\n    int max_f = f;\n    for (int i = 1; i < n; i++) {\n        f += total_sum - n * nums[n - i];\n        max_f = max(max_f, f);\n    }\n\n    return max_f;\n}",
            "java": "public int maxRotateFunction(int[] nums) {\n    int n = nums.length;\n    int total_sum = 0;\n    int f = 0;\n\n    for (int i = 0; i < n; i++) {\n        total_sum += nums[i];\n        f += i * nums[i];\n    }\n\n    int max_f = f;\n    for (int i = 1; i < n; i++) {\n        f += total_sum - (n * nums[n - i]);\n        max_f = Math.max(max_f, f);\n    }\n\n    return max_f;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maxRotateFunction(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = maxRotateFunction(nums);\n    console.log(result);\n}"
        }
    },
    "397": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = minOperations(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int minOperations(int n) {\n    int steps = 0;\n    while(n > 1) {\n        n = (n % 2 == 0) ? n / 2 : n - 1;\n        steps++;\n    }\n    return steps;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = min_operations(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = minOperations(n);\n    console.log(result);\n}"
        }
    },
    "398": {
        "call_functions": {
            "c++": "#include <vector>\n#include <cstdlib>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    Solution obj(nums);\n    int target = 5;\n    int result = obj.pick(target);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "399": {
        "call_functions": {}
    },
    "400": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = findNthDigit(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findNthDigit(int n) {\n    int size = 1;\n    long length = 9;\n    int start = 1;\n\n    while (n > length * size) {\n        n -= length * size;\n        size++;\n        length *= 10;\n        start *= 10;\n    }\n\n    start += (n - 1) / size;\n    String s = Integer.toString(start);\n    return Character.getNumericValue(s.charAt((n - 1) % size));\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findNthDigit(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = findNthDigit(n);\n    console.log(result);\n}"
        }
    },
    "401": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    int turnedOn = $args;\n    vector<string> result = readBinaryWatch(turnedOn);\n    for (string time : result) {\n        cout << time << endl;\n    }\n    return 0;\n}",
            "java": "public List<String> readBinaryWatch(int turnedOn) {\n    List<String> times = new ArrayList<>();\n    for (int h = 0; h < 12; h++) {\n        for (int m = 0; m < 60; m++) {\n            if (Integer.bitCount(h) + Integer.bitCount(m) == turnedOn) {\n                times.add(String.format(\"%d:%02d\", h, m));\n            }\n        }\n    }\n    return times;\n}",
            "python": "if __name__ == \"__main__\":\n    turnedOn = $args[0]\n    result = readBinaryWatch(turnedOn)\n    print(result)",
            "javascript": "function main() {\n    const turnedOn = $args;\n    const result = readBinaryWatch(turnedOn);\n    console.log(result);\n}"
        }
    },
    "402": {
        "call_functions": {
            "c++": "#include <string>\nusing namespace std;\n\nint main() {\n    string num = $args[0];\n    int k = $args[1];\n    string result = removeKDigits(num, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String removeKDigits(String num, int k) {\n    StringBuilder result = new StringBuilder();\n    for (char c : num.toCharArray()) {\n        while (k > 0 && result.length() > 0 && result.charAt(result.length() - 1) > c) {\n            result.setLength(result.length() - 1);\n            k--;\n        }\n        result.append(c);\n    }\n    result.setLength(result.length() - k);\n    while (result.length() > 0 && result.charAt(0) == '0') {\n        result.deleteCharAt(0);\n    }\n    return result.length() == 0 ? \"0\" : result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    k = $args[1]\n    result = remove_k_digits(num, k)\n    print(result)",
            "javascript": "function main() {\n    const num = $args[0];\n    const k = $args[1];\n    const result = removeKDigits(num, k);\n    console.log(result);\n}"
        }
    },
    "403": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nbool canCross(vector<int>& stones) {\n    unordered_map<int, unordered_set<int>> dp;\n    int n = stones.size();\n    for (int stone : stones)\n        dp[stone] = unordered_set<int>();\n    dp[0].insert(0);\n\n    for (int stone : stones) {\n        for (int k : dp[stone]) {\n            for (int jump : {k - 1, k, k + 1}) {\n                if (jump > 0 && dp.count(stone + jump))\n                    dp[stone + jump].insert(jump);\n            }\n        }\n    }\n    return !dp[stones.back()].empty();\n}\n\nint main() {\n    vector<int> stones = $args;\n    bool result = canCross(stones);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean canCross(int[] stones) {\n    Map<Integer, Set<Integer>> dp = new HashMap<>();\n    for (int stone : stones)\n        dp.put(stone, new HashSet<>());\n    dp.get(0).add(0);\n\n    for (int stone : stones) {\n        for (int k : dp.get(stone)) {\n            for (int jump : new int[]{k - 1, k, k + 1}) {\n                if (jump > 0 && dp.containsKey(stone + jump))\n                    dp.get(stone + jump).add(jump);\n            }\n        }\n    }\n    return !dp.get(stones[stones.length - 1]).isEmpty();\n}",
            "python": "if __name__ == \"__main__\":\n    stones = $args[0]\n    result = can_cross(stones)\n    print(result)",
            "javascript": "function main() {\n    const stones = $args;\n    const dp = new Map();\n    stones.forEach(stone => dp.set(stone, new Set()));\n    dp.get(0).add(0);\n\n    for (const stone of stones) {\n        for (const k of dp.get(stone)) {\n            for (const jump of [k - 1, k, k + 1]) {\n                if (jump > 0 && dp.has(stone + jump))\n                    dp.get(stone + jump).add(jump);\n            }\n        }\n    }\n    return dp.get(stones[stones.length - 1]).size > 0;\n}\n"
        }
    },
    "405": {
        "call_functions": {
            "c++": "std::string toHex(int num) {\n    if (num == 0) return \"0\";\n    std::string hex = \"\";\n    unsigned int n = num;\n    char hexDigits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n    while (n) {\n        hex = hexDigits[n & 15] + hex;\n        n >>= 4;\n    }\n    return hex;\n}\n\nint main() {\n    int num = $args;\n    std::string result = toHex(num);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String toHex(int num) {\n    if (num == 0) return \"0\";\n    String hex = \"\";\n    char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n    for (int i = 0; num != 0 && i < 8; ++i) {\n        hex = hexDigits[num & 0xf] + hex;\n        num >>>= 4;\n    }\n    return hex;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = to_hex(num)\n    print(result)",
            "javascript": "function main() {\n  const num = $args;\n  const result = toHex(num);\n  console.log(result);\n}"
        }
    },
    "406": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> people = $args;\n    std::vector<std::vector<int>> result = reconstructQueue(people);\n    for (const std::vector<int>& p : result) {\n        for (int val : p) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}\n",
            "java": "public int[][] reconstructQueue(int[][] people) {\n    Arrays.sort(people, (a, b) -> a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]);\n\n    List<int[]> result = new ArrayList<>();\n    for (int[] p : people) {\n        result.add(p[1], p);\n    }\n    return result.toArray(new int[people.length][2]);\n}",
            "python": "if __name__ == \"__main__\":\n    people = $args[0]\n    result = reconstructQueue(people)\n    print(result)",
            "javascript": "function main() {\n    const people = $args;\n    people.sort((a, b) => {\n        return a[0] !== b[0] ? b[0] - a[0] : a[1] - b[1];\n    });\n\n    const result = [];\n    for (const p of people) {\n        result.splice(p[1], 0, p);\n    }\n    console.log(result);\n}"
        }
    },
    "407": {
        "call_functions": {
            "c++": "int trapRainWater(vector<vector<int>>& heightMap) {\n    int m = heightMap.size(), n = heightMap[0].size();\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    vector<vector<int>> visited(m, vector<int>(n, 0));\n\n    for (int i = 0; i < m; i++) {\n        pq.push({heightMap[i][0], i * n});\n        pq.push({heightMap[i][n - 1], i * n + n - 1});\n        visited[i][0] = visited[i][n - 1] = 1;\n    }\n\n    for (int i = 1; i < n - 1; i++) {\n        pq.push({heightMap[0][i], i});\n        pq.push({heightMap[m - 1][i], (m - 1) * n + i});\n        visited[0][i] = visited[m - 1][i] = 1;\n    }\n\n    int water = 0, maxHeight = 0;\n    vector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    while (!pq.empty()) {\n        auto t = pq.top(); pq.pop();\n        int h = t.first, r = t.second / n, c = t.second % n;\n        maxHeight = max(maxHeight, h);\n        for (auto dir : dirs) {\n            int x = r + dir[0], y = c + dir[1];\n            if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) continue;\n            if (heightMap[x][y] < maxHeight) water += maxHeight - heightMap[x][y];\n            pq.push({heightMap[x][y], x * n + y});\n            visited[x][y] = 1;\n        }\n    }\n\n    return water;\n}",
            "java": "public int trapRainWater(int[][] heightMap) {\n    int m = heightMap.length, n = heightMap[0].length;\n    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n    boolean[][] visited = new boolean[m][n];\n\n    for (int i = 0; i < m; i++) {\n        pq.offer(new int[]{heightMap[i][0], i, 0});\n        pq.offer(new int[]{heightMap[i][n - 1], i, n - 1});\n        visited[i][0] = visited[i][n - 1] = true;\n    }\n\n    for (int i = 1; i < n - 1; i++) {\n        pq.offer(new int[]{heightMap[0][i], 0, i});\n        pq.offer(new int[]{heightMap[m - 1][i], m - 1, i});\n        visited[0][i] = visited[m - 1][i] = true;\n    }\n\n    int water = 0, maxHeight = 0;\n    int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    while (!pq.isEmpty()) {\n        int[] t = pq.poll();\n        int h = t[0], r = t[1], c = t[2];\n        maxHeight = Math.max(maxHeight, h);\n        for (int[] dir : dirs) {\n            int x = r + dir[0], y = c + dir[1];\n            if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) continue;\n            if (heightMap[x][y] < maxHeight) water += maxHeight - heightMap[x][y];\n            pq.offer(new int[]{heightMap[x][y], x, y});\n            visited[x][y] = true;\n        }\n    }\n\n    return water;\n}",
            "python": "if __name__ == \"__main__\":\n    heightMap = $args[0]\n    result = trapRainWater(heightMap)\n    print(result)",
            "javascript": "function trapRainWater(heightMap) {\n    const m = heightMap.length;\n    const n = heightMap[0].length;\n    const pq = [];\n    const visited = Array.from({ length: m }, () => Array(n).fill(false));\n\n    const comparator = (a, b) => a[0] - b[0];\n\n    for (let i = 0; i < m; i++) {\n        pq.push([heightMap[i][0], i, 0], [heightMap[i][n - 1], i, n - 1]);\n        visited[i][0] = visited[i][n - 1] = true;\n    }\n\n    for (let i = 1; i < n - 1; i++) {\n        pq.push([heightMap[0][i], 0, i], [heightMap[m - 1][i], m - 1, i]);\n        visited[0][i] = visited[m - 1][i] = true;\n    }\n\n    pq.sort(comparator);\n\n    let water = 0;\n    let maxHeight = 0;\n    const dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n\n    while (pq.length) {\n        const [h, r, c] = pq.shift();\n        maxHeight = Math.max(maxHeight, h);\n        for (const [dx, dy] of dirs) {\n            const x = r + dx;\n            const y = c + dy;\n            if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) continue;\n            if (heightMap[x][y] < maxHeight) water += maxHeight - heightMap[x][y];\n            pq.push([heightMap[x][y], x, y]);\n            pq.sort(comparator);\n            visited[x][y] = true;\n        }\n    }\n\n    return water;\n}"
        }
    },
    "408": {
        "call_functions": {
            "c++": "bool validWordAbbreviation(string word, string abbr) {\n    int i = 0, j = 0;\n    while (i < word.size() && j < abbr.size()) {\n        if (isdigit(abbr[j])) {\n            if (abbr[j] == '0') return false; // leading zero\n            int num = 0;\n            while (j < abbr.size() && isdigit(abbr[j]))\n                num = num * 10 + (abbr[j++] - '0');\n            i += num;\n        } else {\n            if (word[i++] != abbr[j++]) return false;\n        }\n    }\n    return i == word.size() && j == abbr.size();\n}",
            "java": "public boolean validWordAbbreviation(String word, String abbr) {\n    int i = 0, j = 0;\n    while (i < word.length() && j < abbr.length()) {\n        if (Character.isDigit(abbr.charAt(j))) {\n            if (abbr.charAt(j) == '0') return false; // leading zero\n            int num = 0;\n            while (j < abbr.length() && Character.isDigit(abbr.charAt(j)))\n                num = num * 10 + (abbr.charAt(j++) - '0');\n            i += num;\n        } else {\n            if (word.charAt(i++) != abbr.charAt(j++)) return false;\n        }\n    }\n    return i == word.length() && j == abbr.length();\n}",
            "python": "if __name__ == \"__main__\":\n    word = $args[0]\n    abbr = $args[1]\n    result = validWordAbbreviation(word, abbr)\n    print(result)",
            "javascript": "function main() {\n    const word = $args[0];\n    const abbr = $args[1];\n    const result = validWordAbbreviation(word, abbr);\n    console.log(result);\n}"
        }
    },
    "409": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = longestPalindrome(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int longestPalindrome(String s) {\n    int[] charCount = new int[128];\n    int result = 0;\n    for (char c : s.toCharArray())\n        charCount[c]++;\n    for (int count : charCount) {\n        result += count / 2 * 2;\n        if (result % 2 == 0 && count % 2 == 1)\n            result++;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = longestPalindrome(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = longestPalindrome(s);\n    console.log(result);\n}"
        }
    },
    "410": {
        "call_functions": {
            "c++": "int splitArray(vector<int>& nums, int m) {\n    long long left = 0, right = 0;\n    for (int num : nums) {\n        left = max(left, (long long)num);\n        right += num;\n    }\n\n    while (left < right) {\n        long long mid = (left + right) / 2;\n        int count = 1;\n        long long curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            if (curSum > mid) {\n                curSum = num;\n                count++;\n            }\n        }\n\n        if (count > m) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return (int)left;\n}",
            "java": "public int splitArray(int[] nums, int m) {\n    long left = 0, right = 0;\n    for (int num : nums) {\n        left = Math.max(left, num);\n        right += num;\n    }\n\n    while (left < right) {\n        long mid = (left + right) / 2;\n        int count = 1;\n        long curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            if (curSum > mid) {\n                curSum = num;\n                count++;\n            }\n        }\n\n        if (count > m) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return (int)left;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    m = $args[1]\n    result = splitArray(nums, m)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const m = $args[1];\n    const result = splitArray(nums, m);\n    console.log(result);\n}"
        }
    },
    "411": {
        "call_functions": {
            "c++": "std::string minAbbreviation(std::string target, std::vector<std::string>& dictionary) {\n    std::string ans = target;\n    for (int k = 0; k <= target.length(); k++) {\n        for (int i = 0; i <= target.length() - k; i++) {\n            std::string current = abbreviate(target, k, i);\n            if (current.length() < ans.length()) {\n                bool valid = true;\n                for (const std::string& word : dictionary) {\n                    if (isAbbreviation(current, word)) {\n                        valid = false;\n                        break;\n                    }\n                }\n                if (valid) {\n                    ans = current;\n                }\n            }\n        }\n    }\n    return ans;\n}\n",
            "java": "public static String minAbbreviation(String target, List<String> dictionary) {\n        String ans = target;\n        for (int k = 0; k <= target.length(); k++) {\n            for (int i = 0; i <= target.length() - k; i++) {\n                String current = abbreviate(target, k, i);\n                if (current.length() < ans.length()) {\n                    boolean valid = true;\n                    for (String word : dictionary) {\n                        if (isAbbreviation(current, word)) {\n                            valid = false;\n                            break;\n                        }\n                    }\n                    if (valid) {\n                        ans = current;\n                    }\n                }\n            }\n        }\n        return ans;\n    }",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    dictionary = $args[1]\n    result = min_abbreviation(target, dictionary)\n    print(result)",
            "javascript": "function minAbbreviation(target, dictionary) {\n    let ans = target;\n    for (let k = 0; k <= target.length; k++) {\n        for (let i = 0; i <= target.length - k; i++) {\n            let current = abbreviate(target, k, i);\n            if (current.length < ans.length) {\n                let valid = true;\n                for (const word of dictionary) {\n                    if (isAbbreviation(current, word)) {\n                        valid = false;\n                        break;\n                    }\n                }\n                if (valid) {\n                    ans = current;\n                }\n            }\n        }\n    }\n    return ans;\n}"
        }
    },
    "412": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<std::string> result = fizzBuzz(n);\n    for (const auto& str : result) {\n        std::cout << str << std::endl;\n    }\n    return 0;\n}",
            "java": "public ArrayList<String> fizzBuzz(int n) {\n    ArrayList<String> result = new ArrayList<>();\n    for (int i = 1; i <= n; i++) {\n        if (i % 15 == 0) result.add(\"FizzBuzz\");\n        else if (i % 3 == 0) result.add(\"Fizz\");\n        else if (i % 5 == 0) result.add(\"Buzz\");\n        else result.add(Integer.toString(i));\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = fizzBuzz(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = fizzBuzz(n);\n    console.log(result);\n}"
        }
    },
    "413": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = numberOfArithmeticSlices(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numberOfArithmeticSlices(int[] nums) {\n    int n = nums.length, count = 0, cur = 0;\n    for (int i = 2; i < n; ++i) {\n        if (nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) {\n            cur++;\n            count += cur;\n        } else {\n            cur = 0;\n        }\n    }\n    return count;\n}"
        }
    },
    "414": {
        "call_functions": {
            "c++": "#include <set>\n\nint main() {\n    vector<int> nums = $args;\n    int result = thirdMax(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int thirdMax(int[] nums) {\n    TreeSet<Integer> top3 = new TreeSet<>();\n    for (int num : nums) {\n        top3.add(num);\n        if (top3.size() > 3) {\n            top3.remove(top3.first());\n        }\n    }\n    return top3.size() == 3 ? top3.first() : top3.last();\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = third_max(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = thirdMax(nums);\n    console.log(result);\n}"
        }
    },
    "415": {
        "call_functions": {
            "c++": "std::string addStrings(std::string num1, std::string num2) {\n    int i = num1.size() - 1, j = num2.size() - 1, carry = 0;\n    std::string result;\n\n    while (i >= 0 || j >= 0 || carry) {\n        int sum = carry;\n\n        if (i >= 0) {\n            sum += num1[i] - '0';\n            --i;\n        }\n        if (j >= 0) {\n            sum += num2[j] - '0';\n            --j;\n        }\n\n        carry = sum / 10;\n        result.push_back(sum % 10 + '0');\n    }\n\n    std::reverse(result.begin(), result.end());\n    return result;\n}",
            "java": "public String addStrings(String num1, String num2) {\n    int i = num1.length() - 1, j = num2.length() - 1, carry = 0;\n    StringBuilder result = new StringBuilder();\n\n    while (i >= 0 || j >= 0 || carry != 0) {\n        int sum = carry;\n\n        if (i >= 0) {\n            sum += num1.charAt(i) - '0';\n            --i;\n        }\n        if (j >= 0) {\n            sum += num2.charAt(j) - '0';\n            --j;\n        }\n\n        carry = sum / 10;\n        result.append(sum % 10);\n    }\n\n    return result.reverse().toString();\n}",
            "python": "if __name__ == \"__main__\":\n    num1 = $args[0]\n    num2 = $args[1]\n    result = addStrings(num1, num2)\n    print(result)",
            "javascript": "function main() {\n    const num1 = $args[0];\n    const num2 = $args[1];\n    const result = addStrings(num1, num2);\n    console.log(result);\n}"
        }
    },
    "416": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nbool canPartition(vector<int>& nums) {\n    int sum = 0;\n    for (int num : nums) sum += num;\n    \n    if (sum % 2 != 0) return false;\n    \n    int target = sum / 2;\n    vector<bool> dp(target + 1, false);\n    dp[0] = true;\n    \n    for (int num : nums) {\n        for (int i = target; i >= num; i--) {\n            dp[i] = dp[i] || dp[i - num];\n        }\n    }\n    return dp[target];\n}",
            "java": "public boolean canPartition(int[] nums) {\n    int sum = 0;\n    for (int num : nums) sum += num;\n    \n    if (sum % 2 != 0) return false;\n    \n    int target = sum / 2;\n    boolean[] dp = new boolean[target + 1];\n    dp[0] = true;\n    \n    for (int num : nums) {\n        for (int i = target; i >= num; i--) {\n            dp[i] = dp[i] || dp[i - num];\n        }\n    }\n    return dp[target];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = canPartition(nums)\n    print(result)",
            "javascript": "function canPartition(nums) {\n    const sum = nums.reduce((a, b) => a + b);\n    if (sum % 2 !== 0) return false;\n\n    const target = sum / 2;\n    const dp = new Array(target + 1).fill(false);\n    dp[0] = true;\n\n    for (const num of nums) {\n        for (let i = target; i >= num; i--) {\n            dp[i] = dp[i] || dp[i - num];\n        }\n    }\n    return dp[target];\n}\n"
        }
    },
    "417": {
        "call_functions": {
            "c++": "vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n    int m = heights.size();\n    int n = heights[0].size();\n    vector<vector<bool>> pacific(m, vector<bool>(n, false));\n    vector<vector<bool>> atlantic(m, vector<bool>(n, false));\n\n    for (int r = 0; r < m; ++r) {\n        dfs(heights, r, 0, -1, pacific);\n        dfs(heights, r, n - 1, -1, atlantic);\n    }\n    for (int c = 0; c < n; ++c) {\n        dfs(heights, 0, c, -1, pacific);\n        dfs(heights, m - 1, c, -1, atlantic);\n    }\n    vector<vector<int>> result;\n    for (int r = 0; r < m; ++r) {\n        for (int c = 0; c < n; ++c) {\n            if (pacific[r][c] && atlantic[r][c]) {\n                result.push_back({r, c});\n            }\n        }\n    }\n    return result;\n}",
            "java": "public List<int[]> pacificAtlantic(int[][] heights) {\n    int m = heights.length;\n    int n = heights[0].length;\n    boolean[][] pacific = new boolean[m][n];\n    boolean[][] atlantic = new boolean[m][n];\n\n    for (int r = 0; r < m; ++r) {\n        dfs(heights, r, 0, -1, pacific);\n        dfs(heights, r, n - 1, -1, atlantic);\n    }\n    for (int c = 0; c < n; ++c) {\n        dfs(heights, 0, c, -1, pacific);\n        dfs(heights, m - 1, c, -1, atlantic);\n    }\n    List<int[]> result = new ArrayList<>();\n    for (int r = 0; r < m; ++r) {\n        for (int c = 0; c < n; ++c) {\n            if (pacific[r][c] && atlantic[r][c]) {\n                result.add(new int[]{r, c});\n            }\n        }\n    }\n    return result;\n}\n\nprivate void dfs(int[][] heights, int r, int c, int prevHeight, boolean[][] visited) {\n    if (r < 0 || r >= heights.length || c < 0 || c >= heights[0].length) return;\n    if (heights[r][c] >= prevHeight && !visited[r][c]) {\n        visited[r][c] = true;\n        dfs(heights, r - 1, c, heights[r][c], visited);\n        dfs(heights, r + 1, c, heights[r][c], visited);\n        dfs(heights, r, c - 1, heights[r][c], visited);\n        dfs(heights, r, c + 1, heights[r][c], visited);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    heights = $args[0]\n    result = pacificAtlantic(heights)\n    print(result)",
            "javascript": "function pacificAtlantic(heights) {\n    function dfs(r, c, prevHeight, visited) {\n        if (r < 0 || r >= heights.length || c < 0 || c >= heights[0].length) return;\n        if (heights[r][c] >= prevHeight && !visited[r][c]) {\n            visited[r][c] = true;\n            dfs(r - 1, c, heights[r][c], visited);\n            dfs(r + 1, c, heights[r][c], visited);\n            dfs(r, c - 1, heights[r][c], visited);\n            dfs(r, c + 1, heights[r][c], visited);\n        }\n    }\n\n    const m = heights.length;\n    const n = heights[0].length;\n    const pacific = Array.from(Array(m), () => new Array(n).fill(false));\n    const atlantic = Array.from(Array(m), () => new Array(n).fill(false));\n\n    for (let r = 0; r < m; ++r) {\n        dfs(r, 0, -1, pacific);\n        dfs(r, n - 1, -1, atlantic);\n    }\n    for (let c = 0; c < n; ++c) {\n        dfs(0, c, -1, pacific);\n        dfs(m - 1, c, -1, atlantic);\n    }\n    const result = [];\n    for (let r = 0; r < m; ++r) {\n        for (let c = 0; c < n; ++c) {\n            if (pacific[r][c] && atlantic[r][c]) {\n                result.push([r, c]);\n            }\n        }\n    }\n    return result;\n}"
        }
    },
    "418": {
        "call_functions": {
            "c++": "int main() {\n    vector<string> sentence = $args;\n    int rows = 3;\n    int cols = 6;\n    int result = wordsTyping(sentence, rows, cols);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int wordsTyping(String[] sentence, int rows, int cols) {\n    int totalChars = 0;\n    for (String word : sentence) {\n        totalChars += word.length() + 1;\n    }\n\n    int result = 0;\n    int index = 0;\n    for (int r = 0; r < rows; ++r) {\n        int remainingCols = cols;\n        while (true) {\n            int wordLen = sentence[index].length();\n            if (remainingCols >= wordLen) {\n                remainingCols -= wordLen + 1;\n                index = (index + 1) % sentence.length;\n                if (index == 0) result++;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    sentence = $args[0]\n    rows = $args[1]\n    cols = $args[2]\n    result = words_typing(sentence, rows, cols)\n    print(result)",
            "javascript": "function main() {\n    const sentence = $args[0];\n    const rows = $args[1];\n    const cols = $args[2];\n    const result = wordsTyping(sentence, rows, cols);\n    console.log(result);\n}"
        }
    },
    "419": {
        "call_functions": {
            "c++": "int countBattleships(vector<vector<char>>& board) {\n    int count = 0;\n    for (int i = 0; i < board.size(); i++) {\n        for (int j = 0; j < board[i].size(); j++) {\n            if (board[i][j] == 'X' &&\n                (i == 0 || board[i - 1][j] == '.') &&\n                (j == 0 || board[i][j - 1] == '.')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
            "java": "public int countBattleships(char[][] board) {\n    int count = 0;\n    for (int i = 0; i < board.length; i++) {\n        for (int j = 0; j < board[i].length; j++) {\n            if (board[i][j] == 'X' &&\n                (i == 0 || board[i - 1][j] == '.') &&\n                (j == 0 || board[i][j - 1] == '.')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = countBattleships(board)\n    print(result)",
            "javascript": "function main() {\n    const board = $args;\n    const result = countBattleships(board);\n    console.log(result);\n}"
        }
    },
    "420": {
        "call_functions": {
            "c++": "#include <cctype>\n#include <algorithm>\n\nint main() {\n    string password = $args;\n    int result = strongPassword(password);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int strongPassword(String password) {\n    int missingLower = 1, missingUpper = 1, missingDigit = 1;\n    int total = password.length();\n    for (char c : password.toCharArray()) {\n        if (Character.isLowerCase(c)) missingLower = 0;\n        if (Character.isUpperCase(c)) missingUpper = 0;\n        if (Character.isDigit(c)) missingDigit = 0;\n    }\n    int missing = missingLower + missingUpper + missingDigit;\n    if (total < 6) return Math.max(missing, 6 - total);\n    if (total > 20) return missing + total - 20;\n    return missing;\n}",
            "python": "if __name__ == \"__main__\":\n    password = $args[0]\n    result = strong_password(password)\n    print(result)",
            "javascript": "function strongPassword(password) {\n    let missingLower = 1, missingUpper = 1, missingDigit = 1;\n    let total = password.length;\n    for (const c of password) {\n        if (c.match(/[a-z]/)) missingLower = 0;\n        if (c.match(/[A-Z]/)) missingUpper = 0;\n        if (c.match(/[0-9]/)) missingDigit = 0;\n    }\n    let missing = missingLower + missingUpper + missingDigit;\n    if (total < 6) return Math.max(missing, 6 - total);\n    if (total > 20) return missing + total - 20;\n    return missing;\n}"
        }
    },
    "421": {
        "call_functions": {
            "c++": "int findMaximumXOR(vector<int>& nums) {\n    int max_xor = 0;\n    int mask = 0;\n\n    for (int i = 31; i >= 0; i--) {\n        mask |= (1 << i);\n        unordered_set<int> prefixes;\n\n        for (int num : nums) {\n            prefixes.insert(num & mask);\n        }\n\n        int possible_max = max_xor | (1 << i);\n\n        for (int prefix : prefixes) {\n            if (prefixes.count(prefix ^ possible_max)) {\n                max_xor = possible_max;\n                break;\n            }\n        }\n    }\n\n    return max_xor;\n}",
            "java": "public int findMaximumXOR(int[] nums) {\n    int max_xor = 0, mask = 0;\n    \n    for (int i = 31; i >= 0; i--) {\n        mask |= (1 << i);\n        HashSet<Integer> prefixes = new HashSet<>();\n        \n        for (int num : nums) {\n            prefixes.add(num & mask);\n        }\n        \n        int possible_max = max_xor | (1 << i);\n        \n        for (int prefix : prefixes) {\n            if (prefixes.contains(prefix ^ possible_max)) {\n                max_xor = possible_max;\n                break;\n            }\n        }\n    }\n    \n    return max_xor;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findMaximumXOR(nums)\n    print(result)",
            "javascript": "function findMaximumXOR(nums) {\n    let max_xor = 0, mask = 0;\n    \n    for (let i = 31; i >= 0; i--) {\n        mask |= (1 << i);\n        let prefixes = new Set();\n        \n        for (let num of nums) {\n            prefixes.add(num & mask);\n        }\n        \n        let possible_max = max_xor | (1 << i);\n\n        for (let prefix of prefixes) {\n            if (prefixes.has(prefix ^ possible_max)) {\n                max_xor = possible_max;\n                break;\n            }\n        }\n    }\n    \n    return max_xor;\n}"
        }
    },
    "422": {
        "call_functions": {
            "c++": "bool validWordSquare(vector<string>& words) {\n    for (int i = 0; i < words.size(); ++i) {\n        for (int j = 0; j < words[i].size(); ++j) {\n            if (j >= words.size() || i >= words[j].size() || words[i][j] != words[j][i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
            "java": "public boolean validWordSquare(List<String> words) {\n    for (int i = 0; i < words.size(); i++) {\n        for (int j = 0; j < words.get(i).length(); j++) {\n            if (j >= words.size() || i >= words.get(j).length() || words.get(i).charAt(j) != words.get(j).charAt(i)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = valid_word_square(words)\n    print(result)",
            "javascript": "function main() {\n    const words = $args;\n    const result = validWordSquare(words);\n    console.log(result);\n}"
        }
    },
    "423": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    string result = find_digits_in_ascending_order(s);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "424": {
        "call_functions": {
            "c++": "#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int k = $args;\n    int result = characterReplacement(s, k);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int characterReplacement(String s, int k) {\n    int n = s.length();\n    int left = 0, right = 0, maxFreq = 0, result = 0;\n    int[] freq = new int[26];\n    \n    for (right = 0; right < n; right++) {\n        freq[s.charAt(right) - 'A']++;\n        maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);\n        \n        if (right - left + 1 - maxFreq > k) {\n            freq[s.charAt(left) - 'A']--;\n            left++;\n        }\n        \n        result = Math.max(result, right - left + 1);\n    }\n    \n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = characterReplacement(s, k)\n    print(result)",
            "javascript": "function characterReplacement(s, k) {\n    const n = s.length;\n    let left = 0, right = 0, maxFreq = 0, result = 0;\n    const freq = new Array(26).fill(0);\n\n    for (right = 0; right < n; right++) {\n        freq[s.charCodeAt(right) - \"A\".charCodeAt(0)]++;\n        maxFreq = Math.max(maxFreq, freq[s.charCodeAt(right) - \"A\".charCodeAt(0)]);\n\n        if (right - left + 1 - maxFreq > k) {\n            freq[s.charCodeAt(left) - \"A\".charCodeAt(0)]--;\n            left++;\n        }\n\n        result = Math.max(result, right - left + 1);\n    }\n    \n    return result;\n}"
        }
    },
    "425": {
        "call_functions": {
            "c++": "std::vector<std::vector<std::string>> wordSquares(std::vector<std::string>& words) {\n    std::vector<std::vector<std::string>> res;\n    if(words.empty()) return res;\n    std::unordered_map<std::string, std::vector<std::string>> mapping;\n    for(const auto& w: words){\n        for(int i=0; i<=w.size(); i++){\n            mapping[w.substr(0, i)].push_back(w);\n        }\n    }\n    for(const auto& w: words){\n        std::vector<std::string> sq(words[0].size(), \"\");\n        sq[0] = w;\n        build(1, words, sq, mapping, res);\n    }\n    return res;\n}",
            "java": "public List<List<String>> wordSquares(String[] words) {\n    Map<String, List<String>> prefixMap = buildPrefixMap(words);\n    List<List<String>> squares = new ArrayList<>();\n    for (String word : words) {\n        List<String> square = new ArrayList<>();\n        square.add(word);\n        searchSquares(1, words[0].length(), square, prefixMap, squares);\n    }\n    return squares;\n}\n\nprivate void searchSquares(int index, int length, List<String> square, Map<String, List<String>> prefixMap, List<List<String>> squares) {\n    if (index == length) {\n        squares.add(new ArrayList<>(square));\n        return;\n    }\n    String prefix = buildPrefix(square, index);\n    for (String word : prefixMap.getOrDefault(prefix, new ArrayList<>())) {\n        square.add(word);\n        searchSquares(index + 1, length, square, prefixMap, squares);\n        square.remove(square.size() - 1);\n    }\n}\n\nprivate String buildPrefix(List<String> square, int index) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < index; i++) {\n        sb.append(square.get(i).charAt(index));\n    }\n    return sb.toString();\n}\n\nprivate Map<String, List<String>> buildPrefixMap(String[] words) {\n    Map<String, List<String>> prefixMap = new HashMap<>();\n    for (String word : words) {\n        for (int i = 0; i <= word.length(); i++) {\n            String prefix = word.substring(0, i);\n            if (!prefixMap.containsKey(prefix)) {\n                prefixMap.put(prefix, new ArrayList<>());\n            }\n            prefixMap.get(prefix).add(word);\n        }\n    }\n    return prefixMap;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = wordSquares(words)\n    print(result)",
            "javascript": "function wordSquares(words) {\n    const buildPrefixMap = words => {\n        const prefixMap = new Map();\n        for (const word of words) {\n            for (let i = 0; i <= word.length; i++) {\n                const prefix = word.slice(0, i);\n                if (!prefixMap.has(prefix)) {\n                    prefixMap.set(prefix, []);\n                }\n                prefixMap.get(prefix).push(word);\n            }\n        }\n        return prefixMap;\n    };\n\n    const search = (row, square, prefixMap, res) => {\n        if (row === square.length) {\n            res.push(square.slice());\n            return;\n        }\n        const prefix = square.slice(0, row).map((word, i) => word[row]).join('');\n        for (const word of prefixMap.get(prefix) || []) {\n            square[row] = word;\n            search(row + 1, square, prefixMap, res);\n        }\n    };\n\n    const prefixMap = buildPrefixMap(words);\n    const res = [];\n    for (const word of words) {\n        search(1, [word], prefixMap, res);\n    }\n    return res;\n}"
        }
    },
    "433": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <queue>\n#include <unordered_set>\n\nint main() {\n    std::string start = $args;\n    std::string end = $args;\n    std::vector<std::string> bank = $args;\n    int result = minMutation(start, end, bank);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int minMutation(String start, String end, String[] bank) {\n    Queue<String> q = new LinkedList<>();\n    q.offer(start);\n    Set<String> visited = new HashSet<>();\n    visited.add(start);\n    int depth = 0;\n    \n    while (!q.isEmpty()) {\n        int levelSize = q.size();\n        for (int i = 0; i < levelSize; i++) {\n            String current = q.poll();\n            if (current.equals(end)) return depth;\n            \n            for (String gene : bank) {\n                if (!visited.contains(gene)) {\n                    int diff = 0;\n                    for (int j = 0; j < 8; j++) {\n                        if (current.charAt(j) != gene.charAt(j)) diff++;\n                        if (diff > 1) break;\n                    }\n                    \n                    if (diff == 1) {\n                        q.offer(gene);\n                        visited.add(gene);\n                    }\n                }\n            }\n        }\n        depth++;\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    start = $args[0]\n    end = $args[1]\n    bank = $args[2]\n    result = minMutation(start, end, bank)\n    print(result)",
            "javascript": "function minMutation(start, end, bank) {\n    const q = [start];\n    const visited = new Set([start]);\n    let depth = 0;\n\n    while (q.length) {\n        const levelSize = q.length;\n        for (let i = 0; i < levelSize; i++) {\n            const current = q.shift();\n            if (current === end) return depth;\n\n            for (const gene of bank) {\n                if (!visited.has(gene)) {\n                    let diff = 0;\n                    for (let j = 0; j < 8; j++) {\n                        if (current[j] !== gene[j]) diff++;\n                        if (diff > 1) break;\n                    }\n\n                    if (diff === 1) {\n                        q.push(gene);\n                        visited.add(gene);\n                    }\n                }\n            }\n        }\n        depth++;\n    }\n    return -1;\n}"
        }
    },
    "434": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    int result = countSegments(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int countSegments(String s) {\n    if (s == null || s.trim().length() == 0) {\n        return 0;\n    }\n    String[] segments = s.trim().split(\"\\\\s+\");\n    return segments.length;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = count_segments(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = countSegments(s);\n    console.log(result);\n}"
        }
    },
    "435": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nbool compare(const std::vector<int>& a, const std::vector<int>& b) {\n    return a[1] < b[1];\n}\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    int result = eraseOverlapIntervals(intervals);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int eraseOverlapIntervals(int[][] intervals) {\n    if (intervals.length == 0) return 0;\n\n    Arrays.sort(intervals, (a, b) -> a[1] - b[1]);\n\n    int count = 0;\n    int prev_end = intervals[0][1];\n\n    for (int i = 1; i < intervals.length; i++) {\n        if (intervals[i][0] < prev_end) {\n            count++;\n        } else {\n            prev_end = intervals[i][1];\n        }\n    }\n\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = eraseOverlapIntervals(intervals)\n    print(result)",
            "javascript": "function main() {\n    const intervals = $args;\n    const result = eraseOverlapIntervals(intervals);\n    console.log(result);\n}"
        }
    },
    "436": {
        "call_functions": {
            "c++": "#include <vector>\n#include <map>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    std::vector<int> result = findRightInterval(intervals);\n    for(int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] findRightInterval(int[][] intervals) {\n    int[] res = new int[intervals.length];\n    TreeMap<Integer, Integer> starts = new TreeMap<>();\n\n    for(int i = 0; i < intervals.length; i++) {\n        starts.put(intervals[i][0], i);\n    }\n\n    for(int i = 0; i < intervals.length; i++) {\n        Map.Entry<Integer, Integer> right = starts.ceilingEntry(intervals[i][1]);\n        res[i] = right == null ? -1 : right.getValue();\n    }\n\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = findRightInterval(intervals)\n    print(result)",
            "javascript": "function findRightInterval(intervals) {\n    const starts = new Map();\n    const res = [];\n\n    intervals.forEach((interval, index) => {\n        starts.set(interval[0], index);\n    });\n\n    for (const interval of intervals) {\n        const rightKeys = [...starts.keys()].filter(x => x >= interval[1]);\n        const right = Math.min(...rightKeys);\n        res.push(right === Infinity ? -1 : starts.get(right));\n    }\n\n    return res;\n}"
        }
    },
    "437": {
        "call_functions": {
            "c++": "int pathSum(TreeNode* root, int targetSum) {\n    if (root == nullptr) {\n        return 0;\n    }\n\n    return pathSumHelper(root, targetSum, 0) + pathSum(root->left, targetSum) + pathSum(root->right, targetSum);\n}",
            "java": "public int pathSum(TreeNode root, int targetSum)",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    target_sum = $args[1]\n    result = path_sum(root, target_sum)\n    print(result)",
            "javascript": "function main() {\n    const root = $args[0];\n    const targetSum = $args[1];\n    const result = pathSum(root, targetSum);\n    console.log(result);\n}"
        }
    },
    "438": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nstd::vector<int> findAnagrams(std::string s, std::string p);\n\nint main() {\n    std::string s = $args;\n    std::string p = $args;\n    std::vector<int> result = findAnagrams(s, p);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public List<Integer> findAnagrams(String s, String p) {\n    List<Integer> result = new ArrayList<>();\n    if (s.length() < p.length()) return result;\n\n    int[] s_count = new int[26];\n    int[] p_count = new int[26];\n    for (char c : p.toCharArray()) p_count[c - 'a']++;\n\n    for (int i = 0; i < s.length(); i++) {\n        s_count[s.charAt(i) - 'a']++;\n        if (i >= p.length()) s_count[s.charAt(i - p.length()) - 'a']--;\n        if (java.util.Arrays.equals(s_count, p_count)) result.add(i - p.length() + 1);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    p = $args[1]\n    result = find_anagrams(s, p)\n    print(result)",
            "javascript": "function findAnagrams(s, p) {\n    if (s.length < p.length) return [];\n\n    const s_count = new Array(26).fill(0);\n    const p_count = new Array(26).fill(0);\n    for (const c of p) p_count[c.charCodeAt(0) - \"a\".charCodeAt(0)]++;\n\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        s_count[s.charCodeAt(i) - \"a\".charCodeAt(0)]++;\n        if (i >= p.length) s_count[s.charCodeAt(i - p.length) - \"a\".charCodeAt(0)]--;\n        if (s_count.join(\",\") === p_count.join(\",\")) result.push(i - p.length + 1);\n    }\n\n    return result;\n}"
        }
    },
    "439": {
        "call_functions": {
            "c++": "#include <string>\n#include <stack>\n\nint main() {\n    std::string expression = $args;\n    std::string result = parseTernary(expression);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String parseTernary(String expression) {\n    Stack<Character> stk = new Stack<>();\n    for (int i = expression.length() - 1; i >= 0; --i) {\n        char c = expression.charAt(i);\n        if (!stk.isEmpty() && stk.peek() == '?') {\n            stk.pop(); // Pop '?'\n            char first = stk.pop();\n            stk.pop(); // Pop ':'\n            char second = stk.pop();\n            stk.push(c == 'T' ? first : second);\n        } else {\n            stk.push(c);\n        }\n    }\n    return String.valueOf(stk.peek());\n}",
            "python": "if __name__ == \"__main__\":\n    expression = $args[0]\n    result = parseTernary(expression)\n    print(result)",
            "javascript": "function main() {\n    const expression = $args;\n    const result = parseTernary(expression);\n    console.log(result);\n}"
        }
    },
    "440": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int k = $args;\n    int result = findKthNumber(n, k);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int findKthNumber(int n, int k) {\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        nums.sort((a, b) -> String.valueOf(a).compareTo(String.valueOf(b)));\n        return nums.get(k - 1);\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = find_kth_number(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const k = $args[1];\n    const result = findKthNumber(n, k);\n    console.log(result);\n}"
        }
    },
    "441": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = arrangeCoins(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int arrangeCoins(int n) {\n    int k = 0;\n    while (n > k) {\n        k++;\n        n -= k;\n    }\n    return k;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = arrange_coins(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = arrangeCoins(n);\n    console.log(result);\n}"
        }
    },
    "442": {
        "call_functions": {
            "c++": "#include <vector>\n#include <cmath>\n#include <iostream>\n\nstd::vector<int> findDuplicates(std::vector<int>& nums);\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<int> result = findDuplicates(nums);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public List<Integer> findDuplicates(int[] nums) {\n    List<Integer> duplicates = new ArrayList<>();\n    for (int i = 0; i < nums.length; i++) {\n        int index = Math.abs(nums[i]) - 1;\n        if (nums[index] < 0) {\n            duplicates.add(Math.abs(nums[i]));\n        } else {\n            nums[index] *= -1;\n        }\n    }\n    return duplicates;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = find_duplicates(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findDuplicates(nums);\n    console.log(result);\n}"
        }
    },
    "443": {
        "call_functions": {
            "c++": "int compress(vector<char>& chars) {\n    int index = 0, count;\n    for(int i = 0; i < chars.size(); i += count) {\n        count = 1;\n        while(i + count < chars.size() && chars[i] == chars[i + count]) {\n            count++;\n        }\n        chars[index++] = chars[i];\n        if(count > 1) {\n            for(char c : to_string(count)) {\n                chars[index++] = c;\n            }\n        }\n    }\n    return index;\n}\n\nint main() {\n    vector<char> chars = $args;\n    int result = compress(chars);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int compress(char[] chars) {\n    int index = 0, count;\n    for(int i = 0; i < chars.length; i += count) {\n        count = 1;\n        while(i + count < chars.length && chars[i] == chars[i + count]) {\n            count++;\n        }\n        chars[index++] = chars[i];\n        if(count > 1) {\n            for(char c : Integer.toString(count).toCharArray()) {\n                chars[index++] = c;\n            }\n        }\n    }\n    return index;\n}"
        }
    },
    "444": {
        "call_functions": {
            "c++": "bool isShortestAndUniqueSupersequence(vector<int>& nums, vector<vector<int>>& sequences) {\n    unordered_map<int, int> pos;\n    for (int i = 0; i < nums.size(); ++i) {\n        pos[nums[i]] = i;\n    }\n\n    for (const auto& seq : sequences) {\n        if (pos[seq[0]] > pos[seq.back()] ) {\n            return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean isShortestAndUniqueSupersequence(int[] nums, int[][] sequences) {\n    Map<Integer, Integer> pos = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        pos.put(nums[i], i);\n    }\n\n    for (int[] seq : sequences) {\n        if (pos.get(seq[0]) > pos.get(seq[seq.length - 1])) {\n            return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    sequences = $args[1]\n    result = is_shortest_and_unique_supersequence(nums, sequences)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const sequences = $args[1];\n    const result = isShortestAndUniqueSupersequence(nums, sequences);\n    console.log(result);\n}"
        }
    },
    "446": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = numberOfArithmeticSlices(nums);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int numberOfArithmeticSlices(int[] nums) {\n    int res = 0;\n    int n = nums.length;\n    Map<Integer, Integer>[] dp = new HashMap[n];\n\n    for (int i = 0; i < n; ++i) {\n        dp[i] = new HashMap<>();\n        for (int j = 0; j < i; ++j) {\n            long diff = (long)nums[i] - (long)nums[j];\n            if (diff <= Integer.MIN_VALUE || diff > Integer.MAX_VALUE) continue;\n\n            int delta = (int)diff;\n            dp[i].put(delta, dp[i].getOrDefault(delta, 0) + 1);\n\n            if (dp[j].containsKey(delta)) {\n                res += dp[j].get(delta);\n                dp[i].put(delta, dp[i].get(delta) + dp[j].get(delta));\n            }\n        }\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = numberOfArithmeticSlices(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = numberOfArithmeticSlices(nums);\n    console.log(result);\n}"
        }
    },
    "447": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\n#include <iostream>\n\nint numberOfBoomerangs(vector<vector<int>>& points) {\n    int count = 0;\n\n    for (auto& i : points) {\n        unordered_map<int, int> group_count;\n        for (auto& j : points) {\n            int dx = i[0] - j[0], dy = i[1] - j[1];\n            int dist = dx * dx + dy * dy;\n            group_count[dist]++;\n        }\n\n        for (auto& g : group_count) {\n            count += g.second * (g.second - 1);\n        }\n    }\n\n    return count;\n}\n\nint main() {\n    vector<vector<int>> points = $args;\n    int result = numberOfBoomerangs(points);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numberOfBoomerangs(int[][] points) {\n    int count = 0;\n\n    for (int[] i : points) {\n        HashMap<Integer, Integer> group_count = new HashMap<>();\n        for (int[] j : points) {\n            int dx = i[0] - j[0], dy = i[1] - j[1];\n            int dist = dx * dx + dy * dy;\n\n            group_count.put(dist, group_count.getOrDefault(dist, 0) + 1);\n        }\n\n        for (int g : group_count.values()) {\n            count += g * (g - 1);\n        }\n    }\n\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = numberOfBoomerangs(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = numberOfBoomerangs(points);\n    console.log(result);\n}"
        }
    },
    "448": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = findDisappearedNumbers(nums);\n    \n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}\n",
            "java": "public List<Integer> findDisappearedNumbers(int[] nums) {\n    List<Integer> result = new ArrayList<>();\n    \n    for (int i = 0; i < nums.length; i++) {\n        int index = Math.abs(nums[i]) - 1;\n        nums[index] = -Math.abs(nums[index]);\n    }\n\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] > 0) {\n            result.add(i + 1);\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = find_disappeared_numbers(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findDisappearedNumbers(nums);\n    console.log(result);\n}"
        }
    },
    "451": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string s = $args;\n    std::string result = sortByFrequency(s);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "452": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> points = $args;\n    int result = findMinArrowShots(points);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "453": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = minMoves(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minMoves(int[] nums) {\n    int min_element = nums[0];\n    for (int num : nums) {\n        min_element = Math.min(min_element, num);\n    }\n    int moves = 0;\n    for (int num : nums) {\n        moves += (num - min_element);\n    }\n    return moves;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = min_moves(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = minMoves(nums);\n    console.log(result);\n}\n"
        }
    },
    "454": {
        "call_functions": {
            "c++": "#include <unordered_map>\n\nint main() {\n    vector<int> nums1 = $args;\n    vector<int> nums2 = $args;\n    vector<int> nums3 = $args;\n    vector<int> nums4 = $args;\n    int result = fourSumCount(nums1, nums2, nums3, nums4);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {\n    HashMap<Integer, Integer> hashMap = new HashMap<>();\n    int count = 0;\n\n    for (int i : nums1) {\n        for (int j : nums2) {\n            hashMap.put(i + j, hashMap.getOrDefault(i + j, 0) + 1);\n        }\n    }\n\n    for (int k : nums3) {\n        for (int l : nums4) {\n            count += hashMap.getOrDefault(-(k + l), 0);\n        }\n    }\n\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    nums3 = $args[2]\n    nums4 = $args[3]\n    result = fourSumCount(nums1, nums2, nums3, nums4)\n    print(result)",
            "javascript": "function fourSumCount(nums1, nums2, nums3, nums4) {\n    const hashMap = new Map();\n    let count = 0;\n\n    for (const i of nums1) {\n        for (const j of nums2) {\n            hashMap.set(i + j, (hashMap.get(i + j) || 0) + 1);\n        }\n    }\n\n    for (const k of nums3) {\n        for (const l of nums4) {\n            count += hashMap.get(-(k + l)) || 0;\n        }\n    }\n\n    return count;\n}"
        }
    },
    "455": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint findContentChildren(std::vector<int>& g, std::vector<int>& s);\n\nint main() {\n    std::vector<int> g = $args;\n    std::vector<int> s;\n    int n;\n    while (std::cin >> n) {\n        s.push_back(n);\n    }\n    int result = findContentChildren(g, s);\n    std::cout << result << std::endl;\n    return 0;\n}\n"
        }
    },
    "456": {
        "call_functions": {
            "c++": "bool find132pattern(vector<int>& nums) {\n    int n = nums.size(), third = INT_MIN;\n    stack<int> st;\n    for (int i = n - 1; i >= 0; --i) {\n        if (nums[i] < third) return true;\n        while (!st.empty() && st.top() < nums[i]) {\n            third = st.top(); st.pop();\n        }\n        st.push(nums[i]);\n    }\n    return false;\n}",
            "java": "public boolean find132pattern(int[] nums) {\n    int n = nums.length;\n    int[] min = new int[n];\n    min[0] = nums[0];\n    for (int i = 1; i < n; ++i) {\n        min[i] = Math.min(min[i - 1], nums[i]);\n    }\n    Stack<Integer> stack = new Stack<>();\n    for (int j = n - 1; j >= 0; --j) {\n        if (nums[j] > min[j]) {\n            while (!stack.isEmpty() && stack.peek() <= min[j]) {\n                stack.pop();\n            }\n            if (!stack.isEmpty() && stack.peek() < nums[j]) {\n                return true;\n            }\n            stack.push(nums[j]);\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = find132pattern(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = find132pattern(nums);\n    console.log(result);\n}"
        }
    },
    "457": {
        "call_functions": {
            "c++": "bool circularArrayLoop(vector<int>& nums) {\n    int N = nums.size();\n    for (int i = 0; i < N; i++) {\n        int slow = i, fast = i;\n        do {\n            slow = getNextIndex(slow, nums);\n            fast = getNextIndex(getNextIndex(fast, nums), nums);\n        } while (slow != fast && nums[slow] * nums[fast] > 0);\n\n        if (slow != fast) continue;\n        bool cycle = false;\n        int start = slow;\n        do {\n            cycle |= getNextIndex(start, nums) == start;\n            start = getNextIndex(start, nums);\n        } while (start != slow);\n        if (!cycle) return true;\n    }\n    return false;\n}\n\nint getNextIndex(int idx, vector<int>& nums) {\n    int N = nums.size();\n    return ((idx + nums[idx]) % N + N) % N;\n}",
            "java": "public boolean circularArrayLoop(int[] nums) {\n    int N = nums.length;\n    for (int i = 0; i < N; i++) {\n        int slow = i, fast = i;\n        do {\n            slow = getNextIndex(slow, nums);\n            fast = getNextIndex(getNextIndex(fast, nums), nums);\n        } while (slow != fast && nums[slow] * nums[fast] > 0);\n\n        if (slow != fast) continue;\n        boolean cycle = false;\n        int start = slow;\n        do {\n            cycle |= getNextIndex(start, nums) == start;\n            start = getNextIndex(start, nums);\n        } while (start != slow);\n        if (!cycle) return true;\n    }\n    return false;\n}\n\nint getNextIndex(int idx, int[] nums) {\n    int N = nums.length;\n    return ((idx + nums[idx]) % N + N) % N;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = circularArrayLoop(nums)\n    print(result)",
            "javascript": "function main() {\n  const nums = $args;\n  const result = circularArrayLoop(nums);\n  console.log(result);\n}"
        }
    },
    "458": {
        "call_functions": {
            "c++": "int main() {\n    int buckets = $args;\n    int minutesToDie = $args;\n    int minutesToTest = $args;\n    int result = poorPigs(buckets, minutesToDie, minutesToTest);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int buckets, int minutesToDie, int minutesToTest) {\n    int pigs = 0;\n    while (Math.pow((minutesToTest / minutesToDie) + 1, pigs) < buckets) {\n        pigs++;\n    }\n    return pigs;\n}",
            "python": "if __name__ == \"__main__\":\n    buckets = $args[0]\n    minutes_to_die = $args[1]\n    minutes_to_test = $args[2]\n    result = poor_pigs(buckets, minutes_to_die, minutes_to_test)\n    print(result)",
            "javascript": "function main() {\n    const buckets = $args[0];\n    const minutesToDie = $args[1];\n    const minutesToTest = $args[2];\n    const result = poorPigs(buckets, minutesToDie, minutesToTest);\n    console.log(result);\n}"
        }
    },
    "459": {
        "call_functions": {
            "c++": "bool can_construct(string s) {\n    int n = s.size();\n    for (int i = n / 2; i > 0; --i) {\n        if (n % i == 0) {\n            string substr = s.substr(0, i);\n            bool flag = true;\n            for (int j = i; j < n; j += i) {\n                if (s.substr(j, i) != substr) {\n                    flag = false;\n                    break;\n                }\n            }\n\n            if (flag) return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean canConstruct(String s) {\n    int n = s.length();\n    for (int i = n / 2; i > 0; --i) {\n        if (n % i == 0) {\n            String substr = s.substring(0, i);\n            boolean flag = true;\n            for (int j = i; j < n; j += i) {\n                if (!s.substring(j, j + i).equals(substr)) {\n                    flag = false;\n                    break;\n                }\n            }\n\n            if (flag) return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = can_construct(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = canConstruct(s);\n    console.log(result);\n}\n"
        }
    },
    "461": {
        "call_functions": {
            "c++": "int main() {\n    int x = $args;\n    int y = $args;\n    int result = hammingDistance(x, y);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int hammingDistance(int x, int y) {\n    int dist = 0, xorResult = x ^ y;\n    while (xorResult != 0) {\n        dist += xorResult & 1;\n        xorResult >>= 1;\n    }\n    return dist;\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args[0]\n    y = $args[1]\n    result = hammingDistance(x, y)\n    print(result)",
            "javascript": "function main() {\n    const x = $args[0];\n    const y = $args[1];\n    const result = hammingDistance(x, y);\n    console.log(result);\n}"
        }
    },
    "462": {
        "call_functions": {
            "c++": "int minMoves2(vector<int>& nums) {\n    int n = nums.size();\n    sort(nums.begin(), nums.end());\n    int mid = nums[n / 2];\n    int moves = 0;\n    for (int i = 0; i < n; i++) {\n        moves += abs(nums[i] - mid);\n    }\n    return moves;\n}",
            "java": "public int minMoves2(int[] nums) {\n    Arrays.sort(nums);\n    int mid = nums[nums.length / 2];\n    int moves = 0;\n    for (int num : nums) {\n        moves += Math.abs(num - mid);\n    }\n    return moves;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = min_moves2(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = minMoves2(nums);\n    console.log(result);\n}"
        }
    },
    "463": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<int>> grid = $args;\n    int result = islandPerimeter(grid);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int islandPerimeter(int[][] grid) {\n    int perimeter = 0;\n    for (int row = 0; row < grid.length; row++) {\n        for (int col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] == 1) {\n                perimeter += 4;\n                if (row > 0 && grid[row - 1][col] == 1) perimeter -= 2;\n                if (col > 0 && grid[row][col - 1] == 1) perimeter -= 2;\n            }\n        }\n    }\n    return perimeter;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = islandPerimeter(grid)\n    print(result)",
            "javascript": "function islandPerimeter(grid) {\n    let perimeter = 0;\n    for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n            if (grid[row][col] === 1) {\n                perimeter += 4;\n                if (row > 0 && grid[row - 1][col] === 1) perimeter -= 2;\n                if (col > 0 && grid[row][col - 1] === 1) perimeter -= 2;\n            }\n        }\n    }\n    return perimeter;\n}"
        }
    },
    "464": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <iostream>\n\nbool canWin(int maxChoosableInteger, int desiredTotal, int state, std::unordered_map<int, bool>& memo) {\n    if(desiredTotal <= 0) {\n        return false;\n    }\n    if(memo.count(state) > 0) {\n        return memo[state];\n    }\n    for(int i = 1; i <= maxChoosableInteger; i++) {\n        int bitCheck = 1 << i;\n        if((state & bitCheck) == 0) {\n            if(!canWin(maxChoosableInteger, desiredTotal - i, state | bitCheck, memo)) {\n                memo[state] = true;\n                return true;\n            }\n        }\n    }\n    memo[state] = false;\n    return false;\n}\n\nbool canIWin(int maxChoosableInteger, int desiredTotal) {\n    if (maxChoosableInteger >= desiredTotal) return true;\n    if ((maxChoosableInteger * (maxChoosableInteger + 1)) / 2 < desiredTotal) return false;\n\n    std::unordered_map<int, bool> memo;\n    int state = 0;\n    return canWin(maxChoosableInteger, desiredTotal, state, memo);\n}\n\nint main() {\n    int maxChoosableInteger = $args;\n    int desiredTotal = $args;\n    bool result = canIWin(maxChoosableInteger, desiredTotal);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\n        if (maxChoosableInteger >= desiredTotal) return true;\n        if ((maxChoosableInteger * (maxChoosableInteger + 1)) / 2 < desiredTotal) return false;\n        \n        HashMap<Integer, Boolean> memo = new HashMap<>();\n        int state = 0;\n        return canWin(maxChoosableInteger, desiredTotal, state, memo);\n    }\n    \n    private boolean canWin(int maxChoosableInteger, int desiredTotal, int state, HashMap<Integer, Boolean> memo) {\n        if (desiredTotal <= 0) return false;\n        if (memo.containsKey(state)) return memo.get(state);\n        \n        for (int i = 1; i <= maxChoosableInteger; i++) {\n            int bitCheck = 1 << i;\n            if ((state & bitCheck) == 0) {\n                if (!canWin(maxChoosableInteger, desiredTotal - i, state | bitCheck, memo)) {\n                    memo.put(state, true);\n                    return true;\n                }\n            }\n        }\n        \n        memo.put(state, false);\n        return false;\n    }",
            "python": "if __name__ == \"__main__\":\n    maxChoosableInteger = $args[0]\n    desiredTotal = $args[1]\n    result = canIWin(maxChoosableInteger, desiredTotal)\n    print(result)",
            "javascript": "function main() {\n    const maxChoosableInteger = $args[0];\n    const desiredTotal = $args[1];\n    const result = canIWin(maxChoosableInteger, desiredTotal);\n    console.log(result);\n}"
        }
    },
    "465": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n\nint main() {\n    std::vector<std::vector<int>> transactions = $args;\n    int result = minTransfers(transactions);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minTransfers(int[][] transactions) {\n    Map<Integer, Integer> balances = new HashMap<>();\n    for (int[] transaction : transactions) {\n        balances.put(transaction[0], balances.getOrDefault(transaction[0], 0) - transaction[2]);\n        balances.put(transaction[1], balances.getOrDefault(transaction[1], 0) + transaction[2]);\n    }\n\n    List<Integer> debts = new ArrayList<>();\n    for (int balance : balances.values()) {\n        if (balance != 0) {\n            debts.add(balance);\n        }\n    }\n    return dfs(debts, 0);\n}\n\nprivate int dfs(List<Integer> debts, int start) {\n    while (start < debts.size() && debts.get(start) == 0) {\n        start++;\n    }\n    if (start == debts.size()) {\n        return 0;\n    }\n    int result = Integer.MAX_VALUE;\n    for (int i = start + 1; i < debts.size(); ++i) {\n        if ((debts.get(start) > 0) != (debts.get(i) > 0)) {\n            debts.set(i, debts.get(i) + debts.get(start));\n            result = Math.min(result, 1 + dfs(debts, start + 1));\n            debts.set(i, debts.get(i) - debts.get(start));\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    transactions = $args[0]\n    result = minTransfers(transactions)\n    print(result)",
            "javascript": "function minTransfers(transactions) {\n    const balances = new Map();\n    for (const transaction of transactions) {\n        balances.set(transaction[0], (balances.get(transaction[0]) || 0) - transaction[2]);\n        balances.set(transaction[1], (balances.get(transaction[1]) || 0) + transaction[2]);\n    }\n\n    const debts = [];\n    for (const balance of balances.values()) {\n        if (balance !== 0) {\n            debts.push(balance);\n        }\n    }\n    return dfs(debts, 0);\n}\n\nfunction dfs(debts, start) {\n    while (start < debts.length && debts[start] === 0) {\n        start++;\n    }\n    if (start === debts.length) {\n        return 0;\n    }\n    let result = Infinity;\n    for (let i = start + 1; i < debts.length; ++i) {\n        if ((debts[start] > 0) !== (debts[i] > 0)) {\n            debts[i] += debts[start];\n            result = Math.min(result, 1 + dfs(debts, start + 1));\n            debts[i] -= debts[start];\n        }\n    }\n    return result;\n}"
        }
    },
    "466": {
        "call_functions": {
            "c++": "int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n    int count1 = 0, count2 = 0, i = 0, j = 0;\n    while (count1 < n1) {\n        if (s1[i] == s2[j]) {\n            j++;\n            if (j == s2.size()) {\n                j = 0;\n                count2++;\n            }\n        }\n        i++;\n        if (i == s1.size()) {\n            i = 0;\n            count1++;\n        }\n    }\n    return count2 / n2;\n}\n\nint main() {\n    string s1 = $args;\n    int n1 = $args;\n    string s2 = $args;\n    int n2 = $args;\n    int result = getMaxRepetitions(s1, n1, s2, n2);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\n    int count1 = 0, count2 = 0, i = 0, j = 0;\n    while (count1 < n1) {\n        if (s1.charAt(i) == s2.charAt(j)) {\n            j++;\n            if (j == s2.length()) {\n                j = 0;\n                count2++;\n            }\n        }\n        i++;\n        if (i == s1.length()) {\n            i = 0;\n            count1++;\n        }\n    }\n    return count2 / n2;\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    n1 = $args[1]\n    s2 = $args[2]\n    n2 = $args[3]\n    result = getMaxRepetitions(s1, n1, s2, n2)\n    print(result)",
            "javascript": "function getMaxRepetitions(s1, n1, s2, n2) {\n    const result = getMaxRepetitions(s1, n1, s2, n2);\n    console.log(result);\n}"
        }
    },
    "467": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string p = $args;\n    int result = findSubstringInWraproundString(p);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int findSubstringInWraproundString(String p) {\n    int[] cnt = new int[26];\n    int length = 0;\n\n    for (int i = 0; i < p.length(); i++) {\n        if (i > 0 && (p.charAt(i) == p.charAt(i - 1) + 1 || p.charAt(i - 1) - p.charAt(i) == 25)) {\n            length++;\n        } else {\n            length = 1;\n        }\n        cnt[p.charAt(i) - 'a'] = Math.max(cnt[p.charAt(i) - 'a'], length);\n    }\n\n    int sum = 0;\n    for (int v : cnt) {\n        sum += v;\n    }\n    return sum;\n}",
            "python": "if __name__ == \"__main__\":\n    p = $args[0]\n    result = findSubstringInWraproundString(p)\n    print(result)",
            "javascript": "function findSubstringInWraproundString(p) {\n    const cnt = new Array(26).fill(0);\n    let length = 0;\n\n    for (let i = 0; i < p.length; i++) {\n        if (i > 0 && (p.charCodeAt(i) === p.charCodeAt(i - 1) + 1 || p.charCodeAt(i - 1) - p.charCodeAt(i) === 25)) {\n            length++;\n        } else {\n            length = 1;\n        }\n        cnt[p.charCodeAt(i) - \"a\".charCodeAt(0)] = Math.max(cnt[p.charCodeAt(i) - \"a\".charCodeAt(0)], length);\n    }\n\n    return cnt.reduce((a, b) => a + b, 0);\n}\n"
        }
    },
    "468": {
        "call_functions": {
            "c++": "#include <sstream>\n#include <string>\n#include <vector>\n\nint main() {\n    std::string queryIP = $args;\n    std::string result = validateIP(queryIP);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String validateIP(String queryIP) {\n    String[] ipv4Parts = queryIP.split(\"\\\\.\", -1);\n    String[] ipv6Parts = queryIP.split(\":\", -1);\n\n    if (ipv4Parts.length == 4) {\n        if (isValidIPv4(ipv4Parts)) return \"IPv4\";\n    } else if (ipv6Parts.length == 8) {\n        if (isValidIPv6(ipv6Parts)) return \"IPv6\";\n    }\n\n    return \"Neither\";\n}\n\nprivate boolean isValidIPv4(String[] parts) {\n    for (String part : parts) {\n        if (part.length() == 0 || part.length() > 3 || (part.length() > 1 && part.charAt(0) == '0')) return false;\n\n        int num = 0;\n        for (char ch : part.toCharArray()) {\n            if (!Character.isDigit(ch)) return false;\n            num = num * 10 + (ch - '0');\n        }\n\n        if (num < 0 || num > 255) return false;\n    }\n\n    return true;\n}\n\nprivate boolean isValidIPv6(String[] parts) {\n    for (String part : parts) {\n        if (part.length() == 0 || part.length() > 4) return false;\n\n        for (char ch : part.toCharArray()) {\n            if (!Character.isDigit(ch) && !(ch >= 'a' && ch <= 'f') && !(ch >= 'A' && ch <= 'F')) return false;\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    queryIP = $args[0]\n    result = validateIP(queryIP)\n    print(result)",
            "javascript": "function main() {\n    const queryIP = $args;\n    const result = validateIP(queryIP);\n    console.log(result);\n}"
        }
    },
    "469": {
        "call_functions": {
            "c++": "bool isConvex(vector<vector<int>>& points) {\n    int n = points.size();\n    int pre = 0, cur = 0;\n    \n    for (int i = 0; i < n; ++i) {\n        int x1 = points[(i + 1) % n][0] - points[i][0];\n        int y1 = points[(i + 1) % n][1] - points[i][1];\n        int x2 = points[(i + 2) % n][0] - points[(i + 1) % n][0];\n        int y2 = points[(i + 2) % n][1] - points[(i + 1) % n][1];\n        cur = x1 * y2 - x2 * y1;\n        \n        if (cur == 0)\n            continue;\n        if (cur * pre < 0)\n            return false;\n        pre = cur;\n    }\n\n    return true;\n}",
            "java": "public boolean isConvex(int[][] points) {\n    int n = points.length;\n    int pre = 0, cur = 0;\n    \n    for (int i = 0; i < n; ++i) {\n        int x1 = points[(i + 1) % n][0] - points[i][0];\n        int y1 = points[(i + 1) % n][1] - points[i][1];\n        int x2 = points[(i + 2) % n][0] - points[(i + 1) % n][0];\n        int y2 = points[(i + 2) % n][1] - points[(i + 1) % n][1];\n        cur = x1 * y2 - x2 * y1;\n        \n        if (cur == 0)\n            continue;\n        if (cur * pre < 0)\n            return false;\n        pre = cur;\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = isConvex(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = isConvex(points);\n    console.log(result);\n}"
        }
    },
    "470": {
        "call_functions": {
            "c++": "int main() {\n    int result;\n    result = rand10();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rand10() {\n    int result;\n    do {\n        result = (rand7() - 1) * 7 + rand7();\n    } while (result > 40);\n    return result % 10 + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    $args = [None]\n    result = rand10()\n    print(result)",
            "javascript": "function main() {\n    const result = rand10();\n    console.log(result);\n}"
        }
    },
    "471": {
        "call_functions": {
            "c++": "std::string encode(std::string s) {\n    int n = s.length();\n    for (int i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            int reps = n / i;\n            std::string sub = s.substr(0, i);\n            std::string composed = \"\";\n            for (int j = 0; j < reps; j++) {\n                composed += sub;\n            }\n            if (s == composed) {\n                return std::to_string(reps) + \"[\" + sub + \"]\";\n            }\n        }\n    }\n    return s;\n}",
            "java": "String encode(String s) {\n    int n = s.length();\n    for (int i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            int reps = n / i;\n            String sub = s.substring(0, i);\n            StringBuilder composed = new StringBuilder();\n            for (int j = 0; j < reps; j++) {\n                composed.append(sub);\n            }\n            if (s.equals(composed.toString())) {\n                return reps + \"[\" + sub + \"]\";\n            }\n        }\n    }\n    return s;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = encode(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = encode(s);\n    console.log(result);\n}"
        }
    },
    "472": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nbool isConcatenated(const string& word, unordered_set<string>& wordDict) {\n    int n = word.size();\n    vector<bool> dp(n + 1, false);\n    dp[0] = true;\n\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (dp[j] && wordDict.count(word.substr(j, i - j))) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[n];\n}\n\nvector<string> findAllConcatenatedWords(vector<string>& words) {\n    unordered_set<string> wordDict(words.begin(), words.end());\n    vector<string> result;\n\n    for (const string& word : words) {\n        if (isConcatenated(word, wordDict)) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}",
            "java": "public List<String> findAllConcatenatedWords(String[] words)",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = find_all_concatenated_words(words)\n    print(result)",
            "javascript": "function main() {\n    const words = $args;\n    const result = findAllConcatenatedWords(words);\n    console.log(result);\n}"
        }
    },
    "473": {
        "call_functions": {
            "c++": "#include <vector>\n#include <numeric>\n#include <algorithm>\n#include <iostream>\n\nbool dfs(std::vector<int>& matchsticks, std::vector<int>& sums, int target, int index);\n\nbool makesquare(std::vector<int>& matchsticks) {\n    if (matchsticks.size() < 4) return false;\n    int sum = std::accumulate(matchsticks.begin(), matchsticks.end(), 0);\n    if (sum % 4) return false;\n    int target = sum / 4;\n    std::sort(matchsticks.rbegin(), matchsticks.rend());\n    std::vector<int> sums(4, 0);\n    return dfs(matchsticks, sums, target, 0);\n}\n\nbool dfs(std::vector<int>& matchsticks, std::vector<int>& sums, int target, int index) {\n    if (index == matchsticks.size()) {\n        return sums[0] == target && sums[1] == target && sums[2] == target;\n    }\n    for (int i = 0; i < 4; ++i) {\n        if (sums[i] + matchsticks[index] <= target) {\n            sums[i] += matchsticks[index];\n            if (dfs(matchsticks, sums, target, index + 1)) return true;\n            sums[i] -= matchsticks[index];\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<int> matchsticks = $args;\n    bool result = makesquare(matchsticks);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean makesquare(int[] matchsticks) {\n        if (matchsticks == null || matchsticks.length < 4) return false;\n        int sum = 0;\n        for (int matchstick : matchsticks) sum += matchstick;\n        if (sum % 4 != 0) return false;\n        int target = sum / 4;\n        Arrays.sort(matchsticks);\n        reverse(matchsticks);\n        int[] sums = new int[4];\n        return dfs(matchsticks, sums, target, 0);\n    }\n\n    private void reverse(int[] nums) {\n        int left = 0, right = nums.length - 1;\n        while (left < right) {\n            int temp = nums[left];\n            nums[left] = nums[right];\n            nums[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n    private boolean dfs(int[] matchsticks, int[] sums, int target, int index) {\n        if (index == matchsticks.length) {\n            return sums[0] == target && sums[1] == target && sums[2] == target;\n        }\n        for (int i = 0; i < 4; i++) {\n            if (sums[i] + matchsticks[index] <= target) {\n                sums[i] += matchsticks[index];\n                if (dfs(matchsticks, sums, target, index + 1)) return true;\n                sums[i] -= matchsticks[index];\n            }\n        }\n        return false;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    matchsticks = $args[0]\n    result = makesquare(matchsticks)\n    print(result)",
            "javascript": "function makesquare(matchsticks) {\n    if (matchsticks.length < 4) return false;\n    const total = matchsticks.reduce((a, b) => a + b, 0);\n    if (total % 4 !== 0) return false;\n    const target = total / 4;\n    matchsticks.sort((a, b) => b - a);\n    const sums = [0, 0, 0, 0];\n    return dfs(matchsticks, sums, target, 0);\n}\n\nfunction dfs(matchsticks, sums, target, index) {\n    if (index === matchsticks.length) {\n        return sums[0] === target && sums[1] === target && sums[2] === target;\n    }\n    for (let i = 0; i < 4; i++) {\n        if (sums[i] + matchsticks[index] <= target) {\n            sums[i] += matchsticks[index];\n            if (dfs(matchsticks, sums, target, index + 1)) return true;\n            sums[i] -= matchsticks[index];\n        }\n    }\n    return false;\n}"
        }
    },
    "474": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> strs = $args;\n    int m = 5;\n    int n = 3;\n    int result = findMaxForm(strs, m, n);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int findMaxForm(String[] strs, int m, int n) {\n    int[][] dp = new int[m + 1][n + 1];\n    \n    for (String str: strs) {\n        int ones = (int) str.chars().filter(ch -> ch == '1').count();\n        int zeros = str.length() - ones;\n        \n        for (int i = m; i >= zeros; --i) {\n            for (int j = n; j >= ones; --j) {\n                dp[i][j] = Math.max(dp[i][j], dp[i - zeros][j - ones] + 1);\n            }\n        }\n    }\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    m = $args[1]\n    n = $args[2]\n    result = findMaxForm(strs, m, n)\n    print(result)",
            "javascript": "function findMaxForm(strs, m, n) {\n    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    \n    for (const str of strs) {\n        const ones = str.split('').filter(ch => ch === '1').length;\n        const zeros = str.length - ones;\n        \n        for (let i = m; i >= zeros; --i) {\n            for (let j = n; j >= ones; --j) {\n                dp[i][j] = Math.max(dp[i][j], dp[i - zeros][j - ones] + 1);\n            }\n        }\n    }\n    return dp[m][n];\n}"
        }
    },
    "475": {
        "call_functions": {
            "c++": "int findRadius(vector<int>& houses, vector<int>& heaters) {\n    sort(houses.begin(), houses.end());\n    sort(heaters.begin(), heaters.end());\n\n    int result = 0;\n    int i = 0;\n\n    for (int house : houses) {\n        while (i < heaters.size() - 1 &&\n               abs(heaters[i + 1] - house) <= abs(heaters[i] - house)) {\n            i++;\n        }\n        result = max(result, abs(heaters[i] - house));\n    }\n    return result;\n}",
            "java": "public int findRadius(int[] houses, int[] heaters) {\n    Arrays.sort(houses);\n    Arrays.sort(heaters);\n    int result = 0;\n    int i = 0;\n\n    for (int house : houses) {\n        while (i < heaters.length - 1 &&\n               Math.abs(heaters[i + 1] - house) <= Math.abs(heaters[i] - house)) {\n            i++;\n        }\n        result = Math.max(result, Math.abs(heaters[i] - house));\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    houses = $args[0]\n    heaters = $args[1]\n    result = findRadius(houses, heaters)\n    print(result)",
            "javascript": "function findRadius(houses, heaters) {\n    houses.sort((a, b) => a - b);\n    heaters.sort((a, b) => a - b);\n    let result = 0;\n    let i = 0;\n\n    for (const house of houses) {\n        while (i < heaters.length - 1 &&\n               Math.abs(heaters[i + 1] - house) <= Math.abs(heaters[i] - house)) {\n            i++;\n        }\n        result = Math.max(result, Math.abs(heaters[i] - house));\n    }\n    return result;\n}"
        }
    },
    "476": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = $args;\n    int result = findComplement(num);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findComplement(int num) {\n    int bitLength = 0;\n    int mask = num;\n    while (mask > 0) {\n        mask >>= 1;\n        bitLength++;\n    }\n    int allOnes = (1 << bitLength) - 1;\n\n    return num ^ allOnes;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = find_complement(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const bitLength = 0;\n    let mask = num;\n    while (mask > 0) {\n        mask >>= 1;\n        bitLength++;\n    }\n    const allOnes = (1 << bitLength) - 1;\n\n    const result = num ^ allOnes;\n    console.log(result);\n}"
        }
    },
    "477": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = totalHammingDistance(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int callTotalHammingDistance(int[] nums) {\n    int totalDistance = 0, n = nums.length;\n    \n    for (int i = 0; i < 32; ++i) {\n        int bitCount = 0;\n        for (int num : nums) {\n            bitCount += (num >> i) & 1;\n        }\n        totalDistance += bitCount * (n - bitCount);\n    }\n    \n    return totalDistance;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = total_hamming_distance(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = totalHammingDistance(nums);\n    console.log(result);\n}"
        }
    },
    "478": {
        "call_functions": {
            "c++": "#include <random>\n#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double radius = $args;\n    double x_center = $args;\n    double y_center = $args;\n    \n    Solution obj(radius, x_center, y_center);\n    vector<double> result = obj.randPoint();\n    \n    cout << \"[\" << result[0] << \", \" << result[1] << \"]\" << endl;\n    \n    return 0;\n}",
            "java": "public double[] randPoint() {\n        double r = Math.sqrt(random.nextDouble()) * radius;\n        double theta = random.nextDouble() * 2 * Math.PI;\n        return new double[]{x_center + r * Math.cos(theta), y_center + r * Math.sin(theta)};\n    }",
            "python": "if __name__ == \"__main__\":\n    radius = $args[0]\n    x_center = $args[1]\n    y_center = $args[2]\n    obj = Solution(radius, x_center, y_center)\n    result = obj.randPoint()\n    print(result)",
            "javascript": "function main() {\n    const radius = $args[0];\n    const x_center = $args[1];\n    const y_center = $args[2];\n\n    const obj = new Solution(radius, x_center, y_center);\n    const result = obj.randPoint();\n\n    console.log(result);\n}"
        }
    },
    "479": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = largestPalindrome(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int largestPalindrome(int n) {\n    if (n == 1) return 9;\n    int upper_limit = (int) Math.pow(10, n) - 1;\n    int lower_limit = upper_limit / 10;\n    for (int i = upper_limit; i > lower_limit; --i) {\n        long temp = i;\n        long reverse = 0;\n        while (temp != 0) {\n            reverse = reverse * 10 + temp % 10;\n            temp /= 10;\n        }\n        long palindrome = i * (long) Math.pow(10, n) + reverse;\n        for (long j = upper_limit; j > lower_limit; --j) {\n            long product = palindrome / j;\n            if (palindrome % j == 0 && product <= upper_limit) {\n                return (int) (palindrome % 1337);\n            }\n        }\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = largestPalindrome(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = largestPalindrome(n);\n    console.log(result);\n}"
        }
    },
    "480": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n\nstd::vector<double> medianSlidingWindow(std::vector<int>& nums, int k) {\n    std::multiset<int> window(nums.begin(), nums.begin() + k);\n    auto mid = std::next(window.begin(), k / 2);\n    std::vector<double> medians;\n\n    for (int i = k;; i++) {\n        medians.push_back((double(*mid) + *std::prev(mid, 1 - k % 2)) / 2);\n        \n        if (i == nums.size()) {\n            return medians;\n        }\n        window.insert(nums[i]);\n        if (nums[i] < *mid) {\n            mid--;\n        }\n        if (nums[i - k] <= *mid) {\n            mid++;\n        }\n        window.erase(window.lower_bound(nums[i - k]));\n    }\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = 3;\n    std::vector<double> result = medianSlidingWindow(nums, k);\n    for (double num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public double[] medianSlidingWindow(int[] nums, int k) {\n    TreeMap<Integer, Integer> window = new TreeMap<>();\n    int n = nums.length;\n    double[] result = new double[n - k + 1];\n\n    for (int i = 0; i < k; i++) {\n        window.put(nums[i], window.getOrDefault(nums[i], 0) + 1);\n    }\n\n    for (int i = k; i <= n; i++) {\n        int cnt = 0, mid1 = 0, mid2 = 0;\n        for (Integer num : window.keySet()) {\n            cnt += window.get(num);\n            if (cnt >= (k + 1) / 2 && mid1 == 0) {\n                mid1 = num;\n            }\n            if (cnt >= (k + 2) / 2) {\n                mid2 = num;\n                break;\n            }\n        }\n\n        result[i - k] = ((double) mid1 + mid2) / 2;\n\n        if (i < n) {\n            window.put(nums[i], window.getOrDefault(nums[i], 0) + 1);\n            window.put(nums[i - k], window.get(nums[i - k]) - 1);\n            if (window.get(nums[i - k]) == 0) {\n                window.remove(nums[i - k]);\n            }\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = medianSlidingWindow(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = medianSlidingWindow(nums, k);\n    console.log(result);\n}"
        }
    },
    "481": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = magicalString(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int magicalString(int n) {\n    if (n == 0) return 0;\n    if (n <= 3) return 1;\n    \n    int[] magic = new int[n + 1];\n    magic[0] = 1;\n    magic[1] = 2;\n    magic[2] = 2;\n    int count_ones = 1;\n    int index = 2;\n    int value = 1;\n    \n    while (index < n) {\n        for (int i = 0; i < magic[index] && index < n; i++) {\n            magic[++index] = value;\n            if (value == 1) count_ones++;\n        }\n        value = 3 - value;\n    }\n    \n    return count_ones;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = magical_string(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = magicalString(n);\n    console.log(result);\n}"
        }
    },
    "482": {
        "call_functions": {
            "c++": "#include <cctype>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int k = $args;\n    string result = licenseKeyFormatting(s, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String licenseKeyFormatting(String s, int k) {\n    StringBuilder result = new StringBuilder();\n    int count = 0;\n    for (int i = s.length() - 1; i >= 0; i--) {\n        if (s.charAt(i) != '-') {\n            if (count == k) {\n                result.append('-');\n                count = 0;\n            }\n            result.append(Character.toUpperCase(s.charAt(i)));\n            count++;\n        }\n    }\n    return result.reverse().toString();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = license_key_formatting(s, k)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const k = $args[1];\n    const result = licenseKeyFormatting(s, k);\n    console.log(result);\n}"
        }
    },
    "483": {
        "call_functions": {
            "c++": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nint main() {\n    string n = $args;\n    ll result = smallestGoodBase(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String smallestGoodBase(String n) {\n        long num_n = Long.parseLong(n);\n        \n        for(int m = (int)(Math.log(num_n)/Math.log(2)) + 1; m >= 1; m--) {\n            long k = (long)Math.pow((double)num_n, 1.0 / m);\n            long sum = 0;\n            for(int i=0; i <= m; i++) {\n                sum = sum * k + 1;\n            }\n            if(sum == num_n) {\n                return String.valueOf(k);\n            }\n        }\n        \n        return \"-1\";\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = smallest_good_base(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = smallestGoodBase(n);\n    console.log(result);\n}"
        }
    },
    "484": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nstd::vector<int> findPermutation(std::string s);\n\nint main() {\n    std::string s = $args;\n    std::vector<int> result = findPermutation(s);\n    for(int i = 0; i < result.size(); i++)\n        std::cout << result[i] << ' ';\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] findPermutation(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = findPermutation(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = findPermutation(s);\n    console.log(result);\n}"
        }
    },
    "485": {
        "call_functions": {
            "c++": "int findMaxConsecutiveOnes(vector<int>& nums) {\n    int max_consecutive = 0, current_consecutive = 0;\n    for (int num : nums) {\n        current_consecutive = (num == 1) ? current_consecutive + 1 : 0;\n        max_consecutive = max(max_consecutive, current_consecutive);\n    }\n    return max_consecutive;\n}",
            "java": "public int findMaxConsecutiveOnes(int[] nums) {\n    int maxConsecutive = 0, currentConsecutive = 0;\n    for (int num : nums) {\n        currentConsecutive = (num == 1) ? currentConsecutive + 1 : 0;\n        maxConsecutive = Math.max(maxConsecutive, currentConsecutive);\n    }\n    return maxConsecutive;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findMaxConsecutiveOnes(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findMaxConsecutiveOnes(nums);\n    console.log(result);\n}"
        }
    },
    "486": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nbool canWin(const std::vector<int>& nums) {\n    int n = nums.size();\n    std::vector<std::vector<int>> dp(n, std::vector<int>(n));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = nums[i];\n    }\n    for (int len = 1; len < n; len++) {\n        for (int i = 0; i < n - len; i++) {\n            int j = i + len;\n            dp[i][j] = std::max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1] >= 0;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    bool result = canWin(nums);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean canWin(int[] nums) {\n    int n = nums.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = nums[i];\n    }\n    for (int len = 1; len < n; len++) {\n        for (int i = 0; i < n - len; i++) {\n            int j = i + len;\n            dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1] >= 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = can_win(nums)\n    print(result)",
            "javascript": "function canWin(nums) {\n    const n = nums.length;\n    const dp = Array.from({ length: n }, () => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = nums[i];\n    }\n    for (let len = 1; len < n; len++) {\n        for (let i = 0; i < n - len; i++) {\n            const j = i + len;\n            dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1] >= 0;\n}\n"
        }
    },
    "487": {
        "call_functions": {
            "c++": "int findMaxConsecutiveOnes(vector<int>& nums) {\n    int max_count = 0, count_zeros = 0, left = 0;\n    for (int right = 0; right < nums.size(); ++right) {\n        if (nums[right] == 0) count_zeros++;\n        while (count_zeros > 1) {\n            if (nums[left++] == 0) count_zeros--;\n        }\n        max_count = max(max_count, right - left + 1);\n    }\n    return max_count;\n}",
            "java": "public int findMaxConsecutiveOnes(int[] nums) {\n    int maxCount = 0, countZeros = 0, left = 0;\n    for (int right = 0; right < nums.length; ++right) {\n        if (nums[right] == 0) countZeros++;\n        while (countZeros > 1) {\n            if (nums[left++] == 0) countZeros--;\n        }\n        maxCount = Math.max(maxCount, right - left + 1);\n    }\n    return maxCount;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findMaxConsecutiveOnes(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findMaxConsecutiveOnes(nums);\n    console.log(result);\n}"
        }
    },
    "488": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    string board = $args;\n    string hand = $args;\n    unordered_map<char, int> hand_map;\n    for (char c : hand) ++hand_map[c];\n    unordered_map<string, int> memo;\n    int result = find_min_step_helper(board, memo, hand_map);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    hand = $args[1]\n    result = find_min_step(board, hand)\n    print(result)",
            "javascript": "function findMinStep(board, hand) {\n    function findMinStepHelper(board, memo, hand) {\n        if (board.length === 0) return 0;\n        if (memo.has(board)) return memo.get(board);\n\n        let result = Infinity;\n        let i = 0;\n        while (i < board.length) {\n            let j = i;\n            while (j < board.length && board[i] === board[j]) j++;\n\n            let color = board[i];\n            let required = 3 - (j - i);\n            if (hand[color] >= required) {\n                hand[color] -= required;\n                let nextBoard = board.slice(0, i) + board.slice(j);\n                let tmp = findMinStepHelper(nextBoard, memo, hand);\n                if (tmp !== -1) result = Math.min(result, tmp + required);\n                hand[color] += required;\n            }\n            i = j;\n        }\n\n        let res = (result === Infinity) ? -1 : result;\n        memo.set(board, res);\n        return res;\n    }\n\n    let handMap = {};\n    for (let c of hand) handMap[c] = (handMap[c] || 0) + 1;\n\n    return findMinStepHelper(board, new Map(), handMap);\n}"
        }
    },
    "489": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nint comb(int n, int r) {\n    if(r > n - r) r = n - r;\n    long res = 1;\n    for(int i = 1; i <= r; i++) {\n        res *= n - r + i;\n        res /= i;\n    }\n    return (int)res;\n}\n\nint main() {\n    std::vector<int> destination = $args;\n    int k = $args;\n    std::string result = kthSmallestPath(destination, k);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String kthSmallestPath(int[] destination, int k) {\n        int row = destination[0];\n        int col = destination[1];\n        StringBuilder ans = new StringBuilder();\n\n        for(int i = 0; i < row + col; i++) {\n            if(row == 0) {\n                ans.append('H');\n                col--;\n            } else if(col == 0) {\n                ans.append('V');\n                row--;\n            } else if(k <= comb(row + col - 1, row - 1)) {\n                ans.append('H');\n                col--;\n            } else {\n                ans.append('V');\n                k -= comb(row + col - 1, row - 1);\n                row--;\n            }\n        }\n\n        return ans.toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    destination = $args[0]\n    k = $args[1]\n    result = kthSmallestPath(destination, k)\n    print(result)",
            "javascript": "function kthSmallestPath(destination, k) {\n    let row = destination[0];\n    let col = destination[1];\n    let ans = \"\";\n\n    for(let i = 0; i < row + col; i++) {\n        if(row === 0) {\n            ans += 'H';\n            col--;\n        } else if(col === 0) {\n            ans += 'V';\n            row--;\n        } else if(k <= comb(row + col - 1, row - 1)) {\n            ans += 'H';\n            col--;\n        } else {\n            ans += 'V';\n            k -= comb(row + col - 1, row - 1);\n            row--;\n        }\n    }\n\n    return ans;\n}"
        }
    },
    "490": {
        "call_functions": {
            "c++": "bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n    vector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    queue<pair<int, int>> q;\n    q.push({start[0], start[1]});\n    while (!q.empty()) {\n        auto [x, y] = q.front(); q.pop();\n        if (x == destination[0] && y == destination[1]) return true;\n        for (auto [dx, dy] : dirs) {\n            int i = x, j = y;\n            while (i + dx >= 0 && i + dx < maze.size() && j + dy >= 0 && j + dy < maze[0].size() && maze[i + dx][j + dy] == 0) {\n                i += dx, j += dy;\n            }\n            if (maze[i][j] == 0) {\n                maze[i][j] = 1;\n                q.push({i, j});\n            }\n        }\n    }\n    return false;\n}",
            "java": "public boolean hasPath(int[][] maze, int[] start, int[] destination) {\n    int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    Queue<int[]> q = new LinkedList<>();\n    q.add(start);\n    while (!q.isEmpty()) {\n        int[] curr = q.poll();\n        int x = curr[0], y = curr[1];\n        if (x == destination[0] && y == destination[1]) return true;\n        for (int[] dir : dirs) {\n            int i = x, j = y;\n            while (i + dir[0] >= 0 && i + dir[0] < maze.length && j + dir[1] >= 0 && j + dir[1] < maze[0].length && maze[i + dir[0]][j + dir[1]] == 0) {\n                i += dir[0];\n                j += dir[1];\n            }\n            if (maze[i][j] == 0) {\n                maze[i][j] = 1;\n                q.add(new int[]{i, j});\n            }\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    maze = $args[0]\n    start = $args[1]\n    destination = $args[2]\n    result = hasPath(maze, start, destination)\n    print(result)",
            "javascript": "function hasPath(maze, start, destination) {\n    const dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    const q = [start];\n    while (q.length > 0) {\n        const [x, y] = q.shift();\n        if (x === destination[0] && y === destination[1]) return true;\n        for (const [dx, dy] of dirs) {\n            let i = x, j = y;\n            while (i + dx >= 0 && i + dx < maze.length && j + dy >= 0 && j + dy < maze[0].length && maze[i + dx][j + dy] === 0) {\n                i += dx;\n                j += dy;\n            }\n            if (maze[i][j] === 0) {\n                maze[i][j] = 1;\n                q.push([i, j]);\n            }\n        }\n    }\n    return false;\n}"
        }
    },
    "491": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n\nstd::vector<std::vector<int>> findSubsequences(std::vector<int>& nums) {\n    std::set<std::vector<int>> res;\n    std::vector<int> path;\n    dfs(nums, 0, path, res);\n    return std::vector<std::vector<int>>(res.begin(), res.end());\n}\n\nvoid dfs(std::vector<int>& nums, int start, std::vector<int>& path, std::set<std::vector<int>>& res) {\n    if (path.size() >= 2) {\n        res.insert(path);\n    }\n    for (int i = start; i < nums.size(); i++) {\n        if (!path.empty() && path.back() > nums[i]) {\n            continue;\n        }\n        path.push_back(nums[i]);\n        dfs(nums, i + 1, path, res);\n        path.pop_back();\n    }\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = findSubsequences(nums);\n    for (const auto& seq : result) {\n        for (const auto& num : seq) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> findSubsequences(int[] nums) {\n    Set<List<Integer>> res = new HashSet<>();\n    List<Integer> path = new ArrayList<>();\n    dfs(nums, 0, path, res);\n    return new ArrayList<>(res);\n}\n\nprivate void dfs(int[] nums, int start, List<Integer> path, Set<List<Integer>> res) {\n    if (path.size() >= 2) {\n        res.add(new ArrayList<>(path));\n    }\n    for (int i = start; i < nums.length; i++) {\n        if (!path.isEmpty() && path.get(path.size() - 1) > nums[i]) {\n            continue;\n        }\n        path.add(nums[i]);\n        dfs(nums, i + 1, path, res);\n        path.remove(path.size() - 1);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findSubsequences(nums)\n    print(result)",
            "javascript": "function findSubsequences(nums) {\n    const res = new Set();\n    dfs(nums, 0, [], res);\n    return Array.from(res).map(x => Array.from(x));\n}\n\nfunction dfs(nums, start, path, res) {\n    if (path.length >= 2) {\n        res.add(path);\n    }\n    for (let i = start; i < nums.length; i++) {\n        if (path.length && path[path.length - 1] > nums[i]) {\n            continue;\n        }\n        dfs(nums, i + 1, [...path, nums[i]], res);\n    }\n}"
        }
    },
    "492": {
        "call_functions": {
            "c++": "#include <vector>\n#include <cmath>\n#include <iostream>\n\nint main() {\n    int area = $args;\n    std::vector<int> result = constructRectangle(area);\n    std::cout << result[0] << \" \" << result[1] << std::endl;\n    return 0;\n}",
            "java": "public int[] constructRectangle(int area) {\n    int width = (int)Math.sqrt(area);\n    while(area % width != 0) {\n        width--;\n    }\n    int length = area / width;\n    return new int[]{length, width};\n}",
            "python": "if __name__ == \"__main__\":\n    area = $args[0]\n    result = constructRectangle(area)\n    print(result)",
            "javascript": "function main() {\n    const area = $args;\n    const result = constructRectangle(area);\n    console.log(result);\n}"
        }
    },
    "493": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint merge(std::vector<int>& nums, std::vector<int>& temp, int left, int mid, int right) {\n    int count = 0;\n    int j = mid;\n    for (int i = left; i < mid; i++) {\n        while (j <= right && (long long)nums[i] > 2LL * nums[j]) {\n            j++;\n        }\n        count += j - mid;\n    }\n    std::merge(nums.begin() + left, nums.begin() + mid, nums.begin() + mid, nums.begin() + right + 1, temp.begin() + left);\n    \n    return count;\n}\n\nint countReversePairs(std::vector<int>& nums, std::vector<int>& temp, int left, int right) {\n    if (left >= right) {\n        return 0;\n    }\n    int mid = left + (right - left) / 2;\n    int count = countReversePairs(nums, temp, left, mid) + countReversePairs(nums, temp, mid + 1, right);\n    count += merge(nums, temp, left, mid + 1, right);\n    std::copy(temp.begin() + left, temp.begin() + right + 1, nums.begin() + left);\n    \n    return count;\n}\n\nint reversePairs(std::vector<int>& nums) {\n    std::vector<int> temp(nums.size());\n    return countReversePairs(nums, temp, 0, nums.size() - 1);\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = reversePairs(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int reversePairs(int[] nums) {\n    return mergeSort(nums, 0, nums.length - 1, new int[nums.length]);\n}\n\nprivate int mergeSort(int[] nums, int left, int right, int[] temp) {\n    if (left >= right) {\n        return 0;\n    }\n    int mid = left + (right - left) / 2;\n    int count = mergeSort(nums, left, mid, temp) + mergeSort(nums, mid + 1, right, temp);\n    count += merge(nums, left, mid, right, temp);\n    \n    return count;\n}\n\nprivate int merge(int[] nums, int left, int mid, int right, int[] temp) {\n    int count = 0;\n    System.arraycopy(nums, left, temp, left, right - left + 1);\n    int j = mid + 1;\n    for (int i = left; i <= mid; i++) {\n        while (j <= right && (long) nums[i] > 2L * nums[j]) {\n            j++;\n        }\n        count += j - (mid + 1);\n    }\n    int i = left;\n    j = mid + 1;\n    int k = left;\n    while (i <= mid && j <= right) {\n        if (temp[i] <= temp[j]) {\n            nums[k++] = temp[i++];\n        } else {\n            nums[k++] = temp[j++];\n        }\n    }\n    while (i <= mid) {\n        nums[k++] = temp[i++];\n    }\n    while (j <= right) {\n        nums[k++] = temp[j++];\n    }\n    \n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = reversePairs(nums)\n    print(result)",
            "javascript": "function reversePairs(nums) {\n    function mergeSort(l, r) {\n        if (l >= r) {\n            return 0;\n        }\n\n        const mid = Math.floor((l + r) / 2);\n        let count = mergeSort(l, mid) + mergeSort(mid + 1, r);\n        let j = mid + 1;\n        for (let i = l; i <= mid; i++) {\n            while (j <= r && nums[i] > 2 * nums[j]) {\n                j++;\n            }\n            count += j - (mid + 1);\n        }\n\n        const merged = nums.slice(l, r + 1).sort((a, b) => a - b);\n        nums.splice(l, merged.length, ...merged);\n\n        return count;\n    }\n\n    return mergeSort(0, nums.length - 1);\n}"
        }
    },
    "494": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint findTargetSumWays(std::vector<int>& nums, int target);\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = $args;\n    int result = findTargetSumWays(nums, target);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int findTargetSumWays(int[] nums, int target) {\n    int sum = 0;\n    for (int num : nums) sum += num;\n    if (sum < target || (sum + target) % 2 != 0) return 0;\n    int target_sum = (sum + target) / 2;\n    int[] dp = new int[target_sum + 1];\n    dp[0] = 1;\n    for (int num : nums) {\n        for (int j = target_sum; j >= num; j--) {\n            dp[j] += dp[j - num];\n        }\n    }\n    return dp[target_sum];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = findTargetSumWays(nums, target)\n    print(result)",
            "javascript": "function findTargetSumWays(nums, target) {\n    let sum = nums.reduce((a, b) => a + b);\n    if (sum < target || (sum + target) % 2 !== 0) return 0;\n    let target_sum = (sum + target) >> 1;\n    let dp = new Array(target_sum + 1).fill(0);\n    dp[0] = 1;\n    for (const num of nums) {\n        for (let j = target_sum; j >= num; j--) {\n            dp[j] += dp[j - num];\n        }\n    }\n    return dp[target_sum];\n}"
        }
    },
    "495": {
        "call_functions": {
            "c++": "int findPoisonedDuration(vector<int>& timeSeries, int duration) {\n    if (timeSeries.empty()) return 0;\n    int total = 0;\n    for (int i = 1; i < timeSeries.size(); ++i) {\n        total += min(timeSeries[i] - timeSeries[i - 1], duration);\n    }\n    return total + duration;\n}",
            "java": "public int findPoisonedDuration(int[] timeSeries, int duration) {\n    if (timeSeries.length == 0) return 0;\n    int total = 0;\n    for (int i = 1; i < timeSeries.length; ++i) {\n        total += Math.min(timeSeries[i] - timeSeries[i - 1], duration);\n    }\n    return total + duration;\n}",
            "python": "if __name__ == \"__main__\":\n    time_series = $args[0]\n    duration = $args[1]\n    result = find_poisoned_duration(time_series, duration)\n    print(result)",
            "javascript": "function main() {\n    const timeSeries = $args[0];\n    const duration = $args[1];\n    const result = findPoisonedDuration(timeSeries, duration);\n    console.log(result);\n}"
        }
    },
    "496": {
        "call_functions": {
            "c++": "#include <vector>\n#include <stack>\n#include <unordered_map>\n\nstd::vector<int> nextGreaterElement(std::vector<int>& nums1, std::vector<int>& nums2) {\n    std::unordered_map<int, int> nextGreater;\n    std::stack<int> stk;\n\n    for (int num : nums2) {\n        while (!stk.empty() && stk.top() < num) {\n            nextGreater[stk.top()] = num;\n            stk.pop();\n        }\n        stk.push(num);\n    }\n\n    std::vector<int> result(nums1.size());\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result[i] = nextGreater.count(nums1[i]) ? nextGreater[nums1[i]] : -1;\n    }\n\n    return result;\n}",
            "java": "public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n    HashMap<Integer, Integer> nextGreater = new HashMap<>();\n    Stack<Integer> stack = new Stack<>();\n\n    for (int num : nums2) {\n        while (!stack.isEmpty() && stack.peek() < num) {\n            nextGreater.put(stack.pop(), num);\n        }\n        stack.push(num);\n    }\n\n    int[] result = new int[nums1.length];\n    for (int i = 0; i < nums1.length; i++) {\n        result[i] = nextGreater.getOrDefault(nums1[i], -1);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = next_greater_element(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const nextGreater = new Map();\n    const stack = [];\n\n    nums2.forEach(num => {\n        while (stack.length && stack[stack.length - 1] < num) {\n            nextGreater.set(stack.pop(), num);\n        }\n        stack.push(num);\n    });\n\n    const result = nums1.map(n => nextGreater.get(n) || -1);\n    console.log(result);\n}"
        }
    },
    "497": {
        "call_functions": {
            "c++": "std::vector<std::vector<int>> rects = $args;\nSolution obj(rects);\nstd::vector<int> result = obj.pick();\nfor (int i = 0; i < result.size(); ++i) {\n    std::cout << result[i] << \" \";\n}\nstd::cout << std::endl;",
            "java": "public int[] pick() {\n        int rnd = random.nextInt(totalArea);\n\n        int idx = 0;\n        while (rnd >= areas[idx]) {\n            rnd -= areas[idx];\n            idx++;\n        }\n\n        int x = rects[idx][0] + random.nextInt(rects[idx][2] - rects[idx][0] + 1);\n        int y = rects[idx][1] + random.nextInt(rects[idx][3] - rects[idx][1] + 1);\n        \n        return new int[] {x, y};\n    }",
            "python": "if __name__ == \"__main__\":\n    rects = $args[0]\n    obj = Solution(rects)\n    result = obj.pick()\n    print(result)",
            "javascript": "function pick() {\n    const result = Solution.pick();\n    console.log(result);\n}"
        }
    },
    "498": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<int> findDiagonalOrder(vector<vector<int>>& mat) {\n    int m = mat.size();\n    int n = mat[0].size();\n    vector<int> result(m * n);\n    int row = 0, col = 0;\n    for (int i = 0; i < m * n; i++) {\n        result[i] = mat[row][col];\n        if ((row + col) % 2 == 0) {\n            if (col == n - 1) {\n                row++;\n            } else if (row == 0) {\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == m - 1) {\n                col++;\n            } else if (col == 0) {\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<vector<int>> mat = $args;\n    vector<int> result = findDiagonalOrder(mat);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] findDiagonalOrder(int[][] mat) {\n    int m = mat.length;\n    int n = mat[0].length;\n    int[] result = new int[m * n];\n    int row = 0, col = 0;\n    for (int i = 0; i < m * n; i++) {\n        result[i] = mat[row][col];\n        if ((row + col) % 2 == 0) {\n            if (col == n - 1) {\n                row++;\n            } else if (row == 0) {\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row == m - 1) {\n                col++;\n            } else if (col == 0) {\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    mat = $args[0]\n    result = findDiagonalOrder(mat)\n    print(result)",
            "javascript": "function findDiagonalOrder(mat) {\n    const m = mat.length;\n    const n = mat[0].length;\n    const result = new Array(m * n);\n    let row = 0, col = 0;\n    for (let i = 0; i < m * n; i++) {\n        result[i] = mat[row][col];\n        if ((row + col) % 2 === 0) {\n            if (col === n - 1) {\n                row++;\n            } else if (row === 0) {\n                col++;\n            } else {\n                row--;\n                col++;\n            }\n        } else {\n            if (row === m - 1) {\n                col++;\n            } else if (col === 0) {\n                row++;\n            } else {\n                row++;\n                col--;\n            }\n        }\n    }\n    return result;\n}"
        }
    },
    "499": {
        "call_functions": {
            "c++": "string findShortestWay(vector<vector<int>>& maze, vector<int>& ball, vector<int>& hole) {\n    int m = maze.size(), n = maze[0].size();\n    vector<vector<int>> dist(m, vector<int>(n, INT_MAX)); \n    vector<string> dirs = {\"d\", \"l\", \"r\", \"u\"};\n    vector<vector<int>> dirs_vector = {{1, 0}, {0, -1}, {0, 1}, {-1, 0}};\n    string res = \"\";\n    dist[ball[0]][ball[1]] = 0;\n    auto cmp = [&](const auto& p1, const auto& p2){\n        return p1.first > p2.first || (p1.first == p2.first && p1.second > p2.second);\n    };\n    priority_queue<pair<int, string>, vector<pair<int, string>>, decltype(cmp)> pq(cmp);\n    pq.push({0, \"\"});\n    \n    while (!pq.empty()) {\n        int cur_dist = pq.top().first;\n        string cur_path = pq.top().second;\n        int x = ball[0], y = ball[1];\n        for (char c : cur_path) {\n            if (c == 'd') x += dirs_vector[0][0]; \n            if (c == 'l') y += dirs_vector[1][1];\n            if (c == 'r') y += dirs_vector[2][1];\n            if (c == 'u') x += dirs_vector[3][0];\n        }\n        pq.pop();\n        if (x == hole[0] && y == hole[1]) return cur_path;\n\n        for (int k = 0; k < 4; ++k) {\n            int dist_move = 0, r = x, c = y;\n            while (r >= 0 && r < m && c >= 0 && c < n && maze[r][c] == 0 && (r != hole[0] || c != hole[1])) {\n                r += dirs_vector[k][0];\n                c += dirs_vector[k][1];\n                ++dist_move;\n            }\n            r -= dirs_vector[k][0];\n            c -= dirs_vector[k][1];\n            --dist_move;\n            \n            if (dist[x][y] + dist_move < dist[r][c]) {\n                dist[r][c] = dist[x][y] + dist_move;\n                pq.push({cur_dist + dist_move, cur_path + dirs[k]});\n            }\n        }\n    }\n    \n    return \"impossible\";\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    maze = $args[0]\n    ball = $args[1]\n    hole = $args[2]\n    solution = Solution()\n    result = solution.findShortestWay(maze, ball, hole)\n    print(result)",
            "javascript": "findShortestWay(maze, ball, hole)"
        }
    },
    "500": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\nusing namespace std;\n\nint main() {\n    vector<string> words = $args;\n    vector<string> result = findWords(words);\n    \n    for (const auto& word : result) {\n        cout << word << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}\n",
            "java": "public String[] findWords(String[] words) {\n        HashSet<Character>[] rows = new HashSet[] {\n            new HashSet<Character>() {{\n                add('q'); add('w'); add('e'); add('r'); add('t');\n                add('y'); add('u'); add('i'); add('o'); add('p');\n            }},\n            new HashSet<Character>() {{\n                add('a'); add('s'); add('d'); add('f'); add('g');\n                add('h'); add('j'); add('k'); add('l');\n            }},\n            new HashSet<Character>() {{\n                add('z'); add('x'); add('c'); add('v'); add('b');\n                add('n'); add('m');\n            }}\n        };\n        List<String> res = new ArrayList<>();\n        \n        for (String word : words) {\n            int row = -1;\n            for (int i = 0; i < 3; i++) {\n                if (rows[i].contains(Character.toLowerCase(word.charAt(0)))) {\n                    row = i;\n                    break;\n                }\n            }\n            \n            boolean isOneRow = true;\n            for (char letter : word.toCharArray()) {\n                if (!rows[row].contains(Character.toLowerCase(letter))) {\n                    isOneRow = false;\n                    break;\n                }\n            }\n            \n            if (isOneRow)\n                res.add(word);\n        }\n        \n        return res.toArray(new String[0]);\n    }",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = find_words(words)\n    print(result)",
            "javascript": "function findWords(words) {\n    const rows = [\n        new Set(\"qwertyuiopQWERTYUIOP\".split('')),\n        new Set(\"asdfghjklASDFGHJKL\".split('')),\n        new Set(\"zxcvbnmZXCVBNM\".split(''))\n    ];\n    const res = [];\n\n    for (const word of words) {\n        let row = -1;\n        for (let i = 0; i < 3; i++) {\n            if (rows[i].has(word[0])) {\n                row = i;\n                break;\n            }\n        }\n\n        if (word.split('').every(c => rows[row].has(c))) {\n            res.push(word);\n        }\n    }\n\n    return res;\n}"
        }
    },
    "501": {
        "call_functions": {
            "c++": "void InOrder(TreeNode* root, unordered_map<int, int>& frequencies, int& max_frequency) {\n    if (!root) return;\n    InOrder(root->left, frequencies, max_frequency);\n    frequencies[root->val]++;\n    max_frequency = max(max_frequency, frequencies[root->val]);\n    InOrder(root->right, frequencies, max_frequency);\n}\n\nvector<int> findMode(TreeNode* root) {\n    unordered_map<int, int> frequencies;\n    int max_frequency = 0;\n    InOrder(root, frequencies, max_frequency);\n    vector<int> modes;\n    \n    for (const auto& freq : frequencies) {\n        if (freq.second == max_frequency) modes.push_back(freq.first);\n    }\n    \n    return modes;\n}",
            "java": "public List<Integer> findMode(TreeNode root) {\n    List<Integer> modes = new ArrayList<>();\n    if (root == null) return modes;\n    \n    Map<Integer, Integer> frequencyMap = new HashMap<>();\n    Stack<TreeNode> stack = new Stack<>();\n    TreeNode currentNode = root;\n    int maxFrequency = 0;\n    \n    while (currentNode != null || !stack.isEmpty()) {\n        while (currentNode != null) {\n            stack.add(currentNode);\n            currentNode = currentNode.left;\n        }\n        currentNode = stack.pop();\n        frequencyMap.put(currentNode.val, frequencyMap.getOrDefault(currentNode.val, 0) + 1);\n        maxFrequency = Math.max(maxFrequency, frequencyMap.get(currentNode.val));\n        currentNode = currentNode.right;\n    }\n    \n    for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n        if (entry.getValue() == maxFrequency) modes.add(entry.getKey());\n    }\n    \n    return modes;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = findMode(root)\n    print(result)",
            "javascript": "function findMode(root) {\n    if (!root) return [];\n    \n    const frequencies = new Map();\n    const stack = [];\n    let maxFrequency = 0;\n    let currentNode = root;\n    \n    while (currentNode || stack.length) {\n        while (currentNode) {\n            stack.push(currentNode);\n            currentNode = currentNode.left;\n        }\n        currentNode = stack.pop();\n        frequencies.set(currentNode.val, (frequencies.get(currentNode.val) || 0) + 1);\n        maxFrequency = Math.max(maxFrequency, frequencies.get(currentNode.val));\n        currentNode = currentNode.right;\n    }\n    \n    const modes = [];\n    for (const [key, value] of frequencies) {\n        if (value === maxFrequency) modes.push(key);\n    }\n    \n    return modes;\n}"
        }
    },
    "502": {
        "call_functions": {
            "c++": "#include <queue>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int k = $args;\n    int w = $args;\n    vector<int> profits = $args;\n    vector<int> capital = $args;\n    \n    int result = findMaximizedCapital(k, w, profits, capital);\n    cout << result << endl;\n    \n    return 0;\n}\n",
            "java": "public int findMaximizedCapital(int k, int w, int[] profits, int[] capital)",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    w = $args[1]\n    profits = $args[2]\n    capital = $args[3]\n    result = findMaximizedCapital(k, w, profits, capital)\n    print(result)",
            "javascript": "function findMaximizedCapital(k, w, profits, capital) {\n    const project_pool = profits.map((p, i) => [capital[i], p]).sort((a, b) => a[0] - b[0]);\n    const profit_pool = new MaxPriorityQueue();\n    let index = 0;\n\n    for (let i = 0; i < k; i++) {\n        while (index < project_pool.length && project_pool[index][0] <= w) {\n            profit_pool.insert(project_pool[index++][1]);\n        }\n\n        if (!profit_pool.isEmpty()) {\n            w += profit_pool.removeMax();\n        } else {\n            break;\n        }\n    }\n\n    return w;\n}\n\nclass MaxPriorityQueue {\n    constructor() {\n        this.queue = [];\n    }\n    \n    insert(value) {\n        this.queue.push(value);\n        this.siftUp(this.queue.length - 1);\n    }\n    \n    removeMax() {\n        const maxValue = this.queue[0];\n        const lastValue = this.queue.pop();\n        \n        if (this.queue.length) {\n            this.queue[0] = lastValue;\n            this.siftDown(0);\n        }\n        \n        return maxValue;\n    }\n    \n    siftUp(index) {\n        while (index) {\n            const parentIndex = (index - 1) >> 1;\n            if (this.queue[parentIndex] >= this.queue[index]) break;\n            [this.queue[parentIndex], this.queue[index]] = [this.queue[index], this.queue[parentIndex]];\n            index = parentIndex;\n        }\n    }\n    \n    siftDown(index) {\n        while (true) {\n            const leftIndex = (index << 1) + 1;\n            const rightIndex = leftIndex + 1;\n            let maxIndex = index;\n            if (leftIndex < this.queue.length && this.queue[leftIndex] > this.queue[maxIndex]) maxIndex = leftIndex;\n            if (rightIndex < this.queue.length && this.queue[rightIndex] > this.queue[maxIndex]) maxIndex = rightIndex;\n            if (maxIndex === index) break;\n            [this.queue[index], this.queue[maxIndex]] = [this.queue[maxIndex], this.queue[index]];\n            index = maxIndex;\n        }\n    }\n    \n    isEmpty() {\n        return this.queue.length === 0;\n    }\n}"
        }
    },
    "503": {
        "call_functions": {
            "c++": "#include <vector>\n#include <stack>\n\nstd::vector<int> nextGreaterElements(std::vector<int>& nums) {\n    std::vector<int> result(nums.size(), -1);\n    std::stack<int> s;\n\n    for (int i = 0; i < nums.size() * 2; ++i) {\n        int index = i % nums.size();\n        while (!s.empty() && nums[s.top()] < nums[index]) {\n            result[s.top()] = nums[index];\n            s.pop();\n        }\n        if (i < nums.size()) {\n            s.push(index);\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<int> result = nextGreaterElements(nums);\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] nextGreaterElements(int[] nums) {\n    int n = nums.length;\n    int[] result = new int[n];\n    Stack<Integer> stack = new Stack<>();\n    \n    for (int i = 0; i < n * 2; i++) {\n        int index = i % n;\n        while (!stack.isEmpty() && nums[stack.peek()] < nums[index]) {\n            result[stack.pop()] = nums[index];\n        }\n        if (i < n) {\n            stack.push(index);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = nextGreaterElements(nums)\n    print(result)",
            "javascript": "function nextGreaterElements(nums) {\n  const result = new Array(nums.length).fill(-1);\n  const stack = [];\n\n  for (let i = 0; i < nums.length * 2; i++) {\n    const index = i % nums.length;\n    while (stack.length > 0 && nums[stack[stack.length - 1]] < nums[index]) {\n      result[stack.pop()] = nums[index];\n    }\n    if (i < nums.length) {\n      stack.push(index);\n    }\n  }\n  return result;\n}"
        }
    },
    "504": {
        "call_functions": {
            "c++": "std::string convertToBase7(int num) {\n    if (num == 0) return \"0\";\n    std::string result = \"\";\n    bool negative = num < 0;\n    if (negative) num *= -1;\n    while (num > 0) {\n        result = std::to_string(num % 7) + result;\n        num /= 7;\n    }\n    return negative ? \"-\" + result : result;\n}",
            "java": "public String convertToBase7(int num) {\n    if (num == 0) return \"0\";\n    StringBuilder result = new StringBuilder();\n    boolean negative = num < 0;\n    if (negative) num *= -1;\n    while (num > 0) {\n        result.insert(0, num % 7);\n        num /= 7;\n    }\n    return negative ? \"-\" + result.toString() : result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = convert_to_base7(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = convertToBase7(num);\n    console.log(result);\n}"
        }
    },
    "505": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <utility>\n\nusing namespace std;\n\nint main() {\n    vector<vector<int>> maze = $args;\n    vector<int> start = $args;\n    vector<int> destination = $args;\n\n    int result = shortestDistance(maze, start, destination);\n\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int shortestDistance(int[][] maze, int[] start, int[] destination) {\n    int m = maze.length, n = maze[0].length;\n    int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    int[][] dist = new int[m][n];\n\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            dist[i][j] = -1;\n        }\n    }\n\n    PriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n\n    dist[start[0]][start[1]] = 0;\n    q.offer(new int[]{start[0], start[1], 0});\n\n    while (!q.isEmpty()) {\n        int[] cur = q.poll();\n        int x = cur[0], y = cur[1];\n\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            int step = 0;\n\n            while (newX >= 0 && newX < m && newY >= 0 && newY < n && maze[newX][newY] == 0) {\n                newX += dir[0];\n                newY += dir[1];\n                step++;\n            }\n\n            newX -= dir[0];\n            newY -= dir[1];\n\n            if (dist[newX][newY] == -1 || dist[x][y] + step < dist[newX][newY]) {\n                dist[newX][newY] = dist[x][y] + step;\n                q.offer(new int[]{newX, newY, dist[newX][newY]});\n            }\n        }\n    }\n\n    return dist[destination[0]][destination[1]];\n}",
            "python": "if __name__ == \"__main__\":\n    maze = $args[0]\n    start = $args[1]\n    destination = $args[2]\n    result = shortestDistance(maze, start, destination)\n    print(result)",
            "javascript": "function shortestDistance(maze, start, destination) {\n    const m = maze.length, n = maze[0].length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    const dist = new Array(m).fill(null).map(() => new Array(n).fill(-1));\n\n    const q = [[start[0], start[1], 0]];\n    dist[start[0]][start[1]] = 0;\n\n    while (q.length) {\n        const [x, y, d] = q.shift();\n\n        for (const dir of directions) {\n            let newX = x + dir[0];\n            let newY = y + dir[1];\n            let step = 0;\n\n            while (0 <= newX && newX < m && 0 <= newY && newY < n && maze[newX][newY] === 0) {\n                newX += dir[0];\n                newY += dir[1];\n                step++;\n            }\n\n            newX -= dir[0];\n            newY -= dir[1];\n\n            if (dist[newX][newY] === -1 || dist[x][y] + step < dist[newX][newY]) {\n                dist[newX][newY] = dist[x][y] + step;\n                q.push([newX, newY, dist[newX][newY]]);\n            }\n        }\n    }\n\n    return dist[destination[0]][destination[1]];\n}"
        }
    },
    "506": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> score = $args;\n    std::vector<int> result = findRelativeRanks(score);\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public int[] findRelativeRanks(int[] score) {\n    Integer[] rank_sort = new Integer[score.length];\n    for(int i = 0; i < score.length; ++i) rank_sort[i] = i;\n    Arrays.sort(rank_sort, (i1, i2) -> Integer.compare(score[i2], score[i1]));\n    int[] result = new int[score.length];\n    for(int i = 0; i < rank_sort.length; ++i) result[rank_sort[i]] = i + 1;\n    return result;\n}\n",
            "python": "if __name__ == \"__main__\":\n    score = $args[0]\n    result = find_relative_ranks(score)\n    print(result)",
            "javascript": "function main() {\n    const score = $args;\n    const result = findRelativeRanks(score);\n    console.log(result);\n}\n"
        }
    },
    "507": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool checkPerfectNumber(int num) {\n    if (num <= 1) return false;\n    int sum = 1;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0) {\n            sum += i;\n            if (i * i != num) sum += num / i;\n        }\n    }\n    return sum == num;\n}\n\nint main() {\n    int num = $args;\n    bool result = checkPerfectNumber(num);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int num = $args;\n        boolean result = checkPerfectNumber(num);\n        System.out.println(result);\n    }",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = checkPerfectNumber(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = checkPerfectNumber(num);\n    console.log(result);\n}"
        }
    },
    "508": {
        "call_functions": {
            "c++": "#include <map>\n#include <vector>\n\nvoid helper(TreeNode* root, std::map<int, int>& counts, int& max_count) {\n    if (!root) return;\n    int sum = root->val + helper(root->left, counts, max_count) + helper(root->right, counts, max_count);\n    counts[sum]++;\n    max_count = std::max(max_count, counts[sum]);\n}\n\nstd::vector<int> findFrequentTreeSum(TreeNode* root) {\n    std::map<int, int> counts;\n    int max_count = 0;\n    helper(root, counts, max_count);\n    std::vector<int> result;\n    for (const auto& pair : counts) {\n        if (pair.second == max_count) result.push_back(pair.first);\n    }\n    return result;\n}\n\nint main() {\n    TreeNode* root = $args;\n    std::vector<int> result = findFrequentTreeSum(root);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] findFrequentTreeSum(TreeNode root) {\n    if (root == null) return new int[0];\n    HashMap<Integer, Integer> counts = new HashMap<>();\n    helper(root, counts);\n    int maxCount = 0;\n    for (int count : counts.values()) {\n        maxCount = Math.max(count, maxCount);\n    }\n    List<Integer> list = new LinkedList<>();\n    for (int key : counts.keySet()) {\n        if (counts.get(key) == maxCount) list.add(key);\n    }\n    return list.stream().mapToInt(i -> i).toArray();\n}\n",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = findFrequentTreeSum(root)\n    print(result)",
            "javascript": "function findFrequentTreeSum(root) {\n    const counts = {};\n    helper(root, counts);\n    const maxCount = Math.max(...Object.values(counts));\n    return Object.keys(counts).filter(key => counts[key] === maxCount).map(Number);\n}"
        }
    },
    "509": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = fib(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        int result = fib(n);\n        System.out.println(result);\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = fib(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = fib(n);\n    console.log(result);\n}"
        }
    },
    "513": {
        "call_functions": {
            "c++": "int findBottomLeftValue(TreeNode* root) {\n    int result = 0, maxDepth = 0;\n    helper(root, 1, maxDepth, result);\n    return result;\n}\n\nvoid helper(TreeNode* node, int depth, int& maxDepth, int& result) {\n    if (!node) return;\n    if (depth > maxDepth) {\n        maxDepth = depth;\n        result = node->val;\n    }\n    helper(node->left, depth+1, maxDepth, result);\n    helper(node->right, depth+1, maxDepth, result);\n}\n\nint main() {\n    TreeNode* root = $args;\n    int result = findBottomLeftValue(root);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findBottomLeftValue(TreeNode root) {\n    int[] maxDepth = new int[1];\n    int[] result = new int[1];\n    helper(root, 1, maxDepth, result);\n    return result[0];\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = findBottomLeftValue(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = { maxDepth: 0, value: 0 };\n    helper(root, 1, result);\n    console.log(result.value);\n}\n"
        }
    },
    "514": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string ring = $args;\n    std::string key = $args;\n    int result = findRotateSteps(ring, key);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int findRotateSteps(String ring, String key) {\n    int n = ring.length(), m = key.length();\n    int[][] dp = new int[m + 1][n];\n\n    for (int i = m - 1; i >= 0; --i) {\n        for (int j = 0; j < n; ++j) {\n            dp[i][j] = Integer.MAX_VALUE;\n            for (int k = 0; k < n; ++k) {\n                if (ring.charAt(k) == key.charAt(i)) {\n                    int diff = Math.abs(j - k);\n                    int step = Math.min(diff, n - diff);\n                    dp[i][j] = Math.min(dp[i][j], step + dp[i + 1][k]);\n                }\n            }\n        }\n    }\n\n    return dp[0][0] + m;\n}",
            "python": "if __name__ == \"__main__\":\n    ring = $args[0]\n    key = $args[1]\n    result = find_rotate_steps(ring, key)\n    print(result)",
            "javascript": "function findRotateSteps(ring, key) {\n    const n = ring.length, m = key.length;\n    const dp = Array.from({ length: m + 1 }, () => new Array(n).fill(0));\n\n    for (let i = m - 1; i >= 0; --i) {\n        for (let j = 0; j < n; ++j) {\n            dp[i][j] = Infinity;\n            for (let k = 0; k < n; ++k) {\n                if (ring[k] === key[i]) {\n                    const diff = Math.abs(j - k);\n                    const step = Math.min(diff, n - diff);\n                    dp[i][j] = Math.min(dp[i][j], step + dp[i + 1][k]);\n                }\n            }\n        }\n    }\n\n    return dp[0][0] + m;\n}\n"
        }
    },
    "515": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nvector<int> largestValues(TreeNode* root) {\n    if (!root) return {};\n    vector<int> result;\n    queue<TreeNode*> q;\n    q.push(root);\n\n    while (!q.empty()) {\n        int size = q.size();\n        int max_val = INT_MIN;\n        for (int i = 0; i < size; ++i) {\n            TreeNode* node = q.front();\n            q.pop();\n            max_val = max(max_val, node->val);\n\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n        }\n        result.push_back(max_val);\n    }\n    return result;\n}\n\nint main() {\n    TreeNode* root = $args;\n    vector<int> result = largestValues(root);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> largestValues(TreeNode root) {\n    if (root == null) return new ArrayList<>();\n    List<Integer> result = new ArrayList<>();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        int max_val = Integer.MIN_VALUE;\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n            max_val = Math.max(max_val, node.val);\n\n            if (node.left != null) queue.offer(node.left);\n            if (node.right != null) queue.offer(node.right);\n        }\n        result.add(max_val);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = largestValues(root)\n    print(result)",
            "javascript": "function largestValues(root) {\n    if (!root) return [];\n    const result = [];\n    const queue = [root];\n\n    while (queue.length) {\n        const size = queue.length;\n        let maxVal = Number.MIN_SAFE_INTEGER;\n        for (let i = 0; i < size; i++) {\n            const node = queue.shift();\n            maxVal = Math.max(maxVal, node.val);\n\n            if (node.left) queue.push(node.left);\n            if (node.right) queue.push(node.right);\n        }\n        result.push(maxVal);\n    }\n    return result;\n}"
        }
    },
    "516": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = longestPalindromeSubseq(s);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int longestPalindromeSubseq(String s) {\n    int n = s.length();\n    int[][] dp = new int[n][n];\n    \n    for (int i = n - 1; i >= 0; i--) {\n        dp[i][i] = 1;\n        for (int j = i + 1; j < n; j++) {\n            if (s.charAt(i) == s.charAt(j)) {\n                dp[i][j] = 2 + dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = longestPalindromeSubseq(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = longestPalindromeSubseq(s);\n    console.log(result);\n}"
        }
    },
    "517": {
        "call_functions": {
            "c++": "#include <vector>\n#include <numeric>\n#include <cmath>\n#include <iostream>\n\nint main() {\n    std::vector<int> machines = $args;\n    int result = findMinMoves(machines);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int findMinMoves(int[] machines) {\n    int n = machines.length;\n    int totalDresses = 0;\n    for (int m : machines) totalDresses += m;\n    if (totalDresses % n != 0) return -1;\n    int average = totalDresses / n;\n    int moves = 0, imbalance = 0;\n    \n    for (int i = 0; i < n; i++) {\n        imbalance += machines[i] - average;\n        moves = Math.max(moves, Math.max(Math.abs(imbalance), machines[i] - average));\n    }\n    \n    return moves;\n}",
            "python": "if __name__ == \"__main__\":\n    machines = $args[0]\n    result = find_min_moves(machines)\n    print(result)",
            "javascript": "function main() {\n    const machines = $args;\n    const result = findMinMoves(machines);\n    console.log(result);\n}"
        }
    },
    "518": {
        "call_functions": {
            "c++": "int main() {\n    int amount = $args;\n    vector<int> coins = {1, 2, 5};\n    int result = change(amount, coins);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int change(int amount, int[] coins) {\n    int[] dp = new int[amount + 1];\n    dp[0] = 1;\n    for (int coin : coins) {\n        for (int i = coin; i <= amount; i++) {\n            dp[i] += dp[i - coin];\n        }\n    }\n    return dp[amount];\n}",
            "python": "if __name__ == \"__main__\":\n    amount = $args[0]\n    coins = $args[1]\n    result = change(amount, coins)\n    print(result)",
            "javascript": "function main() {\n    const amount = $args[0];\n    const coins = $args[1];\n    const result = change(amount, coins);\n    console.log(result);\n}"
        }
    },
    "519": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int m = $args;\n    int n = $args;\n    Solution obj(m, n);\n    vector<int> result = obj.flip();\n    cout << '[' << result[0] << ',' << result[1] << ']';\n    return 0;\n}",
            "java": "public int[] flip() {\n        int idx = random.nextInt(total);\n        total--;\n\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    if (idx == 0) {\n                        matrix[i][j] = 1;\n                        return new int[] { i, j };\n                    }\n                    idx--;\n                }\n            }\n        }\n        return new int[] { -1, -1 }; // This line should never be reached\n    }",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    obj = Solution(m, n)\n    result_flip = obj.flip()\n    result_reset = obj.reset()\n    print(result_flip)\n    print(result_reset)",
            "javascript": "function main() {\n    const m = $args[0];\n    const n = $args[1];\n    const obj = new Solution(m, n);\n    const result1 = obj.flip();\n    const result2 = obj.flip();\n    obj.reset();\n    const result3 = obj.flip();\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n}"
        }
    },
    "520": {
        "call_functions": {
            "c++": "bool detectCapitalUse(string word) {\n    int numCapital = 0;\n    for (char c : word) {\n        if (isupper(c)) numCapital++;\n    }\n    return numCapital == 0 || numCapital == word.size() || (numCapital == 1 && isupper(word[0]));\n}"
        }
    },
    "521": {
        "call_functions": {
            "c++": "int main() {\n    string a = $args[0];\n    string b = $args[1];\n    int result = findLUSlength(a, b);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findLUSlength(String a, String b) {\n    if (a.equals(b)) {\n        return -1;\n    }\n    return Math.max(a.length(), b.length());\n}",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = findLUSlength(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = findLUSlength(a, b);\n    console.log(result);\n}"
        }
    },
    "522": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> strs = $args;\n    int result = findLUSlength(strs);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int findLUSlength(List<String> strs) {\n    int maxLength = -1;\n    for(int i = 0; i < strs.size(); ++i) {\n        boolean isUncommon = true;\n        for(int j = 0; j < strs.size(); ++j) {\n            if(i != j && strs.get(j).contains(strs.get(i))) {\n                isUncommon = false;\n                break;\n            }\n        }\n        if(isUncommon) {\n            maxLength = Math.max(maxLength, strs.get(i).length());\n        }\n    }\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    result = find_lus_length(strs)\n    print(result)",
            "javascript": "function main() {\n    const strs = $args;\n    const result = findLUSlength(strs);\n    console.log(result);\n}"
        }
    },
    "523": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nbool checkSubarraySum(std::vector<int>& nums, int k) {\n    int n = nums.size(), sum = 0;\n    std::unordered_map<int, int> mp;\n    mp[0] = -1;\n    for (int i = 0; i < n; ++i) {\n        sum += nums[i];\n        if (k != 0) sum %= k;\n        if (mp.count(sum)) {\n            if (i - mp[sum] > 1) return true;\n        } else {\n            mp[sum] = i;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = 5;\n    bool result = checkSubarraySum(nums, k);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean checkSubarraySum(int[] nums, int k) {\n    int n = nums.length, sum = 0;\n    HashMap<Integer, Integer> map = new HashMap<>();\n    map.put(0, -1);\n    for (int i = 0; i < n; i++) {\n        sum += nums[i];\n        if (k != 0) sum %= k;\n        if (map.containsKey(sum)) {\n            if (i - map.get(sum) > 1) return true;\n        } else {\n            map.put(sum, i);\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = checkSubarraySum(nums, k)\n    print(result)",
            "javascript": "function checkSubarraySum(nums, k) {\n    let n = nums.length, sum = 0, mp = new Map();\n    mp.set(0, -1);\n    for (let i = 0; i < n; i++) {\n        sum += nums[i];\n        if (k !== 0) sum %= k;\n        if (mp.has(sum)) {\n            if (i - mp.get(sum) > 1) return true;\n        } else {\n            mp.set(sum, i);\n        }\n    }\n    return false;\n}"
        }
    },
    "524": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nbool isSubsequence(const std::string &s, const std::string &word) {\n    int i = 0, j = 0;\n    while (i < s.size() && j < word.size()) {\n        if (s[i] == word[j]) {\n            j++;\n        }\n        i++;\n    }\n    return j == word.size();\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> dictionary = {\"word1\", \"word2\", \"word3\"}; // Replace with actual dictionary\n    std::string result = findLongestWord(s, dictionary);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String findLongestWord(String s, String[] dictionary) {\n    String longest = \"\";\n    Arrays.sort(dictionary);\n    for (String word : dictionary) {\n        if (isSubsequence(s, word)) {\n            if (word.length() > longest.length()) {\n                longest = word;\n            }\n        }\n    }\n    return longest;\n}\n\nprivate boolean isSubsequence(String s, String word) {\n    int i = 0, j = 0;\n    while (i < s.length() && j < word.length()) {\n        if (s.charAt(i) == word.charAt(j)) {\n            j++;\n        }\n        i++;\n    }\n    return j == word.length();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    dictionary = $args[1]\n    result = findLongestWord(s, dictionary)\n    print(result)",
            "javascript": "function findLongestWord(s, dictionary) {\n    function isSubsequence(s, word) {\n        let i = 0, j = 0;\n        while (i < s.length && j < word.length) {\n            if (s[i] === word[j]) {\n                j++;\n            }\n            i++;\n        }\n        return j === word.length;\n    }\n\n    dictionary.sort();\n    let longest = '';\n    for (let word of dictionary) {\n        if (isSubsequence(s, word)) {\n            if (word.length > longest.length) {\n                longest = word;\n            }\n        }\n    }\n    return longest;\n}"
        }
    },
    "525": {
        "call_functions": {
            "c++": "int findMaxLength(vector<int>& nums) {\n    unordered_map<int, int> counts;\n    counts[0] = -1;\n    int max_len = 0, count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        count += (nums[i] == 1) ? 1 : -1;\n        if (counts.count(count))\n            max_len = max(max_len, i - counts[count]);\n        else\n            counts[count] = i;\n    }\n    return max_len;\n}",
            "java": "public int findMaxLength(int[] nums) {\n    HashMap<Integer, Integer> counts = new HashMap<>();\n    counts.put(0, -1);\n    int max_len = 0, count = 0;\n    for (int i = 0; i < nums.length; i++) {\n        count += (nums[i] == 1) ? 1 : -1;\n        if (counts.containsKey(count))\n            max_len = Math.max(max_len, i - counts.get(count));\n        else\n            counts.put(count, i);\n    }\n    return max_len;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findMaxLength(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findMaxLength(nums);\n    console.log(result);\n}"
        }
    },
    "526": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = countArrangement(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int countArrangement(int n) {\n    int[] res = new int[]{0};\n    boolean[] visited = new boolean[n+1];\n    helper(n, 1, visited, res);\n    return res[0];\n}\n\nvoid helper(int n, int idx, boolean[] visited, int[] res) {\n    if (idx > n) {\n        res[0]++;\n    }\n\n    for(int i=1; i<=n; i++){\n        if (!visited[i] && (idx % i == 0 || i % idx == 0)) {\n            visited[i] = true;\n            helper(n, idx+1, visited, res);\n            visited[i] = false;\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = countArrangement(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = countArrangement(n);\n    console.log(result);\n}"
        }
    },
    "527": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::string abbrev(const std::string& s, int k);\nstd::vector<std::string> wordsAbbreviation(std::vector<std::string>& words);\n\nint main() {\n    std::vector<std::string> words = $args;\n    std::vector<std::string> result = wordsAbbreviation(words);\n    for (const std::string& word : result) {\n        std::cout << word << std::endl;\n    }\n    return 0;\n}\n\nstd::string abbrev(const std::string& s, int k) {\n    int n = s.length();\n    if (k >= n - 2) {\n        return s;\n    }\n    return s.substr(0, k + 1) + std::to_string(n - k - 2) + s.back();\n}\n\nstd::vector<std::string> wordsAbbreviation(std::vector<std::string>& words) {\n    int n = words.size();\n    std::vector<std::string> abbr;\n    std::vector<int> prefixLen(n, 1);\n\n    for (int i = 0; i < n; ++i) {\n        abbr.push_back(abbrev(words[i], 1));\n    }\n\n    for (int i = 0; i < n; ++i) {\n        while (true) {\n            std::unordered_map<std::string, std::vector<int>> groups;\n            for (int j = i + 1; j < n; ++j) {\n                if (abbr[i] == abbr[j]) {\n                    groups[abbr[j]].push_back(j);\n                }\n            }\n            if (groups.empty()) {\n                break;\n            }\n            for (const auto &group : groups) {\n                for (int id : group.second) {\n                    abbr[id] = abbrev(words[id], ++prefixLen[id]);\n                }\n            }\n            abbr[i] = abbrev(words[i], ++prefixLen[i]);\n        }\n    }\n\n    return abbr;\n}",
            "java": "public String[] wordsAbbreviation(String[] words) {\n    int n = words.length;\n    String[] abbr = new String[n];\n    int[] prefixLen = new int[n];\n\n    for (int i = 0; i < n; i++) {\n        abbr[i] = abbrev(words[i], 1);\n        prefixLen[i] = 1;\n    }\n\n    for (int i = 0; i < n; i++) {\n        while (true) {\n            Map<String, int[]> groups = new HashMap<>();\n            for (int j = 0; j < n; j++) {\n                if (abbr[i].equals(abbr[j])) {\n                    if (!groups.containsKey(abbr[j])) {\n                        groups.put(abbr[j], new int[]{0, 0});\n                    }\n                    groups.get(abbr[j])[0]++;\n                    groups.get(abbr[j])[1] = j;\n                }\n            }\n            if (groups.get(abbr[i])[0] == 1) {\n                break;\n            }\n            abbr[groups.get(abbr[i])[1]] = abbrev(words[groups.get(abbr[i])[1]], ++prefixLen[groups.get(abbr[i])[1]]);\n            abbr[i] = abbrev(words[i], ++prefixLen[i]);\n        }\n    }\n\n    return abbr;\n}\n\nprivate String abbrev(String s, int k) {\n    int n = s.length();\n    if (k >= n - 2) {\n        return s;\n    }\n    return s.substring(0, k + 1) + Integer.toString(n - k - 2) + s.charAt(n - 1);\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = wordsAbbreviation(words)\n    print(result)",
            "javascript": "function wordsAbbreviation(words) {\n    function abbrev(word, k) {\n        return k < word.length - 2 ? word.slice(0, k + 1) + (word.length - k - 2) + word.slice(-1) : word;\n    }\n\n    const n = words.length;\n    const abbr = words.map(word => abbrev(word, 1));\n    const prefixLen = new Array(n).fill(1);\n\n    for (let i = 0; i < n; i++) {\n        while (abbr.filter(a => a === abbr[i]).length > 1) {\n            const groups = {};\n            for (let j = i + 1; j < n; j++) {\n                if (abbr[i] === abbr[j]) {\n                    if (!groups[abbr[j]]) {\n                        groups[abbr[j]] = [];\n                    }\n                    groups[abbr[j]].push(j);\n                }\n            }\n            for (const groupMembers of Object.values(groups)) {\n                for (const j of groupMembers) {\n                    abbr[j] = abbrev(words[j], prefixLen[j] + 1);\n                    prefixLen[j]++;\n                }\n            }\n            abbr[i] = abbrev(words[i], prefixLen[i] + 1);\n            prefixLen[i]++;\n        }\n    }\n\n    return abbr;\n}"
        }
    },
    "529": {
        "call_functions": {
            "c++": "void reveal(vector<vector<char>>& board, int row, int col, vector<vector<int>>& directions) {\n    if (row < 0 || row >= board.size() || col < 0 || col >= board[0].size() || board[row][col] != 'E') return;\n\n    int mines = 0;\n    for (auto& dir : directions) {\n        int newRow = row + dir[0], newCol = col + dir[1];\n        if (newRow >= 0 && newRow < board.size() && newCol >= 0 && newCol < board[0].size() && board[newRow][newCol] == 'M') mines++;\n    }\n\n    if (mines > 0) {\n        board[row][col] = '0' + mines;\n    } else {\n        board[row][col] = 'B';\n        for (auto& dir : directions) {\n            reveal(board, row + dir[0], col + dir[1], directions);\n        }\n    }\n}\n\nvector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\n    int row = click[0], col = click[1];\n\n...\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfFour(n);\n    console.log(result);\n}\n",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    click = $args[1]\n    result = updateBoard(board, click)\n    print(result)"
        }
    },
    "531": {
        "call_functions": {
            "c++": "int findLonelyPixel(vector<vector<char>>& picture) {\n    int m = picture.size(), n = picture[0].size();\n    vector<int> row(m, 0), col(n, 0);\n    \n    for(int i = 0; i < m; ++i) {\n        for(int j = 0; j < n; ++j) {\n            if(picture[i][j] == 'B') {\n                row[i]++;\n                col[j]++;\n            }\n        }\n    }\n    \n    int lonely = 0;\n    for(int i = 0; i < m; ++i) {\n        for(int j = 0; j < n; ++j) {\n            if(picture[i][j] == 'B' && row[i] == 1 && col[j] == 1) {\n                lonely++;\n            }\n        }\n    }\n    \n    return lonely;\n}",
            "java": "public int findLonelyPixel(char[][] picture) {\n    int m = picture.length, n = picture[0].length;\n    int[] row = new int[m], col = new int[n];\n    \n    for(int i = 0; i < m; ++i) {\n        for(int j = 0; j < n; ++j) {\n            if(picture[i][j] == 'B') {\n                row[i]++;\n                col[j]++;\n            }\n        }\n    }\n    \n    int lonely = 0;\n    for(int i = 0; i < m; ++i) {\n        for(int j = 0; j < n; ++j) {\n            if(picture[i][j] == 'B' && row[i] == 1 && col[j] == 1) {\n                lonely++;\n            }\n        }\n    }\n    \n    return lonely;\n}",
            "python": "if __name__ == \"__main__\":\n    picture = $args[0]\n    result = findLonelyPixel(picture)\n    print(result)",
            "javascript": "function main() {\n    const picture = $args;\n    const result = findLonelyPixel(picture);\n    console.log(result);\n}"
        }
    },
    "532": {
        "call_functions": {
            "c++": "#include <unordered_set>\n#include <unordered_map>\n\nint findPairs(vector<int>& nums, int k) {\n    if (k < 0) return 0;\n    unordered_set<int> starters;\n    unordered_map<int, int> occurrences;\n    for (int num : nums) {\n        if (occurrences.count(num + k)) starters.insert(num);\n        if (occurrences.count(num - k)) starters.insert(num - k);\n        occurrences[num]++;\n    }\n    return starters.size();\n}\n\nint main() {\n    vector<int> nums = $args;\n    int k = $args;\n    int result = findPairs(nums, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findPairs(int[] nums, int k) {\n    if (k < 0) return 0;\n    HashSet<Integer> starters = new HashSet<>();\n    HashMap<Integer, Integer> occurrences = new HashMap<>();\n    for (int num : nums) {\n        if (occurrences.containsKey(num + k)) starters.add(num);\n        if (occurrences.containsKey(num - k)) starters.add(num - k);\n        occurrences.put(num, occurrences.getOrDefault(num, 0) + 1);\n    }\n    return starters.size();\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = find_pairs(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = findPairs(nums, k);\n    console.log(result);\n}"
        }
    },
    "533": {
        "call_functions": {
            "c++": "int findBlackPixel(vector<vector<char>>& picture, int target) {\n    int m = picture.size();\n    int n = picture[0].size();\n    vector<int> rows(m, 0), cols(n, 0);\n    unordered_map<string, int> rowCounts;\n    for (int i = 0; i < m; ++i) {\n        string row;\n        for (int j = 0; j < n; ++j) {\n            if (picture[i][j] == 'B') {\n                rows[i]++;\n                cols[j]++;\n            }\n            row.push_back(picture[i][j]);\n        }\n        if (rows[i] == target)\n            rowCounts[row]++;\n    }\n    int ans = 0;\n    for (auto &[row, count] : rowCounts) {\n        if (count == target) {\n            for (int j = 0; j < n; ++j) {\n                if (row[j] == 'B' && cols[j] == target)\n                    ans += count;\n            }\n        }\n    }\n    return ans;\n}",
            "java": "public int findBlackPixel(char[][] picture, int target) {\n    int m = picture.length;\n    int n = picture[0].length;\n    int[] rows = new int[m];\n    int[] cols = new int[n];\n    Map<String, Integer> rowCounts = new HashMap<>();\n    for (int i = 0; i < m; ++i) {\n        StringBuilder row = new StringBuilder();\n        for (int j = 0; j < n; ++j) {\n            if (picture[i][j] == 'B') {\n                rows[i]++;\n                cols[j]++;\n            }\n            row.append(picture[i][j]);\n        }\n        String rowStr = row.toString();\n        if (rows[i] == target)\n            rowCounts.put(rowStr, rowCounts.getOrDefault(rowStr, 0) + 1);\n    }\n    int ans = 0;\n    for (Map.Entry<String, Integer> entry : rowCounts.entrySet()) {\n        String row = entry.getKey();\n        int count = entry.getValue();\n        if (count == target) {\n            for (int j = 0; j < n; ++j) {\n                if (row.charAt(j) == 'B' && cols[j] == target)\n                    ans += count;\n            }\n        }\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    picture = $args[0]\n    target = $args[1]\n    result = findBlackPixel(picture, target)\n    print(result)",
            "javascript": "function findBlackPixel(picture, target) {\n    const m = picture.length;\n    const n = picture[0].length;\n    const rows = new Array(m).fill(0);\n    const cols = new Array(n).fill(0);\n    const rowCounts = new Map();\n    for (let i = 0; i < m; ++i) {\n        let row = \"\";\n        for (let j = 0; j < n; ++j) {\n            if (picture[i][j] === 'B') {\n                rows[i]++;\n                cols[j]++;\n            }\n            row += picture[i][j];\n        }\n        if (rows[i] === target)\n            rowCounts.set(row, (rowCounts.get(row) || 0) + 1);\n    }\n    let ans = 0;\n    for (let [row, count] of rowCounts.entries()) {\n        if (count === target) {\n            for (let j = 0; j < n; ++j) {\n                if (row[j] === 'B' && cols[j] === target)\n                    ans += count;\n            }\n        }\n    }\n    return ans;\n}"
        }
    },
    "535": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <string>\n#include <random>\n\nint main() {\n    std::string longUrl = $args;\n    Solution obj;\n    std::string result = obj.encode(longUrl);\n    std::cout << result << std::endl;\n    std::string originalUrl = obj.decode(result);\n    std::cout << originalUrl << std::endl;\n    return 0;\n}",
            "java": "public String encode(String longUrl) {\n        StringBuilder keyBuilder;\n        String key;\n\n        do {\n            keyBuilder = new StringBuilder();\n\n            for (int i = 0; i < 6; i++) {\n                keyBuilder.append(alphabet.charAt(new Random().nextInt(alphabet.length())));\n            }\n\n            key = keyBuilder.toString();\n        } while (urlMap.containsKey(key));\n\n        urlMap.put(key, longUrl);\n        return \"http://tinyurl.com/\" + key;\n    }\n\n    public String decode(String shortUrl) {\n        return urlMap.get(shortUrl.substring(19));\n    }",
            "python": "if __name__ == \"__main__\":\n    longUrl = $args[0]\n    shortUrl = $args[1]\n    solution = Solution()\n    encoded_url = solution.encode(longUrl)\n    decoded_url = solution.decode(shortUrl)\n    print(encoded_url)\n    print(decoded_url)",
            "javascript": "function main() {\n    const longUrl = $args;\n    const solution = new Solution();\n    const shortUrl = solution.encode(longUrl);\n    const decodedUrl = solution.decode(shortUrl);\n    console.log(decodedUrl);\n}"
        }
    },
    "537": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n\nint main() {\n    std::string num1 = $args;\n    std::string num2 = $args;\n    std::string result = complexNumberMultiply(num1, num2);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String complexNumberMultiply(String num1, String num2) {\n    String[] tokens1 = num1.split(\"\\\\+|i\");\n    String[] tokens2 = num2.split(\"\\\\+|i\");\n    int real1 = Integer.parseInt(tokens1[0]);\n    int imag1 = Integer.parseInt(tokens1[1]);\n    int real2 = Integer.parseInt(tokens2[0]);\n    int imag2 = Integer.parseInt(tokens2[1]);\n\n    int real = real1 * real2 - imag1 * imag2;\n    int imag = real1 * imag2 + real2 * imag1;\n\n    return real + \"+\" + imag + \"i\";\n}",
            "python": "if __name__ == \"__main__\":\n    num1 = $args[0]\n    num2 = $args[1]\n    result = complexNumberMultiply(num1, num2)\n    print(result)",
            "javascript": "function main() {\n    const num1 = $args[0];\n    const num2 = $args[1];\n    const result = complexNumberMultiply(num1, num2);\n    console.log(result);\n}"
        }
    },
    "539": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <climits>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> timePoints = $args;\n    int result = findMinDifference(timePoints);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int findMinDifference(List<String> timePoints) {\n    Collections.sort(timePoints);\n    int minDifference = Integer.MAX_VALUE;\n\n    for (int i = 0; i < timePoints.size(); ++i) {\n        int curDifference = Math.abs((Integer.parseInt(timePoints.get(i).substring(0, 2)) * 60 + Integer.parseInt(timePoints.get(i).substring(3, 5))) - (Integer.parseInt(timePoints.get((i + 1) % timePoints.size()).substring(0, 2)) * 60 + Integer.parseInt(timePoints.get((i + 1) % timePoints.size()).substring(3, 5))));\n        minDifference = Math.min(minDifference, curDifference > 720 ? 1440 - curDifference : curDifference);\n    }\n\n    return minDifference;\n}",
            "python": "if __name__ == \"__main__\":\n    timePoints = $args[0]\n    result = findMinDifference(timePoints)\n    print(result)",
            "javascript": "function findMinDifference(timePoints) {\n    timePoints.sort();\n    let minDifference = Infinity;\n\n    for (let i = 0; i < timePoints.length; ++i) {\n        const [h1, m1] = timePoints[i].split(':').map(Number);\n        const [h2, m2] = timePoints[(i + 1) % timePoints.length].split(':').map(Number);\n        const curDifference = Math.abs((h1 * 60 + m1) - (h2 * 60 + m2));\n        minDifference = Math.min(minDifference, curDifference > 720 ? 1440 - curDifference : curDifference);\n    }\n\n    return minDifference;\n}"
        }
    },
    "540": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = singleNonDuplicate(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int singleNonDuplicate(int[] nums) {\n    int low = 0, high = nums.length - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (mid % 2 == 1)\n            mid--;\n        if (nums[mid] == nums[mid + 1])\n            low = mid + 2;\n        else\n            high = mid;\n    }\n    return nums[low];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = singleNonDuplicate(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = singleNonDuplicate(nums);\n    console.log(result);\n}"
        }
    },
    "541": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args[0];\n    int k = $args[1];\n    string result = reverseStr(s, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String reverseStr(String s, int k) {\n    char[] chars = s.toCharArray();\n    for (int i = 0; i < chars.length; i += 2 * k) {\n        int left = i;\n        int right = Math.min(i + k - 1, chars.length - 1);\n        while (left < right) {\n            char temp = chars[left];\n            chars[left++] = chars[right];\n            chars[right--] = temp;\n        }\n    }\n    return new String(chars);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = reverseStr(s, k)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const k = $args[1];\n    const result = reverseStr(s, k);\n    console.log(result);\n}"
        }
    },
    "542": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nvector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n    int m = mat.size();\n    int n = mat[0].size();\n    vector<vector<int>> ans(m, vector<int>(n, INT_MAX - 100000));\n    \n    queue<pair<int, int>> q;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (mat[i][j] == 0) {\n                ans[i][j] = 0;\n                q.push({i, j});\n            }\n        }\n    }\n\n    vector<pair<int, int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    while (!q.empty()) {\n        int x = q.front().first;\n        int y = q.front().second;\n        q.pop();\n        \n        for (pair<int, int>& dir : dirs) {\n            int newX = x + dir.first;\n            int newY = y + dir.second;\n            if (newX >= 0 && newY >= 0 && newX < m && newY < n && ans[newX][newY] > ans[x][y] + 1) {\n                ans[newX][newY] = ans[x][y] + 1;\n                q.push({newX, newY});\n            }\n        }\n    }\n    return ans;\n}\n",
            "java": "public int[][] updateMatrix(int[][] mat) {\n    int m = mat.length;\n    int n = mat[0].length;\n    int[][] distance = new int[m][n];\n    Queue<int[]> queue = new LinkedList<>();\n\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (mat[i][j] == 0) {\n                distance[i][j] = 0;\n                queue.add(new int[]{i, j});\n            } else {\n                distance[i][j] = Integer.MAX_VALUE;\n            }\n        }\n    }\n\n    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    while (!queue.isEmpty()) {\n        int[] current = queue.poll();\n        int x = current[0];\n        int y = current[1];\n\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newY >= 0 && newX < m && newY < n && distance[newX][newY] > distance[x][y] + 1) {\n                distance[newX][newY] = distance[x][y] + 1;\n                queue.add(new int[]{newX, newY});\n            }\n        }\n    }\n    return distance;\n}",
            "python": "if __name__ == \"__main__\":\n    mat = $args[0]\n    result = updateMatrix(mat)\n    print(result)",
            "javascript": "function main() {\n    const mat = $args;\n    const result = updateMatrix(mat);\n    console.log(result);\n}"
        }
    },
    "544": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    string result = findContestMatch(n);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public String findContestMatch(int n) {\n    String[] matches = new String[n];\n    for (int i = 1; i <= n; i++) {\n        matches[i - 1] = Integer.toString(i);\n    }\n\n    while (n > 1) {\n        for (int i = 0; i < n / 2; i++) {\n            matches[i] = \"(\" + matches[i] + \",\" + matches[n - 1 - i] + \")\";\n        }\n        n /= 2;\n    }\n\n    return matches[0];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findContestMatch(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = findContestMatch(n);\n    console.log(result);\n}"
        }
    },
    "546": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> boxes = $args;\n    int result = removeBoxes(boxes);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int removeBoxes(int[] boxes) {\n    int[][][] dp = new int[100][100][100];\n    return dfs(boxes, dp, 0, boxes.length - 1, 0);\n}\n\nprivate int dfs(int[] boxes, int[][][] dp, int l, int r, int k) {\n    if (l > r) return 0;\n    if (dp[l][r][k] != 0) return dp[l][r][k];\n\n    while (r > l && boxes[r] == boxes[r - 1]) {r--; k++;}\n\n    dp[l][r][k] = (k + 1) * (k + 1) + dfs(boxes, dp, l, r - 1, 0);\n\n    for (int i = l; i < r; i++) {\n        if (boxes[i] == boxes[r]) {\n            dp[l][r][k] = Math.max(dp[l][r][k], dfs(boxes, dp, l, i, k + 1) + dfs(boxes, dp, i + 1, r - 1, 0));\n        }\n    }\n\n    return dp[l][r][k];\n}",
            "python": "if __name__ == \"__main__\":\n    boxes = $args[0]\n    result = removeBoxes(boxes)\n    print(result)",
            "javascript": "function removeBoxes(boxes) {\n    const dfs = (l, r, k) => {\n        if (l > r) return 0;\n        if (dp[l][r][k] !== 0) return dp[l][r][k];\n\n        while (r > l && boxes[r] == boxes[r - 1]) {r--; k++;}\n\n        dp[l][r][k] = (k + 1) * (k + 1) + dfs(l, r - 1, 0);\n\n        for (let i = l; i < r; i++) {\n            if (boxes[i] == boxes[r]) {\n                dp[l][r][k] = Math.max(dp[l][r][k], dfs(l, i, k + 1) + dfs(i + 1, r - 1, 0));\n            }\n        }\n\n        return dp[l][r][k];\n    };\n\n    let dp = Array.from({ length: 100 }, () => Array.from({ length: 100 }, () => Array(100).fill(0)));\n    return dfs(0, boxes.length - 1, 0);\n}"
        }
    },
    "547": {
        "call_functions": {
            "c++": "#include <vector>\n\nusing std::vector;\n\nvoid dfs(vector<vector<int>>& isConnected, vector<bool>& visited, int i);\n\nint findCircleNum(vector<vector<int>>& isConnected);\n\nint main() {\n    vector<vector<int>> isConnected = $args;\n    int result = findCircleNum(isConnected);\n    cout << result << endl;\n    return 0;\n}\n\nvoid dfs(vector<vector<int>>& isConnected, vector<bool>& visited, int i) {\n    visited[i] = true;\n    for (int j = 0; j < isConnected.size(); j++) {\n        if (isConnected[i][j] == 1 && !visited[j]) {\n            dfs(isConnected, visited, j);\n        }\n    }\n}\n\nint findCircleNum(vector<vector<int>>& isConnected) {\n    int provinces = 0;\n    vector<bool> visited(isConnected.size(), false);\n    for (int i = 0; i < isConnected.size(); i++) {\n        if (!visited[i]) {\n            dfs(isConnected, visited, i);\n            provinces++;\n        }\n    }\n    return provinces;\n}",
            "java": "public int findCircleNum(int[][] isConnected) {\n    int provinces = 0;\n    boolean[] visited = new boolean[isConnected.length];\n    for (int i = 0; i < isConnected.length; i++) {\n        if (!visited[i]) {\n            dfs(isConnected, visited, i);\n            provinces++;\n        }\n    }\n    return provinces;\n}\n\nprivate void dfs(int[][] isConnected, boolean[] visited, int i) {\n    visited[i] = true;\n    for (int j = 0; j < isConnected.length; j++) {\n        if (isConnected[i][j] == 1 && !visited[j]) {\n            dfs(isConnected, visited, j);\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    isConnected = $args[0]\n    result = findCircleNum(isConnected)\n    print(result)",
            "javascript": "function findCircleNum(isConnected) {\n    function dfs(isConnected, visited, i) {\n        visited[i] = true;\n        for (let j = 0; j < isConnected.length; j++) {\n            if (isConnected[i][j] === 1 && !visited[j]) {\n                dfs(isConnected, visited, j);\n            }\n        }\n    }\n\n    let provinces = 0;\n    const visited = new Array(isConnected.length).fill(false);\n    for (let i = 0; i < isConnected.length; i++) {\n        if (!visited[i]) {\n            dfs(isConnected, visited, i);\n            provinces++;\n        }\n    }\n    return provinces;\n}"
        }
    },
    "548": {
        "call_functions": {
            "c++": "bool find_triplet_equal_sum(const std::vector<int>& nums) {\n    int n = nums.size();\n    std::vector<int> prefix_sum(n + 1, 0);\n\n    for (int i = 0; i < n; ++i) {\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i];\n    }\n\n    for (int i = 1; i + 2 < n; ++i) {\n        for (int j = i + 2; j + 1 < n; ++j) {\n            for (int k = j + 2; k < n; ++k) {\n                int s1 = prefix_sum[i];\n                int s2 = prefix_sum[j] - prefix_sum[i + 1];\n                int s3 = prefix_sum[k] - prefix_sum[j + 1];\n                int s4 = prefix_sum[n] - prefix_sum[k + 1];\n                if (s1 == s2 && s2 == s3 && s3 == s4) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
            "java": "boolean find_triplet_equal_sum(int[] nums) {\n    int n = nums.length;\n    int[] prefix_sum = new int[n + 1];\n\n    for (int i = 0; i < n; ++i) {\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i];\n    }\n\n    for (int i = 1; i + 2 < n; ++i) {\n        for (int j = i + 2; j + 1 < n; ++j) {\n            for (int k = j + 2; k < n; ++k) {\n                int s1 = prefix_sum[i];\n                int s2 = prefix_sum[j] - prefix_sum[i + 1];\n                int s3 = prefix_sum[k] - prefix_sum[j + 1];\n                int s4 = prefix_sum[n] - prefix_sum[k + 1];\n                if (s1 == s2 && s2 == s3 && s3 == s4) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = find_triplet_equal_sum(nums)\n    print(result)",
            "javascript": "function find_triplet_equal_sum(nums) {\n    const n = nums.length;\n    const prefix_sum = new Array(n + 1).fill(0);\n\n    for (let i = 0; i < n; ++i) {\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i];\n    }\n\n    for (let i = 1; i + 2 < n; ++i) {\n        for (let j = i + 2; j + 1 < n; ++j) {\n            for (let k = j + 2; k < n; ++k) {\n                const s1 = prefix_sum[i];\n                const s2 = prefix_sum[j] - prefix_sum[i + 1];\n                const s3 = prefix_sum[k] - prefix_sum[j + 1];\n                const s4 = prefix_sum[n] - prefix_sum[k + 1];\n                if (s1 === s2 && s2 === s3 && s3 === s4) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"
        }
    },
    "551": {
        "call_functions": {
            "c++": "#include <string>\n#include <iostream>\n\nbool checkRecord(std::string s) {\n    int late = 0, absent = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'A') {\n            absent++;\n            late = 0;\n        } else if (s[i] == 'L') {\n            late++;\n        } else {\n            late = 0;\n        }\n\n        if (absent >= 2 || late >= 3) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::string s = $args;\n    bool result = checkRecord(s);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean checkRecord(String s) {\n    int late = 0, absent = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == 'A') {\n            absent++;\n            late = 0;\n        } else if (s.charAt(i) == 'L') {\n            late++;\n        } else {\n            late = 0;\n        }\n\n        if (absent >= 2 || late >= 3) return false;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = checkRecord(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = checkRecord(s);\n    console.log(result);\n}"
        }
    },
    "552": {
        "call_functions": {
            "c++": "int checkRecord(int n) {\n    int M = 1000000007;\n    vector<long long> dp(6, 1);  // {latent state 0, latent state 1, ..., latent state 5}\n    while (n--) {\n        vector<long long> next_dp(6, 0);\n        next_dp[0] = (dp[0] + dp[1] + dp[2]) % M;\n        next_dp[1] = dp[0];\n        next_dp[2] = dp[1];\n        next_dp[3] = (dp[3] + dp[4] + dp[5]) % M;\n        next_dp[4] = dp[3];\n        next_dp[5] = dp[4];\n        dp = next_dp;\n    }\n    return (dp[0] + dp[1] + dp[2] + dp[3] + dp[4] + dp[5]) % M;\n}",
            "java": "public int checkRecord(int n) {\n    int M = 1000000007;\n    long[] dp = new long[6];  // {latent state 0, latent state 1, ..., latent state 5}\n    Arrays.fill(dp, 1);\n    while (n-- > 0) {\n        long[] next_dp = new long[6];\n        next_dp[0] = (dp[0] + dp[1] + dp[2]) % M;\n        next_dp[1] = dp[0];\n        next_dp[2] = dp[1];\n        next_dp[3] = (dp[3] + dp[4] + dp[5]) % M;\n        next_dp[4] = dp[3];\n        next_dp[5] = dp[4];\n        dp = next_dp;\n    }\n    return (int) ((dp[0] + dp[1] + dp[2] +\n                   dp[3] + dp[4] + dp[5]) % M);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = checkRecord(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = checkRecord(n);\n    console.log(result);\n}"
        }
    },
    "553": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    std::string result = optimalDivision(nums);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String optimalDivision(int[] nums) {\n    int n = nums.length;\n    if (n == 1) return Integer.toString(nums[0]);\n    if (n == 2) return Integer.toString(nums[0]) + \"/\" + Integer.toString(nums[1]);\n    StringBuilder res = new StringBuilder(Integer.toString(nums[0]) + \"/(\");\n    for (int i = 1; i < n - 1; ++i) {\n        res.append(Integer.toString(nums[i])).append(\"/\");\n    }\n    res.append(Integer.toString(nums[n - 1])).append(\")\");\n    return res.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = optimal_division(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = optimalDivision(nums);\n    console.log(result);\n}"
        }
    },
    "554": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> wall = $args;\n    int result = leastBricks(wall);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int leastBricks(List<List<Integer>> wall)",
            "python": "if __name__ == \"__main__\":\n    wall = $args[0]\n    result = least_bricks(wall)\n    print(result)",
            "javascript": "function main() {\n    const wall = $args;\n    const result = leastBricks(wall);\n    console.log(result);\n}"
        }
    },
    "555": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::string splitLoopedString(std::vector<std::string>& strs) {\n    std::string ans;\n    std::string cur;\n    for (auto &s : strs) {\n        std::string rev(s.rbegin(), s.rend());\n        cur += std::max(s, rev);\n    }\n\n    for (size_t i = 0, k = 0; i < strs.size(); ++i) {\n        std::string rev(strs[i].rbegin(), strs[i].rend());\n        for (auto &xstr : {strs[i], rev}) {\n            for (size_t j = 0; j < xstr.size(); ++j) {\n                std::string t = xstr.substr(j) + cur.substr(k + xstr.size()) + cur.substr(0, k) + xstr.substr(0, j);\n                ans = std::max(ans, t);\n            }\n        }\n        k += strs[i].size();\n    }\n    return ans;\n}\n",
            "java": "public String splitLoopedString(String[] strs) {\n    String ans = \"\", cur = \"\";\n    for (String s : strs) {\n        String rev = new StringBuilder(s).reverse().toString();\n        cur += (s.compareTo(rev) > 0) ? s : rev;\n    }\n\n    for (int i = 0, k = 0; i < strs.length; i++) {\n        String rev = new StringBuilder(strs[i]).reverse().toString();\n        for (String xstr : Arrays.asList(strs[i], rev)) {\n            for (int j = 0; j < xstr.length(); j++) {\n                String t = xstr.substring(j) + cur.substring(k + xstr.length()) + cur.substring(0, k) + xstr.substring(0, j);\n                ans = ans.compareTo(t) > 0 ? ans : t;\n            }\n        }\n        k += strs[i].length();\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    result = splitLoopedString(strs)\n    print(result)",
            "javascript": "function splitLoopedString(strs) {\n    let ans = \"\", cur = \"\";\n    strs.forEach(s => {\n        const rev = s.split('').reverse().join('');\n        cur += s > rev ? s : rev;\n    });\n\n    for (let i = 0, k = 0; i < strs.length; i++) {\n        let rev = strs[i].split('').reverse().join('');\n        [strs[i], rev].forEach(xstr => {\n            for (let j = 0; j < xstr.length; j++) {\n                let t = xstr.slice(j) + cur.slice(k + xstr.length) + cur.slice(0, k) + xstr.slice(0, j);\n                ans = ans > t ? ans : t;\n            }\n        });\n        k += strs[i].length;\n    }\n    return ans;\n}"
        }
    },
    "556": {
        "call_functions": {
            "c++": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int32_t result = nextGreaterElement(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int nextGreaterElement(int n) {\n        char[] number = String.valueOf(n).toCharArray();\n        int i, j;\n        for (i = number.length - 1; i > 0; i--) {\n            if (number[i - 1] < number[i]) {\n                break;\n            }\n        }\n\n        if (i == 0) {\n            return -1;\n        }\n\n        int x = number[i - 1], smallest = i;\n        for (j = i + 1; j < number.length; j++) {\n            if (number[j] > x && number[j] < number[smallest]) {\n                smallest = j;\n            }\n        }\n\n        char temp = number[i - 1];\n        number[i - 1] = number[smallest];\n        number[smallest] = temp;\n\n        Arrays.sort(number, i, number.length);\n\n        long result = Long.parseLong(new String(number));\n\n        return (result <= Integer.MAX_VALUE) ? (int) result : -1;\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = nextGreaterElement(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = nextGreaterElement(n);\n    console.log(result);\n}"
        }
    },
    "557": {
        "call_functions": {
            "c++": "#include <string>\n#include <algorithm>\n#include <sstream>\n\nint main() {\n    std::string s = $args;\n    std::string result = reverseWordsInString(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String reverseWordsInString(String s) {\n    String[] words = s.split(\" \");\n    for (int i = 0; i < words.length; i++) {\n        words[i] = new StringBuilder(words[i]).reverse().toString();\n    }\n    return String.join(\" \", words);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = reverse_words_in_string(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = reverseWordsInString(s);\n    console.log(result);\n}"
        }
    },
    "560": {
        "call_functions": {
            "c++": "int subarraySum(vector<int>& nums, int k) {\n    unordered_map<int, int> prefixSumFrequency;\n    prefixSumFrequency[0] = 1;\n    int prefixSum = 0, result = 0;\n    \n    for (int num : nums) {\n        prefixSum += num;\n        result += prefixSumFrequency[prefixSum - k];\n        prefixSumFrequency[prefixSum]++;\n    }\n    \n    return result;\n}",
            "java": "public int subarraySum(int[] nums, int k) {\n    Map<Integer, Integer> prefixSumFrequency = new HashMap<>();\n    prefixSumFrequency.put(0, 1);\n    int prefixSum = 0, result = 0;\n    \n    for (int num : nums) {\n        prefixSum += num;\n        result += prefixSumFrequency.getOrDefault(prefixSum - k, 0);\n        prefixSumFrequency.put(prefixSum, prefixSumFrequency.getOrDefault(prefixSum, 0) + 1);\n    }\n    \n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = subarraySum(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = subarraySum(nums, k);\n    console.log(result);\n}"
        }
    },
    "561": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = arrayPairSum(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int arrayPairSum(int[] nums) {\n    Arrays.sort(nums);\n    int sum = 0;\n    for (int i = 0; i < nums.length; i += 2) {\n        sum += nums[i];\n    }\n    return sum;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = array_pair_sum(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = arrayPairSum(nums);\n    console.log(result);\n}"
        }
    },
    "562": {
        "call_functions": {
            "c++": "int longestLine(vector<vector<int>>& mat) {\n    int rows = mat.size();\n    int cols = mat[0].size();\n    int max_length = 0;\n    vector<vector<vector<int>>> dp(rows, vector<vector<int>>(cols, vector<int>(4, 0)));\n\n    for (int r = 0; r < rows; ++r) {\n        for (int c = 0; c < cols; ++c) {\n            if (mat[r][c] == 1) {\n                dp[r][c][0] = r > 0 ? dp[r - 1][c][0] + 1 : 1;\n                dp[r][c][1] = c > 0 ? dp[r][c - 1][1] + 1 : 1;\n                dp[r][c][2] = (r > 0 && c > 0) ? dp[r - 1][c - 1][2] + 1 : 1;\n                dp[r][c][3] = (r > 0 && c < cols - 1) ? dp[r - 1][c + 1][3] + 1 : 1;\n                max_length = max(max_length, max(dp[r][c][0], max(dp[r][c][1], max(dp[r][c][2], dp[r][c][3]))));\n            }\n        }\n    }\n    return max_length;\n}",
            "java": "public int longestLine(int[][] mat) {\n    int rows = mat.length;\n    int cols = mat[0].length;\n    int max_length = 0;\n    int[][][] dp = new int[rows][cols][4];\n\n    for (int r = 0; r < rows; ++r) {\n        for (int c = 0; c < cols; ++c) {\n            if (mat[r][c] == 1) {\n                dp[r][c][0] = r > 0 ? dp[r - 1][c][0] + 1 : 1;\n                dp[r][c][1] = c > 0 ? dp[r][c - 1][1] + 1 : 1;\n                dp[r][c][2] = (r > 0 && c > 0) ? dp[r - 1][c - 1][2] + 1 : 1;\n                dp[r][c][3] = (r > 0 && c < cols - 1) ? dp[r - 1][c + 1][3] + 1 : 1;\n                max_length = Math.max(max_length, Math.max(dp[r][c][0], Math.max(dp[r][c][1], Math.max(dp[r][c][2], dp[r][c][3]))));\n            }\n        }\n    }\n    return max_length;\n}",
            "python": "if __name__ == \"__main__\":\n    mat = $args[0]\n    result = longestLine(mat)\n    print(result)",
            "javascript": "function main() {\n    const mat = $args;\n    const result = longestLine(mat);\n    console.log(result);\n}"
        }
    },
    "563": {
        "call_functions": {
            "c++": "int main() {\n    TreeNode* root = $args;\n    int result = findTilt(root);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findTilt(TreeNode root) {\n    int[] tiltSum = new int[] {0};\n    findTiltUtil(root, tiltSum);\n    return tiltSum[0];\n}\n\nprivate int findTiltUtil(TreeNode root, int[] tiltSum) {\n    if (root == null) {\n        return 0;\n    }\n\n    int leftSum = findTiltUtil(root.left, tiltSum);\n    int rightSum = findTiltUtil(root.right, tiltSum);\n\n    tiltSum[0] += Math.abs(leftSum - rightSum);\n    return root.val + leftSum + rightSum;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = findTilt(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = findTilt(root);\n    console.log(result);\n}"
        }
    },
    "564": {
        "call_functions": {
            "c++": "#include <string>\n#include <cmath>\n#include <limits>\n#include <iostream>\n\nbool isPalindrome(std::string str) {\n    int left = 0;\n    int right = str.length() - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nint closestPalindrome(std::string n) {\n    int num = std::stoi(n);\n    int left = num - 1;\n    int right = num + 1;\n\n    while (true) {\n        if (isPalindrome(std::to_string(left))) {\n            return left;\n        } \n        if (isPalindrome(std::to_string(right))) {\n            return right;\n        }\n        left--;\n        right++;\n    }\n}\n\nint main() {\n    std::string n = $args;\n    int result = closestPalindrome(n);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public static int closestPalindrome(String n) {\n        int num = Integer.parseInt(n);\n        int left = num - 1;\n        int right = num + 1;\n\n        while (true) {\n            if (isPalindrome(Integer.toString(left))) {\n                return left;\n            }\n            if (isPalindrome(Integer.toString(right))) {\n                return right;\n            }\n            left--;\n            right++;\n        }\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = closest_palindrome(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = closestPalindrome(n);\n    console.log(result);\n}"
        }
    },
    "565": {
        "call_functions": {
            "c++": "int arrayNesting(vector<int>& nums) {\n    int n = nums.size();\n    int max_len = 0;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] != -1) {       \n            int start = nums[i];\n            int count = 0;\n            while (nums[start] != -1) {\n                int temp = start;\n                start = nums[start];\n                count++;\n                nums[temp]=-1;\n            }\n            max_len = max(max_len, count);\n        }\n    }\n    return max_len;\n}",
            "java": "public int arrayNesting(int[] nums) {\n    int n = nums.length;\n    int max_len = 0;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] != -1) {       \n            int start = nums[i];\n            int count = 0;\n            while (nums[start] != -1) {\n                int temp = start;\n                start = nums[start];\n                count++;\n                nums[temp]=-1;\n            }\n            max_len = Math.max(max_len, count);\n        }\n    }\n    return max_len;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = arrayNesting(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = arrayNesting(nums);\n    console.log(result);\n}"
        }
    },
    "566": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> mat = $args;\n    int r = 2;\n    int c = 3;\n    vector<vector<int>> result = matrixReshape(mat, r, c);\n    for (int i = 0; i < result.size(); ++i) {\n        for (int j = 0; j < result[0].size(); ++j) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n",
            "java": "public int[][] matrixReshape(int[][] mat, int r, int c) {\n    int m = mat.length;\n    int n = mat[0].length;\n    if (m * n != r * c) {\n        return mat;\n    }\n\n    int[][] reshaped = new int[r][c];\n    for (int i = 0; i < m * n; ++i) {\n        reshaped[i / c][i % c] = mat[i / n][i % n];\n    }\n\n    return reshaped;\n}",
            "python": "if __name__ == \"__main__\":\n    mat = $args[0]\n    r = $args[1]\n    c = $args[2]\n    result = matrixReshape(mat, r, c)\n    print(result)",
            "javascript": "function main() {\n    const mat = $args[0];\n    const r = $args[1];\n    const c = $args[2];\n    const result = matrixReshape(mat, r, c);\n    console.log(result);\n}"
        }
    },
    "567": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nbool checkInclusion(std::string s1, std::string s2) {\n    std::vector<int> s1_map(26, 0);\n    std::vector<int> s2_map(26, 0);\n    if (s1.length() > s2.length()) return false;\n\n    for (int i = 0; i < s1.length(); ++i) {\n        ++s1_map[s1[i] - 'a'];\n        ++s2_map[s2[i] - 'a'];\n    }\n\n    for (int i = 0; i < s2.length() - s1.length(); ++i) {\n        if (s1_map == s2_map) return true;\n        --s2_map[s2[i] - 'a'];\n        ++s2_map[s2[i + s1.length()] - 'a'];\n    }\n\n    return s1_map == s2_map;\n}\n\nint main() {\n    std::string s1 = $args;\n    std::string s2 = $args;\n    bool result = checkInclusion(s1, s2);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean checkInclusion(String s1, String s2)",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = checkInclusion(s1, s2)\n    print(result)",
            "javascript": "function checkInclusion(s1, s2) {\n    if (s1.length > s2.length) return false;\n    const s1_map = new Array(26).fill(0);\n    const s2_map = new Array(26).fill(0);\n\n    for (let i = 0; i < s1.length; i++) {\n        s1_map[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n        s2_map[s2.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n\n    for (let i = 0; i < s2.length - s1.length; i++) {\n        if (s1_map.every((val, idx) => val === s2_map[idx])) return true;\n        s2_map[s2.charCodeAt(i) - 'a'.charCodeAt(0)]--;\n        s2_map[s2.charCodeAt(i + s1.length) - 'a'.charCodeAt(0)]++;\n    }\n\n    return s1_map.every((val, idx) => val === s2_map[idx]);\n}\n"
        }
    },
    "568": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<int>> flights = $args;\n    vector<vector<int>> days = $args;\n    int result = maxVacationDays(flights, days);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxVacationDays(int[][] flights, int[][] days) {\n    int n = flights.length;\n    int k = days[0].length;\n    int[][] memo = new int[n][k];\n    for (int i = 0; i < n; i++) {\n        Arrays.fill(memo[i], -1);\n    }\n    return dfs(flights, days, 0, 0, memo);\n}",
            "python": "if __name__ == \"__main__\":\n    flights = $args[0]\n    days = $args[1]\n    result = maxVacationDays(flights, days)\n    print(result)",
            "javascript": "function main() {\n    const flights = $args[0];\n    const days = $args[1];\n    const result = maxVacationDays(flights, days);\n    console.log(result);\n}"
        }
    },
    "572": {
        "call_functions": {
            "c++": "bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n    if (root == nullptr) return false;\n    if (isIdentical(root, subRoot)) return true;\n    return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);\n}\n\nbool isIdentical(TreeNode* n1, TreeNode* n2) {\n    if (n1 == nullptr || n2 == nullptr) return n1 == n2;\n    if (n1->val != n2->val) return false;\n    return isIdentical(n1->left, n2->left) && isIdentical(n1->right, n2->right);\n}",
            "java": "public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n    if (root == null) return false;\n    if (isIdentical(root, subRoot)) return true;\n    return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);\n}\n\npublic boolean isIdentical(TreeNode n1, TreeNode n2) {\n    if (n1 == null || n2 == null) return n1 == n2;\n    if (n1.val != n2.val) return false;\n    return isIdentical(n1.left, n2.left) && isIdentical(n1.right, n2.right);\n}",
            "javascript": "def main():\n    root = TreeNode(3)\n    root.left = TreeNode(4)\n    root.right = TreeNode(5)\n    subRoot = TreeNode(4)\n    result = isSubtree(root, subRoot)\n    print(result)",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    subRoot = $args[1]\n    result = isSubtree(root, subRoot)\n    print(result)"
        }
    },
    "573": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int height = $args;\n    int width = $args;\n    vector<int> tree = $args;\n    vector<int> squirrel = $args;\n    vector<vector<int>> nuts = $args;\n    \n    int result = minDistance(height, width, tree, squirrel, nuts);\n    cout << result << endl;\n    \n    return 0;\n}",
            "java": "public int minDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\n    int totalDist = 0;\n    int minDiff = Integer.MAX_VALUE;\n    \n    for (int[] nut : nuts) {\n        int treeDist = Math.abs(tree[0] - nut[0]) + Math.abs(tree[1] - nut[1]);\n        int squirrelDist = Math.abs(squirrel[0] - nut[0]) + Math.abs(squirrel[1] - nut[1]);\n        \n        totalDist += 2 * treeDist;\n        minDiff = Math.min(minDiff, squirrelDist - treeDist);\n    }\n    \n    return totalDist + minDiff;\n}",
            "python": "if __name__ == \"__main__\":\n    height = $args[0]\n    width = $args[1]\n    tree = $args[2]\n    squirrel = $args[3]\n    nuts = $args[4]\n    result = minDistance(height, width, tree, squirrel, nuts)\n    print(result)",
            "javascript": "function main() {\n    const height = $args[0];\n    const width = $args[1];\n    const tree = $args[2];\n    const squirrel = $args[3];\n    const nuts = $args[4];\n    \n    const result = minDistance(height, width, tree, squirrel, nuts);\n    console.log(result);\n}"
        }
    },
    "575": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nint main() {\n    vector<int> candyType = $args;\n    int result = maxNumberOfCandies(candyType);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int maxNumberOfCandies(int[] candyType) {\n    Set<Integer> uniqueCandies = new HashSet<>();\n    for (int type : candyType) {\n        uniqueCandies.add(type);\n    }\n    return Math.min(uniqueCandies.size(), candyType.length / 2);\n}",
            "python": "if __name__ == \"__main__\":\n    candyType = $args[0]\n    result = maxNumberOfCandies(candyType)\n    print(result)",
            "javascript": "function main() {\n    const candyType = $args;\n    const result = maxNumberOfCandies(candyType);\n    console.log(result);\n}\n"
        }
    },
    "576": {
        "call_functions": {
            "c++": "int main() {\n    int m = $args;\n    int n = $args;\n    int maxMove = $args;\n    int startRow = $args;\n    int startColumn = $args;\n\n    int result = findPaths(m, n, maxMove, startRow, startColumn);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n    int MOD = 1000000007;\n    int[][][] dp = new int[maxMove + 1][m][n];\n    int[][] moves = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    for (int k = 1; k <= maxMove; k++) {\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int[] move : moves) {\n                    int ni = i + move[0], nj = j + move[1];\n                    if (ni < 0 || ni >= m || nj < 0 || nj >= n) {\n                        dp[k][i][j] = (dp[k][i][j] + 1) % MOD;\n                    } else {\n                        dp[k][i][j] = (dp[k][i][j] + dp[k - 1][ni][nj]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n    return dp[maxMove][startRow][startColumn];\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    maxMove = $args[2]\n    startRow = $args[3]\n    startColumn = $args[4]\n    result = findPaths(m, n, maxMove, startRow, startColumn)\n    print(result)",
            "javascript": "function findPaths(m, n, maxMove, startRow, startColumn) {\n    const MOD = 1e9 + 7;\n    let dp = new Array(maxMove + 1).fill(0).map(() => new Array(m).fill(0).map(() => new Array(n).fill(0)));\n    let moves = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n    for (let k = 1; k <= maxMove; k++) {\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n                for (let move of moves) {\n                    let ni = i + move[0], nj = j + move[1];\n                    if (ni < 0 || ni >= m || nj < 0 || nj >= n) {\n                        dp[k][i][j] = (dp[k][i][j] + 1) % MOD;\n                    } else {\n                        dp[k][i][j] = (dp[k][i][j] + dp[k - 1][ni][nj]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n    return dp[maxMove][startRow][startColumn];\n}"
        }
    },
    "581": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int result = findUnsortedSubarray(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findUnsortedSubarray(int[] nums) {\n    int[] sortedNums = nums.clone();\n    Arrays.sort(sortedNums);\n    int start = 0, end = nums.length - 1;\n    while (start < nums.length && nums[start] == sortedNums[start]) start++;\n    while (end > start && nums[end] == sortedNums[end]) end--;\n    return end - start + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findUnsortedSubarray(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const sortedNums = [...nums].sort((a, b) => a - b);\n    let start = 0, end = nums.length - 1;\n    while (start < nums.length && nums[start] === sortedNums[start]) start++;\n    while (end > start && nums[end] === sortedNums[end]) end--;\n    const result = end - start + 1;\n    console.log(result);\n}"
        }
    },
    "582": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> killProcess(vector<int>& pid, vector<int>& ppid, int kill) {\n    unordered_map<int, vector<int>> children;\n    for (int i = 0; i < pid.size(); i++) {\n        children[ppid[i]].push_back(pid[i]);\n    }\n\n    vector<int> killed;\n    function<void(int)> dfs = [&](int id) {\n        killed.push_back(id);\n        for (int child : children[id]) {\n            dfs(child);\n        }\n    };\n    dfs(kill);\n\n    return killed;\n}\n\nint main() {\n    vector<int> pid = $args;\n    vector<int> ppid = $args;\n    int kill = $args;\n    vector<int> result = killProcess(pid, ppid, kill);\n    for (int i : result) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {\n    Map<Integer, List<Integer>> children = new HashMap<>();\n    for (int i = 0; i < pid.size(); i++) {\n        children.computeIfAbsent(ppid.get(i), k -> new ArrayList<>()).add(pid.get(i));\n    }\n\n    List<Integer> killed = new ArrayList<>();\n    dfs(kill, children, killed);\n    return killed;\n}\n\nprivate void dfs(int id, Map<Integer, List<Integer>> children, List<Integer> killed) {\n    killed.add(id);\n    for (int child : children.getOrDefault(id, new ArrayList<>())) {\n        dfs(child, children, killed);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    pid = $args[0]\n    ppid = $args[1]\n    kill = $args[2]\n    result = killProcess(pid, ppid, kill)\n    print(result)",
            "javascript": "function main() {\n  const pid = $args[0];\n  const ppid = $args[1];\n  const kill = $args[2];\n\n  const children = new Map();\n  for (let i = 0; i < pid.length; i++) {\n    if (!children.has(ppid[i])) children.set(ppid[i], []);\n    children.get(ppid[i]).push(pid[i]);\n  }\n\n  const killed = [];\n  function dfs(id) {\n    killed.push(id);\n    const childList = children.get(id) || [];\n    for (const child of childList) {\n      dfs(child);\n    }\n  }\n  dfs(kill);\n\n  return killed;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "583": {
        "call_functions": {
            "c++": "int minDistance(std::string word1, std::string word2) {\n    int m = word1.length(), n = word2.length();\n    std::vector<std::vector<int>> dp(m+1, std::vector<int>(n+1, 0));\n    \n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            if(i == 0 || j == 0)\n                dp[i][j] = i + j;\n            else if(word1[i-1] == word2[j-1])\n                dp[i][j] = dp[i-1][j-1];\n            else\n                dp[i][j] = 1 + std::min(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    \n    return dp[m][n];\n}",
            "java": "public int minDistance(String word1, String word2) {\n    int m = word1.length(), n = word2.length();\n    int[][] dp = new int[m+1][n+1];\n\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            if(i == 0 || j == 0)\n                dp[i][j] = i + j;\n            else if(word1.charAt(i-1) == word2.charAt(j-1))\n                dp[i][j] = dp[i-1][j-1];\n            else\n                dp[i][j] = 1 + Math.min(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    word1 = $args[0]\n    word2 = $args[1]\n    result = minDistance(word1, word2)\n    print(result)",
            "javascript": "function main() {\n    const word1 = $args[0];\n    const word2 = $args[1];\n    const result = minDistance(word1, word2);\n    console.log(result);\n}"
        }
    },
    "587": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nbool compare(const vector<int>& p, const vector<int>& q) {\n    return p[0] < q[0] || (p[0] == q[0] && p[1] < q[1]);\n}\n\nint cross_product(const vector<int>& p, const vector<int>& q, const vector<int>& r) {\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n}\n\nvector<vector<int>> fence(vector<vector<int>>& trees) {\n    sort(trees.begin(), trees.end(), compare);\n    vector<vector<int>> hull;\n    for (const auto& p : trees) {\n        while (hull.size() >= 2 && cross_product(hull[hull.size() - 2], hull[hull.size() - 1], p) > 0) {\n            hull.pop_back();\n        }\n        hull.push_back(p);\n    }\n    for (int i = trees.size() - 1; i >= 0; --i) {\n        const auto& p = trees[i];\n        while (hull.size() >= 2 && cross_product(hull[hull.size() - 2], hull[hull.size() - 1], p) > 0) {\n            hull.pop_back();\n        }\n        hull.push_back(p);\n    }\n    return hull;\n}\n\nint main() {\n    vector<vector<int>> trees = $args;\n    vector<vector<int>> result = fence(trees);\n    for (const auto& p : result) {\n        cout << p[0] << \" \" << p[1] << endl;\n    }\n    return 0;\n}",
            "java": "private static int[][] fence(int[][] trees) {\n        Arrays.sort(trees, (p, q) -> p[0] == q[0] ? p[1] - q[1] : p[0] - q[0]);\n        List<int[]> hull = new ArrayList<>();\n        for (int[] p : trees) {\n            while (hull.size() >= 2 && crossProduct(hull.get(hull.size() - 2), hull.get(hull.size() - 1), p) > 0) {\n                hull.remove(hull.size() - 1);\n            }\n            hull.add(p);\n        }\n        for (int i = trees.length - 1; i >= 0; i--) {\n            int[] p = trees[i];\n            while (hull.size() >= 2 && crossProduct(hull.get(hull.size() - 2), hull.get(hull.size() - 1), p) > 0) {\n                hull.remove(hull.size() - 1);\n            }\n            hull.add(p);\n        }\n        return hull.toArray(new int[hull.size()][]);\n    }",
            "python": "if __name__ == \"__main__\":\n    trees = $args[0]\n    result = fence(trees)\n    print(result)",
            "javascript": "function fence(trees) {\n    trees.sort((p, q) => p[0] === q[0] ? p[1] - q[1] : p[0] - q[0]);\n    const hull = [];\n    for (const p of trees) {\n        while (hull.length >= 2 && crossProduct(hull[hull.length - 2], hull[hull.length - 1], p) > 0) {\n            hull.pop();\n        }\n        hull.push(p);\n    }\n    for (let i = trees.length - 1; i >= 0; i--) {\n        const p = trees[i];\n        while (hull.length >= 2 && crossProduct(hull[hull.length - 2], hull[hull.length - 1], p) > 0) {\n            hull.pop();\n        }\n        hull.push(p);\n    }\n    return hull;\n}"
        }
    },
    "591": {
        "call_functions": {
            "c++": "bool validateCodeSnippet(const std::string &code) {\n    size_t i = 0;\n    return is_valid(code, i) && i == code.size();\n}",
            "java": "public static boolean validateCodeSnippet(String code) {\n    int[] i = {0};\n    return isValid(code, i) && i[0] == code.length();\n}",
            "python": "if __name__ == \"__main__\":\n    code = $args[0]\n    result = validate_code_snippet(code)\n    print(result)",
            "javascript": "function validateCodeSnippet(code) {\n    let i = {value: 0};\n    return isValid(code, i) && i.value == code.length;\n}"
        }
    },
    "592": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string expression = $args;\n    string result = fractionAddition(expression);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String fractionAddition(String expression) {\n        int A = 0, B = 1;\n        int i = 0;\n        while(i < expression.length()) {\n            int sign = expression.charAt(i++) == '+' ? 1 : -1;\n            int num = 0, den = 0;\n            while (i < expression.length() && Character.isDigit(expression.charAt(i))) {\n                num = num * 10 + (expression.charAt(i++) - '0');\n            }\n            i++; // skip '/'\n            while (i < expression.length() && Character.isDigit(expression.charAt(i))) {\n                den = den * 10 + (expression.charAt(i++) - '0');\n            }\n            A = A * den + B * num * sign;\n            B *= den;\n            int GCD = gcd(Math.abs(A), Math.abs(B));\n            A /= GCD;\n            B /= GCD;\n        }\n        return A + \"/\" + B;\n    }",
            "python": "if __name__ == \"__main__\":\n    expression = $args[0]\n    result = fractionAddition(expression)\n    print(result)",
            "javascript": "function main() {\n    const expression = $args;\n    const result = fractionAddition(expression);\n    console.log(result);\n}"
        }
    },
    "593": {
        "call_functions": {
            "c++": "bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {\n    set<int> dist;\n    vector<vector<int>> points{p1, p2, p3, p4};\n    \n    for (int i = 0; i < 4; i++) {\n        for (int j = i + 1; j < 4; j++) {\n            dist.insert(pow(points[i][0] - points[j][0], 2) + pow(points[i][1] - points[j][1], 2));\n        }\n    }\n    \n    return dist.size() == 2 && *dist.begin() != 0;\n}",
            "java": "public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n    Set<Integer> dist = new HashSet<>();\n    int[][] points = {p1, p2, p3, p4};\n\n    for (int i = 0; i < 4; i++) {\n        for (int j = i + 1; j < 4; j++) {\n            dist.add((points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) + (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]));\n        }\n    }\n\n    return dist.size() == 2 && !dist.contains(0);\n}",
            "python": "if __name__ == \"__main__\":\n    p1 = $args[0]\n    p2 = $args[1]\n    p3 = $args[2]\n    p4 = $args[3]\n    result = validSquare(p1, p2, p3, p4)\n    print(result)",
            "javascript": "function validSquare(p1, p2, p3, p4) {\n    function distSq(p, q) {\n        return (p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2;\n    }\n\n    let points = [p1, p2, p3, p4];\n    let dists = new Set();\n\n    for (let i = 0; i < 4; i++) {\n        for (let j = i + 1; j < 4; j++) {\n            dists.add(distSq(points[i], points[j]));\n        }\n    }\n\n    return dists.size === 2 && !dists.has(0);\n}"
        }
    },
    "594": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int result = findLHS(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findLHS(int[] nums) {\n    HashMap<Integer, Integer> count = new HashMap<>();\n    for (int num : nums)\n        count.put(num, count.getOrDefault(num, 0) + 1);\n\n    int longest_sequence = 0;\n    for (int key : count.keySet()) {\n        if (count.containsKey(key + 1))\n            longest_sequence = Math.max(longest_sequence, count.get(key) + count.get(key + 1));\n    }\n    \n    return longest_sequence;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findLHS(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findLHS(nums);\n    console.log(result);\n}"
        }
    },
    "598": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int m = $args;\n    int n = $args;\n    vector<vector<int>> ops = $args;\n    int result = maxCount(m, n, ops);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "599": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> list1 = $args;\n    std::vector<std::string> list2 = $args;\n    std::vector<std::string> result = findRestaurant(list1, list2);\n    for (const auto& restaurant : result) {\n        std::cout << restaurant << std::endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> findRestaurant(String[] list1, String[] list2) {\n    HashMap<String, Integer> restaurantMap = new HashMap<>();\n    for (int i = 0; i < list1.length; i++) {\n        restaurantMap.put(list1[i], i);\n    }\n\n    int minSum = Integer.MAX_VALUE;\n    List<String> result = new ArrayList<>();\n    for (int j = 0; j < list2.length; j++) {\n        Integer index = restaurantMap.get(list2[j]);\n        if (index != null) {\n            int sum = j + index;\n            if (sum < minSum) {\n                result.clear();\n                result.add(list2[j]);\n                minSum = sum;\n            } else if (sum == minSum) {\n                result.add(list2[j]);\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    list1 = $args[0]\n    list2 = $args[1]\n    result = findRestaurant(list1, list2)\n    print(result)",
            "javascript": "function findRestaurant(list1, list2) {\n    let restaurantMap = new Map();\n    for (let i = 0; i < list1.length; i++) {\n        restaurantMap.set(list1[i], i);\n    }\n\n    let minSum = Infinity;\n    let result = [];\n    for (let j = 0; j < list2.length; j++) {\n        if (restaurantMap.has(list2[j])) {\n            let sum = j + restaurantMap.get(list2[j]);\n            if (sum < minSum) {\n                result = [list2[j]];\n                minSum = sum;\n            } else if (sum == minSum) {\n                result.push(list2[j]);\n            }\n        }\n    }\n    return result;\n}"
        }
    },
    "600": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = findIntegers(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findIntegers(int n) {\n    int[][] dp = new int[32][2];\n    dp[0][0] = 1;\n    dp[0][1] = 1;\n\n    for (int i = 1; i < 32; i++) {\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1];\n        dp[i][1] = dp[i - 1][0];\n    }\n\n    int ans = 0, prev_bit = 0;\n    for (int i = 30; i >= 0; i--) {\n        if ((n & (1 << i)) != 0) {\n            ans += dp[i][0];\n            if (prev_bit == 1) break;\n            prev_bit = 1;\n        } else {\n            prev_bit = 0;\n        }\n    }\n\n    return ans + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findIntegers(n)\n    print(result)",
            "javascript": "function findIntegers(n) {\n    let dp = new Array(32).fill(0).map(() => Array(2).fill(0));\n    dp[0][0] = 1;\n    dp[0][1] = 1;\n\n    for (let i = 1; i < 32; i++) {\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1];\n        dp[i][1] = dp[i - 1][0];\n    }\n\n    let ans = 0, prev_bit = 0;\n    for (let i = 30; i >= 0; i--) {\n        if (n & (1 << i)) {\n            ans += dp[i][0];\n            if (prev_bit === 1) break;\n            prev_bit = 1;\n        } else {\n            prev_bit = 0;\n        }\n    }\n\n    return ans + 1;\n}"
        }
    },
    "605": {
        "call_functions": {
            "c++": "bool canPlaceFlowers(vector<int>& flowerbed, int n) {\n    int count = 0;\n    for(int i = 0; i < flowerbed.size(); i++) {\n        if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.size() - 1 || flowerbed[i + 1] == 0)) {\n            flowerbed[i] = 1;\n            count++;\n        }\n        if(count >= n) return true;\n    }\n    return count >= n;\n}\n\nint main() {\n    vector<int> flowerbed = $args;\n    int n = $args;\n    bool result = canPlaceFlowers(flowerbed, n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean canPlaceFlowers(int[] flowerbed, int n) {\n    int count = 0;\n    for(int i = 0; i < flowerbed.length; i++) {\n        if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {\n            flowerbed[i] = 1;\n            count++;\n        }\n        if(count >= n) return true;\n    }\n    return count >= n;\n}",
            "python": "if __name__ == \"__main__\":\n    flowerbed = $args[0]\n    n = $args[1]\n    result = canPlaceFlowers(flowerbed, n)\n    print(result)",
            "javascript": "function main() {\n    const flowerbed = $args[0];\n    const n = $args[1];\n    const result = canPlaceFlowers(flowerbed, n);\n    console.log(result);\n}"
        }
    },
    "609": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <sstream>\n\nint main() {\n    std::vector<std::string> paths = $args;\n    std::vector<std::vector<std::string>> result = findDuplicate(paths);\n    // Print the result\n    for (const auto &group : result) {\n        for (const std::string &file_path : group) {\n            std::cout << file_path << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<String>> findDuplicate(String[] paths) {\n    HashMap<String, List<String>> contentMap = new HashMap<>();\n    for (String path : paths) {\n        String[] parts = path.split(\" \");\n        String directory = parts[0];\n        for (int i = 1; i < parts.length; i++) {\n            int start = parts[i].indexOf('(');\n            int end = parts[i].indexOf(')');\n            String content = parts[i].substring(start + 1, end);\n            String filePath = directory + \"/\" + parts[i].substring(0, start);\n            contentMap.computeIfAbsent(content, k -> new ArrayList<>()).add(filePath);\n        }\n    }\n    List<List<String>> result = new ArrayList<>();\n    for (List<String> filePaths : contentMap.values()) {\n        if (filePaths.size() > 1) {\n            result.add(filePaths);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    paths = $args[0]\n    result = find_duplicate(paths)\n    print(result)",
            "javascript": "function findDuplicate(paths) {\n    const contentMap = new Map();\n\n    for (const path of paths) {\n        const parts = path.split(' ');\n        const directory = parts[0];\n        for (let i = 1; i < parts.length; i++) {\n            const start = parts[i].indexOf('(');\n            const end = parts[i].indexOf(')');\n            const content = parts[i].substring(start + 1, end);\n            const filePath = directory + '/' + parts[i].substring(0, start);\n\n            if (!contentMap.has(content)) {\n                contentMap.set(content, []);\n            }\n            contentMap.get(content).push(filePath);\n        }\n    }\n    const result = [];\n    for (const filePaths of contentMap.values()) {\n        if (filePaths.length > 1) {\n            result.push(filePaths);\n        }\n    }\n    return result;\n}"
        }
    },
    "611": {
        "call_functions": {
            "c++": "int triangleNumber(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    int count = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n        for (int j = i + 1; j < nums.size(); ++j) {\n            for (int k = j + 1; k < nums.size(); ++k) {\n                if (nums[i] + nums[j] > nums[k]) {\n                    ++count;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}",
            "java": "public int triangleNumber(int[] nums) {\n    Arrays.sort(nums);\n    int count = 0;\n    for (int i = 0; i < nums.length; ++i) {\n        for (int j = i + 1; j < nums.length; ++j) {\n            for (int k = j + 1; k < nums.length; ++k) {\n                if (nums[i] + nums[j] > nums[k]) {\n                    count++;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = triangleNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = triangleNumber(nums);\n    console.log(result);\n}"
        }
    },
    "616": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nstd::string addBoldTag(std::string s, std::vector<std::string>& words);\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> words;\n    std::string word;\n    while (std::cin >> word) {\n        words.push_back(word);\n    }\n    std::string result = addBoldTag(s, words);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String addBoldTag(String s, String[] words) {\n    int n = s.length();\n    boolean[] marked = new boolean[n];\n    for (String word : words) {\n        int pos = s.indexOf(word, 0);\n        while (pos != -1) {\n            Arrays.fill(marked, pos, pos + word.length(), true);\n            pos = s.indexOf(word, pos + 1);\n        }\n    }\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < n; i++) {\n        if (marked[i] && (i == 0 || !marked[i - 1])) {\n            result.append(\"<b>\");\n        }\n        result.append(s.charAt(i));\n        if (marked[i] && (i == n - 1 || !marked[i + 1])) {\n            result.append(\"</b>\");\n        }\n    }\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    words = $args[1]\n    result = addBoldTag(s, words)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const words = $args[1];\n    const result = addBoldTag(s, words);\n    console.log(result);\n}"
        }
    },
    "621": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<char> tasks = $args;\n    int n = 2;\n    int result = leastInterval(tasks, n);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int leastInterval(char[] tasks, int n) {\n    HashMap<Character, Integer> taskFreq = new HashMap<>();\n    for (char task : tasks) {\n        taskFreq.put(task, taskFreq.getOrDefault(task, 0) + 1);\n    }\n\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);\n    maxHeap.addAll(taskFreq.values());\n\n    int cycles = 0;\n\n    while (!maxHeap.isEmpty()) {\n        List<Integer> temp = new ArrayList<>();\n        for (int i = 0; i < n + 1; i++) {\n            if (!maxHeap.isEmpty()) {\n                temp.add(maxHeap.remove());\n            }\n        }\n\n        for (int freq : temp) {\n            if (--freq > 0) {\n                maxHeap.add(freq);\n            }\n        }\n\n        cycles += maxHeap.isEmpty() ? temp.size() : n + 1;\n    }\n\n    return cycles;\n}",
            "python": "if __name__ == \"__main__\":\n    tasks = $args[0]\n    n = $args[1]\n    result = least_interval(tasks, n)\n    print(result)",
            "javascript": "function main() {\n    const tasks = $args[0];\n    const n = $args[1];\n    const result = leastInterval(tasks, n);\n    console.log(result);\n}"
        }
    },
    "623": {
        "call_functions": {
            "c++": "TreeNode* addOneRow(TreeNode* root, int val, int depth) {\n    if (depth == 1) {\n        TreeNode* newRoot = new TreeNode(val);\n        newRoot->left = root;\n        return newRoot;\n    }\n    addOneRowHelper(root, val, depth, 1);\n    return root;\n}",
            "java": "public TreeNode addOneRow(TreeNode root, int val, int depth) {\n    if (depth == 1) {\n        TreeNode newRoot = new TreeNode(val);\n        newRoot.left = root;\n        return newRoot;\n    }\n    addOneRowHelper(root, val, depth, 1);\n    return root;\n}",
            "python": "if __name__ == \"__main__\":\n    node = $args[0]\n    val = $args[1]\n    depth = $args[2]\n    result = add_one_row(node, val, depth)\n    print(result)",
            "javascript": "function addOneRow(root, val, depth) {\n    if (depth === 1) {\n        let newRoot = new TreeNode(val);\n        newRoot.left = root;\n        return newRoot;\n    }\n    addOneRowHelper(root, val, depth, 1);\n    return root;\n}"
        }
    },
    "624": {
        "call_functions": {
            "c++": "int maxDistance(vector<vector<int>>& arrays) {\n    int max_dist = 0, min_val = arrays[0][0], max_val = arrays[0].back();\n    for(int i = 1; i < arrays.size(); i++) {\n        max_dist = max(max_dist, max(abs(arrays[i].back() - min_val), abs(max_val - arrays[i][0])));\n        min_val = min(min_val, arrays[i][0]);\n        max_val = max(max_val, arrays[i].back());\n    }\n    return max_dist;\n}",
            "java": "public int maxDistance(List<List<Integer>> arrays) {\n    int max_dist = 0, min_val = arrays.get(0).get(0), max_val = arrays.get(0).get(arrays.get(0).size() - 1);\n    for (int i = 1; i < arrays.size(); i++) {\n        max_dist = Math.max(max_dist, Math.max(\n                Math.abs(arrays.get(i).get(arrays.get(i).size() - 1) - min_val),\n                Math.abs(max_val - arrays.get(i).get(0))\n        ));\n        min_val = Math.min(min_val, arrays.get(i).get(0));\n        max_val = Math.max(max_val, arrays.get(i).get(arrays.get(i).size() - 1));\n    }\n    return max_dist;\n}",
            "python": "if __name__ == \"__main__\":\n    arrays = $args[0]\n    result = maxDistance(arrays)\n    print(result)",
            "javascript": "var maxDistance = function(arrays) {\n    let max_dist = 0;\n    let min_val = arrays[0][0];\n    let max_val = arrays[0][arrays[0].length - 1];\n\n    for (let i = 1; i < arrays.length; i++) {\n        max_dist = Math.max(max_dist, Math.max(\n            Math.abs(arrays[i][arrays[i].length - 1] - min_val),\n            Math.abs(max_val - arrays[i][0])\n        ));\n        min_val = Math.min(min_val, arrays[i][0]);\n        max_val = Math.max(max_val, arrays[i][arrays[i].length - 1]);\n    }\n    return max_dist;\n};"
        }
    },
    "625": {
        "call_functions": {
            "c++": "int main() {\n    int num = $args;\n    int result = smallestFactorization(num);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int smallestFactorization(int num) {\n    if (num == 1) return 1;\n    long result = 0, factor = 1;\n    for (int i = 9; i > 1; --i) {\n        while (num % i == 0) {\n            num /= i;\n            result += i * factor;\n            factor *= 10;\n            if (result > Integer.MAX_VALUE) return 0;\n        }\n    }\n    return num == 1 ? (int) result : 0;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = smallestFactorization(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = smallestFactorization(num);\n    console.log(result);\n}"
        }
    },
    "628": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = maximumProduct(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maximumProduct(int[] nums) {\n    Arrays.sort(nums);\n    int n = nums.length;\n    return Math.max(nums[0] * nums[1] * nums[n-1], nums[n-1] * nums[n-2] * nums[n-3]);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maximumProduct(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = maximumProduct(nums);\n    console.log(result);\n}"
        }
    },
    "629": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int k = $args;\n    int result = kInversePairs(n, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int kInversePairs(int n, int k) {\n    int mod = 1000000007;\n    int[][] dp = new int[n + 1][k + 1];\n    for (int i = 1; i <= n; i++) {\n        dp[i][0] = 1;\n        for (int j = 1; j <= k; j++) {\n            dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % mod;\n            if (j - i >= 0) {\n                dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod;\n            }\n        }\n    }\n    return dp[n][k];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = kInversePairs(n, k)\n    print(result)",
            "javascript": "function kInversePairs(n, k) {\n    const mod = 1e9 + 7;\n    const dp = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 1; i <= n; ++i) {\n        dp[i][0] = 1;\n        for (let j = 1; j <= k; ++j) {\n            dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % mod;\n            if (j - i >= 0) {\n                dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod;\n            }\n        }\n    }\n    return dp[n][k];\n}"
        }
    },
    "630": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <queue>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> courses = $args;\n    int result = scheduleCourse(courses);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int scheduleCourse(int[][] courses) {\n    Arrays.sort(courses, (a, b) -> a[1] - b[1]);\n\n    PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\n    int time = 0;\n\n    for (int[] course : courses) {\n        time += course[0];\n        pq.offer(course[0]);\n\n        if (time > course[1]) {\n            time -= pq.poll();\n        }\n    }\n\n    return pq.size();\n}",
            "python": "if __name__ == \"__main__\":\n    courses = $args[0]\n    result = scheduleCourse(courses)\n    print(result)",
            "javascript": "function main() {\n    const courses = $args;\n    const result = scheduleCourse(courses);\n    console.log(result);\n}"
        }
    },
    "632": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <limits>\n#include <utility>\n\nstd::pair<int, int> smallestRange(std::vector<std::vector<int>>& nums) {\n    auto listComparator = [](const auto& a, const auto& b) {\n        return a.first > b.first;\n    };\n\n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, decltype(listComparator)> minHeap(listComparator);\n\n    int maxVal = std::numeric_limits<int>::min();\n    for (int i = 0; i < nums.size(); i++) {\n        minHeap.push({nums[i][0], i});\n        maxVal = std::max(maxVal, nums[i][0]);\n    }\n\n    std::vector<int> listIndices(nums.size(), 0);\n    int minRange = std::numeric_limits<int>::max();\n    int start = -1, end = -1;\n\n    while (minHeap.size() == nums.size()) {\n        auto entry = minHeap.top();\n        minHeap.pop();\n        int val = entry.first;\n        int listIdx = entry.second;\n        int range = maxVal - val;\n\n        if (range < minRange) {\n            minRange = range;\n            start = val;\n            end = maxVal;\n        }\n\n        listIndices[listIdx]++;\n        if (listIndices[listIdx] < nums[listIdx].size()) {\n            int newVal = nums[listIdx][listIndices[listIdx]];\n            minHeap.push({newVal, listIdx});\n            maxVal = std::max(maxVal, newVal);\n        }\n    }\n\n    return {start, end};\n}\n\nint main() {\n    std::vector<std::vector<int>> nums = $args;\n    std::pair<int, int> result = smallestRange(nums);\n    std::cout << result.first << \" \" << result.second << std::endl;\n    return 0;\n}",
            "java": "public int[] smallestRange(List<List<Integer>> nums) {\n    PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\n\n    int maxVal = Integer.MIN_VALUE;\n    for (int i = 0; i < nums.size(); i++) {\n        minHeap.offer(new int[] {nums.get(i).get(0), i});\n        maxVal = Math.max(maxVal, nums.get(i).get(0));\n    }\n\n    List<Integer> listIndices = new ArrayList<>();\n    for (int i = 0; i < nums.size(); i++) {\n        listIndices.add(0);\n    }\n    int minRange = Integer.MAX_VALUE;\n    int start = -1, end = -1;\n\n    while (minHeap.size() == nums.size()) {\n        int[] entry = minHeap.poll();\n        int val = entry[0];\n        int listIdx = entry[1];\n        int range = maxVal - val;\n\n        if (range < minRange) {\n            minRange = range;\n            start = val;\n            end = maxVal;\n        }\n\n        listIndices.set(listIdx, listIndices.get(listIdx) + 1);\n        if (listIndices.get(listIdx) < nums.get(listIdx).size()) {\n            int newVal = nums.get(listIdx).get(listIndices.get(listIdx));\n            minHeap.offer(new int[] {newVal, listIdx});\n            maxVal = Math.max(maxVal, newVal);\n        }\n    }\n\n    return new int[] {start, end};\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = smallestRange(nums)\n    print(result)",
            "javascript": "function smallestRange(nums) {\n    const minHeap = [],\n          listIndices = Array(nums.length).fill(0);\n          \n    let maxVal = -Infinity;\n    \n    for (let i = 0; i < nums.length; i++) {\n        minHeap.push([nums[i][0], i]);\n        maxVal = Math.max(maxVal, nums[i][0]);\n    }\n    minHeap.sort(([a], [b]) => a - b);\n\n    let minRange = Infinity,\n        start = -1,\n        end = -1;\n    \n    while (minHeap.length === nums.length) {\n        const [val, listIdx] = minHeap.shift();\n        const range = maxVal - val;\n        \n        if (range < minRange) {\n            minRange = range;\n            start = val;\n            end = maxVal;\n        }\n\n        listIndices[listIdx]++;\n        if (listIndices[listIdx] < nums[listIdx].length) {\n            const newVal = nums[listIdx][listIndices[listIdx]];\n            minHeap.push([newVal, listIdx]);\n            minHeap.sort(([a], [b]) => a - b);\n            maxVal = Math.max(maxVal, newVal);\n        }\n    }\n\n    return [start, end];\n}"
        }
    },
    "633": {
        "call_functions": {
            "c++": "#include <cmath>\n#include <iostream>\n\nbool judgeSquareSum(int c) {\n    for (int a = 0; a <= sqrt(c); ++a) {\n        int b = sqrt(c - a * a);\n        if (a * a + b * b == c) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int c = $args;\n    bool result = judgeSquareSum(c);\n    cout << boolalpha << result << endl;\n    return 0;\n}"
        }
    },
    "634": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = findDerangement(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "636": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <stack>\n\nint main() {\n    int n = $args;\n    std::vector<std::string> logs;\n    std::vector<int> result = exclusiveTime(n, logs);\n    for (const auto& res : result) {\n        std::cout << res << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] exclusiveTime(int n, List<String> logs) {\n    int[] res = new int[n];\n    Stack<Integer> stack = new Stack<>();\n    int prevTime = 0;\n\n    for (String log : logs) {\n        String[] parts = log.split(\":\");\n        int id = Integer.parseInt(parts[0]);\n        String type = parts[1];\n        int time = Integer.parseInt(parts[2]);\n\n        if (type.equals(\"start\")) {\n            if (!stack.isEmpty()) {\n                res[stack.peek()] += time - prevTime;\n            }\n            stack.push(id);\n            prevTime = time;\n        } else {\n            res[stack.pop()] += time - prevTime + 1;\n            prevTime = time + 1;\n        }\n    }\n\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    logs = $args[1]\n    result = exclusiveTime(n, logs)\n    print(result)",
            "javascript": "function exclusiveTime(n, logs) {\n    const res = new Array(n).fill(0);\n    const stack = [];\n    let prevTime = 0;\n\n    for (const log of logs) {\n        const parts = log.split(':');\n        const id = parseInt(parts[0]);\n        const type = parts[1];\n        const time = parseInt(parts[2]);\n\n        if (type === \"start\") {\n            if (stack.length > 0) {\n                res[stack[stack.length - 1]] += time - prevTime;\n            }\n            stack.push(id);\n            prevTime = time;\n        } else {\n            res[stack.pop()] += time - prevTime + 1;\n            prevTime = time + 1;\n        }\n    }\n\n    return res;\n}"
        }
    },
    "638": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> price = $args;\n    vector<vector<int>> special = $args;\n    vector<int> needs = $args;\n    int result = shoppingOffers(price, special, needs);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {\n    return shoppingOffersHelper(price, special, needs, 0);\n}\n\nprivate int shoppingOffersHelper(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int index) {\n    if (index == special.size()) {\n        int sum = 0;\n        for (int i = 0; i < needs.size(); ++i) {\n            sum += price.get(i) * needs.get(i);\n        }\n        return sum;\n    }\n\n    int no_offer = shoppingOffersHelper(price, special, needs, index + 1);\n    boolean can_apply_offer = true;\n    for (int i = 0; i < needs.size(); ++i) {\n        needs.set(i, needs.get(i) - special.get(index).get(i));\n        if (needs.get(i) < 0) can_apply_offer = false;\n    }\n\n    int with_offer = Integer.MAX_VALUE;\n    if (can_apply_offer) {\n        int offer_cost = special.get(index).get(needs.size()) + shoppingOffersHelper(price, special, needs, index);\n        with_offer = Math.min(no_offer, offer_cost);\n    }\n\n    for (int i = 0; i < needs.size(); ++i) {\n        needs.set(i, needs.get(i) + special.get(index).get(i));\n    }\n\n    return can_apply_offer ? with_offer : no_offer;\n}",
            "python": "if __name__ == \"__main__\":\n    price = $args[0]\n    special = $args[1]\n    needs = $args[2]\n    result = shoppingOffers(price, special, needs)\n    print(result)",
            "javascript": "function shoppingOffers(price, special, needs) {\n    function helper(index) {\n        if (index === special.length) {\n            return needs.reduce((sum, curr, i) => sum + curr * price[i], 0);\n        }\n\n        let no_offer = helper(index + 1);\n        let can_apply_offer = true;\n        for (let i = 0; i < needs.length; ++i) {\n            needs[i] -= special[index][i];\n            if (needs[i] < 0) can_apply_offer = false;\n        }\n\n        let with_offer = Infinity;\n        if (can_apply_offer) {\n            let offer_cost = special[index][needs.length] + helper(index);\n            with_offer = Math.min(no_offer, offer_cost);\n        }\n\n        for (let i = 0; i < needs.length; ++i) {\n            needs[i] += special[index][i];\n        }\n\n        return can_apply_offer ? with_offer : no_offer;\n    }\n\n    return helper(0);\n}"
        }
    },
    "639": {
        "call_functions": {
            "c++": "int numDecodings(const std::string& s) {\n    const int MOD = 1e9 + 7;\n    int n = s.size();\n    std::vector<long long> dp(n + 1, 0);\n    dp[0] = 1;\n    dp[1] = s[0] == '*' ? 9 : (s[0] == '0' ? 0 : 1);\n\n    for (int i = 2; i <= n; ++i) {\n        if (s[i - 1] == '*') {\n            dp[i] = 9 * dp[i - 1];\n            if (s[i - 2] == '1') dp[i] += 9 * dp[i - 2];\n            else if (s[i - 2] == '2') dp[i] += 6 * dp[i - 2];\n            else if (s[i - 2] == '*') dp[i] += 15 * dp[i - 2];\n        } else {\n            dp[i] = (s[i - 1] != '0') ? dp[i - 1] : 0;\n            int num = std::stoi(s.substr(i - 2, 2));\n            if (s[i - 2] == '1' || (s[i - 2] == '2' && num <= 26)) dp[i] += dp[i - 2];\n            else if (s[i - 2] == '*') dp[i] += (num <= 26 && num >= 10) ? 2 * dp[i - 2] : dp[i - 2];\n        }\n        dp[i] %= MOD;\n    }\n    return dp[n];\n}",
            "java": "public int numDecodings(String s) {\n    final int MOD = 1_000_000_007;\n    int n = s.length();\n    long[] dp = new long[n + 1];\n    dp[0] = 1;\n    dp[1] = s.charAt(0) == '*' ? 9 : (s.charAt(0) == '0' ? 0 : 1);\n\n    for (int i = 2; i <= n; ++i) {\n        char c = s.charAt(i - 1);\n        char prevC = s.charAt(i - 2);\n\n        if (c == '*') {\n            dp[i] = 9 * dp[i - 1];\n            if (prevC == '1') dp[i] += 9 * dp[i - 2];\n            else if (prevC == '2') dp[i] += 6 * dp[i - 2];\n            else if (prevC == '*') dp[i] += 15 * dp[i - 2];\n        } else {\n            dp[i] = (c != '0') ? dp[i - 1] : 0;\n            int num = Integer.parseInt(s.substring(i - 2, i));\n            if (prevC == '1' || (prevC == '2' && num <= 26)) dp[i] += dp[i - 2];\n            else if (prevC == '*') dp[i] += (num <= 26 && num >= 10) ? 2 * dp[i - 2] : dp[i - 2];\n        }\n        dp[i] %= MOD;\n    }\n    return (int) dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = num_decodings(s)\n    print(result)",
            "javascript": "function numDecodings(s) {\n    const MOD = 1_000_000_007;\n    const n = s.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = s[0] === '*' ? 9 : (s[0] === '0' ? 0 : 1);\n\n    for (let i = 2; i <= n; ++i) {\n        let c = s[i - 1];\n        let prevC = s[i - 2];\n\n        if (c === '*') {\n            dp[i] = 9 * dp[i - 1];\n            if (prevC === '1') dp[i] += 9 * dp[i - 2];\n            else if (prevC === '2') dp[i] += 6 * dp[i - 2];\n            else if (prevC === '*') dp[i] += 15 * dp[i - 2];\n        } else {\n            dp[i] = (c !== '0') ? dp[i - 1] : 0;\n            let num = parseInt(s.slice(i - 2, i));\n            if (prevC === '1' || (prevC === '2' && num <= 26)) dp[i] += dp[i - 2];\n            else if (prevC === '*') dp[i] += (num <= 26 && num >= 10) ? 2 * dp[i - 2] : dp[i - 2];\n        }\n        dp[i] %= MOD;\n    }\n    return dp[n];\n}"
        }
    },
    "640": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string equation = $args;\n    string result = solveEquation(equation);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String solveEquation(String equation) {\n    int coefficient = 0, value = 0, left = 1, operator = 1;\n    String[] parts = (equation + \"+\").split(\"(?<=[+-])\");\n    for (String part : parts) {\n        if (part.equals(\"=\")) {\n            left = -1;\n            operator = 1;\n        } else {\n            String[] nums = part.split(\"x\");\n            int n = Integer.parseInt(nums[0]);\n            (nums.length == 1 ? value : coefficient) += left * operator * n;\n            operator = nums.length;\n        }\n    }\n\n    if (coefficient == 0) {\n        return value == 0 ? \"Infinite solutions\" : \"No solution\";\n    }\n    return \"x=\" + -value / coefficient;\n}",
            "python": "if __name__ == \"__main__\":\n    equation = $args[0]\n    result = solve_equation(equation)\n    print(result)",
            "javascript": "function main() {\n    const equation = $args;\n    const result = solveEquation(equation);\n    console.log(result);\n}"
        }
    },
    "642": {
        "call_functions": {}
    },
    "643": {
        "call_functions": {
            "c++": "double findMaxAverage(vector<int>& nums, int k) {\n    int n = nums.size();\n    double sum = 0;\n    for (int i = 0; i < k; ++i) {\n        sum += nums[i];\n    }\n    double max_avg = sum / k;\n    for (int i = k; i < n; ++i) {\n        sum = sum - nums[i - k] + nums[i];\n        max_avg = max(max_avg, sum / k);\n    }\n    return max_avg;\n}",
            "java": "public double findMaxAverage(int[] nums, int k) {\n    int n = nums.length;\n    double sum = 0;\n    for (int i = 0; i < k; i++) {\n        sum += nums[i];\n    }\n    double max_avg = sum / k;\n    for (int i = k; i < n; i++) {\n        sum = sum - nums[i - k] + nums[i];\n        max_avg = Math.max(max_avg, sum / k);\n    }\n    return max_avg;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = findMaxAverage(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = findMaxAverage(nums, k);\n    console.log(result);\n}"
        }
    },
    "644": {
        "call_functions": {
            "c++": "double findMaxAverage(vector<int>& nums, int k) {\n    long sum = 0;\n    int n = nums.size();\n    for(int i = 0; i < k; i++) {\n        sum += nums[i];\n    }\n\n    double max_avg = static_cast<double>(sum) / k;\n    \n    for(int i = k; i < n; i++) {\n        sum += nums[i] - nums[i - k];\n        max_avg = max(max_avg, static_cast<double>(sum) / k);\n    }\n    \n    return max_avg;\n}",
            "java": "public double findMaxAverage(int[] nums, int k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n        sum += nums[i];\n    }\n\n    double max_avg = (double) sum / k;\n    \n    for(int i = k; i < nums.length; i++) {\n        sum += nums[i] - nums[i - k];\n        max_avg = Math.max(max_avg, (double) sum / k);\n    }\n    \n    return max_avg;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = findMaxAverage(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = findMaxAverage(nums, k);\n    console.log(result);\n}"
        }
    },
    "645": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<int> findErrorNums(vector<int>& nums) {\n    vector<int> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = abs(nums[i]) - 1;\n        if (nums[index] > 0) {\n            nums[index] = -nums[index];\n        } else {\n            result.push_back(index + 1);\n        }\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            result.push_back(i + 1);\n            break;\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = findErrorNums(nums);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        }
    },
    "646": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<std::vector<int>> pairs = $args;\n    int result = findLongestChain(pairs);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int findLongestChain(int[][] pairs) {\n    Arrays.sort(pairs, Comparator.comparingInt(a -> a[1]));\n\n    int max_chain_length = 0, last_right = Integer.MIN_VALUE;\n    for (int[] pair : pairs) {\n        if (pair[0] > last_right) {\n            last_right = pair[1];\n            max_chain_length++;\n        }\n    }\n    \n    return max_chain_length;\n}",
            "python": "if __name__ == \"__main__\":\n    pairs = $args[0]\n    result = findLongestChain(pairs)\n    print(result)",
            "javascript": "function main() {\n    const pairs = $args;\n    const result = findLongestChain(pairs);\n    console.log(result);\n}"
        }
    },
    "647": {
        "call_functions": {
            "c++": "int main() {\n    std::string s = $args;\n    int result = countSubstrings(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int countSubstrings(String s) {\n    int n = s.length(), count = 0;\n    for (int center = 0; center < 2 * n - 1; ++center) {\n        int left = center / 2;\n        int right = left + center % 2;\n        while (left >= 0 && right < n && s.charAt(left) == s.charAt(right)) {\n            ++count;\n            --left;\n            ++right;\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = countSubstrings(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = countSubstrings(s);\n    console.log(result);\n}"
        }
    },
    "648": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <unordered_set>\n\nint main() {\n    std::vector<std::string> dict = $args;\n    std::string sentence = $args;\n    std::string result = replaceWords(dict, sentence);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String replaceWords(List<String> dict, String sentence) {\n    Set<String> roots = new HashSet<>(dict);\n    String[] words = sentence.split(\" \");\n    StringBuilder result = new StringBuilder();\n\n    for (String word : words) {\n        String prefix = \"\";\n        for (int i = 1; i <= word.length(); ++i) {\n            prefix = word.substring(0, i);\n            if (roots.contains(prefix)) {\n                break;\n            }\n        }\n        result.append(prefix).append(\" \");\n    }\n\n    return result.toString().trim();\n}",
            "python": "if __name__ == \"__main__\":\n    dict = $args[0]\n    sentence = $args[1]\n    result = replaceWords(dict, sentence)\n    print(result)",
            "javascript": "function main() {\n    const dict = $args[0];\n    const sentence = $args[1];\n    const result = replaceWords(dict, sentence);\n    console.log(result);\n}"
        }
    },
    "649": {
        "call_functions": {
            "c++": "#include <string>\n#include <queue>\n\nint main() {\n    std::string senate = $args;\n    std::string result = predictPartyVictory(senate);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String predictPartyVictory(String senate) {\n    Queue<Integer> radiant = new LinkedList<>();\n    Queue<Integer> dire = new LinkedList<>();\n    int n = senate.length();\n    \n    for (int i = 0; i < n; i++) {\n        if (senate.charAt(i) == 'R')\n            radiant.add(i);\n        else\n            dire.add(i);\n    }\n\n    while (!radiant.isEmpty() && !dire.isEmpty()) {\n        int r = radiant.poll();\n        int d = dire.poll();\n\n        if (r < d)\n            radiant.add(r + n);\n        else\n            dire.add(d + n);\n    }\n\n    return radiant.isEmpty() ? \"Dire\" : \"Radiant\";\n}",
            "python": "if __name__ == \"__main__\":\n    senate = $args[0]\n    result = predict_party_victory(senate)\n    print(result)",
            "javascript": "function predictPartyVictory(senate) {\n    let radiant = [];\n    let dire = [];\n    let n = senate.length;\n    \n    for (let i = 0; i < n; i++) {\n        if (senate[i] === 'R')\n            radiant.push(i);\n        else\n            dire.push(i);\n    }\n\n    while (radiant.length > 0 && dire.length > 0) {\n        let r = radiant.shift();\n        let d = dire.shift();\n\n        if (r < d)\n            radiant.push(r + n);\n        else\n            dire.push(d + n);\n    }\n\n    return radiant.length === 0 ? \"Dire\" : \"Radiant\";\n}"
        }
    },
    "650": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = minSteps(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minSteps(int n) {\n    int result = 0;\n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            result += i;\n            n /= i;\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = min_steps(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = minSteps(n);\n    console.log(result);\n}"
        }
    },
    "651": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = maxA(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxA(int n) {\n    int[] dp = new int[n + 1];\n    for(int i = 1; i <= n; ++i) {\n        dp[i] = i;\n        for(int j = 1; j <= i - 3; ++j)\n            dp[i] = Math.max(dp[i], dp[j] * (i - j - 1));\n    }\n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = maxA(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = maxA(n);\n    console.log(result);\n}"
        }
    },
    "653": {
        "call_functions": {
            "c++": "bool findTarget(TreeNode* root, int k) {\n    unordered_set<int> nodes;\n    return findNode(root, k, nodes);\n}\n\nbool findNode(TreeNode* root, int k, unordered_set<int>& nodes) {\n    if (!root) return false;\n    if (nodes.count(k - root->val)) return true;\n    nodes.insert(root->val);\n    return findNode(root->left, k, nodes) || findNode(root->right, k, nodes);\n}",
            "java": "public boolean findTarget(TreeNode root, int k) {\n    Set<Integer> nodes = new HashSet<>();\n    return findNode(root, k, nodes);\n}\n\npublic boolean findNode(TreeNode root, int k, Set<Integer> nodes) {\n    if (root == null) return false;\n    if (nodes.contains(k - root.val)) return true;\n    nodes.add(root.val);\n    return findNode(root.left, k, nodes) || findNode(root.right, k, nodes);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    k = $args[1]\n    result = findTarget(root, k)\n    print(result)",
            "javascript": "function main() {\n    const root = $args[0];\n    const k = $args[1];\n    const nodes = new Set();\n    const result = findNode(root, k, nodes);\n    console.log(result);\n}"
        }
    },
    "655": {
        "call_functions": {
            "c++": "vector<vector<string>> printTree(TreeNode* root) {\n    if (!root) return {{}};\n    \n    // Calculate Depth\n    int depth = 0;\n    queue<TreeNode*> q;\n    q.push(root);\n    while (!q.empty()) {\n        int size = q.size();\n        depth++;\n        for (int i = 0; i < size; i++) {\n            TreeNode* node = q.front(); q.pop();\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n        }\n    }\n    \n    // Initialize matrix\n    vector<vector<string>> res(depth, vector<string>((1 << depth) - 1, \"\"));\n\n    // Fill in matrix\n    q.push(root);\n    int level = 0;\n    int step = (1 << (depth - 1));\n    while (!q.empty()) {\n        int size = q.size();\n        int curPos = step - 1;\n        for (int i = 0; i < size; i++) {\n            TreeNode* node = q.front(); q.pop();\n            res[level][curPos] = to_string(node->val);\n            curPos += (step << 1);\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n        }\n        step >>= 1;\n        level++;\n    }\n    \n    return res;\n}",
            "java": "public List<List<String>> printTree(TreeNode root)",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = printTree(root)\n    print(result)",
            "javascript": "function printTree(root) {\n    if (!root) {\n        return [[]];\n    }\n\n    let depth = 0;\n    let q = [root];\n    while (q.length) {\n        depth++;\n        let size = q.length;\n        for (let i = 0; i < size; i++) {\n            let node = q.shift();\n            if (node.left) q.push(node.left);\n            if (node.right) q.push(node.right);\n        }\n    }\n\n    const res = Array.from({length: depth}, () => Array(2 ** depth - 1).fill(\"\"));\n\n    q.push(root);\n    let level = 0;\n    let step = (1 << (depth - 1));\n    while (q.length) {\n        let size = q.length;\n        let curPos = step - 1;\n        for (let i = 0; i < size; i++) {\n            let node = q.shift();\n            res[level][curPos] = String(node.val);\n            curPos += (step << 1);\n            if (node.left) q.push(node.left);\n            if (node.right) q.push(node.right);\n        }\n        step >>= 1;\n        level++;\n    }\n\n    return res;\n}"
        }
    },
    "656": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <utility>\nusing namespace std;\n\nvector<int> cheapestJump(vector<int>& coins, int maxJump) {\n    int n = coins.size();\n    vector<int> dp(n, 1e9), parent(n, -1);\n    dp[0] = coins[0];\n    for (int i = 0; i < n; ++i) {\n        if (coins[i] == -1) continue;\n        for (int j = 1; j <= maxJump && i + j < n; ++j) {\n            int next = i + j;\n            int cost = coins[next] + dp[i];\n            if (cost < dp[next]) {\n                dp[next] = cost;\n                parent[next] = i;\n            }\n        }\n    }\n    vector<int> ans;\n    if (dp[n - 1] == 1e9) return ans;\n    int cur = n - 1;\n    while (cur != -1) {\n        ans.push_back(cur + 1);\n        cur = parent[cur];\n    }\n    reverse(ans.begin(), ans.end());\n    return ans;\n}\n\nint main() {\n    vector<int> coins = $args;\n    int maxJump = 3;\n    vector<int> result = cheapestJump(coins, maxJump);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] cheapestJump(int[] coins, int maxJump) {\n        int n = coins.length;\n        int[] dp = new int[n];\n        int[] parent = new int[n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        Arrays.fill(parent, -1);\n        dp[0] = coins[0];\n        for (int i = 0; i < n; ++i) {\n            if (coins[i] == -1) continue;\n            for (int j = 1; j <= maxJump && i + j < n; ++j) {\n                int next = i + j;\n                int cost = coins[next] + dp[i];\n                if (cost < dp[next]) {\n                    dp[next] = cost;\n                    parent[next] = i;\n                }\n            }\n        }\n        List<Integer> ansList = new ArrayList<>();\n        if (dp[n - 1] == Integer.MAX_VALUE) return new int[0];\n        int cur = n - 1;\n        while (cur != -1) {\n            ansList.add(cur + 1);\n            cur = parent[cur];\n        }\n        Collections.reverse(ansList);\n        int[] ans = new int[ansList.size()];\n        for (int i = 0; i < ansList.size(); i++) {\n            ans[i] = ansList.get(i);\n        }\n        return ans;\n    }",
            "python": "if __name__ == \"__main__\":\n    coins = $args[0]\n    maxJump = $args[1]\n    result = cheapestJump(coins, maxJump)\n    print(result)",
            "javascript": "function cheapestJump(coins, maxJump) {\n    const n = coins.length;\n    const dp = new Array(n).fill(Infinity);\n    const parent = new Array(n).fill(-1);\n    dp[0] = coins[0];\n    for (let i = 0; i < n; ++i) {\n        if (coins[i] === -1) continue;\n        for (let j = 1; j <= maxJump && i + j < n; ++j) {\n            const next = i + j;\n            const cost = coins[next] + dp[i];\n            if (cost < dp[next]) {\n                dp[next] = cost;\n                parent[next] = i;\n            }\n        }\n    }\n    const ans = [];\n    if (dp[n - 1] === Infinity) return ans;\n    let cur = n - 1;\n    while (cur !== -1) {\n        ans.push(cur + 1);\n        cur = parent[cur];\n    }\n    ans.reverse();\n    return ans;\n}"
        }
    },
    "657": {
        "call_functions": {
            "c++": "bool judgeCircle(string moves) {\n    string moves = $args;\n    int x = 0, y = 0;\n    for(char move : moves) {\n        if(move == 'U') y++;\n        else if(move == 'D') y--;\n        else if(move == 'R') x++;\n        else if(move == 'L') x--;\n    }\n    return x == 0 && y == 0;\n}",
            "java": "public boolean judgeCircle(String moves) {\n    int x = 0, y = 0;\n    for(char move : moves.toCharArray()) {\n        if(move == 'U') y++;\n        else if(move == 'D') y--;\n        else if(move == 'R') x++;\n        else if(move == 'L') x--;\n    }\n    return x == 0 && y == 0;\n}",
            "python": "if __name__ == \"__main__\":\n    moves = $args[0]\n    result = judgeCircle(moves)\n    print(result)",
            "javascript": "function main() {\n    const moves = $args;\n    const result = judgeCircle(moves);\n    console.log(result);\n}"
        }
    },
    "658": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> arr = $args;\n    int k = 3;\n    int x = 5;\n    std::vector<int> result = findClosestElements(arr, k, x);\n    \n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n",
            "java": "public List<Integer> findClosestElements(int[] arr, int k, int x) {\n    int left = 0;\n    int right = arr.length - k;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (x - arr[mid] > arr[mid + k] - x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    List<Integer> result = new ArrayList<>();\n    for (int i = left; i < left + k; i++) {\n        result.add(arr[i]);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    k = $args[1]\n    x = $args[2]\n    result = findClosestElements(arr, k, x)\n    print(result)",
            "javascript": "function main() {\n    const arr = $args[0];\n    const k = $args[1];\n    const x = $args[2];\n    const result = findClosestElements(arr, k, x);\n    console.log(result);\n}"
        }
    },
    "659": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nbool canSplit(vector<int>& nums) {\n    vector<int> freq(20001, 0), needed(20001, 0);\n    for (int n : nums)\n        freq[n]++;\n    for (int n : nums) {\n        if (!freq[n]) continue;\n        if (!needed[n - 1]) {\n            if (freq[n + 1] && freq[n + 2]) {\n                freq[n]--; freq[n + 1]--; freq[n + 2]--;\n                needed[n + 2]++;\n            } else return false;\n        } else {\n            freq[n]--; needed[n - 1]--;\n            needed[n]++;\n        }\n    }\n    return true;\n}",
            "java": "public boolean canSplit(int[] nums) {\n    int[] freq = new int[20001], needed = new int[20001];\n    for (int n : nums)\n        freq[n]++;\n    for (int n : nums) {\n        if (freq[n] == 0) continue;\n        if (needed[n - 1] == 0) {\n            if (freq[n + 1] > 0 && freq[n + 2] > 0) {\n                freq[n]--; freq[n + 1]--; freq[n + 2]--;\n                needed[n + 2]++;\n            } else return false;\n        } else {\n            freq[n]--; needed[n - 1]--;\n            needed[n]++;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = can_split(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = canSplit(nums);\n    console.log(result);\n}"
        }
    },
    "660": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = newInteger(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int newInteger(int n) {\n    int result = 0, base = 1;\n    while (n>0) {\n        result += n % 9 * base;\n        n /= 9;\n        base *= 10;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = newInteger(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = newInteger(n);\n    console.log(result);\n}"
        }
    },
    "661": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> imageSmoother(vector<vector<int>>& img) {\n    int m = img.size(), n = img[0].size();\n    vector<vector<int>> result(m, vector<int>(n, 0));\n\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            int count = 0, sum = 0;\n            for (int x = i - 1; x <= i + 1; x++) {\n                for (int y = j - 1; y <= j + 1; y++) {\n                    if (x >= 0 && x < m && y >= 0 && y < n) {\n                        sum += img[x][y];\n                        count++;\n                    }\n                }\n            }\n            result[i][j] = sum / count;\n        }\n    }\n\n    return result;\n}",
            "java": "public int[][] imageSmoother(int[][] img)",
            "python": "if __name__ == \"__main__\":\n    img = $args[0]\n    result = imageSmoother(img)\n    print(result)",
            "javascript": "function imageSmoother(img) {\n    const m = img.length, n = img[0].length;\n    const result = new Array(m).fill(0).map(() => new Array(n).fill(0));\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            let count = 0, sum = 0;\n\n            for (let x = i - 1; x <= i + 1; x++) {\n                for (let y = j - 1; y <= j + 1; y++) {\n                    if (x >= 0 && x < m && y >= 0 && y < n) {\n                        sum += img[x][y];\n                        count++;\n                    }\n                }\n            }\n            result[i][j] = Math.floor(sum / count);\n        }\n    }\n\n    return result;\n}"
        }
    },
    "662": {
        "call_functions": {
            "c++": "#include <queue>\n#include <utility>\n\nint main() {\n    TreeNode* root = $args;\n    int result = widthOfBinaryTree(root);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int widthOfBinaryTree(TreeNode root) {\n    if (root == null) return 0;\n    int maxWidth = 0;\n    Queue<Pair> q = new LinkedList<>();\n    q.offer(new Pair(root, 1));\n\n    while (!q.isEmpty()) {\n        int levelSize = q.size();\n        int left = q.peek().pos;\n        int right = left;\n        for (int i = 0; i < levelSize; i++) {\n            Pair pair = q.poll();\n            TreeNode node = pair.node;\n            right = pair.pos;\n\n            if (node.left != null) {\n                q.offer(new Pair(node.left, 2 * right));\n            }\n            if (node.right != null) {\n                q.offer(new Pair(node.right, 2 * right + 1));\n            }\n        }\n        maxWidth = Math.max(maxWidth, right - left + 1);\n    }\n\n    return maxWidth;\n}\n\nclass Pair {\n    TreeNode node;\n    int pos;\n\n    public Pair(TreeNode node, int pos) {\n        this.node = node;\n        this.pos = pos;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = widthOfBinaryTree(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = widthOfBinaryTree(root);\n    console.log(result);\n}"
        }
    },
    "664": {
        "call_functions": {
            "c++": "int strangePrinter(string s) {\n    int n = s.size();\n    if(n == 0) return 0;\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for(int i = 0; i < n; i++) dp[i][i] = 1;\n    for(int len = 1; len < n; len++) {\n        for(int i = 0; i < n - len; i++) {\n            int j = i + len;\n            dp[i][j] = dp[i+1][j] + 1;\n            for(int k = i + 1; k <= j; k++) {\n                if(s[i] == s[k]) {\n                    dp[i][j] = min(dp[i][j], dp[i+1][k-1] + dp[k][j]);\n                }\n            }\n        }\n    }\n    return dp[0][n-1];\n}\n\nint main() {\n    string s = $args;\n    int result = strangePrinter(s);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "665": {
        "call_functions": {
            "c++": "bool checkPossibility(vector<int>& nums) {\n    int cnt = 0;\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] < nums[i - 1]) {\n            cnt++;\n            if (i == 1 || nums[i] >= nums[i - 2]) {\n                nums[i-1] = nums[i];\n            } else {\n                nums[i] = nums[i - 1];\n            }\n            if (cnt > 1) return false;\n        }\n    }\n    return true;\n}"
        }
    },
    "666": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = pathSum(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int pathSum(int[] nums) {\n    TreeNode root = new TreeNode(nums[0] % 10);\n    for (int num : nums) {\n        int depth = num / 100;\n        int pos = num % 100 / 10;\n        int val = num % 10;\n        TreeNode cur = root;\n        for (int d = depth - 2; d >= 0; --d) {\n            if ((pos >> d) & 1) {\n                if (cur.right == null) cur.right = new TreeNode(val);\n                cur = cur.right;\n            } else {\n                if (cur.left == null) cur.left = new TreeNode(val);\n                cur = cur.left;\n            }\n        }\n    }\n    return sum(root, 0);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = pathSum(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = pathSum(nums);\n    console.log(result);\n}"
        }
    },
    "667": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int k = $args;\n    vector<int> result = constructArray(n, k);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> constructArray(int n, int k) {\n        ArrayList<Integer> answer = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                answer.add(i / 2 + 1);\n            } else {\n                answer.add(n - (i - 1) / 2);\n                k--;\n            }\n        }\n        if (k > 0) {\n            for (int i = n - 2; i >= 0 && k > 0; i--) {\n                answer.set(i, answer.get(i + 1) - answer.get(i));\n                k--;\n            }\n        }\n        return answer;\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = constructArray(n, k)\n    print(result)",
            "javascript": "function constructArray(n, k) {\n    const answer = constructArray($args[0], $args[1]);\n    return answer;\n}"
        }
    },
    "668": {
        "call_functions": {
            "c++": "int main() {\n    int m = $args;\n    int n = $args;\n    int k = $args;\n    int result = findKthNumber(m, n, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findKthNumber(int m, int n, int k) {\n    int low = 1, high = m * n;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        int count = 0;\n        for (int i = 1; i <= m; i++) {\n            count += Math.min(mid / i, n);\n        }\n        if (count < k) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    k = $args[2]\n    result = findKthNumber(m, n, k)\n    print(result)",
            "javascript": "function main() {\n    const m = $args[0];\n    const n = $args[1];\n    const k = $args[2];\n    const result = findKthNumber(m, n, k);\n    console.log(result);\n}"
        }
    },
    "670": {
        "call_functions": {
            "c++": "int main() {\n    int num = $args;\n    int result = maximumSwap(num);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maximumSwap(int num) {\n    char[] num_str = Integer.toString(num).toCharArray();\n    int[] last = new int[10];\n    \n    for (int i = 0; i < num_str.length; i++) {\n        last[num_str[i] - '0'] = i;\n    }\n    \n    for (int i = 0; i < num_str.length; i++) {\n        for (int d = 9; d > num_str[i] - '0'; d--) {\n            if (last[d] > i) {\n                swap(num_str, i, last[d]);\n                return Integer.parseInt(new String(num_str));\n            }\n        }\n    }\n    \n    return num;\n}\n\nprivate void swap(char[] arr, int i, int j) {\n    char temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = maximumSwap(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = maximumSwap(num);\n    console.log(result);\n}"
        }
    },
    "672": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    int presses = $args;\n    int result = numLightConfiguration(n, presses);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int numLightConfiguration(int n, int presses) {\n    int[][] dp = new int[n + 1][presses + 1];\n    dp[0][0] = 1;\n\n    for (int i = 0; i <= n; ++i) {\n        for (int j = 1; j <= presses; ++j) {\n            dp[i][j] = dp[i][j - 1] * (i + 1) + (i > 0 ? dp[i - 1][j - 1] : 0);\n        }\n    }\n\n    return dp[n][presses];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    presses = $args[1]\n    result = num_light_configuration(n, presses)\n    print(result)",
            "javascript": "function numLightConfiguration(n, presses) {\n    const dp = new Array(n + 1).fill(0).map(() => new Array(presses + 1).fill(0));\n    dp[0][0] = 1;\n\n    for (let i = 0; i <= n; ++i) {\n        for (let j = 1; j <= presses; ++j) {\n            dp[i][j] = dp[i][j - 1] * (i + 1) + (i > 0 ? dp[i - 1][j - 1] : 0);\n        }\n    }\n\n    const result = dp[n][presses];\n    console.log(result);\n}"
        }
    },
    "673": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = findNumberOfLIS(nums);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int findNumberOfLIS(int[] nums) {\n    int n = nums.length, maxLength = 0, ans = 0;\n    int[] length = new int[n];\n    int[] count = new int[n];\n\n    for (int i = 0; i < n; ++i) {\n        length[i] = count[i] = 1;\n        for (int j = 0; j < i; ++j) {\n            if (nums[i] > nums[j]) {\n                if (length[i] == length[j] + 1) {\n                    count[i] += count[j];\n                } else if (length[i] < length[j] + 1) {\n                    length[i] = length[j] + 1;\n                    count[i] = count[j];\n                }\n            }\n        }\n        if (maxLength == length[i]) {\n            ans += count[i];\n        } else if (maxLength < length[i]) {\n            maxLength = length[i];\n            ans = count[i];\n        }\n    }\n\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findNumberOfLIS(nums)\n    print(result)",
            "javascript": "function findNumberOfLIS(nums) {\n    const n = nums.length;\n    let maxLength = 0, ans = 0;\n    const length = new Array(n).fill(1);\n    const count = new Array(n).fill(1);\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < i; ++j) {\n            if (nums[i] > nums[j]) {\n                if (length[i] === length[j] + 1) {\n                    count[i] += count[j];\n                } else if (length[i] < length[j] + 1) {\n                    length[i] = length[j] + 1;\n                    count[i] = count[j];\n                }\n            }\n        }\n        if (maxLength === length[i]) {\n            ans += count[i];\n        } else if (maxLength < length[i]) {\n            maxLength = length[i];\n            ans = count[i];\n        }\n    }\n\n    return ans;\n}"
        }
    },
    "674": {
        "call_functions": {
            "c++": "int findLengthOfLCIS(vector<int>& nums) {\n    if (nums.empty()) return 0;\n    int result = 1, current = 1;\n    for (int i = 1; i < nums.size(); ++i) {\n        current = nums[i] > nums[i - 1] ? current + 1 : 1;\n        result = max(result, current);\n    }\n    return result;\n}"
        }
    },
    "675": {
        "call_functions": {
            "c++": "int main() {\n    std::vector<std::vector<int>> forest = $args;\n    int result = cutOffTree(forest);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int cutOffTree(List<List<Integer>> forest) {\n    if(forest.isEmpty() || forest.get(0).isEmpty()) return 0;\n    int m = forest.size(), n = forest.get(0).size();\n    List<int[]> trees = new ArrayList<>();\n    \n    for(int i = 0; i < m; i++)\n        for(int j = 0; j < n; j++)\n            if(forest.get(i).get(j) > 1)\n                trees.add(new int[]{i, j});\n    \n    trees.sort((a, b) -> forest.get(a[0]).get(a[1]) - forest.get(b[0]).get(b[1]));\n\n    int startX = 0, startY = 0;\n    int totalSteps = 0;\n    for(int[] tree : trees){\n        int x = tree[0], y = tree[1];\n        int steps = bfs(forest, startX, startY, x, y);\n        if(steps == -1) return -1;\n        totalSteps += steps;\n        startX = x;\n        startY = y;\n    }\n    \n    return totalSteps;\n}\n\nprivate int bfs(List<List<Integer>> forest, int startX, int startY, int endX, int endY) {\n    int m = forest.size(), n = forest.get(0).size();\n    int[][] visited = new int[m][n];\n    Queue<int[]> q = new LinkedList<>();\n    q.offer(new int[]{startX, startY});\n    visited[startX][startY] = 1;\n    int steps = 0;\n    int[] dirs = {-1, 0, 1, 0, -1};\n    \n    while(!q.isEmpty()) {\n        int size = q.size();\n        for(int i = 0; i < size; i++) {\n            int[] cur = q.poll();\n            int x = cur[0], y = cur[1];\n\n            if(x == endX && y == endY) return steps;\n            \n            for(int k = 0; k < 4; k++) {\n                int newX = x + dirs[k];\n                int newY = y + dirs[k+1];\n                if(newX >= 0 && newX < m && newY >= 0 && newY < n && visited[newX][newY] == 0 && forest.get(newX).get(newY) != 0) {\n                    q.offer(new int[]{ newX, newY });\n                    visited[newX][newY] = 1;\n                }\n            }\n        }\n        steps++;\n    }\n    \n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    forest = $args[0]\n    result = cutOffTree(forest)\n    print(result)",
            "javascript": "function cutOffTree(forest) {\n    if(!forest || !forest[0]) return 0;\n    let m = forest.length, n = forest[0].length;\n    let trees = [];\n    \n    for(let i = 0; i < m; i++)\n        for(let j = 0; j < n; j++)\n            if(forest[i][j] > 1)\n                trees.push([forest[i][j], i, j]);\n    \n    trees.sort((a, b) => a[0] - b[0]);\n\n    let startX = 0, startY = 0;\n    let totalSteps = 0;\n    for(let tree of trees){\n        let [, x, y] = tree;\n        let steps = bfs(forest, startX, startY, x, y);\n        if(steps === -1) return -1;\n        totalSteps += steps;\n        startX = x;\n        startY = y;\n    }\n    \n    return totalSteps;\n}\n\nfunction bfs(forest, startX, startY, endX, endY) {\n    let m = forest.length, n = forest[0].length;\n    let visited = Array.from({ length: m }, () => Array(n).fill(false));\n    let q = [[startX, startY, 0]];\n    visited[startX][startY] = true;\n    let dirs = [-1, 0, 1, 0, -1];\n    \n    while(q.length !== 0) {\n        let [x, y, steps] = q.shift();\n        for(let k = 0; k < 4; k++) {\n            let newX = x + dirs[k], newY = y + dirs[k+1];\n            if(0 <= newX && newX < m && 0 <= newY && newY < n && !visited[newX][newY] && forest[newX][newY] !== 0) {\n                if(newX === endX && newY === endY)\n                    return steps + 1;\n                q.push([newX, newY, steps + 1]);\n                visited[newX][newY] = true;\n            }\n        }\n    }\n    \n    return -1;\n}"
        }
    },
    "678": {
        "call_functions": {
            "c++": "bool checkValidString(string s) {\n    int left_balance = 0, right_balance = 0;\n\n    for (int i = 0; i < s.size(); i++) {\n        left_balance += (s[i] == '(' || s[i] == '*') ? 1 : -1;\n        right_balance += (s[s.size() - 1 - i] == ')' || s[s.size() - 1 - i] == '*') ? 1 : -1;\n\n        if (left_balance < 0 || right_balance < 0)\n            return false;\n    }\n\n    return true;\n}\n\nint main() {\n    string s = $args;\n    bool result = checkValidString(s);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean checkValidString(String s) {\n    int left_balance = 0, right_balance = 0;\n\n    for (int i = 0; i < s.length(); i++) {\n        left_balance += (s.charAt(i) == '(' || s.charAt(i) == '*') ? 1 : -1;\n        right_balance += (s.charAt(s.length() - 1 - i) == ')' || s.charAt(s.length() - 1 - i) == '*') ? 1 : -1;\n\n        if (left_balance < 0 || right_balance < 0)\n            return false;\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = checkValidString(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = checkValidString(s);\n    console.log(result);\n}"
        }
    },
    "679": {
        "call_functions": {
            "c++": "#include <vector>\n#include <cmath>\n#include <iostream>\n\nbool helper(std::vector<double>& cards) {\n    if (cards.size() == 1) {\n        return std::abs(cards[0] - 24) < 1e-6;\n    }\n\n    for (int i = 0; i < cards.size(); ++i) {\n        for (int j = i + 1; j < cards.size(); ++j) {\n            double a = cards[i], b = cards[j];\n            std::vector<double> next = {a + b, a - b, a * b, a / b};\n\n            cards.erase(cards.begin() + j);\n            cards.erase(cards.begin() + i);\n\n            for (auto& e : next) {\n                cards.push_back(e);\n                if (helper(cards)) {\n                    return true;\n                }\n                cards.pop_back();\n            }\n\n            cards.insert(cards.begin() + i, a);\n            cards.insert(cards.begin() + j, b);\n        }\n    }\n    return false;\n}\n\nbool canGet24(std::vector<int>& cards) {\n    std::vector<double> doubleCards(cards.begin(), cards.end());\n    return helper(doubleCards);\n}\n\nint main() {\n    std::vector<int> cards = $args;\n    bool result = canGet24(cards);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean canGet24(int[] cards) {\n    List<Double> doubleCards = new ArrayList<>();\n    for (int card : cards) {\n        doubleCards.add((double) card);\n    }\n    return helper(doubleCards);\n}",
            "python": "if __name__ == \"__main__\":\n    cards = $args[0]\n    result = canGet24(cards)\n    print(result)",
            "javascript": "function main() {\n  const cards = $args;\n  const result = canGet24(cards);\n  console.log(result);\n}"
        }
    },
    "680": {
        "call_functions": {
            "c++": "bool validPalindrome(string s) {\n    string input = $args;\n    for (int i = 0, j = input.size() - 1; i < j; i++, j--) {\n        if (input[i] != input[j]) {\n            int temp1 = i + 1, temp2 = j;\n            while (temp1 < temp2 && input[temp1] == input[temp2]) { temp1++; temp2--; }\n            if (temp1 >= temp2) return true;\n\n            temp1 = i; temp2 = j - 1;\n            while (temp1 < temp2 && input[temp1] == input[temp2]) { temp1++; temp2--; }\n            if (temp1 >= temp2) return true;\n\n            return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean validPalindrome(String s) {\n    for (int i = 0, j = s.length() - 1; i < j; i++, j--) {\n        if (s.charAt(i) != s.charAt(j)) {\n            int temp1 = i + 1, temp2 = j;\n            while (temp1 < temp2 && s.charAt(temp1) == s.charAt(temp2)) { temp1++; temp2--; }\n            if (temp1 >= temp2) return true;\n\n            temp1 = i; temp2 = j - 1;\n            while (temp1 < temp2 && s.charAt(temp1) == s.charAt(temp2)) { temp1++; temp2--; }\n            if (temp1 >= temp2) return true;\n\n            return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = validPalindrome(s)\n    print(result)",
            "javascript": "function validPalindrome(s) {\n    const result = validPalindrome(s);\n    console.log(result);\n}"
        }
    },
    "681": {
        "call_functions": {
            "c++": "#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string time = $args;\n    string result = nextClosestTime(time);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String nextClosestTime(String time) {\n    String digits = time.substring(0, 2) + time.substring(3);\n    String next_time = time;\n    int elapsed = Integer.MAX_VALUE;\n\n    for (char a : digits.toCharArray()) {\n    for (char b : digits.toCharArray()) {\n    for (char c : digits.toCharArray()) {\n    for (char d : digits.toCharArray()) {\n        String candidate_time = new StringBuilder().append(a).append(b).append(':').append(c).append(d).toString();\n        int cand_elapsed = (Integer.parseInt(candidate_time.substring(0, 2)) * 60 + Integer.parseInt(candidate_time.substring(3)) -\n                            Integer.parseInt(time.substring(0, 2)) * 60 - Integer.parseInt(time.substring(3)) + 1440) % 1440;\n        if (0 < cand_elapsed && cand_elapsed < elapsed) {\n          elapsed = cand_elapsed;\n          next_time = candidate_time;\n        }\n    }}}}\n\n    return next_time;\n}",
            "python": "if __name__ == \"__main__\":\n    time = $args[0]\n    result = nextClosestTime(time)\n    print(result)",
            "javascript": "function main() {\n    const time = $args;\n    const result = nextClosestTime(time);\n    console.log(result);\n}"
        }
    },
    "682": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> ops = $args;\n    int result = calPoints(ops);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int calPoints(String[] ops) {\n        LinkedList<Integer> record = new LinkedList<>();\n        for (String op : ops) {\n            if (op.equals(\"+\")) {\n                record.add(record.getLast() + record.get(record.size() - 2));\n            } else if (op.equals(\"D\")) {\n                record.add(record.getLast() * 2);\n            } else if (op.equals(\"C\")) {\n                record.removeLast();\n            } else {\n                record.add(Integer.parseInt(op));\n            }\n        }\n        return record.stream().mapToInt(Integer::intValue).sum();\n    }",
            "python": "if __name__ == \"__main__\":\n    ops = $args[0]\n    result = calPoints(ops)\n    print(result)",
            "javascript": "function calPoints(ops) {\n    let record = [];\n    for (let op of ops) {\n        if (op === '+') {\n            record.push(record[record.length - 1] + record[record.length - 2]);\n        } else if (op === 'D') {\n            record.push(record[record.length - 1] * 2);\n        } else if (op === 'C') {\n            record.pop();\n        } else {\n            record.push(parseInt(op));\n        }\n    }\n    return record.reduce((a, b) => a + b, 0);\n}\n"
        }
    },
    "683": {
        "call_functions": {
            "c++": "int kEmptySlots(vector<int>& bulbs, int k) {\n    vector<int> days(bulbs.size());\n    for(int i = 0; i < bulbs.size(); ++i) {\n        days[bulbs[i] - 1] = i;\n    }\n\n    int ans = INT_MAX;\n    int left = 0;\n    int right = k + 1;\n    while (right < days.size()) {\n        int i = left + 1;\n        for (; i < right; ++i) {\n            if (days[i] < days[left] || days[i] < days[right]) {\n                left = i;\n                break;\n            }\n        }\n        if (i == right) {\n            ans = min(ans, max(days[left], days[right]));\n            left ++;\n            right ++;\n        }\n    }\n\n    return ans == INT_MAX ? -1 : ans + 1;\n}",
            "java": "public int kEmptySlots(int[] bulbs, int k) {\n    int[] days = new int[bulbs.length];\n    for(int i = 0; i < bulbs.length; i++) {\n        days[bulbs[i] - 1] = i;\n    }\n\n    int ans = Integer.MAX_VALUE;\n    int left = 0;\n    int right = k + 1;\n    while (right < days.length) {\n        int i = left + 1;\n        for (; i < right; i++) {\n            if (days[i] < days[left] || days[i] < days[right]) {\n                left = i;\n                break;\n            }\n        }\n        if (i == right) {\n            ans = Math.min(ans, Math.max(days[left], days[right]));\n            left++;\n            right++;\n        }\n    }\n\n    return ans == Integer.MAX_VALUE ? -1 : ans + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    bulbs = $args[0]\n    k = $args[1]\n    result = kEmptySlots(bulbs, k)\n    print(result)",
            "javascript": "function kEmptySlots(bulbs, k) {\n    const days = new Array(bulbs.length);\n    for (let i = 0; i < bulbs.length; i++) {\n        days[bulbs[i] - 1] = i;\n    }\n\n    let ans = Number.MAX_SAFE_INTEGER;\n    let left = 0;\n    let right = k + 1;\n    while (right < days.length) {\n        let i = left + 1;\n        while (i < right) {\n            if (days[i] < days[left] || days[i] < days[right]) {\n                left = i;\n                break;\n            }\n            i++;\n        }\n        if (i === right) {\n            ans = Math.min(ans, Math.max(days[left], days[right]));\n            left++;\n            right++;\n        }\n    }\n\n    return ans === Number.MAX_SAFE_INTEGER ? -1 : ans + 1;\n}"
        }
    },
    "684": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<int> findRedundantConnection(vector<vector<int>>& edges) {\n    vector<int> parent(edges.size() + 1);\n    for (int i = 1; i <= edges.size(); ++i) {\n        parent[i] = i;\n    }\n\n    for (const auto& edge : edges) {\n        int root1 = find(parent, edge[0]);\n        int root2 = find(parent, edge[1]);\n        if (root1 == root2) {\n            return edge;\n        }\n        parent[root1] = root2;\n    }\n\n    return {};\n}\n\nint find(vector<int>& parent, int x) {\n    if (parent[x] != x) {\n        parent[x] = find(parent, parent[x]);\n    }\n    return parent[x];\n}",
            "java": "public int[] findRedundantConnection(int[][] edges)",
            "python": "if __name__ == \"__main__\":\n    edges = $args[0]\n    result = findRedundantConnection(edges)\n    print(result)",
            "javascript": "function findRedundantConnection(edges) {\n    const parent = new Array(edges.length + 1).fill(0).map((_, i) => i);\n\n    function find(x) {\n        if (parent[x] !== x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n\n    for (const edge of edges) {\n        const root1 = find(edge[0]);\n        const root2 = find(edge[1]);\n        if (root1 === root2) {\n            return edge;\n        }\n        parent[root1] = root2;\n    }\n\n    return [];\n}\n"
        }
    },
    "685": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> edges = $args;\n    vector<int> result = findRedundantDirectedConnection(edges);\n    \n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}\n",
            "java": "public int[] findRedundantDirectedConnection(int[][] edges) {\n        int[] parent = new int[edges.length + 1];\n        int[] candidateA = null, candidateB = null;\n        \n        for (int[] edge : edges) {\n            int u = edge[0], v = edge[1];\n            if (parent[v] > 0) {\n                candidateA = new int[] {parent[v], v};\n                candidateB = edge;\n            } else {\n                parent[v] = u;\n            }\n        }\n        \n        for (int i = 1; i <= edges.length; ++i) {\n            int cycle = i, steps = edges.length;\n            while (parent[cycle] != 0 && steps-- > 0) {\n                cycle = parent[cycle];\n            }\n            if (steps == -1) {\n                if (candidateA == null) return new int[] {parent[i], i};\n                else return candidateA;\n            }\n        }\n        \n        return candidateB;\n    }",
            "python": "if __name__ == \"__main__\":\n    edges = $args[0]\n    result = findRedundantDirectedConnection(edges)\n    print(result)",
            "javascript": "function findRedundantDirectedConnection(edges) {\n    const parent = Array(edges.length + 1).fill(0);\n    let candidateA = null, candidateB = null;\n\n    for (const edge of edges) {\n        const [u, v] = edge;\n        if (parent[v] > 0) {\n            candidateA = [parent[v], v];\n            candidateB = edge;\n        } else {\n            parent[v] = u;\n        }\n    }\n\n    for (let i = 1; i <= edges.length; ++i) {\n        let cycle = i, steps = edges.length;\n        while (parent[cycle] !== 0 && steps-- > 0) {\n            cycle = parent[cycle];\n        }\n        if (steps === -1) {\n            if (candidateA === null) return [parent[i], i];\n            else return candidateA;\n        }\n    }\n\n    return candidateB;\n}"
        }
    },
    "686": {
        "call_functions": {
            "c++": "int main() {\n    const std::string& a = $args[0];\n    const std::string& b = $args[1];\n    int result = minRepeatsToSubstring(a, b);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minRepeatsToSubstring(String a, String b) {\n    int times = (b.length() + a.length() - 1) / a.length();\n\n    for (int i = 0; i < 2; i++) {\n        StringBuilder repeated_a = new StringBuilder();\n        for (int j = 0; j < times + i; j++) {\n            repeated_a.append(a);\n        }\n\n        if (repeated_a.toString().contains(b)) return times + i;\n    }\n\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = min_repeats_to_substring(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const times = Math.floor((b.length + a.length - 1) / a.length);\n\n    for (let i = 0; i < 2; i++) {\n        let repeated_a = \"\";\n        for (let j = 0; j < times + i; j++) {\n            repeated_a += a;\n        }\n\n        if (repeated_a.includes(b)) return times + i;\n    }\n\n    return -1;\n}\n\nconst a = $args[0];\nconst b = $args[1];\nconst result = main(a, b);\nconsole.log(result);"
        }
    },
    "687": {
        "call_functions": {
            "c++": "int main() {\n    TreeNode* root = $args;\n    int result = longestUnivaluePath(root);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int longestUnivaluePath(TreeNode root) {\n    int[] maxLen = new int[1];\n    findUnivaluePath(root, maxLen);\n    return maxLen[0];\n}\n\nprivate int findUnivaluePath(TreeNode node, int[] maxLen) {\n    if (node == null) return 0;\n    int left = findUnivaluePath(node.left, maxLen);\n    int right = findUnivaluePath(node.right, maxLen);\n    left = (node.left != null && node.left.val == node.val) ? left + 1 : 0;\n    right = (node.right != null && node.right.val == node.val) ? right + 1 : 0;\n    maxLen[0] = Math.max(maxLen[0], left + right);\n    return Math.max(left, right);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = longestUnivaluePath(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    let maxLen = 0;\n\n    function findUnivaluePath(node) {\n        if (!node) return 0;\n        let left = findUnivaluePath(node.left);\n        let right = findUnivaluePath(node.right);\n        left = (node.left && node.left.val === node.val) ? left + 1 : 0;\n        right = (node.right && node.right.val === node.val) ? right + 1 : 0;\n        maxLen = Math.max(maxLen, left + right);\n        return Math.max(left, right);\n    }\n\n    findUnivaluePath(root);\n    return maxLen;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "688": {
        "call_functions": {
            "c++": "double knightProbability(int n, int k, int row, int column) {\n    vector<vector<vector<double>>> memo(n, vector<vector<double>>(n, vector<double>(k + 1, -1.0)));\n    return helper(n, k, row, column, memo);\n}\n\ndouble helper(int n, int k, int row, int column, vector<vector<vector<double>>>& memo) {\n    if (row < 0 || row >= n || column < 0 || column >= n) return 0.0;\n    if (k == 0) return 1.0;\n    if (memo[row][column][k] >= 0) return memo[row][column][k];\n    \n    double result = 0.0;\n    int moves[8][2] = {{-2, -1}, {-2, 1}, {-1, -2}, {-1, 2}, {1, -2}, {1, 2}, {2, -1}, {2, 1}};\n    for (int i = 0; i < 8; ++i)\n        result += helper(n, k - 1, row + moves[i][0], column + moves[i][1], memo) / 8;\n    \n    memo[row][column][k] = result;\n    return result;\n}",
            "java": "public double knightProbability(int n, int k, int row, int column) {\n    double[][][] memo = new double[n][n][k + 1];\n    for (double[][] m : memo)\n        for (double[] l : m)\n            Arrays.fill(l, -1.0);\n    return helper(n, k, row, column, memo);\n}\n\ndouble helper(int n, int k, int row, int column, double[][][] memo) {\n    if (row < 0 || row >= n || column < 0 || column >= n) return 0.0;\n    if (k == 0) return 1.0;\n    if (memo[row][column][k] >= 0) return memo[row][column][k];\n\n    double result = 0.0;\n    int[][] moves = {{-2, -1}, {-2, 1}, {-1, -2}, {-1, 2}, {1, -2}, {1, 2}, {2, -1}, {2, 1}};\n    for (int i = 0; i < 8; ++i)\n        result += helper(n, k - 1, row + moves[i][0], column + moves[i][1], memo) / 8;\n\n    memo[row][column][k] = result;\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    row = $args[2]\n    column = $args[3]\n    obj = Solution()\n    result = obj.knightProbability(n, k, row, column)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = knightProbability(n[0], n[1], n[2], n[3]);\n    console.log(result);\n}"
        }
    },
    "689": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<int> max_sum_of_three_subarrays(std::vector<int> &nums, int k);\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = 3;\n    std::vector<int> result = max_sum_of_three_subarrays(nums, k);\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n\nstd::vector<int> max_sum_of_three_subarrays(std::vector<int> &nums, int k) {\n    int n = nums.size();\n    std::vector<int> sums(n - k + 1);\n    std::vector<int> left(n), right(n), ans(3);\n    int acc_sum = 0;\n\n    for (int i = 0; i < n; ++i) {\n        acc_sum += nums[i];\n        if (i >= k) {\n            acc_sum -= nums[i - k];\n        }\n        if (i >= k - 1) {\n            sums[i - k + 1] = acc_sum;\n        }\n    }\n\n    left[0] = 0;\n    right[n - k] = n - k;\n\n    for (int i = 1; i < n - k + 1; ++i) {\n        left[i] = sums[i] > sums[left[i - 1]] ? i : left[i - 1];\n    }\n\n    for (int i = n - k - 1; i >= 0; --i) {\n        right[i] = sums[i] >= sums[right[i + 1]] ? i : right[i + 1];\n    }\n\n    int max_sum = 0;\n\n    for (int i = k; i < n - 2 * k + 1; ++i) {\n        int left_idx = left[i - k], right_idx = right[i + k], total_sum = sums[left_idx] + sums[i] + sums[right_idx];\n        if (total_sum > max_sum) {\n            max_sum = total_sum;\n            ans = {left_idx, i, right_idx};\n        }\n    }\n\n    return ans;\n}",
            "java": "public int[] max_sum_of_three_subarrays(int[] nums, int k) {\n    int n = nums.length;\n    int[] sums = new int[n - k + 1];\n    int[] left = new int[n], right = new int[n], ans = new int[3];\n    int acc_sum = 0;\n\n    for (int i = 0; i < n; ++i) {\n        acc_sum += nums[i];\n        if (i >= k) {\n            acc_sum -= nums[i - k];\n        }\n        if (i >= k - 1) {\n            sums[i - k + 1] = acc_sum;\n        }\n    }\n\n    left[0] = 0;\n    right[n - k] = n - k;\n\n    for (int i = 1; i < n - k + 1; ++i) {\n        left[i] = sums[i] > sums[left[i - 1]] ? i : left[i - 1];\n    }\n\n    for (int i = n - k - 1; i >= 0; --i) {\n        right[i] = sums[i] >= sums[right[i + 1]] ? i : right[i + 1];\n    }\n\n    int max_sum = 0;\n\n    for (int i = k; i < n - 2 * k + 1; ++i) {\n        int left_idx = left[i - k], right_idx = right[i + k], total_sum = sums[left_idx] + sums[i] + sums[right_idx];\n        if (total_sum > max_sum) {\n            max_sum = total_sum;\n            ans = new int[] {left_idx, i, right_idx};\n        }\n    }\n\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = max_sum_of_three_subarrays(nums, k)\n    print(result)",
            "javascript": "function max_sum_of_three_subarrays(nums, k) {\n    const n = nums.length;\n    const sums = new Array(n - k + 1);\n    const left = new Array(n), right = new Array(n);\n    let acc_sum = 0;\n\n    for (let i = 0; i < n; i++) {\n        acc_sum += nums[i];\n        if (i >= k) {\n            acc_sum -= nums[i - k];\n        }\n        if (i >= k - 1) {\n            sums[i - k + 1] = acc_sum;\n        }\n    }\n\n    left[0] = 0;\n    right[n - k] = n - k;\n\n    for (let i = 1; i < n - k + 1; i++) {\n        left[i] = sums[i] > sums[left[i - 1]] ? i : left[i - 1];\n    }\n\n    for (let i = n - k - 1; i >= 0; i--) {\n        right[i] = sums[i] >= sums[right[i + 1]] ? i : right[i + 1];\n    }\n\n    let max_sum = 0;\n    const ans = [0, 0, 0];\n\n    for (let i = k; i < n - 2 * k + 1; i++) {\n        const left_idx = left[i - k], right_idx = right[i + k], total_sum = sums[left_idx] + sums[i] + sums[right_idx];\n        if (total_sum > max_sum) {\n            max_sum = total_sum;\n            ans[0] = left_idx;\n            ans[1] = i;\n            ans[2] = right_idx;\n        }\n    }\n\n    return ans;\n}"
        }
    },
    "691": {
        "call_functions": {
            "c++": "int minStickers(vector<string>& stickers, string target) {\n    unordered_map<string, int> memo;\n    vector<int> target_count(26, 0);\n    for (char c : target) target_count[c - 'a']++;\n    \n    for (string& s : stickers) {\n        vector<int> sticker_count(26, 0);\n        int connection = 0;\n        for (char c : s) {\n            if (!target_count[c - 'a']) continue;\n            connection = 1;\n            sticker_count[c - 'a']++;\n        }\n        if (!connection) continue;\n        \n        string state = \"\";\n        for (int i = 0; i < 26; ++i)\n            state += string(sticker_count[i], 'a' + i);\n        memo[state] = 1;\n    }\n    \n    function<int(const string&)> dp = [&](const string& state) {\n        if (memo.count(state)) return memo[state];\n        vector<int> counts(26, 0);\n        for (char c : state) counts[c - 'a']++;\n        int ans = INT_MAX;\n        for (const auto& kv : memo) {\n            bool ok = true;\n            for (int i = 0; i < 26 && ok; ++i)\n                ok = counts[i] >= kv.first[i] - 'a';\n            if (!ok) continue;\n            ans = min(ans, dp(state.substr(kv.first.size())) + kv.second);\n        }\n        memo[state] = ans == INT_MAX ? -1 : ans;\n        return memo[state];\n    };\n    \n    string start = \"\";\n    for (int i = 0; i < 26; ++i)\n        start += string(target_count[i], 'a' + i);\n    return dp(start);\n}",
            "java": "public int minStickers(String[] stickers, String target) {\n        Map<String, Integer> memo = new HashMap<>();\n        int[] targetCount = new int[26];\n        for (char c : target.toCharArray()) targetCount[c - 'a']++;\n        \n        for (String s : stickers) {\n            int[] stickerCount = new int[26];\n            StringBuilder sb = new StringBuilder();\n            for (char c : s.toCharArray()) {\n                if (targetCount[c - 'a'] == 0) continue;\n                stickerCount[c - 'a']++;\n            }\n            for (int i = 0; i < 26; ++i) {\n                sb.append(String.valueOf((char) ('a' + i)).repeat(stickerCount[i]));\n            }\n            memo.put(sb.toString(), 1);\n        }\n        \n        return dp(memo, targetCount, target);\n    }\n    \n    private int dp(Map<String, Integer> memo, int[] targetCount, String target) {\n        if (memo.containsKey(target)) return memo.get(target);\n        int[] counts = new int[26];\n        for (char c : target.toCharArray()) counts[c - 'a']++;\n        int ans = Integer.MAX_VALUE;\n        for (Map.Entry<String, Integer> kv : memo.entrySet()) {\n            boolean ok = true;\n            for (int i = 0; i < 26 && ok; ++i)\n                ok = counts[i] >= kv.getKey().charAt(i) - 'a';\n            if (!ok) continue;\n            ans = Math.min(ans, dp(memo, targetCount, target.substring(kv.getKey().length())) + kv.getValue());\n        }\n        memo.put(target, ans == Integer.MAX_VALUE ? -1 : ans);\n        return memo.get(target);\n    }",
            "python": "if __name__ == \"__main__\":\n    stickers = $args[0]\n    target = $args[1]\n    result = minStickers(stickers, target)\n    print(result)",
            "javascript": "function minStickers(stickers, target) {\n    let targetCount = new Array(26).fill(0);\n    let memo = new Map();\n    for (let c of target) targetCount[c.charCodeAt(0) - \"a\".charCodeAt(0)]++;\n\n    for (let s of stickers) {\n        let stickerCount = new Array(26).fill(0);\n        let state = \"\";\n        for (let c of s) {\n            if (!targetCount[c.charCodeAt(0) - \"a\".charCodeAt(0)]) continue;\n            stickerCount[c.charCodeAt(0) - \"a\".charCodeAt(0)]++;\n        }\n        for (let i = 0; i < 26; ++i) {\n            state += String.fromCharCode(\"a\".charCodeAt(0) + i).repeat(stickerCount[i]);\n        }\n        memo.set(state, 1);\n    }\n\n    return dp(memo, target);\n}\n\nfunction dp(memo, target) {\n    if (memo.has(target)) return memo.get(target);\n    let counts = new Array(26).fill(0);\n    for (let c of target) counts[c.charCodeAt(0) - \"a\".charCodeAt(0)]++;\n    let ans = Infinity;\n    for (let [key, value] of memo) {\n        let ok = true;\n        for (let i = 0; i < 26 && ok; ++i)\n            ok = counts[i] >= (key.match(new RegExp(String.fromCharCode(\"a\".charCodeAt(0) + i), \"g\")) || []).length;\n        if (!ok) continue;\n        ans = Math.min(ans, dp(memo, target.substring(key.length)) + value);\n    }\n    memo.set(target, ans == Infinity ? -1 : ans);\n    return memo.get(target);\n}"
        }
    },
    "692": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <queue>\nusing namespace std;\n\nvector<string> kFrequentWords(vector<string>& words, int k) {\n    unordered_map<string, int> wordCount;\n    for (const auto& word : words) {\n        wordCount[word]++;\n    }\n\n    auto comp = [](const pair<string, int>& a, const pair<string, int>& b) {\n        if (a.second == b.second) {\n            return a.first > b.first;\n        }\n        return a.second < b.second;\n    };\n    priority_queue<pair<string, int>, vector<pair<string, int>>, decltype(comp)> pq(comp);\n\n    for (const auto& wc : wordCount) {\n        pq.push(wc);\n    }\n\n    vector<string> result;\n    for (int i = 0; i < k; ++i) {\n        result.push_back(pq.top().first);\n        pq.pop();\n    }\n\n    return result;\n}",
            "java": "public List<String> kFrequentWords(String[] words, int k) {\n        Map<String, Integer> wordCount = new HashMap<>();\n        for (String word : words) {\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n\n        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>(\n                (a, b) -> a.getValue() == b.getValue()\n                        ? a.getKey().compareTo(b.getKey())\n                        : b.getValue() - a.getValue()\n        );\n        pq.addAll(wordCount.entrySet());\n\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll().getKey());\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    k = $args[1]\n    result = k_frequent_words(words, k)\n    print(result)",
            "javascript": "function kFrequentWords(words, k) {\n    const wordCount = new Map();\n    for (const word of words) {\n        wordCount.set(word, (wordCount.get(word) || 0) + 1);\n    }\n\n    const pq = Array.from(wordCount.entries()).sort((a, b) => {\n        if (a[1] === b[1]) {\n            return a[0].localeCompare(b[0]);\n        }\n        return b[1] - a[1];\n    });\n\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(pq[i][0]);\n    }\n    return result;\n}"
        }
    },
    "693": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool hasAlternatingBits(int n) {\n    int prevBit = n % 2;\n    n /= 2;\n    while (n > 0) {\n        int currBit = n % 2;\n        if (currBit == prevBit) return false;\n        prevBit = currBit;\n        n /= 2;\n    }\n    return true;\n}\n\nint main() {\n    int n = $args;\n    bool result = hasAlternatingBits(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = hasAlternatingBits(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = has_alternating_bits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = hasAlternatingBits(n);\n    console.log(result);\n}\n"
        }
    },
    "694": {
        "call_functions": {
            "c++": "int numDistinctIslands(vector<vector<int>>& grid) {\n    set<vector<pair<int, int>>> unique_islands;\n    for (int i = 0; i < grid.size(); ++i) {\n        for (int j = 0; j < grid[0].size(); ++j) {\n            if (grid[i][j] == 1) {\n                vector<pair<int,int>> island_shape;\n                dfs(grid, i, j, i, j, island_shape);\n                sort(island_shape.begin(), island_shape.end());\n                unique_islands.insert(island_shape);\n            }\n        }\n    }\n    return unique_islands.size();\n}",
            "java": "public int numDistinctIslands(int[][] grid) {\n    HashSet<ArrayList<ArrayList<Integer>>> uniqueIslands = new HashSet<>();\n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n                ArrayList<ArrayList<Integer>> islandShape = new ArrayList<>();\n                dfs(grid, i, j, i, j, islandShape);\n                Collections.sort(islandShape, (shape1, shape2) -> {\n                    int cmp = shape1.get(0).compareTo(shape2.get(0));\n                    if (cmp != 0) return cmp;\n                    return shape1.get(1).compareTo(shape2.get(1));\n                });\n                uniqueIslands.add(islandShape);\n            }\n        }\n    }\n    return uniqueIslands.size();\n}\n\nprivate void dfs(int[][] grid, int i, int j, int i0, int j0, ArrayList<ArrayList<Integer>> shape) {\n    if (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1) {\n        grid[i][j] = 2;\n        ArrayList<Integer> current = new ArrayList<>();\n        current.add(i - i0);\n        current.add(j - j0);\n        shape.add(current);\n        dfs(grid, i - 1, j, i0, j0, shape);\n        dfs(grid, i + 1, j, i0, j0, shape);\n        dfs(grid, i, j - 1, i0, j0, shape);\n        dfs(grid, i, j + 1, i0, j0, shape);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = numDistinctIslands(grid)\n    print(result)",
            "javascript": "function numDistinctIslands(grid) {\n    const uniqueIslands = new Set();\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] === 1) {\n                const islandShape = [];\n                dfs(grid, i, j, i, j, islandShape);\n                islandShape.sort((a, b) => a[0] - b[0] || a[1] - b[1]);\n                uniqueIslands.add(JSON.stringify(islandShape));\n            }\n        }\n    }\n    return uniqueIslands.size;\n}\n\nfunction dfs(grid, i, j, i0, j0, shape) {\n    if (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1) {\n        grid[i][j] = 2;\n        shape.push([i - i0, j - j0]);\n        dfs(grid, i - 1, j, i0, j0, shape);\n        dfs(grid, i + 1, j, i0, j0, shape);\n        dfs(grid, i, j - 1, i0, j0, shape);\n        dfs(grid, i, j + 1, i0, j0, shape);\n    }\n}"
        }
    },
    "695": {
        "call_functions": {
            "c++": "int maxAreaOfIsland(vector<vector<int>>& grid) {\n    int max_area = 0;\n\n    function<int(int, int)> dfs = [&](int i, int j) {\n        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == 0) {\n            return 0;\n        }\n        grid[i][j] = 0;\n        return 1 + dfs(i - 1, j) + dfs(i + 1, j) + dfs(i, j - 1) + dfs(i, j + 1);\n    };\n\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            if (grid[i][j]) {\n                max_area = max(max_area, dfs(i, j));\n            }\n        }\n    }\n    return max_area;\n}",
            "java": "public int maxAreaOfIsland(int[][] grid) {\n    int maxArea = 0;\n\n    for (int i = 0; i < grid.length; i++) {\n        for (int j = 0; j < grid[0].length; j++) {\n            if (grid[i][j] == 1) {\n                maxArea = Math.max(maxArea, dfs(grid, i, j));\n            }\n        }\n    }\n    return maxArea;\n}\n\nprivate int dfs(int[][] grid, int i, int j) {\n    if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {\n        return 0;\n    }\n    grid[i][j] = 0;\n    return 1 + dfs(grid, i - 1, j) + dfs(grid, i + 1, j) + dfs(grid, i, j - 1) + dfs(grid, i, j + 1);\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = maxAreaOfIsland(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const maxArea = maxAreaOfIsland(grid);\n    console.log(maxArea);\n}"
        }
    },
    "696": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = countBinarySubstrings(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int countBinarySubstrings(String s) {\n    int prev = 0, curr = 1, result = 0;\n    for (int i = 1; i < s.length(); i++) {\n        if (s.charAt(i) == s.charAt(i - 1)) {\n            curr++;\n        } else {\n            result += Math.min(prev, curr);\n            prev = curr;\n            curr = 1;\n        }\n    }\n    return result + Math.min(prev, curr);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = count_binary_substrings(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = countBinarySubstrings(s);\n    console.log(result);\n}"
        }
    },
    "697": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\n#include <iostream>\n\nint findShortestSubArray(std::vector<int>& nums) {\n    std::unordered_map<int, int> freq_map, start_map;\n    int max_freq = 0, min_length = nums.size();\n\n    for (int i = 0; i < nums.size(); ++i) {\n        if (start_map.count(nums[i]) == 0) {\n            start_map[nums[i]] = i;\n        }\n        freq_map[nums[i]]++;\n\n        int freq = freq_map[nums[i]];\n        if (freq > max_freq) {\n            max_freq = freq;\n            min_length = i - start_map[nums[i]] + 1;\n        } else if (freq == max_freq) {\n            min_length = std::min(min_length, i - start_map[nums[i]] + 1);\n        }\n    }\n\n    return min_length;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = findShortestSubArray(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int findShortestSubArray(int[] nums) {\n        HashMap<Integer, Integer> freq_map = new HashMap<>(), start_map = new HashMap<>();\n        int max_freq = 0, min_length = nums.length;\n        \n        for (int i = 0; i < nums.length; ++i) {\n            if (!start_map.containsKey(nums[i])) {\n                start_map.put(nums[i], i);\n            }\n            freq_map.put(nums[i], freq_map.getOrDefault(nums[i], 0) + 1);\n            \n            int freq = freq_map.get(nums[i]);\n            if (freq > max_freq) {\n                max_freq = freq;\n                min_length = i - start_map.get(nums[i]) + 1;\n            } else if (freq == max_freq) {\n                min_length = Math.min(min_length, i - start_map.get(nums[i]) + 1);\n            }\n        }\n        \n        return min_length;\n    }",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findShortestSubArray(nums)\n    print(result)",
            "javascript": "function findShortestSubArray(nums) {\n    const freq_map = {}, start_map = {};\n    let max_freq = 0, min_length = nums.length;\n\n    for (let i = 0; i < nums.length; ++i) {\n        if (!start_map.hasOwnProperty(nums[i])) {\n            start_map[nums[i]] = i;\n        }\n        if (!freq_map.hasOwnProperty(nums[i])) {\n            freq_map[nums[i]] = 0;\n        }\n        freq_map[nums[i]]++;\n\n        const freq = freq_map[nums[i]];\n        if (freq > max_freq) {\n            max_freq = freq;\n            min_length = i - start_map[nums[i]] + 1;\n        } else if (freq === max_freq) {\n            min_length = Math.min(min_length, i - start_map[nums[i]] + 1);\n        }\n    }\n\n    return min_length;\n}"
        }
    },
    "698": {
        "call_functions": {
            "c++": "#include <vector>\n#include <numeric>\n\nbool canPartitionKSubsets(std::vector<int>& nums, int k) {\n  int sum = std::accumulate(nums.begin(), nums.end(), 0);\n  if (sum % k != 0) return false;\n  int target = sum / k;\n  std::vector<bool> visited(nums.size(), false);\n  return dfs(nums, visited, 0, target, 0, k);\n}\n\nbool dfs(std::vector<int>& nums, std::vector<bool>& visited, int start, int target, int curr_sum, int k) {\n  if (k == 1) return true;\n  if (curr_sum == target) return dfs(nums, visited, 0, target, 0, k - 1);\n  for (int i = start; i < nums.size(); i++) {\n    if (!visited[i] && curr_sum + nums[i] <= target) {\n      visited[i] = true;\n      if (dfs(nums, visited, i + 1, target, curr_sum + nums[i], k)) return true;\n      visited[i] = false;\n    }\n  }\n  return false;\n}",
            "java": "public boolean canPartitionKSubsets(int[] nums, int k) {\n  int sum = 0;\n  for (int num : nums) sum += num;\n  if (sum % k != 0) return false;\n  int target = sum / k;\n  boolean[] visited = new boolean[nums.length];\n  return dfs(nums, visited, 0, target, 0, k);\n}\n\nprivate boolean dfs(int[] nums, boolean[] visited, int start, int target, int curr_sum, int k) {\n  if (k == 1) return true;\n  if (curr_sum == target) return dfs(nums, visited, 0, target, 0, k - 1);\n  for (int i = start; i < nums.length; i++) {\n    if (!visited[i] && curr_sum + nums[i] <= target) {\n      visited[i] = true;\n      if (dfs(nums, visited, i + 1, target, curr_sum + nums[i], k)) return true;\n      visited[i] = false;\n    }\n  }\n  return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = canPartitionKSubsets(nums, k)\n    print(result)",
            "javascript": "function main() {\n  const nums = $args[0];\n  const k = $args[1];\n  const result = canPartitionKSubsets(nums, k);\n  console.log(result);\n}"
        }
    },
    "699": {
        "call_functions": {
            "c++": "#include<vector>\nusing namespace std;\n\nvector<int> fallingSquares(vector<vector<int>>& positions) {\n    vector<int> ans;\n    vector<pair<int, int>> intervals;\n\n    for (auto p : positions) {\n        int L = p[0];\n        int R = p[0] + p[1];\n        int h = p[1];\n        for (auto it : intervals) {\n            if (it.first < R && L < it.second) {\n                h = max(h, p[1] + it.first);\n            }\n        }\n\n        int maxHeight = h;\n        for (auto it : intervals) {\n            maxHeight = max(maxHeight, it.first);\n        }\n\n        ans.push_back(maxHeight);\n        intervals.push_back(make_pair(h, R));\n    }\n    \n    return ans;\n}",
            "java": "public int[] fallingSquares(int[][] positions) {\n    int[] ans = new int[positions.length];\n    List<int[]> intervals = new ArrayList<>();\n\n    for (int i = 0; i < positions.length; i++) {\n        int L = positions[i][0];\n        int R = positions[i][0] + positions[i][1];\n        int h = positions[i][1];\n        for (int[] interval : intervals) {\n            if (interval[1] > L && R > interval[1]) {\n                h = Math.max(h, positions[i][1] + interval[0]);\n            }\n        }\n\n        int maxHeight = h;\n        for (int[] interval : intervals) {\n            maxHeight = Math.max(maxHeight, interval[0]);\n        }\n\n        ans[i] = maxHeight;\n        intervals.add(new int[]{h, R});\n    }\n\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    positions = $args[0]\n    result = fallingSquares(positions)\n    print(result)",
            "javascript": "function fallingSquares(positions) {\n    let ans = [];\n    let intervals = [];\n\n    for (let p of positions) {\n        let L = p[0];\n        let R = p[0] + p[1];\n        let h = p[1];\n        for (let it of intervals) {\n            if (it[1] > L && R > it[1]) {\n                h = Math.max(h, p[1] + it[0]);\n            }\n        }\n\n        let maxHeight = h;\n        for (let it of intervals) {\n            maxHeight = Math.max(maxHeight, it[0]);\n        }\n\n        ans.push(maxHeight);\n        intervals.push([h, R]);\n    }\n    \n    return ans;\n}"
        }
    },
    "702": {
        "call_functions": {
            "c++": "int main() {\n    int target = $args;\n    int result = search(reader, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int search(ArrayReader reader, int target) {\n    int left = 0, right = 1;\n    while (reader.get(right) < target) {\n        left = right;\n        right <<= 1;\n    }\n\n    while (left <= right) {\n        int mid = left + ((right - left) >> 1);\n        int val = reader.get(mid);\n        if (val == target)\n            return mid;\n        if (val > target)\n            right = mid - 1;\n        else\n            left = mid + 1;\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    reader = $args[0]\n    target = $args[1]\n    result = search(reader, target)\n    print(result)",
            "javascript": "function search(reader, target) {\n    const result = search(reader, target);\n    console.log(result);\n}"
        }
    },
    "703": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n\nint main() {\n    int k = $args.k;\n    std::vector<int> nums = $args.nums;\n    KthLargest obj(k, nums);\n    int result = obj.add($args.val);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int add(int val) {\n        minHeap.offer(val);\n        if (minHeap.size() > k) {\n            minHeap.poll();\n        }\n        return minHeap.peek();\n    }",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    nums = $args[1]\n    kth_largest = KthLargest(k, nums)\n    val = $args[2]\n    result = kth_largest.add(val)\n    print(result)",
            "javascript": "function main() {\n    const k = $args[0];\n    const nums = $args.slice(1);\n    const kthLargest = new KthLargest(k, nums);\n    const result = kthLargest.add(5);\n    console.log(result);\n}"
        }
    },
    "704": {
        "call_functions": {
            "c++": "int search(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}",
            "java": "public int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = search(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = search(nums, target);\n    console.log(result);\n}"
        }
    },
    "709": {
        "call_functions": {
            "c++": "#include <string>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::string result = toLowerCase(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String toLowerCase(String s) {\n    char[] chars = s.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        if (chars[i] >= 'A' && chars[i] <= 'Z') {\n            chars[i] = (char)(chars[i] - 'A' + 'a');\n        }\n    }\n    return new String(chars);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = toLowerCase(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = toLowerCase(s);\n    console.log(result);\n}"
        }
    },
    "710": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\n#include <algorithm>\n#include <random>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<int> blacklist = {1, 2, 3}; // Replace with actual blacklist values\n    Solution obj(n, blacklist);\n    int result = obj.pick();\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int pick()",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    blacklist = $args[1]\n    obj = Solution(n, blacklist)\n    result = obj.pick()\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const blacklist = [];\n    const solution = new Solution(n, blacklist);\n    const result = solution.pick();\n    console.log(result);\n}"
        }
    },
    "712": {
        "call_functions": {
            "c++": "int minimumDeleteSum(std::string s1, std::string s2) {\n    int dp[1001][1001] = {0};\n    for (int i = 1; i <= s1.size(); i++) {\n        dp[i][0] = dp[i - 1][0] + s1[i - 1];\n    }\n    for (int j = 1; j <= s2.size(); j++) {\n        dp[0][j] = dp[0][j - 1] + s2[j - 1];\n    }\n    for (int i = 1; i <= s1.size(); i++) {\n        for (int j = 1; j <= s2.size(); j++) {\n            if (s1[i - 1] == s2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = std::min(dp[i - 1][j] + s1[i - 1], dp[i][j - 1] + s2[j - 1]);\n            }\n        }\n    }\n    return dp[s1.size()][s2.size()];\n}",
            "java": "public int minimumDeleteSum(String s1, String s2) {\n    int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n    for (int i = 1; i <= s1.length(); i++) {\n        dp[i][0] = dp[i - 1][0] + s1.charAt(i - 1);\n    }\n    for (int j = 1; j <= s2.length(); j++) {\n        dp[0][j] = dp[0][j - 1] + s2.charAt(j - 1);\n    }\n    for (int i = 1; i <= s1.length(); i++) {\n        for (int j = 1; j <= s2.length(); j++) {\n            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(dp[i - 1][j] + s1.charAt(i - 1), dp[i][j - 1] + s2.charAt(j - 1));\n            }\n        }\n    }\n    return dp[s1.length()][s2.length()];\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = minimumDeleteSum(s1, s2)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const result = minimumDeleteSum(s1, s2);\n    console.log(result);\n}"
        }
    },
    "713": {
        "call_functions": {
            "c++": "int numSubarrayProductLessThanK(vector<int>& nums, int k) {\n    if (k <= 1) return 0;\n    int prod = 1, count = 0, left = 0;\n    for (int right = 0; right < nums.size(); right++) {\n        prod *= nums[right];\n        while (prod >= k) prod /= nums[left++];\n        count += right - left + 1;\n    }\n    return count;\n}",
            "java": "public int numSubarrayProductLessThanK(int[] nums, int k) {\n    if (k <= 1) return 0;\n    int prod = 1, count = 0, left = 0;\n    for (int right = 0; right < nums.length; right++) {\n        prod *= nums[right];\n        while (prod >= k) prod /= nums[left++];\n        count += right - left + 1;\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = numSubarrayProductLessThanK(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = numSubarrayProductLessThanK(nums, k);\n    console.log(result);\n}"
        }
    },
    "714": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int fee = $args;\n    int result = maxProfit(prices, fee);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int[] prices, int fee) {\n    int cash = 0, hold = -prices[0];\n    for (int price : prices) {\n        int temp = cash;\n        cash = Math.max(cash, hold + price - fee);\n        hold = Math.max(hold, temp - price);\n    }\n    return cash;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    fee = $args[1]\n    result = maxProfit(prices, fee)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args[0];\n    const fee = $args[1];\n    const result = maxProfit(prices, fee);\n    console.log(result);\n}"
        }
    },
    "716": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    MaxStack stack;\n    stack.push($args);\n    int result = stack.pop();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public void push(int x) {\n        mainStack.push(x);\n        maxSet.add(x);\n    }\n\n    public int pop() {\n        int top = mainStack.pop();\n        maxSet.remove(top);\n        return top;\n    }\n\n    public int top() {\n        return mainStack.peek();\n    }\n\n    public int peekMax() {\n        return maxSet.last();\n    }\n\n    public int popMax() {\n        int max = maxSet.last();\n        maxSet.remove(max);\n\n        Stack<Integer> tempStack = new Stack<>();\n        while (mainStack.peek() != max) {\n            tempStack.push(mainStack.pop());\n        }\n        mainStack.pop();\n        while (!tempStack.isEmpty()) {\n            mainStack.push(tempStack.pop());\n        }\n\n        return max;\n    }",
            "python": "if __name__ == \"__main__\":\n    stack = MaxStack()\n    stack.push(5)\n    stack.push(1)\n    stack.push(3)\n    stack.push(2)\n    print(stack.top())\n    print(stack.peekMax())\n    print(stack.popMax())\n    print(stack.top())",
            "javascript": "class MaxStack {\n    constructor() {\n        this.mainStack = [];\n        this.maxSet = new Set();\n    }\n\n    push(x) {\n        this.mainStack.push(x);\n        this.maxSet.add(x);\n    }\n\n    pop() {\n        const top = this.mainStack.pop();\n        this.maxSet.delete(top);\n        return top;\n    }\n\n    top() {\n        return this.mainStack[this.mainStack.length - 1];\n    }\n\n    peekMax() {\n        return Math.max(...this.maxSet);\n    }\n\n    popMax() {\n        const max = Math.max(...this.maxSet);\n        this.maxSet.delete(max);\n\n        const tempStack = [];\n        while (this.mainStack[this.mainStack.length - 1] !== max) {\n            tempStack.push(this.mainStack.pop());\n        }\n        this.mainStack.pop();\n        while (tempStack.length) {\n            this.mainStack.push(tempStack.pop());\n        }\n\n        return max;\n    }\n}"
        }
    },
    "717": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool isOneBitCharacter(vector<int>& bits) {\n    int i;\n    for (i = 0; i < bits.size() - 1; i++) {\n        i += bits[i];\n    }\n    return i == bits.size() - 1;\n}\n\nint main() {\n    vector<int> bits = $args;\n    bool result = isOneBitCharacter(bits);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int[] bits = $args;\n    boolean result = isOneBitCharacter(bits);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    bits = $args[0]\n    result = is_one_bit_character(bits)\n    print(result)",
            "javascript": "function main() {\n    const bits = $args;\n    const result = isOneBitCharacter(bits);\n    console.log(result);\n}"
        }
    },
    "718": {
        "call_functions": {
            "c++": "int findLength(vector<int>& nums1, vector<int>& nums2) {\n    int m = nums1.size();\n    int n = nums2.size();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n    int maxLength = 0;\n\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n            if (nums1[i] == nums2[j]) {\n                dp[i][j] = dp[i + 1][j + 1] + 1;\n                maxLength = max(maxLength, dp[i][j]);\n            }\n        }\n    }\n\n    return maxLength;\n}",
            "java": "public int findLength(int[] nums1, int[] nums2) {\n    int m = nums1.length;\n    int n = nums2.length;\n    int[][] dp = new int[m + 1][n + 1];\n    int maxLength = 0;\n\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n            if (nums1[i] == nums2[j]) {\n                dp[i][j] = dp[i + 1][j + 1] + 1;\n                maxLength = Math.max(maxLength, dp[i][j]);\n            }\n        }\n    }\n\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = findLength(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const result = findLength(nums1, nums2);\n    console.log(result);\n}"
        }
    },
    "719": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = 5;\n    int result = smallestDistancePair(nums, k);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int smallestDistancePair(int[] nums, int k) {\n    Arrays.sort(nums);\n    int low = 0, high = nums[nums.length - 1] - nums[0];\n    \n    while (low < high) {\n        int mid = (low + high) / 2;\n        int count = 0, left = 0;\n\n        for (int right = 0; right < nums.length; ++right) {\n            while (nums[right] - nums[left] > mid) {\n                ++left;\n            }\n            count += (right - left);\n        }\n\n        if (count < k) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    \n    return low;\n}\n",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = smallestDistancePair(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = smallestDistancePair(nums, k);\n    console.log(result);\n}"
        }
    },
    "720": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    std::string result = longestWord(words);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String longestWord(String[] words) {\n        Arrays.sort(words);\n        Set<String> builtWords = new HashSet<>();\n        String result = \"\";\n\n        for (String word : words) {\n            if (word.length() == 1 || builtWords.contains(word.substring(0, word.length() - 1))) {\n                result = (word.length() > result.length()) ? word : result;\n                builtWords.add(word);\n            }\n        }\n\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = longest_word(words)\n    print(result)",
            "javascript": "function main() {\n    const words = $args;\n    const result = longestWord(words);\n    console.log(result);\n}"
        }
    },
    "721": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nvoid dfs(int id, const vector<vector<string>>& accounts, vector<bool>& visited, set<string>& merged_emails, map<string, int>& email_to_id);\n\nvector<vector<string>> accountsMerge(vector<vector<string>>& accounts);\n\nint main() {\n    vector<vector<string>> accounts = $args;\n    vector<vector<string>> result = accountsMerge(accounts);\n    for (const auto& account : result) {\n        for (const auto& email : account) {\n            cout << email << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public List<List<String>> accountsMerge(List<List<String>> accounts) {\n    Map<String, Integer> emailToId = new HashMap<>();\n    for (int i = 0; i < accounts.size(); ++i) {\n        for (int j = 1; j < accounts.get(i).size(); ++j) {\n            emailToId.put(accounts.get(i).get(j), i);\n        }\n    }\n\n    List<List<String>> result = new ArrayList<>();\n    boolean[] visited = new boolean[accounts.size()];\n    for (int i = 0; i < accounts.size(); ++i) {\n        if (!visited[i]) {\n            Set<String> mergedEmails = new HashSet<>();\n            dfs(i, accounts, visited, mergedEmails, emailToId);\n            List<String> mergedAccount = new ArrayList<>(mergedEmails);\n            Collections.sort(mergedAccount);\n            mergedAccount.add(0, accounts.get(i).get(0));\n            result.add(mergedAccount);\n        }\n    }\n    return result;\n}\n\nprivate void dfs(int id, List<List<String>> accounts, boolean[] visited, Set<String> mergedEmails, Map<String, Integer> emailToId) {\n    if (visited[id]) return;\n    visited[id] = true;\n    for (int j = 1; j < accounts.get(id).size(); ++j) {\n        String email = accounts.get(id).get(j);\n        mergedEmails.add(email);\n        int nextId = emailToId.get(email);\n        dfs(nextId, accounts, visited, mergedEmails, emailToId);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    accounts = $args[0]\n    result = accountsMerge(accounts)\n    print(result)",
            "javascript": "var accountsMerge = function(accounts) {\n    function dfs(id, visited, mergedEmails) {\n        if (visited.has(id)) return;\n        visited.add(id);\n        for (let j = 1; j < accounts[id].length; j++) {\n            const email = accounts[id][j];\n            mergedEmails.add(email);\n            const nextId = emailToId[email];\n            dfs(nextId, visited, mergedEmails);\n        }\n    }\n\n    const emailToId = {};\n    accounts.forEach((account, i) => {\n        account.slice(1).forEach(email => {\n            emailToId[email] = i;\n        });\n    });\n\n    const result = [];\n    const visited = new Set();\n    accounts.forEach((account, i) => {\n        if (!visited.has(i)) {\n            const mergedEmails = new Set();\n            dfs(i, visited, mergedEmails);\n            result.push([account[0], ...Array.from(mergedEmails).sort()]);\n        }\n    });\n    return result;\n};"
        }
    },
    "722": {
        "call_functions": {
            "c++": "vector<string> removeComments(vector<string>& source) {\n    vector<string> result;\n    string buffer;\n    bool in_block_comment = false;\n    \n    for (const auto& line : source) {\n        for (size_t i = 0; i < line.size(); ++i) {\n            if (in_block_comment) {\n                if (i < line.size() - 1 && line[i] == '*' && line[i + 1] == '/') {\n                    in_block_comment = false;\n                    ++i;\n                }\n            } else {\n                if (i < line.size() - 1 && line[i] == '/' && line[i + 1] == '*') {\n                    in_block_comment = true;\n                    ++i;\n                } else if (i < line.size() - 1 && line[i] == '/' && line[i + 1] == '/') {\n                    break;\n                } else {\n                    buffer.push_back(line[i]);\n                }\n            }\n        }\n        if (!in_block_comment && !buffer.empty()) {\n            result.push_back(buffer);\n            buffer.clear();\n        }\n    }\n    return result;\n}",
            "java": "public List<String> removeComments(String[] source) {\n    List<String> result = new ArrayList<>();\n    StringBuilder buffer = new StringBuilder();\n    boolean inBlockComment = false;\n\n    for (String line : source) {\n        for (int i = 0; i < line.length(); ++i) {\n            if (inBlockComment) {\n                if (i < line.length() - 1 && line.charAt(i) == '*' && line.charAt(i + 1) == '/') {\n                    inBlockComment = false;\n                    ++i;\n                }\n            } else {\n                if (i < line.length() - 1 && line.charAt(i) == '/' && line.charAt(i + 1) == '*') {\n                    inBlockComment = true;\n                    ++i;\n                } else if (i < line.length() - 1 && line.charAt(i) == '/' && line.charAt(i + 1) == '/') {\n                    break;\n                } else {\n                    buffer.append(line.charAt(i));\n                }\n            }\n        }\n        if (!inBlockComment && buffer.length() > 0) {\n            result.add(buffer.toString());\n            buffer.setLength(0);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    source = $args[0]\n    result = removeComments(source)\n    print(result)",
            "javascript": "var removeComments = function(source) {\n    let result = [];\n    let buffer = '';\n    let inBlockComment = false;\n    \n    for (const line of source) {\n        for (let i = 0; i < line.length; ++i) {\n            if (inBlockComment) {\n                if (i < line.length - 1 && line[i] === '*' && line[i + 1] === '/') {\n                    inBlockComment = false;\n                    ++i;\n                }\n            } else {\n                if (i < line.length - 1 && line[i] === '/' && line[i + 1] === '*') {\n                    inBlockComment = true;\n                    ++i;\n                } else if (i < line.length - 1 && line[i] === '/' && line[i + 1] === '/') {\n                    break;\n                } else {\n                    buffer += line[i];\n                }\n            }\n        }\n        if (!inBlockComment && buffer.length) {\n            result.push(buffer);\n            buffer = '';\n        }\n    }\n    return result;\n};"
        }
    },
    "723": {
        "call_functions": {
            "c++": "vector<vector<int>> candyCrush(vector<vector<int>>& board) {\n    int rows = board.size(), cols = board[0].size();\n    bool toDo = false;\n    \n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols - 2; c++) {\n            int val = abs(board[r][c]);\n            if (val && val == abs(board[r][c + 1]) && val == abs(board[r][c + 2])) {\n                board[r][c] = board[r][c + 1] = board[r][c + 2] = -val;\n                toDo = true;\n            }\n        }\n    }\n    \n    for (int r = 0; r < rows - 2; r++) {\n        for (int c = 0; c < cols; c++) {\n            int val = abs(board[r][c]);\n            if (val && val == abs(board[r + 1][c]) && val == abs(board[r + 2][c])) {\n                board[r][c] = board[r + 1][c] = board[r + 2][c] = -val;\n                toDo = true;\n            }\n        }\n    }\n    \n    for (int c = 0; c < cols; c++) {\n        int wr = rows - 1;\n        for (int r = rows - 1; r >= 0; r--)\n            if (board[r][c] > 0)\n                board[wr--][c] = board[r][c];\n        while (wr >= 0)\n            board[wr--][c] = 0;\n    }\n    \n    return toDo ? candyCrush(board) : board;\n}",
            "java": "public int[][] candyCrush(int[][] board) {\n    int rows = board.length, cols = board[0].length;\n    boolean toDo = false;\n    \n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols - 2; c++) {\n            int val = Math.abs(board[r][c]);\n            if (val != 0 && val == Math.abs(board[r][c + 1]) && val == Math.abs(board[r][c + 2])) {\n                board[r][c] = board[r][c + 1] = board[r][c + 2] = -val;\n                toDo = true;\n            }\n        }\n    }\n    \n    for (int r = 0; r < rows - 2; r++) {\n        for (int c = 0; c < cols; c++) {\n            int val = Math.abs(board[r][c]);\n            if (val != 0 && val == Math.abs(board[r + 1][c]) && val == Math.abs(board[r + 2][c])) {\n                board[r][c] = board[r + 1][c] = board[r + 2][c] = -val;\n                toDo = true;\n            }\n        }\n    }\n    \n    for (int c = 0; c < cols; c++) {\n        int wr = rows - 1;\n        for (int r = rows - 1; r >= 0; r--)\n            if (board[r][c] > 0)\n                board[wr--][c] = board[r][c];\n        while (wr >= 0)\n            board[wr--][c] = 0;\n    }\n    \n    return toDo ? candyCrush(board) : board;\n}"
        }
    },
    "724": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = pivotIndex(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int pivotIndex(int[] nums) {\n    int total_sum = 0, left_sum = 0;\n    for (int num : nums)\n        total_sum += num;\n    for (int i = 0; i < nums.length; ++i) {\n        if (left_sum == total_sum - left_sum - nums[i])\n            return i;\n        left_sum += nums[i];\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = pivotIndex(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const total_sum = nums.reduce((a, b) => a + b, 0);\n    let left_sum = 0;\n    for (let i = 0; i < nums.length; ++i) {\n        if (left_sum === total_sum - left_sum - nums[i])\n            return i;\n        left_sum += nums[i];\n    }\n    return -1;\n}\n"
        }
    },
    "726": {
        "call_functions": {
            "c++": "#include <map>\n#include <string>\nusing namespace std;\n\nmap<string, int> parse(const string &formula, int &i);\nstring countOfAtoms(string formula);\n\nint main() {\n    string formula = $args;\n    string result = countOfAtoms(formula);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String countOfAtoms(String formula) {\n    int[] i = {0};\n    Map<String, Integer> counts = parse(formula, i);\n    StringBuilder ans = new StringBuilder();\n    for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n        ans.append(entry.getKey());\n        if (entry.getValue() > 1) ans.append(entry.getValue());\n    }\n    return ans.toString();\n}\n\nprivate Map<String, Integer> parse(String formula, int[] i) {\n    Map<String, Integer> counts = new TreeMap<>();\n    while (i[0] < formula.length()) {\n        if (formula.charAt(i[0]) == '(') {\n            Map<String, Integer> temp = parse(formula, new int[]{++i[0]});\n            int count = 0;\n            while (i[0] < formula.length() && Character.isDigit(formula.charAt(i[0]))) {\n                count = count * 10 + (formula.charAt(i[0]++) - '0');\n            }\n            if (count == 0) count = 1;\n            for (Map.Entry<String, Integer> entry : temp.entrySet()) {\n                counts.put(entry.getKey(), counts.getOrDefault(entry.getKey(), 0) + entry.getValue() * count);\n            }\n        } else if (formula.charAt(i[0]) == ')') {\n            ++i[0];\n            return counts;\n        } else {\n            StringBuilder name = new StringBuilder().append(formula.charAt(i[0]++));\n            while (i[0] < formula.length() && Character.isLowerCase(formula.charAt(i[0]))) {\n                name.append(formula.charAt(i[0]++));\n            }\n            int count = 0;\n            while (i[0] < formula.length() && Character.isDigit(formula.charAt(i[0]))) {\n                count = count * 10 + (formula.charAt(i[0]++) - '0');\n            }\n            if (count == 0) count = 1;\n            counts.put(name.toString(), counts.getOrDefault(name.toString(), 0) + count);\n        }\n    }\n    return counts;\n}",
            "python": "if __name__ == \"__main__\":\n    formula = $args[0]\n    result = countOfAtoms(formula)\n    print(result)",
            "javascript": "function countOfAtoms(formula) {\n    let i = [0];\n    let counts = parse(formula, i);\n    let ans = [];\n    for (let name of Object.keys(counts).sort()) {\n        ans.push(name);\n        if (counts[name] > 1) ans.push(counts[name]);\n    }\n    return ans.join('');\n}"
        }
    },
    "727": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nstd::string min_window_sub_sequence(std::string s1, std::string s2);\n\nint main() {\n    std::string s1 = $args;\n    std::string s2 = $args;\n    std::string result = min_window_sub_sequence(s1, s2);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String minWindowSubSequence(String s1, String s2) {\n    int m = s1.length(), n = s2.length();\n    int[][] dp = new int[n + 1][m + 1];\n\n    for (int j = 0; j <= m; ++j) {\n        dp[0][j] = j;\n    }\n\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= m; ++j) {\n            if (s1.charAt(j - 1) == s2.charAt(i - 1)) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = dp[i][j - 1];\n            }\n        }\n    }\n    \n    int start = 0, length = m + 1;\n    for (int j = 1; j <= m; ++j) {\n        if (dp[n][j] != 0 && j - dp[n][j] < length) {\n            start = dp[n][j];\n            length = j - start;\n        }\n    }\n\n    return length == m + 1 ? \"\" : s1.substring(start, start + length);\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = min_window_sub_sequence(s1, s2)\n    print(result)",
            "javascript": "function minWindowSubSequence(s1, s2) {\n    const m = s1.length, n = s2.length;\n    const dp = Array.from({ length: n + 1 }, () => Array(m + 1).fill(0));\n\n    for (let j = 0; j <= m; ++j) {\n        dp[0][j] = j;\n    }\n\n    for (let i = 1; i <= n; ++i) {\n        for (let j = 1; j <= m; ++j) {\n            if (s1[j - 1] === s2[i - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = dp[i][j - 1];\n            }\n        }\n    }\n    \n    let start = 0, length = m + 1;\n    for (let j = 1; j <= m; ++j) {\n        if (dp[n][j] !== 0 && j - dp[n][j] < length) {\n            start = dp[n][j];\n            length = j - start;\n        }\n    }\n\n    return length === m + 1 ? \"\" : s1.slice(start, start + length);\n}"
        }
    },
    "728": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nbool isSelfDividing(int num) {\n    int n = num;\n    while (n) {\n        int digit = n % 10;\n        if (digit == 0 || num % digit != 0)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\n\nint main() {\n    int left = $args;\n    int right = $args;\n    std::vector<int> result = selfDividingNumbers(left, right);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public static List<Integer> selfDividingNumbers(int left, int right) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = left; i <= right; ++i) {\n            if (isSelfDividing(i))\n                result.add(i);\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    left = $args[0]\n    right = $args[1]\n    result = self_dividing_numbers(left, right)\n    print(result)",
            "javascript": "function selfDividingNumbers(left, right) {\n    const result = [];\n    for (let i = left; i <= right; ++i) {\n        if (isSelfDividing(i))\n            result.push(i);\n    }\n    return result;\n}"
        }
    },
    "729": {
        "call_functions": {
            "c++": "#include <map>\n\nint main() {\n    MyCalendar obj;\n    int start = $args;\n    int end = $args;\n    bool result = obj.book(start, end);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean book(int start, int end) {\n        Integer prevStart = calendar.floorKey(start);\n        Integer nextStart = calendar.ceilingKey(start);\n\n        if ((prevStart == null || calendar.get(prevStart) <= start) &&\n            (nextStart == null || end <= nextStart)) {\n            calendar.put(start, end);\n            return true;\n        }\n        return false;\n    }\n",
            "python": "if __name__ == \"__main__\":\n    start = $args[0]\n    end = $args[1]\n    my_calendar = MyCalendar()\n    result = my_calendar.book(start, end)\n    print(result)",
            "javascript": "function main() {\n    const start = $args[0];\n    const end = $args[1];\n    const myCalendar = new MyCalendar();\n    const result = myCalendar.book(start, end);\n    console.log(result);\n}"
        }
    },
    "730": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = countPalindromicSubsequences(s);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int countPalindromicSubsequences(String S) {\n    int n = S.length();\n    int mod = 1000000007;\n    int[][] dp = new int[4][n + 1];\n\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = i + 1; j <= n; j++) {\n            int c = S.charAt(i) - 'a';\n            dp[c][j] = dp[0][j - 1] + dp[1][j - 1] + dp[2][j - 1] + dp[3][j - 1] - dp[c][i] + 2;\n            if (dp[c][j] < 0) dp[c][j] += mod;\n        }\n    }\n\n    return (dp[0][n] + dp[1][n] + dp[2][n] + dp[3][n]) % mod;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = countPalindromicSubsequences(s)\n    print(result)",
            "javascript": "function countPalindromicSubsequences(s) {\n    const n = s.length;\n    const MOD = 1000000007;\n    const dp = Array.from({ length: 4 }, () => Array(n + 1).fill(0));\n\n    for (let i = n - 1; i >= 0; i--) {\n        for (let j = i + 1; j <= n; j++) {\n            const c = s.charCodeAt(i) - 97;\n            dp[c][j] = dp[0][j - 1] + dp[1][j - 1] + dp[2][j - 1] + dp[3][j - 1] - dp[c][i] + 2;\n            dp[c][j] = (dp[c][j] + MOD) % MOD;\n        }\n    }\n\n    return (dp[0][n] + dp[1][n] + dp[2][n] + dp[3][n]) % MOD;\n}"
        }
    },
    "732": {
        "call_functions": {
            "c++": "#include <map>\n\nint main() {\n    MyCalendarThree obj;\n    int start = $args;\n    int end = $args;\n    int result = obj.book(start, end);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int book(int start, int end) {\n        timeline.put(start, timeline.getOrDefault(start, 0) + 1);\n        timeline.put(end, timeline.getOrDefault(end, 0) - 1);\n        int ongoing = 0, k = 0;\n        for (int value : timeline.values()) {\n            k = Math.max(k, ongoing += value);\n        }\n        return k;\n    }",
            "python": "if __name__ == \"__main__\":\n    start = $args[0]\n    end = $args[1]\n    obj = MyCalendarThree()\n    result = obj.book(start, end)\n    print(result)",
            "javascript": "function main() {\n    const start = $args[0];\n    const end = $args[1];\n    const calendar = new MyCalendarThree();\n    const result = calendar.book(start, end);\n    console.log(result);\n}"
        }
    },
    "733": {
        "call_functions": {
            "c++": "#include<vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> image = $args;\n    int sr = $args;\n    int sc = $args;\n    int newColor = $args;\n    vector<vector<int>> result = floodFill(image, sr, sc, newColor);\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = 0; j < result[0].size(); j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n    int startColor = image[sr][sc];\n    fill(image, sr, sc, newColor, startColor);\n    return image;\n}\n\nprivate void fill(int[][] image, int sr, int sc, int newColor, int startColor) {\n    if (sr < 0 || sc < 0 || sr >= image.length || sc >= image[0].length || image[sr][sc] != startColor || image[sr][sc] == newColor) return;\n    image[sr][sc] = newColor;\n    fill(image, sr - 1, sc, newColor, startColor);\n    fill(image, sr + 1, sc, newColor, startColor);\n    fill(image, sr, sc - 1, newColor, startColor);\n    fill(image, sr, sc + 1, newColor, startColor);\n}",
            "python": "if __name__ == \"__main__\":\n    image = $args[0]\n    sr = $args[1]\n    sc = $args[2]\n    newColor = $args[3]\n    result = floodFill(image, sr, sc, newColor)\n    print(result)",
            "javascript": "function floodFill(image, sr, sc, newColor) {\n    let startColor = image[sr][sc];\n    function fill(sr, sc) {\n        if (sr < 0 || sc < 0 || sr >= image.length || sc >= image[0].length || image[sr][sc] !== startColor || image[sr][sc] === newColor) return;\n        image[sr][sc] = newColor;\n        fill(sr - 1, sc);\n        fill(sr + 1, sc);\n        fill(sr, sc - 1);\n        fill(sr, sc + 1);\n    }\n    fill(sr, sc);\n    return image;\n}"
        }
    },
    "734": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    vector<string> sentence1 = $args;\n    vector<string> sentence2 = $args;\n    vector<vector<string>> similarPairs = $args;\n    bool result = areSentencesSimilar(sentence1, sentence2, similarPairs);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
            "java": "public boolean areSentencesSimilar(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {\n    if (sentence1.length != sentence2.length) return false;\n    Map<String, Set<String>> similarityMap = new HashMap<>();\n    for (List<String> pair : similarPairs) {\n        similarityMap.putIfAbsent(pair.get(0), new HashSet<>());\n        similarityMap.putIfAbsent(pair.get(1), new HashSet<>());\n        similarityMap.get(pair.get(0)).add(pair.get(1));\n        similarityMap.get(pair.get(1)).add(pair.get(0));\n    }\n    for (int i = 0; i < sentence1.length; ++i) {\n        if (!sentence1[i].equals(sentence2[i]) && !similarityMap.getOrDefault(sentence1[i], Collections.emptySet()).contains(sentence2[i]))\n            return false;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    sentence1 = $args[0]\n    sentence2 = $args[1]\n    similarPairs = $args[2]\n    result = areSentencesSimilar(sentence1, sentence2, similarPairs)\n    print(result)",
            "javascript": "function main() {\n    const sentence1 = $args[0];\n    const sentence2 = $args[1];\n    const similarPairs = $args[2];\n    const result = areSentencesSimilar(sentence1, sentence2, similarPairs);\n    console.log(result);\n}"
        }
    },
    "735": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> asteroids = $args;\n    vector<int> result = asteroidCollision(asteroids);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] asteroidCollision(int[] asteroids) {\n        Stack<Integer> s = new Stack<>();\n        for (int i = 0; i < asteroids.length; i++) {\n            if (asteroids[i] > 0 || s.isEmpty() || s.peek() < 0) {\n                s.push(asteroids[i]);\n            } else if (s.peek() <= -asteroids[i]) {\n                if (s.peek() < -asteroids[i]) i--;\n                s.pop();\n            }\n        }\n        int[] ans = new int[s.size()];\n        for (int i = ans.length - 1; i >= 0; i--) {\n            ans[i] = s.pop();\n        }\n        return ans;\n    }",
            "python": "if __name__ == \"__main__\":\n    asteroids = $args[0]\n    result = asteroidCollision(asteroids)\n    print(result)",
            "javascript": "function main() {\n    const asteroids = $args;\n    const result = asteroidCollision(asteroids);\n    console.log(result);\n}\n"
        }
    },
    "736": {
        "call_functions": {
            "c++": "int evaluate(string expression) {\n    int end = expression.size();\n    unordered_map<string, int> variables;\n    int result = calculate(expression, 0, end, variables);\n    return result;\n}",
            "java": "public int evaluate(String expression) {\n        return calculate(expression, 0, expression.length(), new HashMap<>());\n    }\n\n    private int calculate(String expression, int start, int end, HashMap<String, Integer> variables) {\n        // code logic\n    }\n\n    private int calculate(String expression, int start, int end, HashMap<String, Integer> variables, int[] nextStart) {\n        // code logic\n    }",
            "python": "if __name__ == \"__main__\":\n    expression = $args[0]\n    result = evaluate(expression)\n    print(result)",
            "javascript": "function evaluate(expression) {\n    function calculate(s, start, end, variables) {\n        if (s[start] === '(') {\n            if (s.substr(start + 1, 3) === \"add\") {\n                let first = start + 5;\n                let second = first;\n                let value1 = calculate(s, first, end, variables);\n                second = s.indexOf(' ', second) + 1;\n                let value2 = calculate(s, second, end, variables);\n                return value1 + value2;\n            } else if (s.substr(start + 1, 4) === \"mult\") {\n                let first = start + 6;\n                let second = first;\n                let value1 = calculate(s, first, end, variables);\n                second = s.indexOf(' ', second) + 1;\n                let value2 = calculate(s, second, end, variables);\n                return value1 * value2;\n            } else {\n                let inner = new Map(variables);\n                let idx = start + 5;\n                while (idx < end - 1 && s[idx] !== '(') {\n                    let temp = idx;\n                    idx = s.indexOf(' ', idx + 1);\n                    let varName = s.substring(temp, idx);\n                    temp = idx + 1;\n                    if (s[temp] === '(') {\n                        idx++;\n                    } else {\n                        idx = s.indexOf(' ', idx + 1);\n                    }\n                    let result = calculate(s, temp, idx, variables);\n                    inner.set(varName, result);\n                    variables = inner;\n                }\n                return calculate(s, end - 1, end, variables);\n            }\n        } else {\n            if (s[start] === '-' || !isNaN(s[start])) {\n                let idx = s.indexOf(' ', start);\n                end = idx === -1 ? end : idx;\n                return parseInt(s.substring(start, end));\n            } else {\n                let idx = s.indexOf(' ', start);\n                end = idx === -1 ? end : idx;\n                return variables.get(s.substring(start, end));\n            }\n        }\n    }\n\n    return calculate(expression, 0, expression.length, new Map());\n}"
        }
    },
    "737": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> sentence1 = $args;\n    std::vector<std::string> sentence2 = $args;\n    std::vector<std::vector<std::string>> pairs = $args;\n    bool result = areSentencesSimilar(sentence1, sentence2, pairs);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean areSentencesSimilar(String[] sentence1, String[] sentence2, List<List<String>> pairs) {\n    if (sentence1.length != sentence2.length) return false;\n    \n    Map<String, Set<String>> graph = new HashMap<>();\n    for (List<String> p : pairs) {\n        graph.putIfAbsent(p.get(0), new HashSet<>());\n        graph.putIfAbsent(p.get(1), new HashSet<>());\n        graph.get(p.get(0)).add(p.get(1));\n        graph.get(p.get(1)).add(p.get(0));\n    }\n    \n    for (int i = 0; i < sentence1.length; ++i) {\n        if (sentence1[i].equals(sentence2[i])) continue;\n        if (!graph.getOrDefault(sentence1[i], new HashSet<>()).contains(sentence2[i])) return false;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    sentence1 = $args[0]\n    sentence2 = $args[1]\n    pairs = $args[2]\n    result = areSentencesSimilar(sentence1, sentence2, pairs)\n    print(result)",
            "javascript": "function areSentencesSimilar(sentence1, sentence2, pairs) {\n    if (sentence1.length !== sentence2.length) return false;\n    \n    const graph = new Map();\n    for (const [a, b] of pairs) {\n        if (!graph.has(a)) graph.set(a, new Set());\n        if (!graph.has(b)) graph.set(b, new Set());\n        \n        graph.get(a).add(b);\n        graph.get(b).add(a);\n    }\n    \n    for (let i = 0; i < sentence1.length; ++i) {\n        if (sentence1[i] === sentence2[i]) continue;\n\n        const neighbors = graph.get(sentence1[i]);\n        if (!neighbors || !neighbors.has(sentence2[i])) return false;\n    }\n    \n    return true;\n}"
        }
    },
    "738": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = monotoneIncreasingDigits(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int monotoneIncreasingDigits(int n) {\n    char[] n_str = String.valueOf(n).toCharArray();\n    int n_len = n_str.length;\n\n    int i = n_len - 1;\n    while (i > 0) {\n        if (n_str[i] < n_str[i - 1]) {\n            n_str[i - 1] -= 1;\n            for (int j = i; j < n_len; ++j) {\n                n_str[j] = '9';\n            }\n        }\n        --i;\n    }\n\n    return Integer.parseInt(new String(n_str));\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = monotoneIncreasingDigits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = monotoneIncreasingDigits(n);\n    console.log(result);\n}"
        }
    },
    "739": {
        "call_functions": {
            "c++": "#include <vector>\n#include <stack>\n\nstd::vector<int> dailyTemperatures(std::vector<int>& temperatures) {\n    std::vector<int> result(temperatures.size(), 0);\n    std::stack<int> stack;\n\n    for (size_t i = 0; i < temperatures.size(); ++i) {\n        while (!stack.empty() && temperatures[i] > temperatures[stack.top()]) {\n            int idx = stack.top();\n            stack.pop();\n            result[idx] = i - idx;\n        }\n        stack.push(i);\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<int> temperatures = $args;\n    std::vector<int> result = dailyTemperatures(temperatures);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] dailyTemperatures(int[] temperatures) {\n    int[] result = new int[temperatures.length];\n    Stack<Integer> stack = new Stack<>();\n\n    for (int i = 0; i < temperatures.length; i++) {\n        while (!stack.isEmpty() && temperatures[i] > temperatures[stack.peek()]) {\n            int idx = stack.pop();\n            result[idx] = i - idx;\n        }\n        stack.push(i);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    temperatures = $args[0]\n    result = daily_temperatures(temperatures)\n    print(result)",
            "javascript": "function main() {\n    const temperatures = $args;\n    const result = dailyTemperatures(temperatures);\n    console.log(result);\n}"
        }
    },
    "740": {
        "call_functions": {
            "c++": "int maxPoints(vector<int>& nums) {\n    vector<int> dp(100001, 0);\n    int max_points = 0;\n    for (int num : nums) {\n        dp[num]++;\n    }\n    for (int i = 2; i < dp.size(); i++) {\n        dp[i] = max(dp[i - 1], dp[i - 2] + i * dp[i]);\n        max_points = max(max_points, dp[i]);\n    }\n    return max_points;\n}",
            "java": "public int maxPoints(int[] nums) {\n    int[] dp = new int[100001];\n    int max_points = 0;\n    for (int num : nums) {\n        dp[num]++;\n    }\n    for (int i = 2; i < dp.length; i++) {\n        dp[i] = Math.max(dp[i - 1], dp[i - 2] + i * dp[i]);\n        max_points = Math.max(max_points, dp[i]);\n    }\n    return max_points;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = max_points(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = maxPoints(nums);\n    console.log(result);\n}"
        }
    },
    "741": {
        "call_functions": {
            "c++": "int cherryPickup(vector<vector<int>>& grid) {\n    int n = grid.size();\n    vector<vector<vector<int>>> memo(n, vector<vector<int>>(n, vector<int>(n, INT_MIN)));\n    return max(0, helper(grid, memo, 0, 0, 0));\n}",
            "java": "public int cherryPickup(int[][] grid) {\n    int N = grid.length;\n    int[][][] dp = new int[N][N][N];\n    for (int[][] layer: dp)\n        for (int[] row: layer)\n            Arrays.fill(row, Integer.MIN_VALUE);\n\n    return Math.max(0, dp(0, 0, 0, grid, dp));\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = cherryPickup(grid)\n    print(result)",
            "javascript": "function cherryPickup(grid) {\n    const N = grid.length;\n    const memo = new Array(N).fill(0).map(() => new Array(N).fill(0).map(() => new Array(N).fill(Number.MIN_SAFE_INTEGER)));\n\n    function dp(r1, c1, c2) {\n        const r2 = r1 + c1 - c2;\n        if (r1 === N || r2 === N || c1 === N || c2 === N || grid[r1][c1] === -1 || grid[r2][c2] === -1) {\n            return Number.MIN_SAFE_INTEGER;\n        } else if (r1 === N - 1 && c1 === N - 1) {\n            return grid[r1][c1];\n        } else if (memo[r1][c1][c2] !== Number.MIN_SAFE_INTEGER) {\n            return memo[r1][c1][c2];\n        } else {\n            memo[r1][c1][c2] = grid[r1][c1] + (r1 !== r2 ? grid[r2][c2] : 0);\n            const tempMax = Math.max(Math.max(dp(r1 + 1, c1, c2 + 1), dp(r1, c1 + 1, c2 + 1)),\n                            Math.max(dp(r1 + 1, c1, c2), dp(r1, c1 + 1, c2)));\n            memo[r1][c1][c2] += tempMax;\n        }\n        return memo[r1][c1][c2];\n    }\n\n    return Math.max(0, dp(0, 0, 0));\n}"
        }
    },
    "742": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <cctype>\n\nint main() {\n    std::string s = $args;\n    std::string result = toLowerCase(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String toLowerCase(String s) {\n    String input = $args;\n    String result = toLowerCase(input);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = to_lower_case(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = toLowerCase(s);\n    console.log(result);\n}"
        }
    },
    "743": {
        "call_functions": {
            "c++": "int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n    vector<vector<pair<int, int>>> graph(n + 1);\n    for (auto& edge : times) {\n        graph[edge[0]].push_back({edge[1], edge[2]});\n    }\n\n    vector<int> dist(n + 1, INT_MAX);\n    dist[k] = 0;\n\n    priority_queue<pair<int, int>, vector<pair<int,int>>, greater<pair<int, int>>> pq;\n    pq.push({0, k});\n\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        int curr_dist = pq.top().first;\n        pq.pop();\n\n        for (auto& neighbor : graph[u]) {\n            int v = neighbor.first;\n            int weight = neighbor.second;\n            if (curr_dist + weight < dist[v]) {\n                dist[v] = curr_dist + weight;\n                pq.push({dist[v], v});\n            }\n        }\n    }\n\n    int max_time = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (dist[i] == INT_MAX) return -1;\n        max_time = max(max_time, dist[i]);\n    }\n\n    return max_time;\n}",
            "java": "public int networkDelayTime(int[][] times, int n, int k) {\n    Map<Integer, List<int[]>> graph = new HashMap<>();\n    for (int[] edge : times) {\n        graph.putIfAbsent(edge[0], new ArrayList<>());\n        graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\n    }\n\n    int[] dist = new int[n+1];\n    Arrays.fill(dist, Integer.MAX_VALUE);\n    dist[k] = 0;\n\n    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);\n    pq.offer(new int[]{k, 0});\n\n    while (!pq.isEmpty()) {\n        int[] curr = pq.poll();\n        int u = curr[0], currDist = curr[1];\n\n        List<int[]> neighbors = graph.get(u);\n        if (neighbors == null) continue;\n\n        for (int[] neighbor : neighbors) {\n            int v = neighbor[0], weight = neighbor[1];\n            if (currDist + weight < dist[v]) {\n                dist[v] = currDist + weight;\n                pq.offer(new int[]{v, dist[v]});\n            }\n        }\n    }\n\n    int maxTime = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (dist[i] == Integer.MAX_VALUE) return -1;\n        maxTime = Math.max(maxTime, dist[i]);\n    }\n\n    return maxTime;\n}",
            "python": "if __name__ == \"__main__\":\n    times = $args[0]\n    n = $args[1]\n    k = $args[2]\n    result = networkDelayTime(times, n, k)\n    print(result)",
            "javascript": "function networkDelayTime(times, n, k) {\n    const graph = new Map();\n    for (const [u, v, w] of times) {\n        if (!graph.has(u)) graph.set(u, []);\n        graph.get(u).push([v, w]);\n    }\n    \n    const dist = new Array(n + 1).fill(Infinity);\n    dist[k] = 0;\n\n    const pq = [[0, k]];\n\n    while (pq.length) {\n        pq.sort((a, b) => b[0] - a[0]);\n        const [currDist, u] = pq.pop();\n\n        if (graph.has(u)) {\n            for (const [v, weight] of graph.get(u)) {\n                const newDist = currDist + weight;\n                if (newDist < dist[v]) {\n                    dist[v] = newDist;\n                    pq.push([dist[v], v]);\n                }\n            }\n        }\n    }\n\n    const maxTime = Math.max(...dist.slice(1));\n    return maxTime === Infinity ? -1 : maxTime;\n}"
        }
    },
    "744": {
        "call_functions": {
            "c++": "int networkDelayTime(std::vector<std::vector<int>>& times, int n, int k) {\n    std::vector<std::vector<std::pair<int, int>>> graph(n + 1);\n    for (const auto &edge : times)\n        graph[edge[0]].emplace_back(edge[1], edge[2]);\n\n    std::vector<int> dist(n + 1, std::numeric_limits<int>::max());\n    dist[k] = 0;\n\n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;\n    pq.emplace(0, k);\n\n    while (!pq.empty()) {\n        int time = pq.top().first, node = pq.top().second;\n        pq.pop();\n\n        if (time > dist[node]) continue;\n        for (const auto &neighbour : graph[node]) {\n            int nextNode = neighbour.first, nextTime = neighbour.second;\n            if (time + nextTime < dist[nextNode]) {\n                dist[nextNode] = time + nextTime;\n                pq.push({dist[nextNode], nextNode});\n            }\n        }\n    }\n\n    int maxTime = *std::max_element(dist.begin() + 1, dist.end());\n    return maxTime == std::numeric_limits<int>::max() ? -1 : maxTime;\n}",
            "java": "public int networkDelayTime(int[][] times, int n, int k) {\n        List<List<int[]>> graph = new ArrayList<>();\n        for (int i = 0; i <= n; i++)\n            graph.add(new ArrayList<>());\n        for (int[] edge : times)\n            graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\n\n        int[] dist = new int[n + 1];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[k] = 0;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        pq.add(new int[]{0, k});\n\n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n            int time = curr[0], node = curr[1];\n\n            if (time > dist[node]) continue;\n            for (int[] neighbour : graph.get(node)) {\n                int neighbourNode = neighbour[0], neighbourTime = neighbour[1];\n                if (time + neighbourTime < dist[neighbourNode]) {\n                    dist[neighbourNode] = time + neighbourTime;\n                    pq.add(new int[]{dist[neighbourNode], neighbourNode});\n                }\n            }\n        }\n\n        int maxTime = Arrays.stream(dist).skip(1).max().getAsInt();\n        return maxTime == Integer.MAX_VALUE ? -1 : maxTime;\n    }",
            "python": "if __name__ == \"__main__\":\n    times = $args[0]\n    n = $args[1]\n    k = $args[2]\n    result = networkDelayTime(times, n, k)\n    print(result)",
            "javascript": "function networkDelayTime(times, n, k) {\n    const graph = new Map();\n    for (const [u, v, w] of times) {\n        if (!graph.has(u)) graph.set(u, []);\n        graph.get(u).push([v, w]);\n    }\n\n    const dist = new Array(n + 1).fill(Infinity);\n    dist[k] = 0;\n\n    const pq = [[0, k]];\n    while (pq.length) {\n        pq.sort((a, b) => b[0] - a[0]);\n        const [time, node] = pq.pop();\n\n        if (time > dist[node]) continue;\n\n        if (graph.has(node)) {\n            for (const [neighbour, neighbourTime] of graph.get(node)) {\n                const candidate_dist = time + neighbourTime;\n                if (candidate_dist < dist[neighbour]) {\n                    dist[neighbour] = candidate_dist;\n                    pq.push([candidate_dist, neighbour]);\n                }\n            }\n        }\n    }\n\n    const maxTime = Math.max(...dist.slice(1));\n    return maxTime === Infinity ? -1 : maxTime;\n}"
        }
    },
    "745": {
        "call_functions": {
            "c++": "char nextGreatestLetter(vector<char>& letters, char target) {\n    char result = nextGreatestLetter(letters, target);\n    return result;\n}",
            "java": "public char nextGreatestLetter(char[] letters, char target) {\n    for (char letter : letters) {\n        if (letter > target) {\n            return letter;\n        }\n    }\n    return letters[0];\n}",
            "python": "if __name__ == \"__main__\":\n    letters = $args[0]\n    target = $args[1]\n    result = next_greatest_letter(letters, target)\n    print(result)",
            "javascript": "function main() {\n    const letters = $args[0];\n    const target = $args[1];\n    const result = nextGreatestLetter(letters, target);\n    console.log(result);\n}"
        }
    },
    "747": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> cost = $args;\n    int result = minCostClimbingStairs(cost);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int[] args) {\n    int[] cost = args;\n    for(int i=2; i<cost.length; i++)\n        cost[i] += Math.min(cost[i-1], cost[i-2]);\n    return Math.min(cost[cost.length-1], cost[cost.length-2]);\n}",
            "python": "if __name__ == \"__main__\":\n    cost = $args[0]\n    result = minCostClimbingStairs(cost)\n    print(result)",
            "javascript": "function main() {\n    const cost = $args;\n    const result = minCostClimbingStairs(cost);\n    console.log(result);\n}"
        }
    },
    "748": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string licensePlate = $args;\n    std::vector<std::string> words = {\"word1\", \"word2\", \"word3\"}; // Replace with actual words\n    std::string result = shortestCompletingWord(licensePlate, words);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String shortestCompletingWord(String licensePlate, String[] words) {\n    HashMap<Character, Integer> lpCount = new HashMap<>();\n    for (char c : licensePlate.toCharArray()) {\n        if (Character.isLetter(c)) {\n            char lower = Character.toLowerCase(c);\n            lpCount.put(lower, lpCount.getOrDefault(lower, 0) + 1);\n        }\n    }\n\n    String result = \"\";\n    for (String word : words) {\n        HashMap<Character, Integer> wordCount = new HashMap<>();\n        for (char c : word.toCharArray()) {\n            wordCount.put(c, wordCount.getOrDefault(c, 0) + 1);\n        }\n\n        boolean valid = true;\n        for (char ch : lpCount.keySet()) {\n            if (wordCount.getOrDefault(ch, 0) < lpCount.get(ch)) {\n                valid = false;\n                break;\n            }\n        }\n\n        if (valid && (result.isEmpty() || word.length() < result.length())) {\n            result = word;\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    licensePlate = $args[0]\n    words = $args[1]\n    result = shortestCompletingWord(licensePlate, words)\n    print(result)",
            "javascript": "function main() {\n  const licensePlate = $args[0];\n  const words = $args[1];\n  const result = shortestCompletingWord(licensePlate, words);\n  console.log(result);\n}"
        }
    },
    "749": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n\nstd::string shortestCompletingWord(std::string licensePlate, std::vector<std::string> words);\n\nint main() {\n    std::string licensePlate = $args[0];\n    std::vector<std::string> words = $args[1];\n    std::string result = shortestCompletingWord(licensePlate, words);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String shortestCompletingWord(String licensePlate, String[] words) {\n    HashMap<Character, Integer> target = new HashMap<>();\n    for (char c : licensePlate.toCharArray()) {\n        if (Character.isLetter(c)) {\n            char lower_c = Character.toLowerCase(c);\n            target.put(lower_c, target.getOrDefault(lower_c, 0) + 1);\n        }\n    }\n\n    String result = null;\n    for (String word : words) {\n        HashMap<Character, Integer> current = new HashMap<>();\n        for (char c : word.toCharArray())\n            if (Character.isLetter(c)) {\n                char lower_c = Character.toLowerCase(c);\n                current.put(lower_c, current.getOrDefault(lower_c, 0) + 1);\n            }\n\n        boolean valid = true;\n        for (char c : target.keySet()) {\n            if (current.getOrDefault(c, 0) < target.get(c)) {\n                valid = false;\n                break;\n            }\n        }\n\n        if (valid && (result == null || word.length() < result.length())) result = word;\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    license_plate = $args[0]\n    words = $args[1]\n    result = shortest_completing_word(license_plate, words)\n    print(result)",
            "javascript": "function shortestCompletingWord(licensePlate, words) {\n    let target = Array(26).fill(0);\n    for (let c of licensePlate)\n        if (c.toLowerCase() != c.toUpperCase()) target[c.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)]++;\n\n    let result = \"\";\n    for (let word of words) {\n        let current = Array(26).fill(0);\n        for (let c of word)\n            if (c.toLowerCase() != c.toUpperCase()) current[c.toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)]++;\n\n        if (target.every((a, i) => a <= current[i]) && (result === \"\" || word.length < result.length)) result = word;\n    }\n\n    return result;\n}"
        }
    },
    "750": {
        "call_functions": {
            "c++": "int countCornerRectangles(vector<vector<int>>& grid) {\n    int count = 0;\n    int m = grid.size();\n    int n = grid[0].size();\n    \n    for (int i = 0; i < m - 1; i++) {\n        for (int j = 0; j < n - 1; j++) {\n            if (grid[i][j] == 1) {\n                for (int k = i + 1; k < m; k++) {\n                    for (int l = j + 1; l < n; l++) {\n                        if (grid[k][l] == 1 && grid[i][l] == 1 && grid[k][j] == 1) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}",
            "java": "public int countCornerRectangles(int[][] grid) {\n    int count = 0;\n    int m = grid.length;\n    int n = grid[0].length;\n    \n    for (int i = 0; i < m - 1; i++) {\n        for (int j = 0; j < n - 1; j++) {\n            if (grid[i][j] == 1) {\n                for (int k = i + 1; k < m; k++) {\n                    for (int l = j + 1; l < n; l++) {\n                        if (grid[k][l] == 1 && grid[i][l] == 1 && grid[k][j] == 1) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = countCornerRectangles(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = countCornerRectangles(grid);\n    console.log(result);\n}"
        }
    },
    "751": {
        "call_functions": {
            "c++": "#include <bitset>\n#include <vector>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string ip = $args;\n    int n = $args;\n    vector<string> result = ipToCIDR(ip, n);\n    for (string s : result) {\n        cout << s << endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> ipToCIDR(String ip, int n) {\n    String[] parts = ip.split(\"\\\\.\");\n    int start = (Integer.parseInt(parts[0]) << 24) + (Integer.parseInt(parts[1]) << 16) + (Integer.parseInt(parts[2]) << 8) + Integer.parseInt(parts[3]);\n    int end = start + n - 1;\n    \n    List<String> ans = new ArrayList<>();\n    while (start <= end) {\n        int samePrefixBits = Integer.numberOfTrailingZeros(~(start & -start));\n        while (((end - start) >> samePrefixBits) < 1)\n            --samePrefixBits;\n        int range = 1 << samePrefixBits;\n        ans.add((start >> 24) + \".\" + ((start >> 16) & 255) + \".\" + ((start >> 8) & 255) + \".\" + (start & 255) + \"/\" + (32 - samePrefixBits));\n        start += range;\n    }\n    \n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    ip = $args[0]\n    n = $args[1]\n    result = ipToCIDR(ip, n)\n    print(result)",
            "javascript": "function ipToCIDR(ip, n) {\n    const [a, b, c, d] = ip.split('.').map(Number);\n    let start = (a << 24) + (b << 16) + (c << 8) + d;\n    const end = start + n - 1;\n    \n    const ans = [];\n    while (start <= end) {\n        let samePrefixBits = Math.clz32(~(start & -start));\n        while (((end - start) >> samePrefixBits) < 1)\n            --samePrefixBits;\n        const range = 1 << samePrefixBits;\n        ans.push(`${(start >> 24)}.${((start >> 16) & 255)}.${((start >> 8) & 255)}.${(start & 255)}/${32 - samePrefixBits}`);\n        start += range;\n    }\n    \n    return ans;\n}"
        }
    },
    "752": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <queue>\n#include <set>\nusing namespace std;\n\nint main() {\n    vector<string> deadends = $args;\n    string target = \"target_value\";\n    int result = openLock(deadends, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int openLock(String[] deadends, String target) {\n    Set<String> dead = new HashSet<>(Arrays.asList(deadends));\n    Set<String> visited = new HashSet<>();\n    Queue<String> q = new LinkedList<>();\n    String start = \"0000\";\n\n    if (dead.contains(start)) return -1;\n    q.offer(start);\n    visited.add(start);\n\n    int moves = 0;\n    while (!q.isEmpty()) {\n        int levelSize = q.size();\n        for (int i = 0; i < levelSize; i++) {\n            String cur = q.poll();\n\n            if (cur.equals(target)) return moves;\n\n            for (int j = 0; j < 4; j++) {\n                for (int k = -1; k <= 1; k += 2) {\n                    String next = cur.substring(0, j) + (char)((cur.charAt(j) - '0' + k + 10) % 10 + '0') + cur.substring(j + 1);\n\n                    if (!visited.contains(next) && !dead.contains(next)) {\n                        visited.add(next);\n                        q.offer(next);\n                    }\n                }\n            }\n        }\n        moves++;\n    }\n\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    deadends = $args[0]\n    target = $args[1]\n    result = openLock(deadends, target)\n    print(result)",
            "javascript": "var openLock = function(deadends, target) {\n    const dead = new Set(deadends);\n    const visited = new Set();\n    const queue = [\"0000\"];\n\n    if (dead.has(\"0000\")) return -1;\n\n    visited.add(\"0000\");\n    let moves = 0;\n\n    while (queue.length) {\n        let levelSize = queue.length;\n        for (let i = 0; i < levelSize; i++) {\n            let cur = queue.shift();\n\n            if (cur === target) return moves;\n\n            for (let j = 0; j < 4; j++) {\n                for (let k = -1; k <= 1; k += 2) {\n                    let next = cur.slice(0, j) + ((Number(cur[j]) + k + 10) % 10).toString() + cur.slice(j + 1);\n\n                    if (!visited.has(next) && !dead.has(next)) {\n                        visited.add(next);\n                        queue.push(next);\n                    }\n                }\n            }\n        }\n        moves++;\n    }\n\n    return -1;\n};\n\nconst deadends = $args[0];\nconst target = $args[1];\n\nconst result = openLock(deadends, target);\nconsole.log(result);"
        }
    },
    "753": {
        "call_functions": {
            "c++": "int openLock(std::vector<std::string> &deadends, std::string target) {\n    std::unordered_set<std::string> dead(deadends.begin(), deadends.end());\n    std::unordered_set<std::string> visited;\n    std::queue<std::pair<std::string, int>> wheel_states;\n\n    if (dead.find(\"0000\") != dead.end()) return -1;\n    wheel_states.push({\"0000\", 0});\n    visited.insert(\"0000\");\n\n    while (!wheel_states.empty()) {\n        auto [current_state, turns] = wheel_states.front(); wheel_states.pop();\n\n        if (current_state == target) return turns;\n\n        for (int i = 0; i < 4; ++i) {\n            std::string up_state = current_state;\n            std::string down_state = current_state;\n            up_state[i] = (up_state[i] - '0' + 1) % 10 + '0';\n            down_state[i] = (down_state[i] - '0' + 9) % 10 + '0';\n\n            if (!visited.count(up_state) && !dead.count(up_state)) {\n                wheel_states.push({up_state, turns + 1});\n                visited.insert(up_state);\n            }\n\n            if (!visited.count(down_state) && !dead.count(down_state)) {\n                wheel_states.push({down_state, turns + 1});\n                visited.insert(down_state);\n            }\n        }\n    }\n    return -1;\n}",
            "java": "public int openLock(String[] deadends, String target) {\n    Set<String> dead = new HashSet<>(Arrays.asList(deadends));\n    Set<String> visited = new HashSet<>();\n    Queue<String[]> wheelStates = new LinkedList<>();\n\n    if (dead.contains(\"0000\")) return -1;\n    wheelStates.add(new String[]{\"0000\", \"0\"});\n    visited.add(\"0000\");\n\n    while (!wheelStates.isEmpty()) {\n        String[] currentStateTurn = wheelStates.poll();\n        String currentState = currentStateTurn[0];\n        int turns = Integer.parseInt(currentStateTurn[1]);\n\n        if (currentState.equals(target)) return turns;\n\n        for (int i = 0; i < 4; ++i) {\n            char[] upStateArr = currentState.toCharArray();\n            char[] downStateArr = currentState.toCharArray();\n            upStateArr[i] = (char)(((upStateArr[i] - '0' + 1) % 10) + '0');\n            downStateArr[i] = (char)(((downStateArr[i] - '0' + 9) % 10) + '0');\n            String upState = new String(upStateArr);\n            String downState = new String(downStateArr);\n\n            if (!visited.contains(upState) && !dead.contains(upState)) {\n                wheelStates.add(new String[]{upState, String.valueOf(turns + 1)});\n                visited.add(upState);\n            }\n\n            if (!visited.contains(downState) && !dead.contains(downState)) {\n                wheelStates.add(new String[]{downState, String.valueOf(turns + 1)});\n                visited.add(downState);\n            }\n        }\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    deadends = $args[0]\n    target = $args[1]\n    result = openLock(deadends, target)\n    print(result)",
            "javascript": "function openLock(deadends, target) {\n    const dead = new Set(deadends);\n    const visited = new Set();\n    const wheelStates = [[\"0000\", 0]];\n\n    if (dead.has(\"0000\")) return -1;\n\n    while (wheelStates.length > 0) {\n        const [currentState, turns] = wheelStates.shift();\n\n        if (currentState === target) return turns;\n\n        for (let i = 0; i < 4; ++i) {\n            const upState = currentState.slice(0, i) + ((parseInt(currentState[i]) + 1) % 10).toString() + currentState.slice(i + 1);\n            const downState = currentState.slice(0, i) + ((parseInt(currentState[i]) - 1 + 10) % 10).toString() + currentState.slice(i + 1);\n\n            if (!visited.has(upState) && !dead.has(upState)) {\n                wheelStates.push([upState, turns + 1]);\n                visited.add(upState);\n            }\n\n            if (!visited.has(downState) && !dead.has(downState)) {\n                wheelStates.push([downState, turns + 1]);\n                visited.add(downState);\n            }\n        }\n    }\n    return -1;\n}"
        }
    },
    "754": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int target = $args;\n    int result = reachNumber(target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int reachNumber(int target) {\n    target = Math.abs(target);\n    int step = 0, sum = 0;\n    while (sum < target) {\n        step++;\n        sum += step;\n    }\n    while ((sum - target) % 2 != 0) {\n        step++;\n        sum += step;\n    }\n    return step;\n}",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    result = reachNumber(target)\n    print(result)",
            "javascript": "function main() {\n    const target = $args;\n    const result = reachNumber(target);\n    console.log(result);\n}\n"
        }
    },
    "755": {
        "call_functions": {
            "c++": "int main() {\n    int target = $args;\n    int result = min_moves(target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minMoves(int target) {\n    target = Math.abs(target);\n    int step = 0;\n    int sum = 0;\n    while (sum < target || (sum - target) % 2 != 0) {\n        step++;\n        sum += step;\n    }\n    return step;\n}",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    result = min_moves(target)\n    print(result)",
            "javascript": "function main() {\n    const target = $args;\n    const result = minMoves(target);\n    console.log(result);\n}\n"
        }
    },
    "756": {
        "call_functions": {
            "c++": "bool pyramidTransition(std::string bottom, std::vector<std::string>& allowed) {\n    std::unordered_map<std::string, std::vector<char>> mapping;\n    for (const auto& s : allowed) mapping[s.substr(0, 2)].push_back(s[2]);\n    return pyramidTransitionHelper(bottom, \"\", 0, mapping);\n}",
            "java": "public boolean pyramidTransition(String bottom, List<String> allowed) {\n    Map<String, List<Character>> mapping = new HashMap<>();\n    for (String s : allowed) {\n        mapping.computeIfAbsent(s.substring(0, 2), k -> new ArrayList<>()).add(s.charAt(2));\n    }\n    return pyramidTransitionHelper(bottom, \"\", 0, mapping);\n}\n\nprivate boolean pyramidTransitionHelper(String bottom, String top, int idx, Map<String, List<Character>> mapping) {\n    if (bottom.length() == 1) return true;\n    if (idx == bottom.length() - 1) return pyramidTransitionHelper(top, \"\", 0, mapping);\n    String key = bottom.substring(idx, idx + 2);\n    if (!mapping.containsKey(key)) return false;\n    for (Character c : mapping.get(key)) {\n        if (pyramidTransitionHelper(bottom, top + c, idx + 1, mapping)) return true;\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    bottom = $args[0]\n    allowed = $args[1]\n    result = pyramid_transition(bottom, allowed)\n    print(result)",
            "javascript": "function main() {\n    const bottom = $args[0];\n    const allowed = $args[1];\n    const result = pyramidTransition(bottom, allowed);\n    console.log(result);\n}"
        }
    },
    "757": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <vector>\n#include <iostream>\n\nbool dfs(std::string curr, std::string bottom, std::unordered_map<std::string, std::vector<char>>& mapping) {\n    if (bottom.size() == 1) return true;\n\n    for (int i = 0; i < bottom.size() - 1; ++i) {\n        std::string s = bottom.substr(i, 2);\n        if (mapping.count(s) == 0) return false;\n    }\n\n    curr = \"\";\n    for (int i = 0; i < bottom.size() - 1; ++i) {\n        curr += mapping[bottom.substr(i, 2)][0];\n    }\n\n    return dfs(curr, curr, mapping);\n}\n\nbool pyramidTransition(std::string bottom, std::vector<std::string>& allowed) {\n    std::unordered_map<std::string, std::vector<char>> mapping;\n    for (std::string& s : allowed) {\n        mapping[s.substr(0, 2)].emplace_back(s[2]);\n    }\n    return dfs(\"\", bottom, mapping);\n}\n\nint main() {\n    std::string bottom = $args;\n    std::vector<std::string> allowed = {};\n    bool result = pyramidTransition(bottom, allowed);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean pyramidTransition(String bottom, List<String> allowed) {\n    Map<String, List<Character>> mapping = new HashMap<>();\n    for (String s : allowed) {\n        String key = s.substring(0, 2);\n        if (!mapping.containsKey(key)) {\n            mapping.put(key, new ArrayList<>());\n        }\n        mapping.get(key).add(s.charAt(2));\n    }\n    return dfs(\"\", bottom, mapping);\n}\n\npublic boolean dfs(String curr, String bottom, Map<String, List<Character>> mapping) {\n    if (bottom.length() == 1) return true;\n    for (int i = 0; i < bottom.length() - 1; ++i) {\n        if (!mapping.containsKey(bottom.substring(i, i + 2))) return false;\n    }\n    curr = \"\";\n    for (int i = 0; i < bottom.length() - 1; ++i) {\n        curr += mapping.get(bottom.substring(i, i + 2)).get(0);\n    }\n    return dfs(curr, curr, mapping);\n}",
            "python": "if __name__ == \"__main__\":\n    bottom = $args[0]\n    allowed = $args[1]\n    result = pyramidTransition(bottom, allowed)\n    print(result)",
            "javascript": "function main() {\n    const bottom = $args[0];\n    const allowed = $args[1];\n    const result = pyramidTransition(bottom, allowed);\n    console.log(result);\n}"
        }
    },
    "758": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    std::string s = $args;\n    std::string result = addBoldTag(words, s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String addBoldTag(List<String> words, String s) {\n    boolean[] bold = new boolean[s.length()];\n    for (String word : words) {\n        int pos = s.indexOf(word);\n        while (pos != -1) {\n            for (int i = pos; i < pos + word.length(); i++) {\n                bold[i] = true;\n            }\n            pos = s.indexOf(word, pos + 1);\n        }\n    }\n\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        if (bold[i] && (i == 0 || !bold[i - 1])) result.append(\"<b>\");\n        result.append(s.charAt(i));\n        if (bold[i] && (i == s.length() - 1 || !bold[i + 1])) result.append(\"</b>\");\n    }\n\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    s = $args[1]\n    result = addBoldTag(words, s)\n    print(result)",
            "javascript": "function addBoldTag(words, s) {\n    const bold = new Array(s.length).fill(false);\n    for (const word of words) {\n        let pos = s.indexOf(word);\n        while (pos !== -1) {\n            for (let i = pos; i < pos + word.length; i++) {\n                bold[i] = true;\n            }\n            pos = s.indexOf(word, pos + 1);\n        }\n    }\n\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (bold[i] && (i === 0 || !bold[i - 1])) result += \"<b>\";\n        result += s[i];\n        if (bold[i] && (i === s.length - 1 || !bold[i + 1])) result += \"</b>\";\n    }\n\n    return result;\n}"
        }
    },
    "759": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::pair<int, int>> intervals = $args;\n    int result = minSetSize(intervals);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int minSetSize(int[][] intervals) {\n    Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));\n    int n = intervals.length;\n    int end = intervals[0][1];\n    int count = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (end < intervals[i][0]) {\n            end = intervals[i][1];\n            count++;\n        } else {\n            end = Math.min(end, intervals[i][1]);\n        }\n    }\n    return count * 2;\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = min_set_size(intervals)\n    print(result)",
            "javascript": "function main() {\n    const intervals = $args;\n    const result = minSetSize(intervals);\n    console.log(result);\n}"
        }
    },
    "760": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    vector<int> nums1 = $args;\n    vector<int> nums2 = $args;\n    vector<int> result = anagramMappings(nums1, nums2);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] anagramMappings(int[] nums1, int[] nums2) {\n    HashMap<Integer, Integer> num_map = new HashMap<>();\n    for (int i = 0; i < nums2.length; i++) {\n        num_map.put(nums2[i], i);\n    }\n    int[] mapping = new int[nums1.length];\n    for (int i = 0; i < nums1.length; i++) {\n        mapping[i] = num_map.get(nums1[i]);\n    }\n    return mapping;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = anagramMappings(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const result = anagramMappings(nums1, nums2);\n    console.log(result);\n}"
        }
    },
    "761": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::string result = makeLargestSpecial(s);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String makeLargestSpecial(String s) {\n    int count = 0;\n    int i = 0;\n    List<String> subs = new ArrayList<>();\n\n    for (int j = 0; j < s.length(); j++) {\n        if (s.charAt(j) == '1') count++;\n        else count--;\n\n        if (count == 0) {\n            subs.add(\"1\" + makeLargestSpecial(s.substring(i+1, j)) + \"0\");\n            i = j + 1;\n        }\n    }\n\n    Collections.sort(subs, Collections.reverseOrder());\n    StringBuilder res = new StringBuilder();\n    for (String sub : subs) {\n        res.append(sub);\n    }\n    return res.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = makeLargestSpecial(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = makeLargestSpecial(s);\n    console.log(result);\n}"
        }
    },
    "762": {
        "call_functions": {
            "c++": "#include <bitset>\n#include <iostream>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    return true;\n}\n\nint countPrimeSetBits(int left, int right) {\n    int count = 0;\n    for (int i = left; i <= right; ++i)\n        count += isPrime(std::bitset<32>(i).count());\n    return count;\n}\n\nint main() {\n    int left = $args;\n    int right = $args;\n    int result = countPrimeSetBits(left, right);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int countPrimeSetBits(int left, int right)",
            "python": "if __name__ == \"__main__\":\n    left = $args[0]\n    right = $args[1]\n    result = count_prime_set_bits(left, right)\n    print(result)",
            "javascript": "function countPrimeSetBits(left, right) {\n    let count = 0;\n    for (let i = left; i <= right; ++i)\n        count += isPrime(i.toString(2).split('1').length - 1) ? 1 : 0;\n    return count;\n}"
        }
    },
    "763": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<int> result = partitionLabels(s);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public List<Integer> partitionLabels(String s) {\n    Map<Character, Integer> last = new HashMap<>();\n    for (int i = 0; i < s.length(); i++) {\n        last.put(s.charAt(i), i);\n    }\n    List<Integer> ans = new ArrayList<>();\n    int j = 0, anchor = 0;\n    for (int i = 0; i < s.length(); i++) {\n        j = Math.max(j, last.get(s.charAt(i)));\n        if (i == j) {\n            ans.add(i - anchor + 1);\n            anchor = i + 1;\n        }\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = partition_labels(s)\n    print(result)",
            "javascript": "function partitionLabels(s) {\n    const last = {};\n    for (let i = 0; i < s.length; i++) {\n        last[s[i]] = i;\n    }\n    const ans = [];\n    let j = 0, anchor = 0;\n    for (let i = 0; i < s.length; i++) {\n        j = Math.max(j, last[s[i]]);\n        if (i === j) {\n            ans.push(i - anchor + 1);\n            anchor = i + 1;\n        }\n    }\n    return ans;\n}"
        }
    },
    "764": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n\nusing std::vector;\nusing std::queue;\n\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n\nvector<vector<int>> levelOrder(Node* root) {\n    vector<vector<int>> result;\n    if (root == nullptr) return result;\n\n    queue<Node*> toVisit;\n    toVisit.push(root);\n\n    while (!toVisit.empty()) {\n        int size = toVisit.size();\n        vector<int> level;\n\n        for (int i = 0; i < size; i++) {\n            Node* currentNode = toVisit.front();\n            toVisit.pop();\n            level.push_back(currentNode->val);\n\n            for (Node* child : currentNode->children) {\n                toVisit.push(child);\n            }\n        }\n        result.push_back(level);\n    }\n\n    return result;\n}",
            "java": "public List<List<Integer>> levelOrder(Node root) {\n    List<List<Integer>> result = new ArrayList<>();\n    if (root == null) return result;\n\n    Queue<Node> toVisit = new LinkedList<>();\n    toVisit.offer(root);\n\n    while (!toVisit.isEmpty()) {\n        int size = toVisit.size();\n        List<Integer> level = new ArrayList<>();\n\n        for (int i = 0; i < size; i++) {\n            Node currentNode = toVisit.poll();\n            level.add(currentNode.val);\n\n            for (Node child : currentNode.children) {\n                toVisit.offer(child);\n            }\n        }\n        result.add(level);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = levelOrder(root)\n    print(result)",
            "javascript": "function levelOrder(root) {\n    const result = [];\n    if (!root) return result;\n\n    const toVisit = [root];\n\n    while (toVisit.length > 0) {\n        const size = toVisit.length;\n        const level = [];\n\n        for (let i = 0; i < size; i++) {\n            const currentNode = toVisit.shift();\n            level.push(currentNode.val);\n\n            for (const child of currentNode.children) {\n                toVisit.push(child);\n            }\n        }\n        result.push(level);\n    }\n\n    return result;\n}"
        }
    },
    "765": {
        "call_functions": {
            "c++": "int minSwapsCouples(vector<int>& row) {\n    int n = row.size();\n    vector<int> position(n);\n    for (int i = 0; i < n; ++i)\n        position[row[i]] = i;\n\n    int swaps = 0;\n    for (int i = 0; i < n; i += 2) {\n        int partner = row[i] % 2 == 0 ? row[i] + 1 : row[i] - 1;\n        if (row[i + 1] != partner) {\n            swap(row[position[partner]], row[i + 1]);\n            swap(position[row[i + 1]], position[partner]);\n            swaps++;\n        }\n    }\n    return swaps;\n}",
            "java": "public int minSwapsCouples(int[] row) {\n    int n = row.length;\n    int[] position = new int[n];\n    for (int i = 0; i < n; ++i)\n        position[row[i]] = i;\n\n    int swaps = 0;\n    for (int i = 0; i < n; i += 2) {\n        int partner = row[i] % 2 == 0 ? row[i] + 1 : row[i] - 1;\n        if (row[i + 1] != partner) {\n            int temp = row[position[partner]];\n            row[position[partner]] = row[i + 1];\n            row[i + 1] = temp;\n            \n            temp = position[row[i + 1]];\n            position[row[i + 1]] = position[partner];\n            position[partner] = temp;\n            \n            swaps++;\n        }\n    }\n    return swaps;\n}",
            "python": "if __name__ == \"__main__\":\n    row = $args[0]\n    result = minSwapsCouples(row)\n    print(result)",
            "javascript": "function main() {\n    const row = $args;\n    const result = minSwapsCouples(row);\n    console.log(result);\n}"
        }
    },
    "767": {
        "call_functions": {
            "c++": "#include <bitset>\n#include <vector>\n\nint main() {\n    int left = $args;\n    int right = $args;\n    int result = count_prime_set_bits(left, right);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int countPrimeSetBits(int left, int right) {\n    int count = 0;\n    for (int i = left; i <= right; i++) {\n        int bits = Integer.bitCount(i);\n        if (isPrime(bits)) count++;\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    left = $args[0]\n    right = $args[1]\n    result = count_prime_set_bits(left, right)\n    print(result)",
            "javascript": "function main() {\n    const left = $args[0];\n    const right = $args[1];\n    const result = countPrimeSetBits(left, right);\n    console.log(result);\n}"
        }
    },
    "768": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<int> result = partitionLabels(s);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public List<Integer> partitionLabels(String s) {\n    HashMap<Character, Integer> lastPos = new HashMap<>();\n    for (int i = 0; i < s.length(); i++) {\n        lastPos.put(s.charAt(i), i);\n    }\n\n    List<Integer> partitions = new ArrayList<>();\n    int start = 0, end = 0;\n    for (int i = 0; i < s.length(); i++) {\n        end = Math.max(end, lastPos.get(s.charAt(i)));\n        if (i == end) {\n            partitions.add(end - start + 1);\n            start = i + 1;\n        }\n    }\n    return partitions;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = partition_labels(s)\n    print(result)",
            "javascript": "function partitionLabels(s) {\n    const lastPos = {};\n    for (let i = 0; i < s.length; i++) {\n        lastPos[s[i]] = i;\n    }\n\n    const partitions = [];\n    let start = 0, end = 0;\n    for (let i = 0; i < s.length; i++) {\n        end = Math.max(end, lastPos[s[i]]);\n        if (i === end) {\n            partitions.push(end - start + 1);\n            start = i + 1;\n        }\n    }\n    return partitions;\n}"
        }
    },
    "769": {
        "call_functions": {
            "c++": "int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {\n    vector<vector<int>> grid(n, vector<int>(n, 1));\n    for (const auto& mine : mines)\n        grid[mine[0]][mine[1]] = 0;\n        \n    vector<vector<int>> left(grid), right(grid), up(grid), down(grid);\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j]) {\n                left[i][j] = j > 0 ? left[i][j - 1] + 1 : 1;\n                up[i][j] = i > 0 ? up[i - 1][j] + 1 : 1;\n            }\n            if (grid[n - i - 1][n - j - 1]) {\n                right[n - i - 1][n - j - 1] = j > 0 ? right[n - i - 1][n - j] + 1 : 1;\n                down[n - i - 1][n - j - 1] = i > 0 ? down[n - i][n - j - 1] + 1 : 1;\n            }\n        }\n    }\n\n    int ans = 0;\n    for (int i = 0; i < n; ++i)\n        for (int j = 0; j < n; ++j)\n            ans = max(ans, min({left[i][j], right[i][j], up[i][j], down[i][j]}));\n    return ans;\n}",
            "java": "public int orderOfLargestPlusSign(int n, int[][] mines) {\n    int[][] grid = new int[n][n];\n    for (int[] row : grid) Arrays.fill(row, 1);\n    for (int[] mine : mines) grid[mine[0]][mine[1]] = 0;\n    \n    int[][][] dp = new int[n][n][4];\n    for (int i=0; i<n; ++i)\n        for (int j=0; j<n; ++j)\n            if (grid[i][j] > 0) {\n                dp[i][j][0] = i > 0 ? dp[i - 1][j][0] + 1 : 1;\n                dp[i][j][1] = j > 0 ? dp[i][j - 1][1] + 1 : 1;\n            }\n                \n    int ans = 0;\n    for (int i=n-1; i>=0; --i)\n        for (int j=n-1; j>=0; --j)\n            if (grid[i][j] > 0) {\n                dp[i][j][2] = i < n - 1 ? dp[i + 1][j][2] + 1 : 1;\n                dp[i][j][3] = j < n - 1 ? dp[i][j + 1][3] + 1 : 1;\n                int cur = Collections.min(Arrays.asList(dp[i][j]));\n                ans = Math.max(ans, cur);\n            }\n                \n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    mines = $args[1]\n    result = orderOfLargestPlusSign(n, mines)\n    print(result)",
            "javascript": "function orderOfLargestPlusSign(n, mines) {\n    const grid = Array.from({ length: n }, () => Array(n).fill(1));\n    for (const mine of mines)\n        grid[mine[0]][mine[1]] = 0;\n\n    const left = grid.map(row => [...row]);\n    const right = grid.map(row => [...row]);\n    const up = grid.map(row => [...row]);\n    const down = grid.map(row => [...row]);\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            if (grid[i][j]) {\n                left[i][j] = j > 0 ? left[i][j - 1] + 1 : 1;\n                up[i][j] = i > 0 ? up[i - 1][j] + 1 : 1;\n            }\n            if (grid[n - i - 1][n - j - 1]) {\n                right[n - i - 1][n - j - 1] = j > 0 ? right[n - i - 1][n - j] + 1 : 1;\n                down[n - i - 1][n - j - 1] = i > 0 ? down[n - i][n - j - 1] + 1 : 1;\n            }\n        }\n    }\n\n    let ans = 0;\n    for (let i = 0; i < n; ++i)\n        for (let j = 0; j < n; ++j)\n            ans = Math.max(ans, Math.min(left[i][j], right[i][j], up[i][j], down[i][j]));\n\n    return ans;\n}"
        }
    },
    "770": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    vector<int> row = $args;\n    int result = minSwapsCouples(row);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minSwapsCouples(int[] row) {\n    int n = row.length / 2;\n    int swaps = 0;\n    Map<Integer, Integer> position = new HashMap<>();\n\n    for (int i = 0; i < row.length; i++) {\n        position.put(row[i], i);\n    }\n\n    for (int i = 0; i < row.length; i += 2) {\n        int couple = (row[i] % 2 == 0) ? row[i] + 1 : row[i] - 1;\n        if (row[i + 1] != couple) {\n            int temp = row[i + 1];\n            row[i + 1] = row[position.get(couple)];\n            row[position.get(couple)] = temp;\n            position.put(temp, position.get(couple));\n            position.put(couple, i + 1);\n            swaps++;\n        }\n    }\n    return swaps;\n}",
            "python": "if __name__ == \"__main__\":\n    row = $args[0]\n    result = minSwapsCouples(row)\n    print(result)",
            "javascript": "function main() {\n    const row = $args;\n    const result = minSwapsCouples(row);\n    console.log(result);\n}"
        }
    },
    "771": {
        "call_functions": {
            "c++": "int main() {\n    string jewels = $args[0];\n    string stones = $args[1];\n    int result = numJewelsInStones(jewels, stones);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numJewelsInStones(String jewels, String stones) {\n    int count = 0;\n    for (char stone : stones.toCharArray()) {\n        if (jewels.indexOf(stone) != -1) {\n            count++;\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    jewels = $args[0]\n    stones = $args[1]\n    result = num_jewels_in_stones(jewels, stones)\n    print(result)",
            "javascript": "function main() {\n    const jewels = $args[0];\n    const stones = $args[1];\n    const result = numJewelsInStones(jewels, stones);\n    console.log(result);\n}"
        }
    },
    "777": {
        "call_functions": {
            "c++": "bool isToeplitzMatrix(vector<vector<int>>& matrix) {\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    for(int i = 0; i < rows - 1; ++i) {\n        for(int j = 0; j < cols - 1; ++j) {\n            if(matrix[i][j] != matrix[i+1][j+1]) return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean isToeplitzMatrix(int[][] matrix) {\n    int rows = matrix.length;\n    int cols = matrix[0].length;\n    for(int i = 0; i < rows - 1; i++) {\n        for(int j = 0; j < cols - 1; j++) {\n            if(matrix[i][j] != matrix[i+1][j+1]) return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = isToeplitzMatrix(matrix)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args;\n    const result = isToeplitzMatrix(matrix);\n    console.log(result);\n}\n"
        }
    },
    "778": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    string result = rearrangeString(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String rearrangeString(String s) {\n    HashMap<Character, Integer> counts = new HashMap<>();\n    for (char c : s.toCharArray()) {\n        counts.put(c, counts.getOrDefault(c, 0) + 1);\n    }\n    \n    PriorityQueue<Character> pq = new PriorityQueue<>((a, b) -> counts.get(b) - counts.get(a));\n    pq.addAll(counts.keySet());\n    \n    StringBuilder result = new StringBuilder();\n    Character previous = null;\n    \n    while (!pq.isEmpty()) {\n        char current = pq.remove();\n        result.append(current);\n        \n        if (previous != null && counts.get(previous) > 0) {\n            pq.add(previous);\n        }\n        \n        counts.put(current, counts.get(current) - 1);\n        previous = current;\n    }\n    \n    return result.length() == s.length() ? result.toString() : \"\";\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = rearrange_string(s)\n    print(result)",
            "javascript": "function rearrangeString(s) {\n    const counts = new Map();\n    for (const c of s) {\n        counts.set(c, (counts.get(c) || 0) + 1);\n    }\n\n    const pq = Array.from(counts.entries()).sort((a, b) => b[1] - a[1]);\n\n    const result = [];\n    let previous = [-1, null];\n\n    while (pq.length) {\n        const current = pq.shift();\n        result.push(current[0]);\n\n        if (previous[0] > 0) {\n            pq.push(previous);\n        }\n\n        current[1]--;\n        previous = current;\n        pq.sort((a, b) => b[1] - a[1]);\n    }\n\n    const resultStr = result.join('');\n    return resultStr.length === s.length ? resultStr : \"\";\n}"
        }
    },
    "779": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> arr = $args;\n    int result = maxChunksToSorted(arr);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxChunksToSorted(int[] arr) {\n    int max_val = 0, chunks = 0;\n    for (int i = 0; i < arr.length; i++) {\n        max_val = Math.max(max_val, arr[i]);\n        if (max_val == i) {\n            chunks++;\n        }\n    }\n    return chunks;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = max_chunks_to_sorted(arr)\n    print(result)",
            "javascript": "function main() {\n    const arr = $args;\n    const result = maxChunksToSorted(arr);\n    console.log(result);\n}"
        }
    },
    "780": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> arr = $args;\n    int result = maxChunksToSorted(arr);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxChunksToSorted(int[] arr) {\n    int max_so_far = 0, count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        max_so_far = Math.max(max_so_far, arr[i]);\n        if (max_so_far == i) {\n            count++;\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = max_chunks_to_sorted(arr)\n    print(result)",
            "javascript": "function main() {\n    const arr = $args;\n    const result = maxChunksToSorted(arr);\n    console.log(result);\n}\n"
        }
    },
    "781": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nint main() {\n    vector<int> answers = $args;\n    int result = numRabbits(answers);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int numRabbits(int[] answers) {\n    HashMap<Integer, Integer> count = new HashMap<>();\n    int rabbits = 0;\n    for(int ans : answers) {\n        count.put(ans, count.getOrDefault(ans, 0) + 1);\n    }\n    for(int key : count.keySet()) {\n        int cnt = count.get(key);\n        rabbits += (key + cnt) / (key + 1) * (key + 1);\n    }\n    return rabbits;\n}",
            "python": "if __name__ == \"__main__\":\n    answers = $args[0]\n    result = numRabbits(answers)\n    print(result)",
            "javascript": "function main() {\n    const answers = $args;\n    const result = numRabbits(answers);\n    console.log(result);\n}"
        }
    },
    "782": {
        "call_functions": {
            "c++": "int main() {\n    string jewels = $args[0];\n    string stones = $args[1];\n    int result = numJewelsInStones(jewels, stones);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numJewelsInStones(String jewels, String stones) {\n    int count = 0;\n    for (char s : stones.toCharArray()) {\n        if (jewels.indexOf(s) != -1) {\n            count++;\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    jewels = $args[0]\n    stones = $args[1]\n    result = numJewelsInStones(jewels, stones)\n    print(result)",
            "javascript": "function main() {\n    const jewels = $args[0];\n    const stones = $args[1];\n    const result = numJewelsInStones(jewels, stones);\n    console.log(result);\n}"
        }
    },
    "785": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nbool isBipartite(vector<vector<int>>& graph) {\n    int n = graph.size();\n    vector<int> colors(n, 0);\n\n    for (int i = 0; i < n; ++i) {\n        if (colors[i] == 0 && !dfs(i, 1, colors, graph)) {\n            return false;\n        }\n    }\n\n    return true;\n}",
            "java": "public boolean isBipartite(int[][] graph) {\n        int n = graph.length;\n        int[] colors = new int[n];\n        Arrays.fill(colors, 0);\n\n        for (int i = 0; i < n; ++i) {\n            if (colors[i] == 0 && !dfs(i, 1, colors, graph)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean dfs(int node, int color, int[] colors, int[][] graph) {\n        if (colors[node] != 0) {\n            return colors[node] == color;\n        }\n\n        colors[node] = color;\n        for (int neighbor : graph[node]) {\n            if (!dfs(neighbor, 3 - color, colors, graph)) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = isBipartite(graph)\n    print(result)",
            "javascript": "function main() {\n    const graph = $args;\n    function dfs(node, color) {\n        if (colors[node] !== 0) {\n            return colors[node] === color;\n        }\n\n        colors[node] = color;\n        for (const neighbor of graph[node]) {\n            if (!dfs(neighbor, 3 - color)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    let n = graph.length;\n    let colors = new Array(n).fill(0);\n\n    for (let i = 0; i < n; ++i) {\n        if (colors[i] === 0 && !dfs(i, 1)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "786": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nvector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {\n    auto compare = [&](pair<int, int>& a, pair<int, int>& b) {\n        return arr[a.first] * arr[b.second] > arr[a.second] * arr[b.first];\n    };\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(compare)> pq(compare);\n    for (int i = 0; i < arr.size() - 1; ++i) {\n        pq.push({i, arr.size() - 1});\n    }\n    for (int i = 0; i < k - 1; ++i) {\n        auto [row, col] = pq.top();\n        pq.pop();\n        if (--col > row) {\n            pq.push({row, col});\n        }\n    }\n    return {arr[pq.top().first], arr[pq.top().second]};\n}\n\nint main() {\n    vector<int> arr = $args;\n    int k = $args;\n    vector<int> result = kthSmallestPrimeFraction(arr, k);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] kthSmallestPrimeFraction(int[] arr, int k) {\n    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> arr[a[0]] * arr[b[1]] - arr[a[1]] * arr[b[0]]);\n    for (int i = 0; i < arr.length - 1; i++) {\n        pq.offer(new int[]{i, arr.length - 1});\n    }\n    while (--k > 0) {\n        int[] tmp = pq.poll();\n        if (--tmp[1] > tmp[0]) {\n            pq.offer(tmp);\n        }\n    }\n    return new int[]{arr[pq.peek()[0]], arr[pq.peek()[1]]};\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    k = $args[1]\n    result = kthSmallestPrimeFraction(arr, k)\n    print(result)",
            "javascript": "function kthSmallestPrimeFraction(arr, k) {\n    const pq = new PriorityQueue((a, b) => arr[a[0]] * arr[b[1]] - arr[a[1]] * arr[b[0]]);\n    for (let i = 0; i < arr.length - 1; i++) {\n        pq.push([i, arr.length - 1]);\n    }\n    while (--k > 0) {\n        const tmp = pq.pop();\n        if (--tmp[1] > tmp[0]) {\n            pq.push(tmp);\n        }\n    }\n    return [arr[pq.top()[0]], arr[pq.top()[1]]];\n}\n\nclass PriorityQueue {\n    constructor(comparator = (a, b) => a - b) {\n        this._heap = [];\n        this._comparator = comparator;\n    }\n\n    size() {\n        return this._heap.length;\n    }\n\n    isEmpty() {\n        return this.size() === 0;\n    }\n\n    top() {\n        return this._heap[0];\n    }\n\n    push(value) {\n        this._heap.push(value);\n        this._siftUp();\n    }\n\n    pop(value) {\n        const poppedValue = this.top();\n        const bottom = this.size() - 1;\n        if (bottom > 0) {\n            this._swap(0, bottom);\n        }\n        this._heap.pop();\n        this._siftDown();\n        return poppedValue;\n    }\n\n    _siftUp() {\n        let node = this.size() - 1;\n        while (node > 0 && this._greater(node, Math.floor((node - 1) / 2))) {\n            this._swap(node, Math.floor((node - 1) / 2));\n            node = Math.floor((node - 1) / 2);\n        }\n    }\n\n    _siftDown() {\n        let node = 0;\n        while (\n            (2 * node + 1 < this.size() && this._greater(2 * node + 1, node)) ||\n            (2 * node + 2 < this.size() && this._greater(2 * node + 2, node))\n        ) {\n            let maxChild = 2 * node + 1;\n            if (2 * node + 2 < this.size() && this._greater(2 * node + 2, 2 * node + 1)) {\n                maxChild = 2 * node + 2;\n            }\n            this._swap(node, maxChild);\n            node = maxChild;\n        }\n    }\n\n    _greater(i, j) {\n        return this._comparator(this._heap[i], this._heap[j]) > 0;\n    }\n\n    _swap(i, j) {\n        [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n        return this;\n    }\n}"
        }
    },
    "787": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    vector<vector<int>> board = $args;\n    int result = slidingPuzzle(board);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = slidingPuzzle(board)\n    print(result)",
            "javascript": "function slidingPuzzle(board) {\n    const m = 2, n = 3;\n    const target = \"123450\";\n    let start = \"\";\n    for (const row of board) {\n        for (const num of row) {\n            start += num;\n        }\n    }\n    const dirs = [[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5], [2, 4]];\n    const q = [start];\n    let res = 0;\n    const visited = new Set(q);\n    while (q.length > 0) {\n        for (let k = q.length; k > 0; --k) {\n            const cur = q.shift();\n            if (cur === target) return res;\n            const zero_idx = cur.indexOf('0');\n            for (const dir of dirs[zero_idx]) {\n                let neighbor = cur.slice(0, zero_idx) + cur[dir] + cur.slice(zero_idx + 1);\n                neighbor = neighbor.slice(0, dir) + '0' + neighbor.slice(dir + 1);\n                if (!visited.has(neighbor)) {\n                    visited.add(neighbor);\n                    q.push(neighbor);\n                }\n            }\n        }\n        ++res;\n    }\n    return -1;\n}"
        }
    },
    "788": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = rotatedDigits(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rotatedDigits(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (isGood(i))\n            count++;\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = rotatedDigits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = rotatedDigits(n);\n    console.log(result);\n}"
        }
    },
    "789": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n\nint main() {\n    int k = $args[0];\n    std::vector<int> nums = $args[1];\n    KthLargest obj(k, nums);\n    int val = $args[2];\n    int result = obj.add(val);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int add(int val) {\n        minHeap.offer(val);\n        if (minHeap.size() > k) {\n            minHeap.poll();\n        }\n        return minHeap.peek();\n    }",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    nums = $args[1]\n    obj = KthLargest(k, nums)\n    val = $args[2]\n    result = obj.add(val)\n    print(result)",
            "javascript": "function main() {\n    const k = $args[0];\n    const nums = $args.slice(1);\n    const kthLargest = new KthLargest(k, nums);\n    const result = kthLargest.add(5);\n    console.log(result);\n}"
        }
    },
    "790": {
        "call_functions": {
            "c++": "bool isIdealPermutation(vector<int>& nums) {\n    for (int i = 0; i < nums.size(); ++i) {\n        if (abs(nums[i] - i) > 1) {\n            return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean isIdealPermutation(int[] nums) {\n    for (int i = 0; i < nums.length; ++i) {\n        if (Math.abs(nums[i] - i) > 1) {\n            return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = is_ideal_permutation(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = isIdealPermutation(nums);\n    console.log(result);\n}"
        }
    },
    "791": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nstd::string customSortString(const std::string& order, std::string& s);\n\nint main() {\n    std::string order = $args;\n    std::string s;\n    std::cin >> s;\n    std::string result = customSortString(order, s);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String customSortString(String order, String s) {\n    HashMap<Character, Integer> priority = new HashMap<>();\n    for (int i = 0; i < order.length(); i++) {\n        priority.put(order.charAt(i), i);\n    }\n\n    Character[] sChars = s.chars().mapToObj(c -> (char) c).toArray(Character[]::new);\n    Arrays.sort(sChars, (a, b) -> priority.getOrDefault(a, 0) - priority.getOrDefault(b, 0));\n    return Arrays.stream(sChars).map(String::valueOf).collect(Collectors.joining());\n}",
            "python": "if __name__ == \"__main__\":\n    order = $args[0]\n    s = $args[1]\n    result = customSortString(order, s)\n    print(result)",
            "javascript": "function main() {\n    const order = $args[0];\n    const s = $args[1];\n    const result = customSortString(order, s);\n    console.log(result);\n}"
        }
    },
    "792": {
        "call_functions": {
            "c++": "int search(vector<int>& nums, int target) {\n    int left = 0;\n    int right = nums.size() - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}",
            "java": "public int search(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = search(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = search(nums, target);\n    console.log(result);\n}"
        }
    },
    "793": {
        "call_functions": {
            "c++": "bool canTransform(string start, string end) {\n    if (start.size() != end.size()) return false;\n\n    int i = 0, j = 0;\n    int n = start.size();\n    while (i < n && j < n) {\n        while (i < n && start[i] == 'X') i++;\n        while (j < n && end[j] == 'X') j++;\n\n        if (start[i] != end[j]) return false;\n\n        if ((start[i] == 'R' && i > j) || (start[i] == 'L' && i < j)) return false;\n\n        i++; j++;\n    }\n    return true;\n}",
            "java": "public boolean canTransform(String start, String end) {\n    if (start.length() != end.length()) return false;\n\n    int i = 0, j = 0;\n    int n = start.length();\n    while (i < n && j < n) {\n        while (i < n && start.charAt(i) == 'X') i++;\n        while (j < n && end.charAt(j) == 'X') j++;\n\n        if (start.charAt(i) != end.charAt(j)) return false;\n\n        if ((start.charAt(i) == 'R' && i > j) || (start.charAt(i) == 'L' && i < j)) return false;\n\n        i++; j++;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    start = $args[0]\n    end = $args[1]\n    result = canTransform(start, end)\n    print(result)",
            "javascript": "function canTransform(start, end) {\n    if (start.length !== end.length) return false;\n\n    let i = 0, j = 0;\n    const n = start.length;\n    while (i < n && j < n) {\n        while (i < n && start[i] === 'X') i++;\n        while (j < n && end[j] === 'X') j++;\n\n        if (start[i] !== end[j]) return false;\n\n        if ((start[i] === 'R' && i > j) || (start[i] === 'L' && i < j)) return false;\n\n        i++; j++;\n    }\n    return true;\n}"
        }
    },
    "794": {
        "call_functions": {
            "c++": "int swim(int n, vector<vector<int>>& grid) {\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    vector<vector<bool>> visited(n, vector<bool>(n, false));\n    \n    pq.push({grid[0][0], 0});\n\n    int dr[] = {-1, 0, 1, 0};\n    int dc[] = {0, 1, 0, -1};\n\n    while (!pq.empty()) {\n        int curR = pq.top().second / n;\n        int curC = pq.top().second % n;\n        int curT = pq.top().first;\n        pq.pop();\n\n        if (curR == n - 1 && curC == n - 1) return curT;\n\n        for (int d = 0; d < 4; d++) {\n            int newRow = curR + dr[d];\n            int newCol = curC + dc[d];\n            if (0 <= newRow && newRow < n && 0 <= newCol && newCol < n && !visited[newRow][newCol]) {\n                visited[newRow][newCol] = true;\n                pq.push({max(curT, grid[newRow][newCol]), newRow * n + newCol});\n            }\n        }\n    }\n    return -1;\n}",
            "java": "public int swim(int n, int[][] grid) {\n    PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\n    boolean[][] visited = new boolean[n][n];\n    \n    pq.offer(new int[]{grid[0][0], 0, 0});\n\n    int[] dr = {-1, 0, 1, 0};\n    int[] dc = {0, 1, 0, -1};\n\n    while (!pq.isEmpty()) {\n        int[] cur = pq.poll();\n        int curT = cur[0], curR = cur[1], curC = cur[2];\n\n        if (curR == n - 1 && curC == n - 1) return curT;\n\n        for (int d = 0; d < 4; d++) {\n            int newRow = curR + dr[d];\n            int newCol = curC + dc[d];\n            if (0 <= newRow && newRow < n && 0 <= newCol && newCol < n && !visited[newRow][newCol]) {\n                visited[newRow][newCol] = true;\n                pq.offer(new int[]{Math.max(curT, grid[newRow][newCol]), newRow, newCol});\n            }\n        }\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    grid = $args[1]\n    result = swim(n, grid)\n    print(result)",
            "javascript": "function swim(n, grid) {\n    const pq = [[grid[0][0], 0, 0]];\n    const visited = Array.from({ length: n }, () => Array(n).fill(false));\n\n    const dr = [-1, 0, 1, 0];\n    const dc = [0, 1, 0, -1];\n\n    while (pq.length) {\n        pq.sort((a, b) => a[0] - b[0]);\n        const [curT, curR, curC] = pq.shift();\n\n        if (curR === n - 1 && curC === n - 1) return curT;\n\n        for (let d = 0; d < 4; d++) {\n            const newRow = curR + dr[d];\n            const newCol = curC + dc[d];\n            if (0 <= newRow && newRow < n && 0 <= newCol && newCol < n && !visited[newRow][newCol]) {\n                visited[newRow][newCol] = true;\n                pq.push([Math.max(curT, grid[newRow][newCol]), newRow, newCol]);\n            }\n        }\n    }\n    return -1;\n}"
        }
    },
    "795": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int k = $args;\n    int result = kthSymbolInGrammar(n, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int n, int k) {\n    int result = kthSymbolInGrammar(n, k);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = kthSymbolInGrammar(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = kthSymbolInGrammar(n[0], n[1]);\n    console.log(result);\n}"
        }
    },
    "796": {
        "call_functions": {
            "c++": "bool canTransform(int sx, int sy, int tx, int ty) {\n    while (sx != tx || sy != ty) {\n        if (sx > tx || sy > ty) return false;\n        if (sx < tx) {\n            tx -= ty;\n        } else {\n            ty -= sx;\n        }\n    }\n    return true;\n}",
            "java": "public static boolean canTransform(int sx, int sy, int tx, int ty) {\n    while (sx != tx || sy != ty) {\n        if (sx > tx || sy > ty) return false;\n        if (sx < tx) {\n            tx -= ty;\n        } else {\n            ty -= sx;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    sx = $args[0]\n    sy = $args[1]\n    tx = $args[2]\n    ty = $args[3]\n    result = can_transform(sx, sy, tx, ty)\n    print(result)",
            "javascript": "function main() {\n    const sx = $args[0];\n    const sy = $args[1];\n    const tx = $args[2];\n    const ty = $args[3];\n    const result = canTransform(sx, sy, tx, ty);\n    console.log(result);\n}"
        }
    },
    "797": {
        "call_functions": {
            "c++": "#include <unordered_map>\nusing namespace std;\n\nint main() {\n    vector<int> answers = $args;\n    int result = numRabbits(answers);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int numRabbits(int[] answers) {\n    HashMap<Integer, Integer> count = new HashMap<>();\n    int res = 0;\n    for (int a : answers) {\n        count.put(a, count.getOrDefault(a, 0) + 1);\n        if (count.get(a) == 1) {\n            res += (a + 1);\n        } else if (count.get(a) > a + 1) {\n            count.put(a, 1);\n            res += (a + 1);\n        }\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    answers = $args[0]\n    result = numRabbits(answers)\n    print(result)",
            "javascript": "function main() {\n    const answers = $args;\n    const result = numRabbits(answers);\n    console.log(result);\n}"
        }
    },
    "798": {
        "call_functions": {
            "c++": "#include <bitset>\n#include <vector>\n#include <iostream>\n\nint main() {\n  std::vector<std::vector<int>> board = $args;\n  int result = movesToChessboard(board);\n  std::cout << result << std::endl;\n  return 0;\n}\n",
            "java": "public int movesToChessboard(int[][] board) {\n    int N = board.length;\n    int row = 0, col = 0, rowCount = 0, colCount = 0;\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (((board[0][0] ^ board[i][0] ^ board[0][j]) ^ board[i][j]) != 0) return -1;\n        }\n    }\n\n    for (int i = 0; i < N; i++) {\n        row ^= board[0][i];\n        col ^= board[i][0];\n        rowCount += board[0][i] == 1 ? 1 : 0;\n        colCount += board[i][0] == 1 ? 1 : 0;\n    }\n\n    if (row != 0 && rowCount * 2 != N) return -1;\n    if (col != 0 && colCount * 2 != N) return -1;\n\n    if (N % 2 == 1) {\n        if (rowCount % 2 == 1) rowCount = N - rowCount;\n        if (colCount % 2 == 1) colCount = N - colCount;\n    } else {\n        rowCount = Math.min(rowCount, N - rowCount);\n        colCount = Math.min(colCount, N - colCount);\n    }\n\n    return (rowCount + colCount) / 2;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = moves_to_chessboard(board)\n    print(result)",
            "javascript": "function movesToChessboard(board) {\n  const N = board.length;\n  let row = 0, col = 0, rowCount = 0, colCount = 0;\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (((board[0][0] ^ board[i][0] ^ board[0][j]) ^ board[i][j]) !== 0) return -1;\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    row ^= board[0][i];\n    col ^= board[i][0];\n    rowCount += board[0][i] === 1 ? 1 : 0;\n    colCount += board[i][0] === 1 ? 1 : 0;\n  }\n\n  if (row !== 0 && rowCount * 2 !== N) return -1;\n  if (col !== 0 && colCount * 2 !== N) return -1;\n\n  if (N % 2 === 1) {\n    if (rowCount % 2 === 1) rowCount = N - rowCount;\n    if (colCount % 2 === 1) colCount = N - colCount;\n  } else {\n    rowCount = Math.min(rowCount, N - rowCount);\n    colCount = Math.min(colCount, N - colCount);\n  }\n\n  return (rowCount + colCount) / 2;\n}"
        }
    },
    "800": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nvoid backtrack(std::string s, int index, std::vector<std::string>& result) {\n    if (index == s.length()) {\n        result.push_back(s);\n        return;\n    }\n    backtrack(s, index + 1, result);\n    if (isalpha(s[index])) {\n        s[index] ^= (1 << 5);\n        backtrack(s, index + 1, result);\n    }\n}\n\nstd::vector<std::string> letterCasePermutation(std::string s) {\n    std::vector<std::string> result;\n    backtrack(s, 0, result);\n    return result;\n}",
            "java": "public List<String> letterCasePermutation(String s) {\n    List<String> result = new ArrayList<>();\n    backtrack(s.toCharArray(), 0, result);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = letterCasePermutation(s)\n    print(result)",
            "javascript": "function letterCasePermutation(s) {\n    const result = [];\n    function backtrack(index) {\n        if (index === s.length) {\n            result.push(s.join(''));\n            return;\n        }\n        backtrack(index + 1);\n        if (s[index] !== s[index].toUpperCase() || s[index] !== s[index].toLowerCase()) {\n            s[index] = flipCase(s[index]);\n            backtrack(index + 1);\n            s[index] = flipCase(s[index]);\n        }\n    }\n    s = s.split('');\n    backtrack(0);\n    return result;\n}\n\nfunction flipCase(c) {\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n}\n\nfunction main() {\n    const s = $args;\n    const result = letterCasePermutation(s);\n    console.log(result);\n}"
        }
    },
    "801": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <iostream>\n\nbool isBipartite(std::vector<std::vector<int>>& graph) {\n    std::vector<int> colors(graph.size(), 0);\n    for(int i = 0; i < graph.size(); i++){\n        if(colors[i] != 0) continue;\n        colors[i] = 1;\n        std::queue<int> q;\n        q.push(i);\n        while(!q.empty()){\n            int node = q.front(); q.pop();\n            for(int neighbor : graph[node]){\n                if(colors[neighbor] == 0){\n                    colors[neighbor] = -colors[node];\n                    q.push(neighbor);\n                } else if(colors[neighbor] == colors[node]){\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<std::vector<int>> graph = $args;\n    bool result = isBipartite(graph);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isBipartite(int[][] graph) {\n    int[] colors = new int[graph.length];\n    for(int i = 0; i < graph.length; i++){\n        if(colors[i] != 0) continue;\n        colors[i] = 1;\n        Queue<Integer> queue = new LinkedList<>();\n        queue.offer(i);\n        while(!queue.isEmpty()){\n            int node = queue.poll();\n            for(int neighbor : graph[node]){\n                if(colors[neighbor] == 0){\n                    colors[neighbor] = -colors[node];\n                    queue.offer(neighbor);\n                } else if(colors[neighbor] == colors[node]){\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = isBipartite(graph)\n    print(result)",
            "javascript": "function main() {\n    const graph = $args;\n    const result = isBipartite(graph);\n    console.log(result);\n}"
        }
    },
    "802": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n\nstd::vector<int> kthSmallestPrimeFraction(std::vector<int>& arr, int k) {\n    auto compare = [&](const std::pair<int, int>& a, const std::pair<int, int>& b) {\n        return (long long)arr[a.first] * arr[b.second] > (long long)arr[a.second] * arr[b.first];\n    };\n\n    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, decltype(compare)> pq(compare);\n\n    for (int i = 0; i < arr.size() - 1; ++i) {\n        pq.push({i, arr.size() - 1});\n    }\n\n    for (int i = 1; i < k; ++i) {\n        auto curr = pq.top();\n        pq.pop();\n        curr.second--;\n        if (curr.first < curr.second) {\n            pq.push(curr);\n        }\n    }\n\n    return {arr[pq.top().first], arr[pq.top().second]};\n}\n\nint main() {\n    std::vector<int> arr = $args;\n    int k = 3;\n    std::vector<int> result = kthSmallestPrimeFraction(arr, k);\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] kthSmallestPrimeFraction(int[] arr, int k) {\n    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> arr[a[0]] * arr[b[1]] - arr[a[1]] * arr[b[0]]);\n\n    for (int i = 0; i < arr.length - 1; i++) {\n        pq.offer(new int[]{i, arr.length - 1});\n    }\n\n    for (int i = 1; i < k; i++) {\n        int[] curr = pq.poll();\n        curr[1]--;\n        if (curr[0] < curr[1]) {\n            pq.offer(curr);\n        }\n    }\n\n    return new int[]{arr[pq.peek()[0]], arr[pq.peek()[1]]};\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    k = $args[1]\n    result = kthSmallestPrimeFraction(arr, k)\n    print(result)",
            "javascript": "function kthSmallestPrimeFraction(arr, k) {\n    const pq = new PriorityQueue((a, b) => arr[a[0]] * arr[b[1]] - arr[a[1]] * arr[b[0]]);\n\n    for (let i = 0; i < arr.length - 1; i++) {\n        pq.offer([i, arr.length - 1]);\n    }\n\n    for (let i = 1; i < k; i++) {\n        const curr = pq.poll();\n        curr[1]--;\n        if (curr[0] < curr[1]) {\n            pq.offer(curr);\n        }\n    }\n\n    return [arr[pq.peek()[0]], arr[pq.peek()[1]]];\n}\n\nclass PriorityQueue {\n    constructor(compareFn) {\n        this.elements = [];\n        this.compareFn = compareFn;\n    }\n\n    offer(element) {\n        this.elements.push(element);\n        this._bubbleUp(this.elements.length - 1);\n    }\n\n    poll() {\n        const first = this.elements[0];\n        const last = this.elements.pop();\n        if (this.elements.length > 0) {\n            this.elements[0] = last;\n            this._trickleDown(0);\n        }\n        return first;\n    }\n\n    peek() {\n        return this.elements[0];\n    }\n\n    _bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = Math.floor((index - 1) / 2);\n            if (this.compareFn(this.elements[index], this.elements[parentIndex]) < 0) {\n                [this.elements[index], this.elements[parentIndex]] = [this.elements[parentIndex], this.elements[index]];\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    _trickleDown(index) {\n        while (index < this.elements.length) {\n            let leftChildIndex = 2 * index + 1;\n            let rightChildIndex = 2 * index + 2;\n\n            if (leftChildIndex >= this.elements.length) {\n                break;\n            }\n\n            let minChildIndex = this.compareFn(\n                this.elements[leftChildIndex],\n                this.elements[rightChildIndex]) < 0 ? leftChildIndex : rightChildIndex;\n\n            if (this.compareFn(this.elements[index], this.elements[minChildIndex]) > 0) {\n                [this.elements[index], this.elements[minChildIndex]] = [this.elements[minChildIndex], this.elements[index]];\n                index = minChildIndex;\n            } else {\n                break;\n            }\n        }\n    }\n}"
        }
    },
    "803": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    vector<vector<int>> flights = {{0,1,100},{1,2,100},{0,2,500}};\n    int src = 0;\n    int dst = 2;\n    int k = 1;\n    int result = findCheapestPrice(n, flights, src, dst, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n    List<List<int[]>> graph = new ArrayList<>();\n    for (int i = 0; i < n; i++)\n        graph.add(new ArrayList<>());\n    for (int[] flight : flights)\n        graph.get(flight[0]).add(new int[]{ flight[1], flight[2] });\n\n    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n    pq.offer(new int[]{0, src, k + 1});\n    \n    while (!pq.isEmpty()) {\n        int[] info = pq.poll();\n        int price = info[0], city = info[1], stops = info[2];\n        \n        if (city == dst)\n            return price;\n        \n        if (stops > 0) {\n            for (int[] neighbor : graph.get(city))\n                pq.offer(new int[]{ price + neighbor[1], neighbor[0], stops - 1 });\n        }\n    }\n\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    flights = $args[1]\n    src = $args[2]\n    dst = $args[3]\n    k = $args[4]\n    result = findCheapestPrice(n, flights, src, dst, k)\n    print(result)"
        }
    },
    "804": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = rotatedDigits(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int rotatedDigits(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; ++i) {\n        boolean isValidAfterRotation = true;\n        boolean isDifferentAfterRotation = false;\n        int num = i;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit == 3 || digit == 4 || digit == 7) {\n                isValidAfterRotation = false;\n                break;\n            }\n            if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {\n                isDifferentAfterRotation = true;\n            }\n            num /= 10;\n        }\n        if (isValidAfterRotation && isDifferentAfterRotation) {\n            count++;\n        }\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = rotated_digits(n)\n    print(result)",
            "javascript": "function rotatedDigits(n) {\n    const count = 0;\n    for (let i = 1; i <= n; ++i) {\n        let isValidAfterRotation = true;\n        let isDifferentAfterRotation = false;\n        let num = i;\n        while (num !== 0) {\n            let digit = num % 10;\n            if (digit === 3 || digit === 4 || digit === 7) {\n                isValidAfterRotation = false;\n                break;\n            }\n            if (digit === 2 || digit === 5 || digit === 6 || digit === 9) {\n                isDifferentAfterRotation = true;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (isValidAfterRotation && isDifferentAfterRotation) {\n            count++;\n        }\n    }\n    return count;\n}\n\nfunction main() {\n    const n = $args;\n    const result = rotatedDigits(n);\n    console.log(result);\n}"
        }
    },
    "805": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> ghosts = $args;\n    std::vector<int> target = $args;\n    bool result = escapeGhosts(ghosts, target);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean escapeGhosts(int[][] ghosts, int[] target) {\n        int maxDist = Math.abs(target[0]) + Math.abs(target[1]);\n        for (int[] ghost : ghosts) {\n            int ghostDist = Math.abs(ghost[0] - target[0]) + Math.abs(ghost[1] - target[1]);\n            if (ghostDist <= maxDist) {\n                return false;\n            }\n        }\n        return true;\n    }",
            "python": "if __name__ == \"__main__\":\n    ghosts = $args[0]\n    target = $args[1]\n    result = escape_ghosts(ghosts, target)\n    print(result)",
            "javascript": "function main() {\n    const ghosts = $args[0];\n    const target = $args[1];\n    const result = escapeGhosts(ghosts, target);\n    console.log(result);\n}"
        }
    },
    "806": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = numberOfWays(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int n) {\n    int MOD = 1000000007;\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n\n    for (int i = 2; i <= n; i++)\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD;\n\n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = numberOfWays(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = numberOfWays(n);\n    console.log(result);\n}"
        }
    },
    "807": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\nusing namespace std;\n\nint main() {\n    string order = $args;\n    string s = $args;\n    string result = customSortString(order, s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String customSortString(String order, String s) {\n        Character[] sArray = s.chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n        Arrays.sort(sArray, (a, b) -> order.indexOf(a) - order.indexOf(b));\n        return Arrays.stream(sArray).map(String::valueOf).collect(Collectors.joining());\n    }",
            "python": "if __name__ == \"__main__\":\n    order = $args[0]\n    s = $args[1]\n    result = custom_sort_string(order, s)\n    print(result)",
            "javascript": "function main() {\n    const order = $args[0];\n    const s = $args[1];\n    const result = customSortString(order, s);\n    console.log(result);\n}"
        }
    },
    "808": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> words;\n    // Add words to the vector\n    int result = numMatchingSubseq(s, words);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int numMatchingSubseq(String s, String[] words) {\n    ArrayList<Integer>[] positions = new ArrayList[26];\n\n    for (int i = 0; i < s.length(); ++i) {\n        int index = s.charAt(i) - 'a';\n        if (positions[index] == null) {\n            positions[index] = new ArrayList<>();\n        }\n        positions[index].add(i);\n    }\n\n    int count = 0;\n\n    for (String word : words) {\n        int index = -1;\n        boolean isSubsequence = true;\n\n        for (char c : word.toCharArray()) {\n            var list = positions[c - 'a'];\n            if (list == null || list.size() == 0) {\n                isSubsequence = false;\n                break;\n            }\n            int pos = -1;\n            for (int num : list) {\n                if (num > index) {\n                    pos = num;\n                    break;\n                }\n            }\n            if (pos == -1) {\n                isSubsequence = false;\n                break;\n            } else {\n                list.remove((Integer) pos);\n                index = pos;\n            }\n        }\n\n        if (isSubsequence) {\n            ++count;\n        }\n    }\n\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    words = $args[1]\n    result = numMatchingSubseq(s, words)\n    print(result)",
            "javascript": "function numMatchingSubseq(s, words) {\n    const positions = Array.from({ length: 26 }, () => []);\n\n    for (let i = 0; i < s.length; ++i) {\n        positions[s.charCodeAt(i) - \"a\".charCodeAt(0)].push(i);\n    }\n\n    let count = 0;\n\n    words.forEach(word => {\n        let index = -1;\n        let isSubsequence = true;\n\n        for (let i = 0; i < word.length; i++) {\n            const c = word.charCodeAt(i) - \"a\".charCodeAt(0);\n            const pos = positions[c].find(el => el > index);\n            if (pos === undefined) {\n                isSubsequence = false;\n                break;\n            }\n            index = pos;\n        }\n\n        if (isSubsequence) {\n            count++;\n        }\n    });\n\n    return count;\n}"
        }
    },
    "809": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int k = $args;\n    int result = num_zeros(k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "void main() {\n    int k = $args;\n    int result = num_zeros(k);\n    printf(\"%d\", result);\n}",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    result = num_zeros(k)\n    print(result)",
            "javascript": "function main() {\n    const k = $args;\n    const result = num_zeros(k);\n    console.log(result);\n}"
        }
    },
    "810": {
        "call_functions": {
            "c++": "bool validTicTacToe(std::vector<std::string> &board) {\n    int xCount = 0, oCount = 0;\n    for (const std::string& row : board) {\n        for (char c : row) {\n            if (c == 'X') xCount++;\n            else if (c == 'O') oCount++;\n        }\n    }\n    if (xCount != oCount && xCount != oCount + 1) return false;\n\n    bool xWin = false, oWin = false;\n    for (int i = 0; i < 3; ++i) {\n        if (board[i][0] == board[i][1] && board[i][1] == board[i][2])\n            board[i][0] == 'X' ? xWin = true : (board[i][0] == 'O' ? oWin = true : 0);\n        if (board[0][i] == board[1][i] && board[1][i] == board[2][i])\n            board[0][i] == 'X' ? xWin = true : (board[0][i] == 'O' ? oWin = true : 0);\n    }\n    if (board[0][0] == board[1][1] && board[1][1] == board[2][2])\n        board[0][0] == 'X' ? xWin = true : (board[0][0] == 'O' ? oWin = true : 0);\n    if (board[0][2] == board[1][1] && board[1][1] == board[2][0])\n        board[0][2] == 'X' ? xWin = true : (board[0][2] == 'O' ? oWin = true : 0);\n\n    if (xWin && oWin) return false;\n    if (xWin && xCount == oCount) return false;\n    if (oWin && xCount > oCount) return false;\n\n    return true;\n}",
            "java": "public boolean validTicTacToe(String[] board) {\n    int xCount = 0, oCount = 0;\n    for (String row : board) {\n        for (char c : row.toCharArray()) {\n            if (c == 'X') xCount++;\n            else if (c == 'O') oCount++;\n        }\n    }\n    if (xCount != oCount && xCount != oCount + 1) return false;\n\n    boolean xWin = false, oWin = false;\n    for (int i = 0; i < 3; ++i) {\n        if (board[i].charAt(0) == board[i].charAt(1) && board[i].charAt(1) == board[i].charAt(2))\n            xWin = board[i].charAt(0) == 'X' ? true : (board[i].charAt(0) == 'O' ? oWin = true : oWin);\n        if (board[0].charAt(i) == board[1].charAt(i) && board[1].charAt(i) == board[2].charAt(i))\n            xWin = board[0].charAt(i) == 'X' ? true : (board[0].charAt(i) == 'O' ? oWin = true : oWin);\n    }\n    if (board[0].charAt(0) == board[1].charAt(1) && board[1].charAt(1) == board[2].charAt(2))\n        xWin = board[0].charAt(0) == 'X' ? true : (board[0].charAt(0) == 'O' ? oWin = true : oWin);\n    if (board[0].charAt(2) == board[1].charAt(1) && board[1].charAt(1) == board[2].charAt(0))\n        xWin = board[0].charAt(2) == 'X' ? true : (board[0].charAt(2) == 'O' ? oWin = true : oWin);\n\n    if (xWin && oWin) return false;\n    if (xWin && xCount == oCount) return false;\n    if (oWin && xCount > oCount) return false;\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = valid_tic_tac_toe(board)\n    print(result)",
            "javascript": "function main() {\n    const board = $args;\n    const result = validTicTacToe(board);\n    console.log(result);\n}"
        }
    },
    "811": {
        "call_functions": {
            "c++": "int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n    int result = 0, prev = 0, start = -1;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (nums[i] >= left && nums[i] <= right) {\n            prev = i - start;\n            result += prev;\n        } else if (nums[i] < left) {\n            result += prev;\n        } else {\n            start = i;\n            prev = 0;\n        }\n    }\n    return result;\n}"
        }
    },
    "812": {
        "call_functions": {
            "c++": "bool isShifted(string s, string goal) {\n    if(s.length() != goal.length()) return false;\n\n    s = s + s;\n    return s.find(goal) != string::npos;\n}",
            "java": "public boolean isShifted(String s, String goal) {\n    if(s.length() != goal.length()) return false;\n    \n    s = s + s;\n    return s.contains(goal);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    goal = $args[1]\n    result = is_shifted(s, goal)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const goal = $args[1];\n    const result = isShifted(s, goal);\n    console.log(result);\n}"
        }
    },
    "813": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvoid DFS(vector<vector<int>>& graph, vector<vector<int>>& result, vector<int>& path, int currentNode);\n\nvector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph);\n\nint main() {\n    vector<vector<int>> graph = $args;\n    vector<vector<int>> result = allPathsSourceTarget(graph);\n    for (vector<int> path : result) {\n        for (int node : path) {\n            cout << node << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n\nvoid DFS(vector<vector<int>>& graph, vector<vector<int>>& result, vector<int>& path, int currentNode) {\n    path.push_back(currentNode);\n    if (currentNode == graph.size()-1) {\n        result.push_back(path);\n    } else {\n        for (int neighbor : graph[currentNode]) {\n            DFS(graph, result, path, neighbor);\n        }\n    }\n    path.pop_back();\n}\n\nvector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {\n    vector<vector<int>> result;\n    vector<int> path;\n    DFS(graph, result, path, 0);\n    return result;\n}",
            "java": "public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n    List<List<Integer>> result = new ArrayList<>();\n    List<Integer> path = new ArrayList<>();\n    DFS(graph, result, path, 0);\n    return result;\n}\n\nprivate void DFS(int[][] graph, List<List<Integer>> result, List<Integer> path, int currentNode) {\n    path.add(currentNode);\n    if (currentNode == graph.length - 1) {\n        result.add(new ArrayList<>(path));\n    } else {\n        for (int neighbor : graph[currentNode]) {\n            DFS(graph, result, path, neighbor);\n        }\n    }\n    path.remove(path.size() - 1);\n}",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = allPathsSourceTarget(graph)\n    print(result)",
            "javascript": "function main() {\n    const graph = $args;\n    const result = allPathsSourceTarget(graph);\n    console.log(result);\n}"
        }
    },
    "814": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint best_rotation(std::vector<int>& nums) {\n    int n = nums.size();\n    std::vector<int> change(n, 0);\n\n    for (int i = 0; i < n; ++i) {\n        change[(i - nums[i] + 1 + n) % n] -= 1;\n        change[(i + 1) % n] += 1;\n    }\n\n    int max_score = 0;\n    for (int i = 1, cur_score = change[0]; i < n; ++i) {\n        cur_score += change[i];\n        if (cur_score > max_score) {\n            max_score = cur_score;\n        }\n    }\n    return max_score;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = best_rotation(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int best_rotation(int[] nums) {\n    int n = nums.length;\n    int[] change = new int[n];\n\n    for (int i = 0; i < n; i++) {\n        change[(i - nums[i] + 1 + n) % n] -= 1;\n        change[(i + 1) % n] += 1;\n    }\n\n    int max_score = 0;\n    for (int i = 1, cur_score = change[0]; i < n; i++) {\n        cur_score += change[i];\n        if (cur_score > max_score) {\n            max_score = cur_score;\n        }\n    }\n    return max_score;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = best_rotation(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = best_rotation(nums);\n    console.log(result);\n}"
        }
    },
    "815": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n#include <queue>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> routes = $args;\n    int source = $args;\n    int target = $args;\n\n    int result = numBusesToDestination(routes, source, target);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int numBusesToDestination(int[][] routes, int source, int target) {\n    if (source == target) return 0;\n\n    Map<Integer, Set<Integer>> stopRouteMap = new HashMap<>();\n    for (int i = 0; i < routes.length; i++) {\n        for (int stop : routes[i]) {\n            stopRouteMap.computeIfAbsent(stop, x -> new HashSet<>()).add(i);\n        }\n    }\n\n    Queue<Integer> queue = new LinkedList<>();\n    Set<Integer> visitedSources = new HashSet<>();\n\n    queue.offer(source);\n    visitedSources.add(source);\n    int transfers = 0;\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        while (size-- > 0) {\n            int curr = queue.poll(); // Pop from the queue.\n            if (curr == target) return transfers;\n\n            for (int route : stopRouteMap.get(curr)) {\n                for (int stop : routes[route]) {\n                    if (!visitedSources.contains(stop)) {\n                        queue.offer(stop);\n                        visitedSources.add(stop);\n                    }\n                }\n                // Remove the route from the stop.\n                stopRouteMap.get(curr).remove(route);\n            }\n        }\n        transfers++;\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    routes = $args[0]\n    source = $args[1]\n    target = $args[2]\n    result = numBusesToDestination(routes, source, target)\n    print(result)",
            "javascript": "function numBusesToDestination(routes, source, target) {\n    if (source === target) return 0;\n\n    const stopRouteMap = new Map();\n    for (let i = 0; i < routes.length; i++) {\n        for (const stop of routes[i]) {\n            if (!stopRouteMap.has(stop)) {\n                stopRouteMap.set(stop, new Set());\n            }\n            stopRouteMap.get(stop).add(i);\n        }\n    }\n\n    const queue = [source];\n    const visitedSources = new Set([source]);\n    let transfers = 0;\n\n    while (queue.length) {\n        const size = queue.length;\n        for (let i = 0; i < size; i++) {\n            const curr = queue.shift();\n            if (curr === target) return transfers;\n\n            for (const route of stopRouteMap.get(curr)) {\n                for (const stop of routes[route]) {\n                    if (!visitedSources.has(stop)) {\n                        queue.push(stop);\n                        visitedSources.add(stop);\n                    }\n                }\n                stopRouteMap.get(curr).delete(route);\n            }\n        }\n        transfers++;\n    }\n    return -1;\n}"
        }
    },
    "818": {
        "call_functions": {
            "c++": "int main() {\n    int target = $args;\n    int result = racecar(target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int racecar(int target) {\n    return dp(0, 1, target, new HashMap<>());\n}\n\nprivate int dp(int position, int speed, int target, Map<String, Integer> memo) {\n    if (Math.abs(position) > 2 * target) {\n        return target + 1;\n    }\n    if (position == target) {\n        return speed == 1 ? 0 : 1;\n    }\n    String key = position + \",\" + speed;\n    if (memo.containsKey(key)) {\n        return memo.get(key);\n    }\n    int result = (speed > 0 ? dp(position + speed / 2, -speed / 2, target, memo) : dp(position - speed / 2, -speed / 2, target, memo)) + 1;\n    result = Math.min(result, dp(position + speed, speed * 2, target, memo) + 1);\n    memo.put(key, result);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    result = racecar(target)\n    print(result)",
            "javascript": "function racecar(target) {\n    const memo = new Map();\n    \n    function dp(pos, speed) {\n        if (Math.abs(pos) > 2 * target) {\n            return target + 1;\n        }\n        if (pos === target) {\n            return speed === 1 ? 0 : 1;\n        }\n        const key = pos + \",\" + speed;\n        if (memo.has(key)) {\n            return memo.get(key);\n        }\n        \n        let result = ((speed > 0)\n            ? dp(pos + Math.floor(speed / 2), -Math.floor(speed / 2))\n            : dp(pos - Math.floor(speed / 2), -Math.floor(speed / 2))) + 1;\n        \n        result = Math.min(result, dp(pos + speed, speed * 2) + 1);\n        memo.set(key, result);\n        return result;\n    }\n    \n    return dp(0, 1);\n}"
        }
    },
    "819": {
        "call_functions": {
            "c++": "int minSwaps(vector<int>& nums1, vector<int>& nums2) {\n    int n = nums1.size();\n    vector<int> noSwap(n, INT_MAX);\n    vector<int> doSwap(n, INT_MAX);\n    noSwap[0] = 0;\n    doSwap[0] = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {\n            noSwap[i] = noSwap[i - 1];\n            doSwap[i] = doSwap[i - 1] + 1;\n        }\n        if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {\n            noSwap[i] = min(noSwap[i], doSwap[i - 1]);\n            doSwap[i] = min(doSwap[i], noSwap[i - 1] + 1);\n        }\n    }\n\n    return min(noSwap[n - 1], doSwap[n - 1]);\n}",
            "java": "public int minSwaps(int[] nums1, int[] nums2) {\n    int n = nums1.length;\n    int[] noSwap = new int[n];\n    int[] doSwap = new int[n];\n    Arrays.fill(noSwap, Integer.MAX_VALUE);\n    Arrays.fill(doSwap, Integer.MAX_VALUE);\n    noSwap[0] = 0;\n    doSwap[0] = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {\n            noSwap[i] = noSwap[i - 1];\n            doSwap[i] = doSwap[i - 1] + 1;\n        }\n        if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {\n            noSwap[i] = Math.min(noSwap[i], doSwap[i - 1]);\n            doSwap[i] = Math.min(doSwap[i], noSwap[i - 1] + 1);\n        }\n    }\n\n    return Math.min(noSwap[n - 1], doSwap[n - 1]);\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = minSwaps(nums1, nums2)\n    print(result)",
            "javascript": "function minSwaps(nums1, nums2) {\n    const n = nums1.length;\n    const noSwap = new Array(n).fill(Infinity);\n    const doSwap = new Array(n).fill(Infinity);\n    noSwap[0] = 0;\n    doSwap[0] = 1;\n\n    for (let i = 1; i < n; i++) {\n        if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {\n            noSwap[i] = noSwap[i - 1];\n            doSwap[i] = doSwap[i - 1] + 1;\n        }\n        if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {\n            noSwap[i] = Math.min(noSwap[i], doSwap[i - 1]);\n            doSwap[i] = Math.min(doSwap[i], noSwap[i - 1] + 1);\n        }\n    }\n\n    return Math.min(noSwap[n - 1], doSwap[n - 1]);\n}"
        }
    },
    "820": {
        "call_functions": {
            "c++": "#include <vector>\n\nstd::vector<int> eventualSafeNodes(std::vector<std::vector<int>>& graph) {\n    int n = graph.size();\n    std::vector<int> color(n, 0);\n    std::vector<int> ans;\n\n    bool hasCycle(int node, std::vector<int>& color, std::vector<std::vector<int>>& graph) {\n        if (color[node] > 0)\n            return color[node] == 1;\n        color[node] = 1;\n        for (int neighbor : graph[node]) {\n            if (hasCycle(neighbor, color, graph))\n                return true;\n        }\n        color[node] = 2;\n        return false;\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (!hasCycle(i, color, graph))\n            ans.push_back(i);\n    }\n    return ans;\n}",
            "java": "public List<Integer> eventualSafeNodes(int[][] graph) {\n    int n = graph.length;\n    int[] color = new int[n];\n    List<Integer> ans = new ArrayList<>();\n\n    boolean hasCycle(int node, int[] color, int[][] graph) {\n        if (color[node] > 0)\n            return color[node] == 1;\n        color[node] = 1;\n        for (int neighbor : graph[node]) {\n            if (hasCycle(neighbor, color, graph))\n                return true;\n        }\n        color[node] = 2;\n        return false;\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (!hasCycle(i, color, graph))\n            ans.add(i);\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = eventualSafeNodes(graph)\n    print(result)",
            "javascript": "function eventualSafeNodes(graph) {\n    const n = graph.length;\n    const color = new Array(n).fill(0);\n    const ans = [];\n\n    function hasCycle(node, color, graph) {\n        if (color[node] > 0)\n            return color[node] === 1;\n        color[node] = 1;\n        for (const neighbor of graph[node]) {\n            if (hasCycle(neighbor, color, graph))\n                return true;\n        }\n        color[node] = 2;\n        return false;\n    }\n    \n    for (let i = 0; i < n; ++i) {\n        if (!hasCycle(i, color, graph))\n            ans.push(i);\n    }\n    return ans;\n}"
        }
    },
    "821": {
        "call_functions": {
            "c++": "std::vector<int> hitBricks(std::vector<std::vector<int>>& grid, std::vector<std::vector<int>>& hits) {\n    const int m = grid.size(), n = grid[0].size();\n    std::vector<int> result;\n    std::vector<std::vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    for (const auto& hit : hits) {\n        grid[hit[0]][hit[1]]--;\n    }\n\n    function<int(int, int)> dfs = [&](int x, int y) {\n        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] <= 0) {\n            return 0;\n        }\n        grid[x][y] = -1;\n        int sum = 1;\n        for (const auto& d : directions) {\n            sum += dfs(x + d[0], y + d[1]);\n        }\n        return sum;\n    };\n\n    for (int i = 0; i < n; ++i) {\n        if (grid[0][i] == 1) {\n            dfs(0, i);\n        }\n    }\n\n    for (const auto& hit : hits) {\n        grid[hit[0]][hit[1]]++;\n        if (grid[hit[0]][hit[1]] != 1) {\n            result.push_back(0);\n            continue;\n        }\n        for (const auto& d : directions) {\n            if (dfs(hit[0] + d[0], hit[1] + d[1])) {\n                result.push_back(dfs(hit[0], hit[1]) - 1);\n                break;\n            }\n        }\n    }\n\n    return result;\n}",
            "java": "public int[] hitBricks(int[][] grid, int[][] hits) {\n    for (int[] hit : hits) {\n        grid[hit[0]][hit[1]]--;\n    }\n\n    int m = grid.length, n = grid[0].length;\n    int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    int dfs(int x, int y) {\n        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] <= 0) {\n            return 0;\n        }\n        grid[x][y] = -1;\n        int sum = 1;\n        for (int[] d : directions) {\n            sum += dfs(x + d[0], y + d[1]);\n        }\n        return sum;\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (grid[0][i] == 1) {\n            dfs(0, i);\n        }\n    }\n\n    List<Integer> result = new ArrayList<>();\n    for (int[] hit : hits) {\n        grid[hit[0]][hit[1]]++;\n        if (grid[hit[0]][hit[1]] != 1) {\n            result.add(0);\n            continue;\n        }\n        for (int[] d : directions) {\n            if (dfs(hit[0] + d[0], hit[1] + d[1]) != 0) {\n                result.add(dfs(hit[0], hit[1]) - 1);\n                break;\n            }\n        }\n    }\n\n    return result.stream().mapToInt(i -> i).toArray();\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    hits = $args[1]\n    result = hitBricks(grid, hits)\n    print(result)",
            "javascript": "function hitBricks(grid, hits) {\n    function dfs(x, y) {\n        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] <= 0) {\n            return 0;\n        }\n        grid[x][y] = -1;\n        let sum = 1;\n        for (const [dx, dy] of directions) {\n            sum += dfs(x + dx, y + dy);\n        }\n        return sum;\n    }\n\n    const m = grid.length, n = grid[0].length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n\n    hits.forEach(([x, y]) => grid[x][y]--);\n\n    for (let i = 0; i < n; ++i) {\n        if (grid[0][i] === 1) {\n            dfs(0, i);\n        }\n    }\n\n    const result = [];\n    for (const [x, y] of hits) {\n        grid[x][y]++;\n        if (grid[x][y] !== 1) {\n            result.push(0);\n            continue;\n        }\n        for (const [dx, dy] of directions) {\n            if (dfs(x + dx, y + dy) !== 0) {\n                result.push(dfs(x, y) - 1);\n                break;\n            }\n        }\n    }\n\n    return result;\n}"
        }
    },
    "822": {
        "call_functions": {
            "c++": "#include <unordered_set>\n#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    int result = uniqueMorseRepresentations(words);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int uniqueMorseRepresentations(String[] words) {\n    String[] morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\n    Set<String> transformations = new HashSet<>();\n\n    for (String word : words) {\n        StringBuilder morseCode = new StringBuilder();\n        for (char c : word.toCharArray()) {\n            morseCode.append(morse[c - 'a']);\n        }\n        transformations.add(morseCode.toString());\n    }\n\n    return transformations.size();\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = uniqueMorseRepresentations(words)\n    print(result)",
            "javascript": "function uniqueMorseRepresentations(words) {\n    const morse = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"];\n    const transformations = new Set();\n\n    for (const word of words) {\n        let morseCode = '';\n        for (const c of word) {\n            morseCode += morse[c.charCodeAt(0) - \"a\".charCodeAt(0)];\n        }\n        transformations.add(morseCode);\n    }\n\n    return transformations.size;\n}"
        }
    },
    "823": {
        "call_functions": {
            "c++": "bool isPossibleToSplit(const vector<int>& nums) {\n    int n = nums.size();\n    int total_sum = accumulate(nums.begin(), nums.end(), 0);\n    \n    if (total_sum % n != 0) return false;\n\n    int target_sum = total_sum * (n / 2) / n;\n    vector<vector<bool>> dp(n / 2 + 1, vector<bool>(target_sum + 1, false));\n    dp[0][0] = true;\n\n    for (int num : nums) {\n        for (int count = n / 2; count >= 1; --count) {\n            for (int sum = target_sum; sum >= num; --sum) {\n                dp[count][sum] = dp[count][sum] || dp[count - 1][sum - num];\n            }\n        }\n        if (dp[n / 2][target_sum]) return true;\n    }\n\n    return false;\n}",
            "java": "public boolean isPossibleToSplit(int[] nums) {\n    int n = nums.length;\n    int total_sum = 0;\n    for (int num : nums) {\n        total_sum += num;\n    }\n\n    if (total_sum % n != 0) return false;\n\n    int target_sum = total_sum * (n / 2) / n;\n    boolean[][] dp = new boolean[n / 2 + 1][target_sum + 1];\n    dp[0][0] = true;\n\n    for (int num : nums) {\n        for (int count = n / 2; count >= 1; --count) {\n            for (int sum = target_sum; sum >= num; --sum) {\n                dp[count][sum] = dp[count][sum] || dp[count - 1][sum - num];\n            }\n        }\n        if (dp[n / 2][target_sum]) return true;\n    }\n\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = isPossibleToSplit(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = isPossibleToSplit(nums);\n    console.log(result);\n}"
        }
    },
    "824": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nint main() {\n    std::vector<int> widths = $args;\n    std::string s = $args;\n    std::vector<int> result = numberOfLines(widths, s);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public int[] numberOfLines(int[] widths, String s) {\n    int lines = 1;\n    int currentPixel = 0;\n    for (char c : s.toCharArray()) {\n        int letterPixels = widths[c - 'a'];\n        if (currentPixel + letterPixels > 100) {\n            lines++;\n            currentPixel = 0;\n        }\n        currentPixel += letterPixels;\n    }\n    return new int[]{lines, currentPixel};\n}",
            "python": "if __name__ == \"__main__\":\n    widths = $args[0]\n    s = $args[1]\n    result = number_of_lines(widths, s)\n    print(result)",
            "javascript": "function main() {\n    const widths = $args[0];\n    const s = $args[1];\n    const result = numberOfLines(widths, s);\n    console.log(result);\n}"
        }
    },
    "825": {
        "call_functions": {
            "c++": "int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {\n    int n = grid.size();\n    vector<int> row_max(n, 0);\n    vector<int> col_max(n, 0);\n    \n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            row_max[i] = max(row_max[i], grid[i][j]);\n            col_max[j] = max(col_max[j], grid[i][j]);\n        }\n    }\n    \n    int total_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            total_sum += min(row_max[i], col_max[j]) - grid[i][j];\n        }\n    }\n    \n    return total_sum;\n}",
            "java": "public int maxIncreaseKeepingSkyline(int[][] grid) {\n    int n = grid.length;\n    int[] row_max = new int[n];\n    int[] col_max = new int[n];\n    \n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            row_max[i] = Math.max(row_max[i], grid[i][j]);\n            col_max[j] = Math.max(col_max[j], grid[i][j]);\n        }\n    }\n    \n    int total_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            total_sum += Math.min(row_max[i], col_max[j]) - grid[i][j];\n        }\n    }\n    \n    return total_sum;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = max_increase_keeping_skyline(grid)\n    print(result)",
            "javascript": "function maxIncreaseKeepingSkyline(grid) {\n    const n = grid.length;\n    const row_max = new Array(n).fill(0);\n    const col_max = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            row_max[i] = Math.max(row_max[i], grid[i][j]);\n            col_max[j] = Math.max(col_max[j], grid[i][j]);\n        }\n    }\n    \n    let total_sum = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            total_sum += Math.min(row_max[i], col_max[j]) - grid[i][j];\n        }\n    }\n    \n    return total_sum;\n}"
        }
    },
    "826": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> difficulty = $args;\n    std::vector<int> profit = $args;\n    std::vector<int> worker = $args;\n\n    int result = maxProfitAssignment(difficulty, profit, worker);\n\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n    int n = difficulty.length;\n    int[][] jobs = new int[n][2];\n\n    for (int i = 0; i < n; ++i) {\n        jobs[i] = new int[]{difficulty[i], profit[i]};\n    }\n\n    Arrays.sort(jobs, (a, b) -> a[0] - b[0]);\n    Arrays.sort(worker);\n\n    int max_profit = 0;\n    int total_profit = 0;\n    int job_idx = 0;\n\n    for (int w : worker) {\n        while (job_idx < n && w >= jobs[job_idx][0]) {\n            max_profit = Math.max(max_profit, jobs[job_idx][1]);\n            job_idx++;\n        }\n        total_profit += max_profit;\n    }\n\n    return total_profit;\n}",
            "python": "if __name__ == \"__main__\":\n    difficulty = $args[0]\n    profit = $args[1]\n    worker = $args[2]\n    result = maxProfitAssignment(difficulty, profit, worker)\n    print(result)",
            "javascript": "function maxProfitAssignment(difficulty, profit, worker) {\n    const n = difficulty.length;\n    const jobs = difficulty.map((d, i) => [d, profit[i]]).sort((a, b) => a[0] - b[0]);\n\n    worker.sort((a, b) => a - b);\n\n    let max_profit = 0;\n    let total_profit = 0;\n    let job_idx = 0;\n\n    for (const w of worker) {\n        while (job_idx < n && w >= jobs[job_idx][0]) {\n            max_profit = Math.max(max_profit, jobs[job_idx][1]);\n            job_idx++;\n        }\n        total_profit += max_profit;\n    }\n\n    return total_profit;\n}"
        }
    },
    "827": {
        "call_functions": {
            "c++": "int maxAreaOfIsland(vector<vector<int>>& grid)\n{\n    function<int(int, int)> dfs = [&](int x, int y) {\n        if (x < 0 || x >= grid.size() || y < 0 || y >= grid[0].size() || grid[x][y] == 0) {\n            return 0;\n        }\n        grid[x][y] = 0;\n        return dfs(x - 1, y) + dfs(x + 1, y) + dfs(x, y - 1) + dfs(x, y + 1) + 1;\n    };\n\n    int ans = 0;\n    for (int i = 0; i < grid.size(); ++i)\n        for (int j = 0; j < grid[i].size(); ++j)\n            if (grid[i][j] == 0) {\n                grid[i][j] = 1;\n                ans = max(ans, dfs(i, j));\n                grid[i][j] = 0;\n            }\n    return ans;\n}",
            "java": "public int maxAreaOfIsland(int[][] grid) {\n    int ans = 0;\n    for (int i = 0; i < grid.length; ++i)\n        for (int j = 0; j < grid[i].length; ++j)\n            if (grid[i][j] == 0) {\n                grid[i][j] = 1;\n                ans = Math.max(ans, dfs(grid, i, j));\n                grid[i][j] = 0;\n            }\n    return ans;\n}\n\nprivate int dfs(int[][] grid, int x, int y) {\n    if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] == 0) {\n        return 0;\n    }\n    grid[x][y] = 0;\n    return dfs(grid, x - 1, y) + dfs(grid, x + 1, y) + dfs(grid, x, y - 1) + dfs(grid, x, y + 1) + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = maxAreaOfIsland(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    function dfs(x, y) {\n        if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] === 0) {\n            return 0;\n        }\n        grid[x][y] = 0;\n        return dfs(x - 1, y) + dfs(x + 1, y) + dfs(x, y - 1) + dfs(x, y + 1) + 1;\n    }\n\n    let ans = 0;\n    for (let i = 0; i < grid.length; ++i)\n        for (let j = 0; j < grid[i].length; ++j)\n            if (grid[i][j] === 0) {\n                grid[i][j] = 1;\n                ans = Math.max(ans, dfs(i, j));\n                grid[i][j] = 0;\n            }\n    return ans;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "828": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool xorGame(const vector<int>& nums) {\n    int xorSum = 0;\n    for (int num : nums) {\n        xorSum ^= num;\n    }\n    return xorSum == 0 || nums.size() % 2 == 0;\n}\n\nint main() {\n    vector<int> nums = $args;\n    bool result = xorGame(nums);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean xorGame(int[] nums) {\n    int xorSum = 0;\n    for (int num : nums) {\n        xorSum ^= num;\n    }\n    return xorSum == 0 || nums.length % 2 == 0;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = xor_game(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = xorGame(nums);\n    console.log(result);\n}"
        }
    },
    "829": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<string> subdomainVisits(vector<string>& cpdomains) {\n    unordered_map<string, int> counts;\n    vector<string> result;\n\n    for (const string& cpdomain : cpdomains) {\n        int index = cpdomain.find(' ');\n        int count = stoi(cpdomain.substr(0, index));\n        string domain = cpdomain.substr(index + 1);\n\n        for (int i = 0; i < domain.size(); ++i) {\n            if (domain[i] == '.') {\n                counts[domain.substr(i + 1)] += count;\n            }\n        }\n        counts[domain] += count;\n    }\n\n    for (const auto& pair : counts) {\n        result.push_back(to_string(pair.second) + ' ' + pair.first);\n    }\n\n    return result;\n}\n\nint main() {\n    vector<string> cpdomains = $args;\n    vector<string> result = subdomainVisits(cpdomains);\n\n    for (const string& res : result) {\n        cout << res << endl;\n    }\n\n    return 0;\n}",
            "java": "public List<String> subdomainVisits(String[] cpdomains) {\n    Map<String, Integer> counts = new HashMap<>();\n    List<String> result = new ArrayList<>();\n\n    for (String cpdomain : cpdomains) {\n        String[] info = cpdomain.split(\" \");\n        int count = Integer.valueOf(info[0]);\n        String domain = info[1];\n\n        for (int i = 0; i < domain.length(); ++i) {\n            if (domain.charAt(i) == '.') {\n                counts.put(domain.substring(i + 1), counts.getOrDefault(domain.substring(i + 1), 0) + count);\n            }\n        }\n        counts.put(domain, counts.getOrDefault(domain, 0) + count);\n    }\n\n    for (String sub : counts.keySet()) {\n        result.add(\"\" + counts.get(sub) + \" \" + sub);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    cpdomains = $args[0]\n    result = subdomainVisits(cpdomains)\n    print(result)",
            "javascript": "function subdomainVisits(cpdomains) {\n    const counts = {};\n    const result = [];\n\n    for (let cpdomain of cpdomains) {\n        let [count, domain] = cpdomain.split(' ');\n        count = parseInt(count);\n\n        for (let i = 0; i < domain.length; ++i) {\n            if (domain[i] === '.') {\n                const sub = domain.slice(i + 1);\n                counts[sub] = (counts[sub] || 0) + count;\n            }\n        }\n        counts[domain] = (counts[domain] || 0) + count;\n    }\n\n    for (let sub in counts) {\n        result.push(`${counts[sub]} ${sub}`);\n    }\n\n    return result;\n}"
        }
    },
    "830": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> points = $args;\n    double result = largestTriangleArea(points);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public double largestTriangleArea(int[][] points) {\n        double max_area = 0.0;\n        for (int i = 0; i < points.length; ++i) {\n            for (int j = i + 1; j < points.length; ++j) {\n                for (int k = j + 1; k < points.length; ++k) {\n                    max_area = Math.max(max_area, 0.5 * Math.abs(points[i][0] * (points[j][1] - points[k][1])\n                                                              + points[j][0] * (points[k][1] - points[i][1])\n                                                              + points[k][0] * (points[i][1] - points[j][1])));\n                }\n            }\n        }\n        return max_area;\n    }",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = largestTriangleArea(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = largestTriangleArea(points);\n    console.log(result);\n}"
        }
    },
    "832": {
        "call_functions": {
            "c++": "TreeNode* pruneTree(TreeNode* root) {\n    if (!root) return nullptr;\n    root->left = pruneTree(root->left);\n    root->right = pruneTree(root->right);\n    if (root->val == 0 && !root->left && !root->right) return nullptr;\n    return root;\n}",
            "java": "public TreeNode pruneTree(TreeNode root) {\n    if (root == null) return null;\n    root.left = pruneTree(root.left);\n    root.right = pruneTree(root.right);\n    if (root.val == 0 && root.left == null && root.right == null) return null;\n    return root;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = pruneTree(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = pruneTree(root);\n    console.log(result);\n}"
        }
    },
    "833": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_set>\n#include <queue>\n\nint main() {\n    std::vector<std::vector<int>> routes = $args;\n    int source = $args;\n    int target = $args;\n    int result = numBusesToDestination(routes, source, target);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int numBusesToDestination(int[][] routes, int source, int target) {\n    if (source == target) return 0;\n\n    Map<Integer, Set<Integer>> stopToBuses = new HashMap<>();\n    for (int i = 0; i < routes.length; ++i) {\n        for (int stop : routes[i]) {\n            stopToBuses.computeIfAbsent(stop, k -> new HashSet<Integer>()).add(i);\n        }\n    }\n\n    Queue<Integer> q = new LinkedList<>();\n    Set<Integer> visitedBuses = new HashSet<>();\n    int numBuses = 0;\n    q.add(source);\n\n    while (!q.isEmpty()) {\n        int size = q.size();\n        while (size-- > 0) {\n            int stop = q.poll();\n            for (int bus : stopToBuses.get(stop)) {\n                if (visitedBuses.contains(bus)) continue;\n                visitedBuses.add(bus);\n                for (int nextStop : routes[bus]) {\n                    if (nextStop == target) return numBuses + 1;\n                    q.add(nextStop);\n                }\n            }\n        }\n        numBuses++;\n    }\n\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    routes = $args[0]\n    source = $args[1]\n    target = $args[2]\n    result = numBusesToDestination(routes, source, target)\n    print(result)",
            "javascript": "function numBusesToDestination(routes, source, target) {\n    if (source === target) return 0;\n\n    const stopToBuses = new Map();\n    for (let i = 0; i < routes.length; ++i) {\n        for (const stop of routes[i]) {\n            if (!stopToBuses.has(stop)) {\n                stopToBuses.set(stop, new Set());\n            }\n            stopToBuses.get(stop).add(i);\n        }\n    }\n\n    const q = [];\n    const visitedBuses = new Set();\n    let numBuses = 0;\n    q.push(source);\n\n    while (q.length > 0) {\n        const size = q.length;\n        for (let i = 0; i < size; ++i) {\n            const stop = q.shift();\n            for (const bus of stopToBuses.get(stop)) {\n                if (visitedBuses.has(bus)) continue;\n                visitedBuses.add(bus);\n                for (const nextStop of routes[bus]) {\n                    if (nextStop === target) return numBuses + 1;\n                    q.push(nextStop);\n                }\n            }\n        }\n        numBuses++;\n    }\n\n    return -1;\n}"
        }
    },
    "834": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nstd::vector<std::string> ambiguousCoordinates(std::string s) {\n    int n = s.size();\n    std::vector<std::string> res;\n    \n    for (int i = 2; i < n - 1; ++i) {\n        auto first = generateNumber(s.substr(1, i - 1));\n        auto second = generateNumber(s.substr(i, n - 1 - i));\n        \n        for (const auto& f : first) {\n            for (const auto& sec : second) {\n                res.push_back(\"(\" + f + \", \" + sec + \")\");\n            }\n        }\n    }\n    return res;\n}\n\nstd::vector<std::string> generateNumber(const std::string& s) {\n    int n = s.size();\n    std::vector<std::string> res;\n    \n    if (n == 0 || (n > 1 && s[0] == '0' && s[n - 1] == '0')) return res;\n    if (n > 1 && s[0] == '0') {\n        res.push_back(\"0.\" + s.substr(1));\n        return res;\n    }\n    res.push_back(s);\n    if (n == 1 || s[n - 1] == '0') return res;\n    \n    for (int i = 1; i < n; ++i) {\n        res.push_back(s.substr(0, i) + \".\" + s.substr(i));\n    }\n    return res;\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> result = ambiguousCoordinates(s);\n    for (const auto& res : result) {\n        std::cout << res << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> ambiguousCoordinates(String s) {\n    int n = s.length();\n    List<String> res = new ArrayList<>();\n    \n    for (int i = 2; i < n - 1; i++) {\n        List<String> first = generateNumber(s.substring(1, i));\n        List<String> second = generateNumber(s.substring(i, n - 1));\n        \n        for (String f : first) {\n            for (String sec : second) {\n                res.add(\"(\" + f + \", \" + sec + \")\");\n            }\n        }\n    }\n    return res;\n}\n\nprivate List<String> generateNumber(String s) {\n    int n = s.length();\n    List<String> res = new ArrayList<>();\n    \n    if (n == 0 || (n > 1 && s.charAt(0) == '0' && s.charAt(n - 1) == '0')) return res;\n    if (n > 1 && s.charAt(0) == '0') {\n        res.add(\"0.\" + s.substring(1));\n        return res;\n    }\n    res.add(s);\n    if (n == 1 || s.charAt(n - 1) == '0') return res;\n    \n    for (int i = 1; i < n; i++) {\n        res.add(s.substring(0, i) + \".\" + s.substring(i));\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = ambiguousCoordinates(s)\n    print(result)",
            "javascript": "function ambiguousCoordinates(s) {\n    const generateNumber = (s) => {\n        if (s.length === 0 || (s.length > 1 && s[0] === \"0\" && s[s.length - 1] === \"0\")) {\n            return [];\n        }\n        if (s.length > 1 && s[0] === \"0\") {\n            return [\"0.\" + s.slice(1)];\n        }\n        let res = [s];\n        if (s.length === 1 || s[s.length - 1] === \"0\") {\n            return res;\n        }\n        for (let i = 1; i < s.length; i++) {\n            res.push(s.slice(0, i) + \".\" + s.slice(i));\n        }\n        return res;\n    };\n\n    let n = s.length;\n    let res = [];\n\n    for (let i = 2; i < n - 1; i++) {\n        let first = generateNumber(s.slice(1, i));\n        let second = generateNumber(s.slice(i, n - 1));\n\n        for (let f of first) {\n            for (let sec of second) {\n                res.push(\"(\" + f + \", \" + sec + \")\");\n            }\n        }\n    }\n    return res;\n}\n\nconst s = $args;\nconst result = ambiguousCoordinates(s);\nconsole.log(result);"
        }
    },
    "836": {
        "call_functions": {
            "c++": "int main() {\n    int target = $args;\n    int result = racecar(target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int racecar(int target) {\n    return racecar(target, new HashMap<>());\n}\n\npublic int racecar(int target, Map<String, Integer> memo) {\n    return dp(0, 1, target, memo);\n}\n\npublic int dp(int pos, int speed, int target, Map<String, Integer> memo) {\n    if (Math.abs(pos) > 2 * target)\n        return Integer.MAX_VALUE - 1;\n\n    if (pos == target)\n        return 0;\n\n    String key = pos + \",\" + speed;\n    if (memo.containsKey(key))\n        return memo.get(key);\n\n    int op1 = dp(pos + speed, speed * 2, target, memo) + 1;\n    int op2 = dp(pos, -speed, target, memo) + 2;\n\n    int ans = Math.min(op1, op2);\n    memo.put(key, ans);\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    result = racecar(target)\n    print(result)",
            "javascript": "function racecar(target) {\n    return dp(0, 1, target, new Map());\n}\n\nfunction dp(position, speed, target, memo) {\n    if (Math.abs(position) > 2 * target)\n        return Infinity - 1;\n\n    if (position === target)\n        return 0;\n\n    let key = position + \",\" + speed;\n    if (memo.has(key))\n        return memo.get(key);\n\n    let op1 = dp(position + speed, speed * 2, target, memo) + 1;\n    let op2 = dp(position, -speed, target, memo) + 2;\n\n    let ans = Math.min(op1, op2);\n    memo.set(key, ans);\n    return ans;\n}"
        }
    },
    "837": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <cctype>\n#include <iostream>\n\nint main() {\n    std::string paragraph = $args;\n    std::vector<std::string> banned;\n    std::string result = mostCommonWord(paragraph, banned);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String mostCommonWord(String paragraph, String[] banned) {\n    String lowerPara = paragraph.toLowerCase();\n    String[] words = lowerPara.split(\"\\\\W+\");\n    Map<String, Integer> wordCount = new HashMap<>();\n    Set<String> bannedSet = new HashSet<>();\n    \n    for (String ban : banned) {\n        bannedSet.add(ban.toLowerCase());\n    }\n    \n    for (String word : words) {\n        if (!bannedSet.contains(word)) {\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n    }\n    \n    return wordCount.entrySet().stream()\n            .max(Map.Entry.comparingByValue())\n            .orElseThrow()\n            .getKey();\n}",
            "python": "if __name__ == \"__main__\":\n    paragraph = $args[0]\n    banned = $args[1]\n    result = mostCommonWord(paragraph, banned)\n    print(result)",
            "javascript": "function main() {\n    const paragraph = $args[0];\n    const banned = $args[1];\n    const result = mostCommonWord(paragraph, banned);\n    console.log(result);\n}"
        }
    },
    "838": {
        "call_functions": {
            "c++": "string pushDominoes(string dominoes) {\n    int n = dominoes.size();\n    vector<int> forces(n, 0);\n    \n    int force = 0;\n    for (int i = 0; i < n; ++i) {\n        if (dominoes[i] == 'R') force = n;\n        else if (dominoes[i] == 'L') force = 0;\n        else force = max(force - 1, 0);\n        forces[i] += force;\n    }\n    \n    force = 0;\n    for (int i = n - 1; i >= 0; --i) {\n        if (dominoes[i] == 'L') force = n;\n        else if (dominoes[i] == 'R') force = 0;\n        else force = max(force - 1, 0);\n        forces[i] -= force;\n    }\n    \n    string result = \"\";\n    for (int force : forces) {\n        if (force > 0) result += 'R';\n        else if (force < 0) result += 'L';\n        else result += '.';\n    }\n    \n    return result;\n}",
            "java": "public String pushDominoes(String dominoes) {\n    int n = dominoes.length();\n    int[] forces = new int[n];\n\n    int force = 0;\n    for (int i = 0; i < n; ++i) {\n        if (dominoes.charAt(i) == 'R') force = n;\n        else if (dominoes.charAt(i) == 'L') force = 0;\n        else force = Math.max(force - 1, 0);\n        forces[i] += force;\n    }\n\n    force = 0;\n    for (int i = n - 1; i >= 0; --i) {\n        if (dominoes.charAt(i) == 'L') force = n;\n        else if (dominoes.charAt(i) == 'R') force = 0;\n        else force = Math.max(force - 1, 0);\n        forces[i] -= force;\n    }\n\n    StringBuilder result = new StringBuilder();\n    for (int f : forces) {\n        if (f > 0) result.append('R');\n        else if (f < 0) result.append('L');\n        else result.append('.');\n    }\n\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    dominoes = $args[0]\n    result = pushDominoes(dominoes)\n    print(result)",
            "javascript": "function pushDominoes(dominoes) {\n    const n = dominoes.length;\n    const forces = new Array(n).fill(0);\n\n    let force = 0;\n    for (let i = 0; i < n; ++i) {\n        if (dominoes[i] === 'R') force = n;\n        else if (dominoes[i] === 'L') force = 0;\n        else force = Math.max(force - 1, 0);\n        forces[i] += force;\n    }\n\n    force = 0;\n    for (let i = n - 1; i >= 0; --i) {\n        if (dominoes[i] === 'L') force = n;\n        else if (dominoes[i] === 'R') force = 0;\n        else force = Math.max(force - 1, 0);\n        forces[i] -= force;\n    }\n\n    return forces.map(f => f > 0 ? 'R' : f < 0 ? 'L' : '.').join('');\n}\n"
        }
    },
    "839": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_set>\n#include <vector>\n\nint main() {\n    std::vector<std::string> words = $args;\n    int result = minimal_length_encoding(words);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minimalLengthEncoding(String[] words) {\n    Set<String> wordSet = new HashSet<>();\n    for (String word : words) {\n        wordSet.add(word);\n    }\n\n    for (String word : words) {\n        for (int i = 1; i < word.length(); i++) {\n            wordSet.remove(word.substring(i));\n        }\n    }\n\n    int len = 0;\n    for (String word : wordSet) {\n        len += word.length() + 1;\n    }\n    return len;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = minimal_length_encoding(words)\n    print(result)",
            "javascript": "function main() {\n    const words = $args;\n    const result = minimalLengthEncoding(words);\n    console.log(result);\n}"
        }
    },
    "840": {
        "call_functions": {
            "c++": "int numMagicSquaresInside(vector<vector<int>>& grid) {\n    int count = 0;\n    for (int i = 0; i < grid.size() - 2; ++i) {\n        for (int j = 0; j < grid[0].size() - 2; ++j) {\n            if (grid[i][j] <= 9 && grid[i + 1][j + 1] == 5 && isMagic(grid, i, j)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nbool isMagic(vector<vector<int>>& grid, int x, int y) {\n    vector<int> temp(16, 0);\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            int num = grid[x + i][y + j];\n            temp[num]++;\n            if (num > 9 || temp[num] > 1) {\n                return false;\n            }\n        }\n    }\n    int sum = grid[x][y] + grid[x][y+1] + grid[x][y+2];\n    for (int i = 0; i < 3; ++i) {\n        int rowSum = 0, colSum = 0;\n        for (int j = 0; j < 3; ++j) {\n            rowSum += grid[x + i][y + j];\n            colSum += grid[x + j][y + i];\n        }\n        if (rowSum != sum || colSum != sum)\n            return false;\n    }\n    if (grid[x][y] + grid[x + 1][y + 1] + grid[x + 2][y + 2] != sum)\n        return false;\n    if (grid[x][y + 2] + grid[x + 1][y + 1] + grid[x + 2][y] != sum)\n        return false;\n\n    return true;\n}",
            "java": "public int numMagicSquaresInside(int[][] grid) {\n    int count = 0;\n    for (int i = 0; i < grid.length - 2; ++i) {\n        for (int j = 0; j < grid[0].length - 2; ++j) {\n            if (grid[i][j] <= 9 && grid[i + 1][j + 1] == 5 && isMagic(grid, i, j)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nprivate boolean isMagic(int[][] grid, int x, int y) {\n    int[] temp = new int[16];\n    for (int i = 0; i < 3; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            int num = grid[x + i][y + j];\n            temp[num]++;\n            if (num > 9 || temp[num] > 1) {\n                return false;\n            }\n        }\n    }\n    int sum = grid[x][y] + grid[x][y+1] + grid[x][y+2];\n    for (int i = 0; i < 3; ++i) {\n        int rowSum = 0, colSum = 0;\n        for (int j = 0; j < 3; ++j) {\n            rowSum += grid[x + i][y + j];\n            colSum += grid[x + j][y + i];\n        }\n        if (rowSum != sum || colSum != sum)\n            return false;\n    }\n    if (grid[x][y] + grid[x + 1][y + 1] + grid[x + 2][y + 2] != sum)\n        return false;\n    if (grid[x][y + 2] + grid[x + 1][y + 1] + grid[x + 2][y] != sum)\n        return false;\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = numMagicSquaresInside(grid)\n    print(result)",
            "javascript": "function numMagicSquaresInside(grid) {\n    let count = 0;\n    for (let i = 0; i < grid.length - 2; ++i) {\n        for (let j = 0; j < grid[0].length - 2; ++j) {\n            if (grid[i][j] <= 9 && grid[i + 1][j + 1] === 5 && isMagic(grid, i, j)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nfunction isMagic(grid, x, y) {\n    let temp = Array(16).fill(0);\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            let num = grid[x + i][y + j];\n            temp[num]++;\n            if (num > 9 || temp[num] > 1) {\n                return false;\n            }\n        }\n    }\n    let sum = grid[x][y] + grid[x][y+1] + grid[x][y+2];\n    for (let i = 0; i < 3; ++i) {\n        let rowSum = 0, colSum = 0;\n        for (let j = 0; j < 3; ++j) {\n            rowSum += grid[x + i][y + j];\n            colSum += grid[x + j][y + i];\n        }\n        if (rowSum !== sum || colSum !== sum)\n            return false;\n    }\n    if (grid[x][y] + grid[x + 1][y + 1] + grid[x + 2][y + 2] !== sum)\n        return false;\n    if (grid[x][y + 2] + grid[x + 1][y + 1] + grid[x + 2][y] !== sum)\n        return false;\n\n    return true;\n}"
        }
    },
    "841": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args[0];\n    char c = $args[1][0];\n    std::vector<int> result = shortestToChar(s, c);\n    \n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}\n",
            "java": "public int[] shortestToChar(String s, char c) {\n    int n = s.length();\n    int[] result = new int[n];\n    \n    int pos = -n;\n    for (int i = 0; i < n; ++i) {\n        if (s.charAt(i) == c)\n            pos = i;\n        result[i] = i - pos;\n    }\n    \n    for (int i = pos - 1; i >= 0; --i) {\n        if (s.charAt(i) == c)\n            pos = i;\n        result[i] = Math.min(result[i], pos - i);\n    }\n    \n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    c = $args[1]\n    result = shortestToChar(s, c)\n    print(result)",
            "javascript": "function shortestToChar(s, c) {\n    const n = s.length;\n    const result = new Array(n).fill(n);\n    let pos = -n;\n\n    for (let i = 0; i < n; ++i) {\n        if (s.charAt(i) === c)\n            pos = i;\n        result[i] = i - pos;\n    }\n\n    for (let i = pos - 1; i >= 0; --i) {\n        if (s.charAt(i) !== c)\n            pos = i;\n        result[i] = Math.min(result[i], pos - i);\n    }\n\n    return result;\n}"
        }
    },
    "842": {
        "call_functions": {
            "c++": "#include <set>\n#include <algorithm>\n\nint main() {\n    std::vector<int> fronts = $args;\n    std::vector<int> backs = $args;\n    int result = smallestGoodInteger(fronts, backs);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int smallestGoodInteger(int[] fronts, int[] backs) {\n    Set<Integer> notGood = new HashSet<>();\n    int n = fronts.length;\n    for (int i = 0; i < n; ++i)\n        if (fronts[i] == backs[i]) notGood.add(fronts[i]);\n    \n    int result = Integer.MAX_VALUE;\n    for (int i = 0; i < n; ++i) {\n        if (!notGood.contains(fronts[i])) result = Math.min(result, fronts[i]);\n        if (!notGood.contains(backs[i])) result = Math.min(result, backs[i]);\n    }\n    return result == Integer.MAX_VALUE ? 0 : result;\n}",
            "python": "if __name__ == \"__main__\":\n    fronts = $args[0]\n    backs = $args[1]\n    result = smallest_good_integer(fronts, backs)\n    print(result)",
            "javascript": "function main() {\n    const fronts = $args[0];\n    const backs = $args[1];\n    const result = smallestGoodInteger(fronts, backs);\n    console.log(result);\n}"
        }
    },
    "843": {
        "call_functions": {
            "c++": "int numFactoredBinaryTrees(vector<int>& arr) {\n    long long MOD = 1e9 + 7;\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    unordered_map<int, long long> dp;\n    for (int i = 0; i < n; ++i) {\n        dp[arr[i]] = 1;\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] % arr[j] == 0 && dp.count(arr[i] / arr[j]))\n                dp[arr[i]] = (dp[arr[i]] + dp[arr[j]] * dp[arr[i] / arr[j]]) % MOD;\n        }\n    }\n    long long ans = 0;\n    for (const auto& it : dp) ans = (ans + it.second) % MOD;\n    return ans;\n}",
            "java": "public int numFactoredBinaryTrees(int[] arr) {\n    int MOD = 1_000_000_007;\n    int n = arr.length;\n    Arrays.sort(arr);\n    HashMap<Integer, Long> dp = new HashMap<>();\n    for (int i = 0; i < n; ++i) {\n        dp.put(arr[i], 1L);\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] % arr[j] == 0 && dp.containsKey(arr[i] / arr[j]))\n                dp.put(arr[i], (dp.get(arr[i]) + dp.get(arr[j]) * dp.get(arr[i] / arr[j])) % MOD);\n        }\n    }\n    long ans = 0;\n    for (Long value : dp.values()) ans = (ans + value) % MOD;\n    return (int) ans;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = numFactoredBinaryTrees(arr)\n    print(result)",
            "javascript": "function numFactoredBinaryTrees(arr) {\n    const MOD = 1e9 + 7;\n    const n = arr.length;\n    arr.sort((a, b) => a - b);\n    let dp = new Map();\n    for (let i = 0; i < n; ++i) {\n        dp.set(arr[i], 1);\n        for (let j = 0; j < i; ++j) {\n            if (arr[i] % arr[j] === 0 && dp.has(arr[i] / arr[j]))\n                dp.set(arr[i], (dp.get(arr[i]) + dp.get(arr[j]) * dp.get(arr[i] / arr[j])) % MOD);\n        }\n    }\n    let ans = 0;\n    for (const value of dp.values()) ans = (ans + value) % MOD;\n    return ans;\n}"
        }
    },
    "844": {
        "call_functions": {
            "c++": "bool backspaceCompare(string s, string t) {\n    int i = s.length() - 1, j = t.length() - 1;\n    while (true) {\n        int back;\n        for (back = 0; i >= 0 && (back > 0 || s[i] == '#'); --i)\n            back += s[i] == '#' ? 1 : -1;\n        for (back = 0; j >= 0 && (back > 0 || t[j] == '#'); --j)\n            back += t[j] == '#' ? 1 : -1;\n        if (i >= 0 && j >= 0 && s[i] == t[j])\n            i--, j--;\n        else\n            return i == -1 && j == -1;\n    }\n}",
            "java": "public boolean backspaceCompare(String s, String t) {\n    int i = s.length() - 1, j = t.length() - 1;\n    while (true) {\n        int back;\n        for (back = 0; i >= 0 && (back > 0 || s.charAt(i) == '#'); --i)\n            back += s.charAt(i) == '#' ? 1 : -1;\n        for (back = 0; j >= 0 && (back > 0 || t.charAt(j) == '#'); --j)\n            back += t.charAt(j) == '#' ? 1 : -1;\n        if (i >= 0 && j >= 0 && s.charAt(i) == t.charAt(j))\n            i--, j--;\n        else\n            return i == -1 && j == -1;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = backspaceCompare(s, t)\n    print(result)",
            "javascript": "var backspaceCompare = function(s, t) {\n    let i = s.length - 1, j = t.length - 1;\n    while (true) {\n        let back;\n        for (back = 0; i >= 0 && (back > 0 || s[i] === '#'); --i)\n            back += s[i] === '#' ? 1 : -1;\n        for (back = 0; j >= 0 && (back > 0 || t[j] === '#'); --j)\n            back += t[j] === '#' ? 1 : -1;\n        if (i >= 0 && j >= 0 && s[i] === t[j])\n            i--, j--;\n        else\n            return i === -1 && j === -1;\n    }\n};\n\nconst s = $args[0];\nconst t = $args[1];\nconst result = backspaceCompare(s, t);\nconsole.log(result);"
        }
    },
    "845": {
        "call_functions": {
            "c++": "int longestMountain(vector<int>& arr) {\n    int n = arr.size(), res = 0, up = 0, down = 0;\n\n    for (int i = 1; i < n; ++i) {\n        if (down && arr[i - 1] < arr[i] || arr[i - 1] == arr[i]) {\n            up = down = 0;\n        }\n\n        up += arr[i - 1] < arr[i];\n        down += arr[i - 1] > arr[i];\n\n        if (up && down) {\n            res = max(res, up + down + 1);\n        }\n    }\n    return res;\n}",
            "java": "public int longestMountain(int[] arr) {\n    int n = arr.length;\n    int res = 0, up = 0, down = 0;\n\n    for (int i = 1; i < n; ++i) {\n        if ((down != 0 && arr[i - 1] < arr[i]) || arr[i - 1] == arr[i]) {\n            up = down = 0;\n        }\n\n        if (arr[i - 1] < arr[i]) up++;\n        if (arr[i - 1] > arr[i]) down++;\n\n        if (up != 0 && down != 0) {\n            res = Math.max(res, up + down + 1);\n        }\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = longestMountain(arr)\n    print(result)",
            "javascript": "function main() {\n    const arr = $args;\n    const result = longestMountain(arr);\n    console.log(result);\n}"
        }
    },
    "846": {
        "call_functions": {
            "c++": "#include <vector>\n#include <map>\n#include <iostream>\n\nint main() {\n    std::vector<int> hand = $args;\n    int groupSize = 3;\n    bool result = isPossibleDivide(hand, groupSize);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean isPossibleDivide(int[] hand, int groupSize) {\n    Map<Integer, Integer> cardCount = new TreeMap<>();\n    for (int card : hand) {\n        cardCount.put(card, cardCount.getOrDefault(card, 0) + 1);\n    }\n\n    for (int card : cardCount.keySet()) {\n        int count = cardCount.get(card);\n        if (count > 0) {\n            for (int i = 1; i < groupSize; ++i) {\n                int tmp = cardCount.getOrDefault(card + i, 0) - count;\n                if (tmp < 0) {\n                    return false;\n                }\n                cardCount.put(card + i, tmp);\n            }\n        }\n    }\n\n    return true;\n}\n",
            "python": "if __name__ == \"__main__\":\n    hand = $args[0]\n    group_size = $args[1]\n    result = is_possible_divide(hand, group_size)\n    print(result)",
            "javascript": "function main() {\n    const hand = $args[0];\n    const groupSize = $args[1];\n    const result = isPossibleDivide(hand, groupSize);\n    console.log(result);\n}"
        }
    },
    "847": {
        "call_functions": {
            "c++": "int shortestPathLength(const std::vector<std::vector<int>>& graph) {\n    int n = graph.size();\n    std::queue<std::tuple<int, int, int>> q;\n    std::vector<std::vector<bool>> visited(n, std::vector<bool>(1 << n, false));\n\n    for (int i = 0; i < n; ++i) {\n        q.push({i, 1 << i, 0});\n        visited[i][1 << i] = true;\n    }\n\n    while (!q.empty()) {\n        auto [node, bitmask, length] = q.front();\n        q.pop();\n\n        if (bitmask == (1 << n) - 1) return length;\n\n        for (int nei : graph[node]) {\n            int next_bitmask = bitmask | (1 << nei);\n            if (!visited[nei][next_bitmask]) {\n                visited[nei][next_bitmask] = true;\n                q.push({nei, next_bitmask, length + 1});\n            }\n        }\n    }\n\n    return 0;\n}",
            "java": "public int shortestPathLength(int[][] graph) {\n    int n = graph.length;\n    Queue<int[]> queue = new LinkedList<>();\n    boolean[][] visited = new boolean[n][1 << n];\n\n    for (int i = 0; i < n; i++) {\n        queue.offer(new int[]{i, 1 << i, 0});\n        visited[i][1 << i] = true;\n    }\n\n    while (!queue.isEmpty()) {\n        int[] cur = queue.poll();\n        int node = cur[0], bitmask = cur[1], length = cur[2];\n\n        if (bitmask == (1 << n) - 1) return length;\n\n        for (int nei : graph[node]) {\n            int next_bitmask = bitmask | (1 << nei);\n            if (!visited[nei][next_bitmask]) {\n                visited[nei][next_bitmask] = true;\n                queue.offer(new int[]{nei, next_bitmask, length + 1});\n            }\n        }\n    }\n\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = shortestPathLength(graph)\n    print(result)",
            "javascript": "function shortestPathLength(graph) {\n    const n = graph.length;\n    const queue = [];\n    const visited = Array.from({length: n}, () => Array(1 << n).fill(false));\n\n    for (let i = 0; i < n; i++) {\n        queue.push([i, 1 << i, 0]);\n        visited[i][1 << i] = true;\n    }\n\n    while (queue.length) {\n        const [node, bitmask, length] = queue.shift();\n\n        if (bitmask === (1 << n) - 1) return length;\n\n        for (const nei of graph[node]) {\n            const next_bitmask = bitmask | (1 << nei);\n            if (!visited[nei][next_bitmask]) {\n                visited[nei][next_bitmask] = true;\n                queue.push([nei, next_bitmask, length + 1]);\n            }\n        }\n    }\n\n    return 0;\n}"
        }
    },
    "848": {
        "call_functions": {
            "c++": "#include<string>\n#include<vector>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    vector<int> shifts = {1, 2, 3};\n    string result = shiftingLetters(s, shifts);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String shiftingLetters(String s, int[] shifts) {\n    for (int i = shifts.length - 2; i >= 0; i--) {\n        shifts[i] = (shifts[i] + shifts[i + 1] % 26) % 26;\n    }\n    \n    char[] result = s.toCharArray();\n    for (int i = 0; i < s.length(); i++) {\n        result[i] = (char) ((result[i] - 'a' + shifts[i] % 26) % 26 + 'a');\n    }\n    \n    return new String(result);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    shifts = $args[1]\n    result = shiftingLetters(s, shifts)\n    print(result)",
            "javascript": "function shiftingLetters(s, shifts) {\n    for (let i = shifts.length - 2; i >= 0; i--) {\n        shifts[i] = (shifts[i] + shifts[i + 1] % 26) % 26;\n    }\n    \n    let result = s.split('');\n    for (let i = 0; i < s.length; i++) {\n        result[i] = String.fromCharCode((result[i].charCodeAt(0) - 'a'.charCodeAt(0) + shifts[i] % 26) % 26 + 'a'.charCodeAt(0));\n    }\n    \n    return result.join('');\n}"
        }
    },
    "849": {
        "call_functions": {
            "c++": "int maxDistToClosest(vector<int>& seats) {\n    int n = seats.size();\n    int maxDist = 0, lastPerson = -1;\n\n    for (int i = 0; i < n; ++i) {\n        if (seats[i] == 1) {\n            if (lastPerson == -1)\n                maxDist = i;\n            else\n                maxDist = max(maxDist, (i - lastPerson) / 2);\n            lastPerson = i;\n        }\n    }\n    maxDist = max(maxDist, n - 1 - lastPerson);\n    return maxDist;\n}"
        }
    },
    "850": {
        "call_functions": {
            "c++": "int rectangleArea(vector<vector<int>>& rectangles) {\n    const int64_t mod = 1e9 + 7;\n    int n = rectangles.size();\n    vector<int> X, Y;\n    for (const auto &rect : rectangles) {\n        X.push_back(rect[0]);\n        X.push_back(rect[2]);\n        Y.push_back(rect[1]);\n        Y.push_back(rect[3]);\n    }\n    sort(X.begin(), X.end());\n    sort(Y.begin(), Y.end());\n\n    X.erase(unique(X.begin(), X.end()), X.end());\n    Y.erase(unique(Y.begin(), Y.end()), Y.end());\n\n    vector<vector<int>> cnt(X.size() - 1, vector<int>(Y.size() - 1));\n\n    for (const auto &rect : rectangles) {\n        int x1_idx = lower_bound(X.begin(), X.end(), rect[0]) - X.begin();\n        int x2_idx = lower_bound(X.begin(), X.end(), rect[2]) - X.begin() - 1;\n        int y1_idx = lower_bound(Y.begin(), Y.end(), rect[1]) - Y.begin();\n        int y2_idx = lower_bound(Y.begin(), Y.end(), rect[3]) - Y.begin() - 1;\n        for (int i = x1_idx; i <= x2_idx; ++i) {\n            for (int j = y1_idx; j <= y2_idx; ++j) {\n                cnt[i][j] = 1;\n            }\n        }\n    }\n    int64_t total_area = 0;\n    for (int i = 0; i < X.size() - 1; ++i) {\n        for (int j = 0; j < Y.size() - 1; ++j) {\n            if (cnt[i][j]) {\n                total_area += (int64_t)(X[i + 1] - X[i]) * (Y[j + 1] - Y[j]);\n                total_area %= mod;\n            }\n        }\n    }\n    return total_area;\n}",
            "java": "public int rectangleArea(int[][] rectangles) {\n    final int mod = 1000000007;\n    int n = rectangles.length;\n    Set<Integer> X = new HashSet<>();\n    Set<Integer> Y = new HashSet<>();\n    for (int[] rect : rectangles) {\n        X.add(rect[0]);\n        X.add(rect[2]);\n        Y.add(rect[1]);\n        Y.add(rect[3]);\n    }\n    Integer[] sortedX = X.toArray(new Integer[0]);\n    Integer[] sortedY = Y.toArray(new Integer[0]);\n    Arrays.sort(sortedX);\n    Arrays.sort(sortedY);\n\n    ...\n    (Java code is similar to C++, with minor adjustments to use Java Collections)\n}",
            "python": "if __name__ == \"__main__\":\n    rectangles = $args[0]\n    result = rectangleArea(rectangles)\n    print(result)",
            "javascript": "function rectangleArea(rectangles) {\n    const mod = 1e9 + 7;\n    let n = rectangles.length;\n    let X = new Set(), Y = new Set();\n    for (const rect of rectangles) {\n        X.add(rect[0]);\n        X.add(rect[2]);\n        Y.add(rect[1]);\n        Y.add(rect[3]);\n    }\n    let sortedX = Array.from(X).sort((a, b) => a - b);\n    let sortedY = Array.from(Y).sort((a, b) => a - b);\n\n    let cnt = Array.from({ length: X.size - 1 }, () => Array.from({ length: Y.size - 1 }, () => 0));\n\n    for (const rect of rectangles) {\n        let x1_idx = sortedX.indexOf(rect[0]);\n        let x2_idx = sortedX.indexOf(rect[2]) - 1;\n        let y1_idx = sortedY.indexOf(rect[1]);\n        let y2_idx = sortedY.indexOf(rect[3]) - 1;\n        for (let i = x1_idx; i <= x2_idx; i++) {\n            for (let j = y1_idx; j <= y2_idx; j++) {\n                cnt[i][j] = 1;\n            }\n        }\n    }\n\n    let total_area = 0;\n    for (let i = 0; i < X.size - 1; i++) {\n        for (let j = 0; j < Y.size - 1; j++) {\n            if (cnt[i][j]) {\n                total_area += (sortedX[i + 1] - sortedX[i]) * (sortedY[j + 1] - sortedY[j]);\n                total_area %= mod;\n            }\n        }\n    }\n\n    return total_area;\n}"
        }
    },
    "851": {
        "call_functions": {
            "c++": "#include <sstream>\n#include <iostream>\n\nint main() {\n    std::string sentence = $args;\n    std::string result = toGoatLatin(sentence);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String toGoatLatin(String sentence) {\n    String[] words = sentence.split(\" \");\n    String vowels = \"AEIOUaeiou\";\n    Set<Character> vowelSet = new HashSet<>();\n\n    for (char c : vowels.toCharArray()) {\n        vowelSet.add(c);\n    }\n\n    StringJoiner result = new StringJoiner(\" \");\n    StringBuilder suffix = new StringBuilder(\"a\");\n\n    for (String word : words) {\n        if (!vowelSet.contains(word.charAt(0))) {\n            word = word.substring(1) + word.charAt(0);\n        }\n        result.add(word + \"ma\" + suffix);\n        suffix.append(\"a\");\n    }\n\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    sentence = $args[0]\n    result = to_goat_latin(sentence)\n    print(result)",
            "javascript": "function toGoatLatin(sentence) {\n    const words = sentence.split(\" \");\n    const vowels = new Set(\"AEIOUaeiou\");\n    let result = [];\n    let suffix = \"a\";\n\n    words.forEach(word => {\n        if (!vowels.has(word[0])) {\n            word = word.slice(1) + word[0];\n        }\n        result.push(word + \"ma\" + suffix);\n        suffix += \"a\";\n    });\n\n    return result.join(\" \");\n}"
        }
    },
    "852": {
        "call_functions": {
            "c++": "int numFriendRequests(vector<int>& ages) {\n    vector<int> count(121, 0);\n    int total_requests = 0;\n\n    for (int age : ages) count[age]++;\n\n    for (int a = 1; a <= 120; a++) {\n        for (int b = 1; b <= 120; b++) {\n            if (a * 0.5 + 7 >= b) continue;\n            if (a < b) continue;\n            if (a < b * 2) {\n                total_requests += count[a] * count[b];\n                if (a == b) total_requests -= count[a];\n            }\n        }\n    }\n\n    return total_requests;\n}",
            "java": "public int numFriendRequests(int[] ages) {\n    int[] count = new int[121];\n    int total_requests = 0;\n\n    for (int age : ages) count[age]++;\n\n    for (int a = 1; a <= 120; a++) {\n        for (int b = 1; b <= 120; b++) {\n            if (a * 0.5 + 7 >= b) continue;\n            if (a < b) continue;\n            if (a < b * 2) {\n                total_requests += count[a] * count[b];\n                if (a == b) total_requests -= count[a];\n            }\n        }\n    }\n\n    return total_requests;\n}",
            "python": "if __name__ == \"__main__\":\n    ages = $args[0]\n    result = numFriendRequests(ages)\n    print(result)",
            "javascript": "function main() {\n    const ages = $args;\n    const result = numFriendRequests(ages);\n    console.log(result);\n}"
        }
    },
    "853": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> difficulty = $args;\n    std::vector<int> profit = $args;\n    std::vector<int> worker = $args;\n    int result = maxProfitAssignment(difficulty, profit, worker);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n    Integer[] jobIdx = new Integer[difficulty.length];\n    for (int i = 0; i < difficulty.length; i++) {\n        jobIdx[i] = i;\n    }\n    Arrays.sort(jobIdx, Comparator.comparingInt(i -> difficulty[i]));\n    Arrays.sort(worker);\n\n    int i = 0, maxProfit = 0, totalProfit = 0;\n    for (int ability : worker) {\n        while (i < difficulty.length && ability >= difficulty[jobIdx[i]]) {\n            maxProfit = Math.max(maxProfit, profit[jobIdx[i]]);\n            i++;\n        }\n        totalProfit += maxProfit;\n    }\n    return totalProfit;\n}",
            "python": "if __name__ == \"__main__\":\n    difficulty = $args[0]\n    profit = $args[1]\n    worker = $args[2]\n    result = max_profit_assignment(difficulty, profit, worker)\n    print(result)",
            "javascript": "function maxProfitAssignment(difficulty, profit, worker) {\n    const jobs = difficulty.map((d, i) => [d, profit[i]]).sort((a, b) => a[0] - b[0]);\n    worker.sort((a, b) => a - b);\n\n    let i = 0, maxProfit = 0, totalProfit = 0;\n    for (const ability of worker) {\n        while (i < difficulty.length && ability >= jobs[i][0]) {\n            maxProfit = Math.max(maxProfit, jobs[i][1]);\n            i++;\n        }\n        totalProfit += maxProfit;\n    }\n    return totalProfit;\n}"
        }
    },
    "854": {
        "call_functions": {
            "c++": "int main() {\n    std::string s1 = $args;\n    std::string s2 = $args;\n    int result = kSimilarity(s1, s2);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "int kSimilarity(String s1, String s2) {\n    int k = 0;\n    StringBuilder sb = new StringBuilder(s1);\n\n    for (int i = 0; i < sb.length(); i++) {\n        if (sb.charAt(i) != s2.charAt(i)) {\n            int j = i + 1;\n            while (sb.charAt(j) != s2.charAt(i) || s2.charAt(j) == sb.charAt(j)) {\n                j++;\n            }\n            sb.setCharAt(j, sb.charAt(i));\n            sb.setCharAt(i, s2.charAt(i));\n            k++;\n        }\n    }\n    return k;\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = kSimilarity(s1, s2)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const result = kSimilarity(s1, s2);\n    console.log(result);\n}"
        }
    },
    "855": {
        "call_functions": {
            "c++": "#include <unordered_set>\n#include <iostream>\n\nint countUniqueChars(const std::string &s) {\n    std::unordered_set<char> uniqueChars(s.begin(), s.end());\n    return uniqueChars.size();\n}\n\nint sumCountUniqueChars(const std::string &s) {\n    int sum = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        for (int j = i + 1; j <= s.size(); ++j) {\n            sum += countUniqueChars(s.substr(i, j - i));\n        }\n    }\n    return sum;\n}\n\nint main() {\n    std::string s = $args;\n    int result = sumCountUniqueChars(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int sumCountUniqueChars(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = sum_count_unique_chars(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = sumCountUniqueChars(s);\n    console.log(result);\n}"
        }
    },
    "856": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = consecutiveNumbersSum(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "857": {
        "call_functions": {}
    },
    "858": {
        "call_functions": {
            "c++": "#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    string result = maskInformation(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String maskInformation(String s) {\n    if (s.contains(\"@\")) {\n        s = s.toLowerCase();\n        return s.charAt(0) + \"*****\" + s.substring(s.indexOf('@') - 1);\n    } else {\n        String digits = s.replaceAll(\"\\\\D\", \"\");\n        if (digits.length() == 10)\n            return \"***-***-\" + digits.substring(6);\n        String prefix = \"*\" + new String(new char[digits.length() - 10]).replace(\"\\0\", \"*\") + \"-\";\n        return '+' + prefix + \"***-***-\" + digits.substring(digits.length() - 4);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = mask_information(s)\n    print(result)",
            "javascript": "function maskInformation(s) {\n    if (s.includes('@')) {\n        s = s.toLowerCase();\n        return s[0] + \"*****\" + s.slice(s.indexOf('@') - 1);\n    } else {\n        const digits = s.replace(/\\D/g, '');\n        if (digits.length === 10)\n            return \"***-***-\" + digits.slice(-4);\n        const prefix = \"*\".repeat(digits.length - 10) + \"-\";\n        return '+' + prefix + \"***-***-\" + digits.slice(-4);\n    }\n}"
        }
    },
    "859": {
        "call_functions": {
            "c++": "MyCircularDeque circularDeque($args);\nbool result1 = circularDeque.insertFront(1);\nbool result2 = circularDeque.insertLast(2);\nbool result3 = circularDeque.deleteFront();\nbool result4 = circularDeque.deleteLast();\nint result5 = circularDeque.getFront();\nint result6 = circularDeque.getRear();\nbool result7 = circularDeque.isEmpty();\nbool result8 = circularDeque.isFull();\n",
            "java": "public static void main(String[] args) {\n        int k = $args;\n        MyCircularDeque obj = new MyCircularDeque(k);\n        boolean param_1 = obj.insertFront(1);\n        boolean param_2 = obj.insertLast(2);\n        boolean param_3 = obj.deleteFront();\n        boolean param_4 = obj.deleteLast();\n        int param_5 = obj.getFront();\n        int param_6 = obj.getRear();\n        boolean param_7 = obj.isEmpty();\n        boolean param_8 = obj.isFull();\n        System.out.println(param_1);\n        System.out.println(param_2);\n        System.out.println(param_3);\n        System.out.println(param_4);\n        System.out.println(param_5);\n        System.out.println(param_6);\n        System.out.println(param_7);\n        System.out.println(param_8);\n    }",
            "javascript": "def main():\n    k = $args\n    obj = MyCircularDeque(k)\n    param_1 = obj.insertFront(1)\n    param_2 = obj.insertLast(2)\n    param_3 = obj.deleteFront()\n    param_4 = obj.deleteLast()\n    param_5 = obj.getFront()\n    param_6 = obj.getRear()\n    param_7 = obj.isEmpty()\n    param_8 = obj.isFull()\n    print(param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8)\n",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    obj = MyCircularDeque(k)\n    param_1 = obj.insertFront($args[1])\n    param_2 = obj.insertLast($args[2])\n    param_3 = obj.deleteFront()\n    param_4 = obj.deleteLast()\n    param_5 = obj.getFront()\n    param_6 = obj.getRear()\n    param_7 = obj.isEmpty()\n    param_8 = obj.isFull()\n    print(param_1, param_2, param_3, param_4, param_5, param_6, param_7, param_8)"
        }
    },
    "861": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> flipAndInvertImage(vector<vector<int>>& image) {\n    for (auto &row : image) {\n        reverse(row.begin(), row.end());\n        for (int &pixel : row) {\n            pixel = 1 - pixel;\n        }\n    }\n    return image;\n}\n\nint main() {\n    vector<vector<int>> image = $args;\n    vector<vector<int>> result = flipAndInvertImage(image);\n    return 0;\n}"
        }
    },
    "862": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n\nstd::string findReplaceString(std::string s, std::vector<int>& indices, std::vector<std::string>& sources, std::vector<std::string>& targets) {\n    std::vector<std::pair<int, int>> indexMapping(indices.size());\n    \n    for (int i = 0; i < indices.size(); ++i) {\n        if (s.substr(indices[i], sources[i].size()) == sources[i]) {\n            indexMapping[i] = {indices[i], i};\n        } else {\n            indexMapping[i] = {-1, i};\n        }\n    }\n\n    sort(indexMapping.begin(), indexMapping.end());\n    std::string result = \"\";\n    int lastIdx = 0;\n    \n    for (const auto& p : indexMapping) {\n        if (p.first >= 0) {\n            result += s.substr(lastIdx, p.first - lastIdx) + targets[p.second];\n            lastIdx = p.first + sources[p.second].size();\n        }\n    }\n    \n    result += s.substr(lastIdx);\n    return result;\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<int> indices = {1, 3};\n    std::vector<std::string> sources = {\"a\", \"bcd\"};\n    std::vector<std::string> targets = {\"xyz\", \"efg\"};\n    std::string result = findReplaceString(s, indices, sources, targets);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String findReplaceString(String s, int[] indices, String[] sources, String[] targets) {\n    List<int[]> indexMapping = new ArrayList<>();\n\n    for (int i = 0; i < indices.length; i++) {\n        if (s.startsWith(sources[i], indices[i])) {\n            indexMapping.add(new int[]{indices[i], i});\n        }\n    }\n\n    indexMapping.sort((a, b) -> a[0] - b[0]);\n    StringBuilder result = new StringBuilder();\n    int lastIdx = 0;\n\n    for (int[] p : indexMapping) {\n        result.append(s, lastIdx, p[0]);\n        result.append(targets[p[1]]);\n        lastIdx = p[0] + sources[p[1]].length();\n    }\n\n    result.append(s.substring(lastIdx));\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    indices = $args[1]\n    sources = $args[2]\n    targets = $args[3]\n    result = findReplaceString(s, indices, sources, targets)\n    print(result)",
            "javascript": "function findReplaceString(s, indices, sources, targets) {\n    const indexMapping = indices\n        .map((idx, i) => [s.startsWith(sources[i], idx) ? idx : -1, i])\n        .sort((a, b) => a[0] - b[0]);\n    let result = \"\";\n    let lastIdx = 0;\n\n    for (const [idx, i] of indexMapping) {\n        if (idx >= 0) {\n            result += s.slice(lastIdx, idx) + targets[i];\n            lastIdx = idx + sources[i].length;\n        }\n    }\n\n    result += s.slice(lastIdx);\n    return result;\n}"
        }
    },
    "863": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    vector<vector<int>> edges = $args;\n    vector<int> result = sumOfDistancesInTree(n, edges);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] sumOfDistancesInTree(int n, int[][] edges) {\n    List<List<Integer>> tree = new ArrayList<>();\n\n    for (int i = 0; i < n; i++) {\n        tree.add(new ArrayList<>());\n    }\n\n    for (int[] edge : edges) {\n        tree.get(edge[0]).add(edge[1]);\n        tree.get(edge[1]).add(edge[0]);\n    }\n\n    int[] count = new int[n];\n    int[] res = new int[n];\n\n    dfs(tree, 0, -1, count, res);\n    dfs2(tree, 0, -1, count, res, n);\n\n    return res;\n}\n\nprivate void dfs(List<List<Integer>> tree, int node, int parent, int[] count, int[] res) {\n    for (int child : tree.get(node)) {\n        if (child != parent) {\n            dfs(tree, child, node, count, res);\n            count[node] += count[child];\n            res[node] += res[child] + count[child];\n        }\n    }\n    count[node]++;\n}\n\nprivate void dfs2(List<List<Integer>> tree, int node, int parent, int[] count, int[] res, int n) {\n    for (int child : tree.get(node)) {\n        if (child != parent) {\n            res[child] = res[node] - count[child] + n - count[child];\n            dfs2(tree, child, node, count, res, n);\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = sumOfDistancesInTree(n, edges)\n    print(result)",
            "javascript": "function sumOfDistancesInTree(n, edges) {\n    const tree = new Array(n).fill(0).map(() => []);\n    const count = new Array(n).fill(1);\n    const res = new Array(n).fill(0);\n\n    for (let edge of edges) {\n        tree[edge[0]].push(edge[1]);\n        tree[edge[1]].push(edge[0]);\n    }\n\n    const dfs = (node, parent) => {\n        for (let child of tree[node]) {\n            if (child !== parent) {\n                dfs(child, node);\n                count[node] += count[child];\n                res[node] += res[child] + count[child];\n            }\n        }\n    };\n\n    const dfs2 = (node, parent) => {\n        for (let child of tree[node]) {\n            if (child !== parent) {\n                res[child] = res[node] - count[child] + n - count[child];\n                dfs2(child, node);\n            }\n        }\n    };\n\n    dfs(0, -1);\n    dfs2(0, -1);\n\n    return res;\n}"
        }
    },
    "864": {
        "call_functions": {
            "c++": "int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {\n    int n = img1.size();\n    vector<pair<int, int>> onesImg1, onesImg2;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (img1[i][j]) onesImg1.emplace_back(i, j);\n            if (img2[i][j]) onesImg2.emplace_back(i, j);\n        }\n    }\n\n    unordered_map<int, int> overlaps;\n    for (const auto& pt1 : onesImg1) {\n        for (const auto& pt2 : onesImg2) {\n            int dx = pt2.first - pt1.first;\n            int dy = pt2.second - pt1.second;\n            int key = (dx << 16) + dy;\n            ++overlaps[key];\n        }\n    }\n\n    int maxOverlap = 0;\n    for (const auto& pair : overlaps) {\n        maxOverlap = max(maxOverlap, pair.second);\n    }\n    return maxOverlap;\n}",
            "java": "public int largestOverlap(int[][] img1, int[][] img2) {\n    int n = img1.length;\n    List<int[]> onesImg1 = new ArrayList<>();\n    List<int[]> onesImg2 = new ArrayList<>();\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (img1[i][j] == 1) onesImg1.add(new int[]{i, j});\n            if (img2[i][j] == 1) onesImg2.add(new int[]{i, j});\n        }\n    }\n\n    Map<String, Integer> overlaps = new HashMap<>();\n    for (int[] pt1 : onesImg1) {\n        for (int[] pt2 : onesImg2) {\n            int dx = pt2[0] - pt1[0];\n            int dy = pt2[1] - pt1[1];\n            String key = dx + \",\" + dy;\n            overlaps.put(key, overlaps.getOrDefault(key, 0) + 1);\n        }\n    }\n\n    int maxOverlap = 0;\n    for (Integer count : overlaps.values()) {\n        maxOverlap = Math.max(maxOverlap, count);\n    }\n    return maxOverlap;\n}",
            "python": "if __name__ == \"__main__\":\n    img1 = $args[0]\n    img2 = $args[1]\n    result = largestOverlap(img1, img2)\n    print(result)",
            "javascript": "function main() {\n    const img1 = $args[0];\n    const img2 = $args[1];\n    const result = largestOverlap(img1, img2);\n    console.log(result);\n}"
        }
    },
    "866": {
        "call_functions": {
            "c++": "bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n    return rec1[2] > rec2[0] && rec1[3] > rec2[1] && rec1[0] < rec2[2] && rec1[1] < rec2[3];\n}\n\nint main() {\n    vector<int> rec1 = $args[0];\n    vector<int> rec2 = $args[1];\n    bool result = isRectangleOverlap(rec1, rec2);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int[] rec1 = $args[0];\n        int[] rec2 = $args[1];\n        boolean result = isRectangleOverlap(rec1, rec2);\n        System.out.println(result);\n    }",
            "python": "if __name__ == \"__main__\":\n    rec1 = $args[0]\n    rec2 = $args[1]\n    result = isRectangleOverlap(rec1, rec2)\n    print(result)",
            "javascript": "function main() {\n    const rec1 = $args[0];\n    const rec2 = $args[1];\n    const result = isRectangleOverlap(rec1, rec2);\n    console.log(result);\n}"
        }
    },
    "867": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int k = $args;\n    int maxPts = $args;\n    double result = new21Game(n, k, maxPts);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public double new21Game(int n, int k, int maxPts) {\n    if (k == 0 || n >= k + maxPts) {\n        return 1;\n    }\n    \n    double[] dp = new double[n + 1];\n    dp[0] = 1;\n    double sum = 1, ans = 0;\n    \n    for (int i = 1; i <= n; i++) {\n        dp[i] = sum / maxPts;\n        if (i < k) {\n            sum += dp[i];\n        } else {\n            ans += dp[i];\n        }\n        if (i >= maxPts) {\n            sum -= dp[i - maxPts];\n        }\n    }\n    \n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    maxPts = $args[2]\n    result = new21Game(n, k, maxPts)\n    print(result)",
            "javascript": "function new21Game(n, k, maxPts) {\n    if (k === 0 || n >= k + maxPts) {\n        return 1;\n    }\n\n    let dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    let sum = 1, ans = 0;\n\n    for (let i = 1; i <= n; i++) {\n        dp[i] = sum / maxPts;\n        if (i < k) {\n            sum += dp[i];\n        } else {\n            ans += dp[i];\n        }\n        if (i >= maxPts) {\n            sum -= dp[i - maxPts];\n        }\n    }\n\n    return ans;\n}\n"
        }
    },
    "868": {
        "call_functions": {
            "c++": "#include <string>\nusing namespace std;\n\nstring pushDominoes(string dominoes) {\n    int n = dominoes.size();\n    string prev, cur = dominoes;\n    do {\n        prev = cur;\n        for (int i = 0; i < n; ++i) {\n            if (prev[i] == 'L' && i > 0 && prev[i - 1] == '.')\n                cur[i - 1] = 'L';\n            else if (prev[i] == 'R' && i < n - 1 && prev[i + 1] == '.')\n                cur[i + 1] = 'R';\n        }\n    } while (prev != cur);\n    return cur;\n}",
            "java": "public String pushDominoes(String dominoes) {\n    int n = dominoes.length();\n    String prev;\n    String cur = dominoes;\n    do {\n        prev = cur;\n        StringBuilder sb = new StringBuilder(prev);\n        for (int i = 0; i < n; ++i) {\n            if (prev.charAt(i) == 'L' && i > 0 && prev.charAt(i - 1) == '.')\n                sb.setCharAt(i - 1, 'L');\n            else if (prev.charAt(i) == 'R' && i < n - 1 && prev.charAt(i + 1) == '.')\n                sb.setCharAt(i + 1, 'R');\n        }\n        cur = sb.toString();\n    } while (!prev.equals(cur));\n    return cur;\n}",
            "python": "if __name__ == \"__main__\":\n    dominoes = $args[0]\n    result = push_dominoes(dominoes)\n    print(result)",
            "javascript": "function pushDominoes(dominoes) {\n    let prev, cur = dominoes;\n    do {\n        prev = cur;\n        let curList = prev.split('');\n        for (let i = 0; i < prev.length; ++i) {\n            if (prev[i] === 'L' && i > 0 && prev[i - 1] === '.')\n                curList[i - 1] = 'L';\n            else if (prev[i] === 'R' && i < prev.length - 1 && prev[i + 1] === '.')\n                curList[i + 1] = 'R';\n        }\n        cur = curList.join('');\n    } while (prev !== cur);\n    return cur;\n}"
        }
    },
    "869": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    vector<string> strs = $args;\n    int result = count_groups(strs);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public static int countGroups(String[] strs) {\n        int count = 0;\n        boolean[] visited = new boolean[strs.length];\n        Arrays.fill(visited, false);\n        for (int i = 0; i < strs.length; i++) {\n            if (!visited[i]) {\n                count++;\n                visited[i] = true;\n                for (int j = i + 1; j < strs.length; j++) {\n                    if (isSimilar(strs[i], strs[j])) {\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n        return count;\n    }",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    result = count_groups(strs)\n    print(result)",
            "javascript": "function main() {\n    const strs = $args;\n    const result = countGroups(strs);\n    console.log(result);\n}"
        }
    },
    "870": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n#include <iostream>\n\nvoid printVector(const std::vector<int>& vec) {\n    for (int num : vec) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> nums1 = $args;\n    std::vector<int> nums2 = {1, 2, 3, 4, 5};\n    std::vector<int> result = advantageCount(nums1, nums2);\n    printVector(result);\n    return 0;\n}",
            "java": "public int[] advantageCount(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        int[] result = new int[n];\n        TreeSet<Integer> set = new TreeSet<>();\n        for (int num : nums1) set.add(num);\n        for (int i = 0; i < n; i++) {\n            Integer greater = set.higher(nums2[i]);\n            if (greater == null) {\n                greater = set.first();\n            }\n            set.remove(greater);\n            result[i] = greater;\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = advantage_count(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const sortedNums1 = [...nums1].sort((a, b) => a - b);\n    const result = [];\n    for (const num of nums2) {\n        let index = sortedNums1.findIndex(el => el > num);\n        if (index === -1) index = 0;\n        result.push(sortedNums1[index]);\n        sortedNums1.splice(index, 1);\n    }\n    console.log(result);\n}\n"
        }
    },
    "871": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_set>\n#include <iostream>\n\nbool canVisitAllRooms(const std::vector<std::vector<int>>& rooms) {\n    std::unordered_set<int> visited;\n    std::vector<int> stack = {0};\n\n    while (!stack.empty()) {\n        int currentRoom = stack.back();\n        stack.pop_back();\n\n        visited.insert(currentRoom);\n\n        for (int key : rooms[currentRoom]) {\n            if (!visited.count(key)) {\n                stack.push_back(key);\n            }\n        }\n    }\n\n    return visited.size() == rooms.size();\n}\n\nint main() {\n    const std::vector<std::vector<int>> rooms = $args;\n    bool result = canVisitAllRooms(rooms);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n    HashSet<Integer> visited = new HashSet<>();\n    Stack<Integer> stack = new Stack<>();\n    stack.push(0);\n\n    while (!stack.isEmpty()) {\n        int currentRoom = stack.pop();\n\n        visited.add(currentRoom);\n\n        for (int key : rooms.get(currentRoom)) {\n            if (!visited.contains(key)) {\n                stack.push(key);\n            }\n        }\n    }\n\n    return visited.size() == rooms.size();\n}",
            "python": "if __name__ == \"__main__\":\n    rooms = $args[0]\n    result = can_visit_all_rooms(rooms)\n    print(result)",
            "javascript": "function main() {\n    const rooms = $args;\n    const visited = new Set();\n    const stack = [0];\n\n    while (stack.length > 0) {\n        const currentRoom = stack.pop();\n\n        visited.add(currentRoom);\n\n        for (const key of rooms[currentRoom]) {\n            if (!visited.has(key)) {\n                stack.push(key);\n            }\n        }\n    }\n\n    const result = visited.size === rooms.length;\n    console.log(result);\n}"
        }
    },
    "872": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nvoid backtrack(std::string& num, std::vector<int>& ans, int index, int prev1, int prev2);\n\nstd::vector<int> splitIntoFibonacci(std::string num) {\n    std::vector<int> ans;\n    backtrack(num, ans, 0, 0, 0);\n    return ans;\n}\n\nbool backtrack(std::string& num, std::vector<int>& ans, int index, int prev1, int prev2) {\n    if (index == num.size()) {\n        return ans.size() >= 3;\n    }\n    long curr = 0;\n    for (int i = index; i < num.size(); ++i) {\n        if (i > index && num[index] == '0') {\n            break;\n        }\n        curr = curr * 10 + num[i] - '0';\n        if (curr > INT32_MAX) {\n            break;\n        }\n        \n        if (ans.size() >= 2) {\n            long sum = (long)prev1 + prev2;\n            if (curr < sum) {\n                continue;\n            } else if (curr > sum) {\n                break;\n            }\n        }\n        \n        ans.push_back(curr);\n        if (backtrack(num, ans, i + 1, prev2, curr)) {\n            return true;\n        }\n        ans.pop_back();\n    }\n    return false;\n}\n\nint main() {\n    std::string num = $args;\n    std::vector<int> result = splitIntoFibonacci(num);\n    for (int i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public List<Integer> splitIntoFibonacci(String num) {\n    List<Integer> ans = new ArrayList<>();\n    backtrack(num, ans, 0, 0, 0);\n    return ans;\n}\n\nprivate boolean backtrack(String num, List<Integer> ans, int index, int prev1, int prev2) {\n    if (index == num.length()) {\n        return ans.size() >= 3;\n    }\n    long curr = 0;\n    for (int i = index; i < num.length(); ++i) {\n        if (i > index && num.charAt(index) == \"0\") {\n            break;\n        }\n        curr = curr * 10 + num.charAt(i) - '0';\n        if (curr > Integer.MAX_VALUE) {\n            break;\n        }\n\n        if (ans.size() >= 2) {\n            long sum = (long) prev1 + prev2;\n            if (curr < sum) {\n                continue;\n            } else if (curr > sum) {\n                break;\n            }\n        }\n\n        ans.add((int) curr);\n        if (backtrack(num, ans, i + 1, prev2, (int) curr)) {\n            return true;\n        }\n        ans.remove(ans.size() - 1);\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = splitIntoFibonacci(num)\n    print(result)",
            "javascript": "function splitIntoFibonacci(num) {\n    const ans = [];\n    const backtrack = (index, prev1, prev2) => {\n        if (index === num.length) {\n            return ans.length >= 3;\n        }\n        let curr = 0;\n        for (let i = index; i < num.length; ++i) {\n            if (i > index && num[index] === '0') {\n                break;\n            }\n            curr = curr * 10 + num.charCodeAt(i) - 48;\n            if (curr > 2**31 - 1) {\n                break;\n            }\n            \n            if (ans.length >= 2) {\n                const sum = prev1 + prev2;\n                if (curr < sum) {\n                    continue;\n                } else if (curr > sum) {\n                    break;\n                }\n            }\n            \n            ans.push(curr);\n            if (backtrack(i + 1, prev2, curr)) {\n                return true;\n            }\n            ans.pop();\n        }\n        return false;\n    }\n    \n    backtrack(0, 0, 0);\n    return ans;\n}"
        }
    },
    "873": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint match(const std::string& a, const std::string& b) {\n    int matches = 0;\n    for (int i = 0; i < 6; ++i)\n        if (a[i] == b[i]) matches++;\n    return matches;\n}\n\nvoid findSecretWord(std::vector<std::string>& wordlist, Master& master) {\n    int n = word_list.size();\n    for (int i = 0, match_cnt=0; i < 10 && match_cnt < 6; ++i) {\n        std::string guess = wordlist[rand() %n];\n        match_cnt = master.guess(guess);\n        std::vector<std::string> candidates;\n        for (const std::string& word : wordlist)\n            if (match(word, guess) == match_cnt)\n                candidates.push_back(word);\n        wordlist = candidates;\n        n = wordlist.size();\n    }\n}\n\nint main() {\n    std::vector<std::string> wordlist = $args;\n    Master master;\n    findSecretWord(wordlist, master);\n    return 0;\n}",
            "java": "public void findSecretWord(String[] wordlist, Master master) {\n        List<String> words = new ArrayList<>();\n        for (String word : wordlist) words.add(word);\n        Random rand = new Random();\n\n        for (int i = 0, matchCnt = 0; i < 10 && matchCnt < 6; ++i) {\n            String guess = words.get(rand.nextInt(words.size()));\n            matchCnt = master.guess(guess);\n            List<String> candidates = new ArrayList<>();\n            for (String word : words)\n                if (match(word, guess) == matchCnt)\n                    candidates.add(word);\n            words = candidates;\n        }\n    }",
            "python": "if __name__ == \"__main__\":\n    wordlist = $args[0]\n    master = $args[1]\n    find_secret_word(wordlist, master)",
            "javascript": "function findSecretWord(wordlist, master) {\n    let n = wordlist.length;\n    for (let i = 0, matchCnt = 0; i < 10 && matchCnt < 6; ++i) {\n        let guess = wordlist[Math.floor(Math.random() * n)];\n        matchCnt = master.guess(guess);\n        let candidates = [];\n        for (const word of wordlist)\n            if (match(word, guess) == matchCnt)\n                candidates.push(word);\n        wordlist = candidates;\n        n = wordlist.length;\n    }\n}"
        }
    },
    "874": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <string>\n#include <stack>\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    bool result = backspaceCompare(s, t);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean backspaceCompare(String s, String t) {\n        Stack<Character> sStack = processBackspaces(s);\n        Stack<Character> tStack = processBackspaces(t);\n\n        return sStack.equals(tStack);\n    }\n\n    private Stack<Character> processBackspaces(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : s.toCharArray()) {\n            if (c != '#') {\n                stack.push(c);\n            } else if (!stack.isEmpty()) {\n                stack.pop();\n            }\n        }\n        return stack;\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = backspace_compare(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = backspaceCompare(s, t);\n    console.log(result);\n}"
        }
    },
    "875": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> arr = $args;\n    int result = longestMountain(arr);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int longestMountain(int[] arr) {\n    int n = arr.length;\n    int maxLength = 0;\n    int i = 1;\n    while (i < n - 1) {\n        if (arr[i - 1] < arr[i] && arr[i] > arr[i + 1]) {\n            int left = i - 1;\n            int right = i + 1;\n            while (left > 0 && arr[left - 1] < arr[left]) {\n                left--;\n            }\n            while (right < n - 1 && arr[right] > arr[right + 1]) {\n                right++;\n            }\n            maxLength = Math.max(maxLength, right - left + 1);\n            i = right;\n        } else {\n            i++;\n        }\n    }\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = longest_mountain(arr)\n    print(result)",
            "javascript": "function longestMountain(arr) {\n    const result = longestMountain(arr);\n    console.log(result);\n}"
        }
    },
    "876": {
        "call_functions": {
            "c++": "#include <map>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> hand = $args;\n    int groupSize = $args;\n    bool result = isNStraightHand(hand, groupSize);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
            "java": "public boolean isNStraightHand(int[] hand, int groupSize) {\n    TreeMap<Integer, Integer> counts = new TreeMap<>();\n\n    for (int card : hand) {\n        counts.put(card, counts.getOrDefault(card, 0) + 1);\n    }\n\n    for (Integer key : counts.keySet()) {\n        if (counts.get(key) > 0) {\n            for (int i = groupSize - 1; i >= 0; --i) {\n                if (counts.getOrDefault(key + i, 0) < counts.get(key)) {\n                    return false;\n                }\n                counts.put(key + i, counts.get(key + i) - counts.get(key));\n            }\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    hand = $args[0]\n    group_size = $args[1]\n    result = is_n_straight_hand(hand, group_size)\n    print(result)",
            "javascript": "function main() {\n    const hand = $args[0];\n    const groupSize = $args[1];\n    const result = isNStraightHand(hand, groupSize);\n    console.log(result);\n}"
        }
    },
    "877": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <bitset>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> graph = $args;\n    int result = shortestPathLength(graph);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = shortestPathLength(graph)\n    print(result)",
            "javascript": "function shortestPathLength(graph) {\n    const n = graph.length;\n    const q = [];\n    \n    for(let i = 0; i < n; i++) {\n        q.push([i, 1 << i]);\n    }\n    let steps = -1;\n    const visited = Array.from({length: n}, () => Array(1 << n).fill(false));\n    \n    while(q.length > 0) {\n        steps++;\n        const size = q.length;\n        \n        for(let k = 0; k < size; k++) {\n            const [currNode, currVisits] = q.shift();\n\n            if(currVisits.toString(2).split('').filter(v => v === '1').length === n) return steps;\n            \n            for(const nextNode of graph[currNode]) {\n                const nextVisits = currVisits | (1 << nextNode);\n                \n                if(!visited[nextNode][nextVisits]) {\n                    visited[nextNode][nextVisits] = true;\n                    q.push([nextNode, nextVisits]);\n                }\n            }\n        }\n    }\n    \n    return -1;\n}"
        }
    },
    "878": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<int> shifts = {1, 2, 3};\n    std::string result = shiftingLetters(s, shifts);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String shiftingLetters(String s, int[] shifts) {\n        int n = s.length();\n        for (int i = n - 2; i >= 0; i--) {\n            shifts[i] = (shifts[i] + shifts[i + 1]) % 26;\n        }\n\n        char[] result = new char[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = (char)(((s.charAt(i) - 'a') + shifts[i]) % 26 + 'a');\n        }\n\n        return new String(result);\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    shifts = $args[1]\n    result = shiftingLetters(s, shifts)\n    print(result)",
            "javascript": "function shiftingLetters(s, shifts) {\n    const n = s.length;\n    for (let i = n - 2; i >= 0; i--) {\n        shifts[i] = (shifts[i] + shifts[i + 1]) % 26;\n    }\n    \n    let result = \"\";\n    for (let i = 0; i < n; i++) {\n        result += String.fromCharCode((s.charCodeAt(i) - 'a'.charCodeAt(0) + shifts[i]) % 26 + 'a'.charCodeAt(0));\n    }\n    \n    return result;\n}"
        }
    },
    "879": {
        "call_functions": {
            "c++": "int maxDistToClosest(vector<int>& seats) {\n    int max_dist = 0, last_person = -1;\n    for (int i = 0; i < seats.size(); ++i) {\n        if (seats[i] == 1) {\n            max_dist = last_person < 0 ? i : max(max_dist, (i - last_person) / 2);\n            last_person = i;\n        }\n    }\n    return max(max_dist, (int)(seats.size() - 1 - last_person));\n}",
            "java": "public int maxDistToClosest(int[] seats) {\n    int maxDist = 0, lastPerson = -1;\n    for (int i = 0; i < seats.length; ++i) {\n        if (seats[i] == 1) {\n            maxDist = lastPerson < 0 ? i : Math.max(maxDist, (i - lastPerson) / 2);\n            lastPerson = i;\n        }\n    }\n    return Math.max(maxDist, seats.length - 1 - lastPerson);\n}",
            "python": "if __name__ == \"__main__\":\n    seats = $args[0]\n    result = max_dist_to_closest(seats)\n    print(result)",
            "javascript": "function main() {\n    const seats = $args;\n    const result = maxDistToClosest(seats);\n    console.log(result);\n}"
        }
    },
    "880": {
        "call_functions": {
            "c++": "int rectangleArea(vector<vector<int>>& rectangles) {\n    int mod = 1e9 + 7;\n    vector<int> X;\n    map<int,int> Xcompress;\n    for(auto r : rectangles){\n        X.push_back(r[0]);\n        X.push_back(r[2]);\n    }\n    sort(X.begin(), X.end());\n    int idx = 0;\n    for(auto x : X){\n        if(!Xcompress.count(x))\n            Xcompress[x] = idx++;\n    }\n\n    vector<vector<int>> events;\n    for(auto r : rectangles){\n        events.push_back({Xcompress[r[0]], 1, r[1], r[3]});\n        events.push_back({Xcompress[r[2]], -1, r[1], r[3]});\n    }\n    sort(events.begin(), events.end());\n\n    int area = 0;\n    vector<int> cnt(idx,0);\n    int active = 0;\n    for(auto e : events){\n        int idx = e[0], type = e[1],\ty1 = e[2], y2 = e[3];\n        area = (area + (long long)(X[idx+1] - X[idx]) * active % mod) % mod;\n        cnt[y1] += type;\n        cnt[y2] -= type;\n        active = 0;\n        for(int i = 0; i < idx; ++i){\n            if(cnt[i])\n                active += X[i+1] - X[i];\n        }\n    }\n    return area;\n}",
            "java": "public int rectangleArea(int[][] rectangles) {\n        int mod = 1000000007;\n        ArrayList<Integer> X = new ArrayList<>();\n        HashMap<Integer, Integer> Xcompress = new HashMap<>();\n        for(int[] rect : rectangles){\n            X.add(rect[0]);\n            X.add(rect[2]);\n        }\n        Collections.sort(X);\n        int idx = 0;\n        for(int x : X){\n            if(!Xcompress.containsKey(x))\n                Xcompress.put(x, idx++);\n        }\n\n        ArrayList<int[]> events = new ArrayList<>();\n        for(int[] rect : rectangles){\n            events.add(new int[]{Xcompress.get(rect[0]), 1, rect[1], rect[3]});\n            events.add(new int[]{Xcompress.get(rect[2]), -1, rect[1], rect[3]});\n        }\n        events.sort((a, b) -> Integer.compare(a[0], b[0]));\n\n        int area = 0;\n        int[] cnt = new int[idx];\n        int active = 0;\n        for(int[] e : events){\n            int index = e[0], type = e[1], y1 = e[2], y2 = e[3];\n            area = (int) ((area + (long)(X.get(index+1) - X.get(index)) * active % mod) % mod);\n            cnt[y1] += type;\n            cnt[y2] -= type;\n            active = 0;\n            for(int i = 0; i < index; ++i){\n                if(cnt[i] > 0)\n                    active += X.get(i+1) - X.get(i);\n            }\n        }\n        return area;\n    }",
            "python": "if __name__ == \"__main__\":\n    rectangles = $args[0]\n    result = rectangleArea(rectangles)\n    print(result)",
            "javascript": "function rectangleArea(rectangles) {\n    const mod = 1e9 + 7;\n    const X = Array.from(new Set(rectangles.flatMap(rect => [rect[0], rect[2]]))).sort((a, b) => a - b);\n    const Xcompress = new Map(X.map((x, idx) => [x, idx]));\n\n    const events = [];\n    for(const rect of rectangles) {\n        events.push([Xcompress.get(rect[0]), 1, rect[1], rect[3]]);\n        events.push([Xcompress.get(rect[2]), -1, rect[1], rect[3]]);\n    }\n    events.sort((a, b) => a[0] - b[0]);\n\n    let area = 0;\n    const cnt = Array(X.length).fill(0);\n    let active = 0;\n    for(const [idx, type, y1, y2] of events) {\n        area = (area + (X[idx + 1] - X[idx]) * active % mod) % mod;\n        cnt[y1] += type;\n        cnt[y2] -= type;\n        active = 0;\n        for(let i = 0; i < idx; ++i) {\n            if (cnt[i] > 0) active += X[i+1] - X[i];\n        }\n    }\n\n    return area;\n}"
        }
    },
    "881": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> richer = $args;\n    vector<int> quiet = $args;\n    vector<int> result = loudAndRich(richer, quiet);\n    for (int i = 0; i < result.size(); ++i)\n        cout << result[i] << ' ';\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] loudAndRich(int[][] richer, int[] quiet) {\n    int n = quiet.length;\n    List<Integer>[] graph = new ArrayList[n];\n    for (int i = 0; i < n; ++i)\n        graph[i] = new ArrayList<>();\n\n    for (int[] entry : richer)\n        graph[entry[1]].add(entry[0]);\n\n    int[] answer = new int[n];\n    Arrays.fill(answer, -1);\n    for (int i = 0; i < n; ++i)\n        dfs(i, graph, quiet, answer);\n\n    return answer;\n}\n\nprivate void dfs(int x, List<Integer>[] graph, int[] quiet, int[] answer) {\n    if (answer[x] != -1) return;\n    answer[x] = x;\n    for (int y : graph[x]) {\n        dfs(y, graph, quiet, answer);\n        if (quiet[answer[y]] < quiet[answer[x]])\n            answer[x] = answer[y];\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    richer = $args[0]\n    quiet = $args[1]\n    result = loudAndRich(richer, quiet)\n    print(result)",
            "javascript": "function loudAndRich(richer, quiet) {\n    const n = quiet.length;\n    const graph = Array.from({ length: n }, () => []);\n    richer.forEach(([a, b]) => graph[b].push(a));\n\n    const answer = Array(n).fill(-1);\n\n    function dfs(x) {\n        if (answer[x] != -1) return answer[x];\n        answer[x] = x;\n        for (const y of graph[x]) {\n            const cand = dfs(y)\n            if (quiet[cand] < quiet[answer[x]])\n                answer[x] = cand;\n        }\n        return answer[x];\n    }\n\n    for (let i = 0; i < n; ++i)\n        dfs(i)\n\n    return answer;\n}\n"
        }
    },
    "882": {
        "call_functions": {
            "c++": "int peakIndexInMountainArray(vector<int>& arr) {\n    int low = 0, high = arr.size() - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] < arr[mid + 1])\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}",
            "java": "public int peakIndexInMountainArray(int[] arr) {\n    int low = 0, high = arr.length - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] < arr[mid + 1])\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = peakIndexInMountainArray(arr)\n    print(result)",
            "javascript": "function main() {\n    const arr = $args;\n    const result = peakIndexInMountainArray(arr);\n    console.log(result);\n}"
        }
    },
    "883": {
        "call_functions": {
            "c++": "int carFleet(int target, vector<int>& position, vector<int>& speed) {\n    int n = position.size();\n    vector<pair<int, int>> cars;\n    for (int i = 0; i < n; ++i) {\n        cars.emplace_back(position[i], speed[i]);\n    }\n    sort(cars.begin(), cars.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        return a.first > b.first;\n    });\n\n    int fleets = 0;\n    double last_arrival = -1;\n    for (int i = 0; i < n; ++i) {\n        double arrival = (double)(target - cars[i].first) / cars[i].second;\n        if (arrival > last_arrival) {\n            ++fleets;\n            last_arrival = arrival;\n        }\n    }\n\n    return fleets;\n}",
            "java": "public int carFleet(int target, int[] position, int[] speed) {\n    int n = position.length;\n    Integer[] indices = new Integer[n];\n    for (int i = 0; i < n; i++) {\n        indices[i] = i;\n    }\n\n    Arrays.sort(indices, (a, b) -> position[b] - position[a]);\n\n    int fleets = 0;\n    double lastArrival = -1;\n    for (int i : indices) {\n        double arrival = (double) (target - position[i]) / speed[i];\n        if (arrival > lastArrival) {\n            fleets++;\n            lastArrival = arrival;\n        }\n    }\n\n    return fleets;\n}",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    position = $args[1]\n    speed = $args[2]\n    result = carFleet(target, position, speed)\n    print(result)",
            "javascript": "function carFleet(target, position, speed) {\n  const n = position.length;\n  const cars = position.map((pos, i) => [pos, speed[i]]).sort((a, b) => b[0] - a[0]);\n\n  let fleets = 0;\n  let lastArrival = -1;\n\n  for (let i = 0; i < n; i++) {\n    const arrival = (target - cars[i][0]) / cars[i][1];\n    if (arrival > lastArrival) {\n      fleets++;\n      lastArrival = arrival;\n    }\n  }\n\n  return fleets;\n}"
        }
    },
    "884": {
        "call_functions": {
            "c++": "int main() {\n    std::string s1 = $args;\n    std::string s2 = $args;\n    int result = kSimilarity(s1, s2);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int kSimilarity(String s1, String s2) {\n    int k = 0;\n    StringBuilder a = new StringBuilder(s1);\n    StringBuilder b = new StringBuilder(s2);\n    for (int i = 0; i < a.length(); ++i) {\n        if (a.charAt(i) != b.charAt(i)) {\n            for (int j = i + 1; j < b.length(); ++j) {\n                if (a.charAt(i) == b.charAt(j) && a.charAt(j) != b.charAt(j)) {\n                    a.setCharAt(i, a.charAt(j));\n                    a.setCharAt(j, b.charAt(j));\n                    k++;\n                    break;\n                }\n            }\n        }\n    }\n    return k;\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = k_similarity(s1, s2)\n    print(result)",
            "javascript": "function kSimilarity(s1, s2) {\n    let k = 0;\n    let a = Array.from(s1);\n    let b = Array.from(s2);\n    for (let i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) {\n            for (let j = i + 1; j < b.length; ++j) {\n                if (a[i] === b[j] && a[j] !== b[j]) {\n                    [a[i], a[j]] = [a[j], a[i]];\n                    k++;\n                    break;\n                }\n            }\n        }\n    }\n    return k;\n}"
        }
    },
    "885": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    ExamRoom obj(n);\n    int result = obj.seat();\n    cout << result << endl;\n    obj.leave(result);\n    return 0;\n}",
            "java": "public int seat() {\n        if (students.isEmpty()) {\n            students.add(0);\n            return 0;\n        }\n        \n        int distance = students.first(), seatIndex = 0;\n        \n        Integer prev = students.first();\n        for (Integer current : students) {\n            if (current != prev) {\n                int d = (current - prev) / 2;\n\n                if (d > distance) {\n                    distance = d;\n                    seatIndex = prev + d;\n                }\n                prev = current;\n            }\n        }\n\n        if (n - 1 - students.last() > distance)\n            seatIndex = n - 1;\n\n        students.add(seatIndex);\n        return seatIndex;\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    obj = ExamRoom(n)\n    result = []\n    result.append(obj.seat())\n    obj.leave($args[1])\n    result.append(obj.seat())\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const examRoom = new ExamRoom(n);\n    const result1 = examRoom.seat();\n    const result2 = examRoom.seat();\n    const result3 = examRoom.seat();\n    examRoom.leave(result2);\n    const result4 = examRoom.seat();\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n    console.log(result4);\n}"
        }
    },
    "886": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = scoreOfParentheses(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int scoreOfParentheses(String s) {\n    int score = 0, depth = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == '(')\n            depth++;\n        else {\n            depth--;\n            if (s.charAt(i - 1) == '(')\n                score += 1 << depth;\n        }\n    }\n    return score;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = scoreOfParentheses(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = scoreOfParentheses(s);\n    console.log(result);\n}"
        }
    },
    "887": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <algorithm>\n\nint main() {\n    std::vector<int> quality = $args;\n    std::vector<int> wage = $args;\n    int k = $args;\n    double result = mincostToHireWorkers(quality, wage, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public double mincostToHireWorkers(int[] quality, int[] wage, int K) {\n    int N = quality.length;\n    double[][] workers = new double[N][2];\n    for (int i = 0; i < N; ++i)\n        workers[i] = new double[] {(double) wage[i] / quality[i], (double) quality[i]};\n\n    Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));\n\n    double ans = 1e60;\n    int sumq = 0;\n    PriorityQueue<Integer> pool = new PriorityQueue<>((a, b) -> -Integer.compare(a, b));\n    for (double[] worker: workers) {\n        pool.offer((int) worker[1]);\n        sumq += worker[1];\n\n        if (pool.size() > K)\n            sumq -= pool.poll();\n\n        if (pool.size() == K)\n            ans = Math.min(ans, worker[0] * sumq);\n    }\n\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    quality = $args[0]\n    wage = $args[1]\n    k = $args[2]\n    result = mincost_to_hire_workers(quality, wage, k)\n    print(result)",
            "javascript": "function mincostToHireWorkers(quality, wage, K) {\n    const workers = Array.from({length: quality.length}, (_, i) => [\n        wage[i] / quality[i], quality[i],\n    ]).sort((a, b) => a[0] - b[0]);\n\n    let sumQuality = 0;\n    const maxHeap = new MaxHeap(comparator);\n\n    let result = Infinity;\n    for (const [ratio, q] of workers) {\n        maxHeap.add(q);\n        sumQuality += q;\n\n        if (maxHeap.size() > K) {\n            sumQuality -= maxHeap.pop();\n        }\n\n        if (maxHeap.size() === K) {\n            result = Math.min(result, ratio * sumQuality);\n        }\n    }\n\n    return result;\n}\n\nclass MaxHeap {\n    constructor(comparator) {\n        this._heap = [];\n        this._comparator = comparator;\n    }\n\n    add(value) {\n        this._heap.push(value);\n        this.bubbleUp(this.size() - 1);\n    }\n\n    pop() {\n        if (this.isEmpty()) return undefined;\n\n        this.swap(0, this.size() - 1);\n        const result = this._heap.pop();\n        this.bubbleDown(0);\n        return result;\n    }\n\n    size() {\n        return this._heap.length;\n    }\n\n    isEmpty() {\n        return this._heap.length === 0;\n    }\n\n    bubbleUp(index) {\n        const parent = this.parent(index);\n        if (parent >= 0 && this._compare(parent, index)) {\n            this.swap(parent, index);\n            this.bubbleUp(parent);\n        }\n    }\n\n    bubbleDown(index) {\n        const largest = this.maxChildIndex(index);\n        if (largest !== -1 && this._compare(index, largest)) {\n            this.swap(index, largest);\n            this.bubbleDown(largest);\n        }\n    }\n\n    parent(index) {\n        return index <= 0 ? -1 : Math.floor((index - 1) / 2);\n    }\n\n    maxChildIndex(index) {\n        const left = index * 2 + 1;\n        const right = index * 2 + 2;\n        if (left >= this.size()) return -1;\n\n        if (right >= this.size()) return left;\n\n        return this._compare(left, right) ? right : left;\n    }\n\n    swap(i, j) {\n        [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n    }\n\n    _compare(i, j) {\n        return this._comparator(this._heap[i], this._heap[j]);\n    }\n}\n\nfunction comparator(a, b) {\n    return a < b;\n}"
        }
    },
    "888": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint mirrorReflection(int p, int q) {\n    int m = p, n = q;\n    int gcd;\n    while (n) {\n        gcd = m % n;\n        m = n;\n        n = gcd;\n    }\n\n    if ((p / m) % 2 == 0) return 2;\n    if ((q / m) % 2 == 0) return 0;\n    return 1;\n}\n\nint main() {\n    int p = $args;\n    int q = $args;\n    int result = mirrorReflection(p, q);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "889": {
        "call_functions": {
            "c++": "bool areAlmostEqual(std::string s, std::string goal) {\n    if (s == goal) return true;\n    int count = 0;\n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] != goal[i]) {\n            count++;\n            if (index1 == -1) index1 = i;\n            else index2 = i;\n            if (count > 2) return false;\n        }\n    }\n    return (count == 2 && s[index1] == goal[index2] && s[index2] == goal[index1]);\n}",
            "java": "public boolean areAlmostEqual(String s, String goal) {\n    if (s.equals(goal)) return true;\n    int count = 0;\n    int index1 = -1, index2 = -1;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) != goal.charAt(i)) {\n            count++;\n            if (index1 == -1) index1 = i;\n            else index2 = i;\n            if (count > 2) return false;\n        }\n    }\n    return (count == 2 && s.charAt(index1) == goal.charAt(index2) && s.charAt(index2) == goal.charAt(index1));\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    goal = $args[1]\n    result = are_almost_equal(s, goal)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const goal = $args[1];\n    const result = areAlmostEqual(s, goal);\n    console.log(result);\n}"
        }
    },
    "890": {
        "call_functions": {
            "c++": "bool lemonadeChange(std::vector<int>& bills) {\n    int five = 0, ten = 0;\n    for (int bill : bills) {\n        if (bill == 5)\n            five++;\n        else if (bill == 10) {\n            if (!five) return false;\n            five--;\n            ten++;\n        } else {\n            if (ten && five) {\n                ten--;\n                five--;\n            } else if (five >= 3)\n                five -= 3;\n            else\n                return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean lemonadeChange(int[] bills)",
            "python": "if __name__ == \"__main__\":\n    bills = $args[0]\n    result = lemonadeChange(bills)\n    print(result)",
            "javascript": "function lemonadeChange(bills) {\n    let five = 0, ten = 0;\n    for (let bill of bills) {\n        if (bill === 5)\n            five++;\n        else if (bill === 10) {\n            if (five === 0) return false;\n            five--;\n            ten++;\n        } else {\n            if (ten > 0 && five > 0) {\n                ten--;\n                five--;\n            } else if (five >= 3)\n                five -= 3;\n            else\n                return false;\n        }\n    }\n    return true;\n}"
        }
    },
    "891": {
        "call_functions": {
            "c++": "int matrixScore(std::vector<std::vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    for(int i = 0; i < m; i++) {\n        if(grid[i][0] == 0) {\n            for(int j = 0; j < n; j++) {\n                grid[i][j] = 1 - grid[i][j];\n            }\n        }\n    }\n    for(int j = 1; j < n; j++) {\n        int count = 0;\n        for(int i = 0; i < m; i++) {\n            count += grid[i][j];\n        }\n        if(count <= m / 2) {\n            for(int i = 0; i < m; i++) {\n                grid[i][j] = 1 - grid[i][j];\n            }\n        }\n    }\n    int sum = 0;\n    for(int i = 0; i < m; i++) {\n        int num = 0;\n        for(int j = 0; j < n; j++) {\n            num = num * 2 + grid[i][j];\n        }\n        sum += num;\n    }\n    return sum;\n}",
            "java": "public int matrixScore(int[][] grid) {\n    int m = grid.length, n = grid[0].length;\n    for (int i = 0; i < m; i++) {\n        if (grid[i][0] == 0) {\n            for (int j = 0; j < n; j++) {\n                grid[i][j] = 1 - grid[i][j];\n            }\n        }\n    }\n    for (int j = 1; j < n; j++) {\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            count += grid[i][j];\n        }\n        if (count <= m / 2) {\n            for (int i = 0; i < m; i++) {\n                grid[i][j] = 1 - grid[i][j];\n            }\n        }\n    }\n    int sum = 0;\n    for (int i = 0; i < m; i++) {\n        int num = 0;\n        for (int j = 0; j < n; j++) {\n            num = num * 2 + grid[i][j];\n        }\n        sum += num;\n    }\n    return sum;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = matrixScore(grid)\n    print(result)",
            "javascript": "function matrixScore(grid) {\n    const m = grid.length, n = grid[0].length;\n    for (let i = 0; i < m; i++) {\n        if (grid[i][0] === 0) {\n            for (let j = 0; j < n; j++) {\n                grid[i][j] = 1 - grid[i][j];\n            }\n        }\n    }\n    for (let j = 1; j < n; j++) {\n        let count = 0;\n        for (let i = 0; i < m; i++) {\n            count += grid[i][j];\n        }\n        if (count <= m / 2) {\n            for (let i = 0; i < m; i++) {\n                grid[i][j] = 1 - grid[i][j];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 0; i < m; i++) {\n        let num = 0;\n        for (let j = 0; j < n; j++) {\n            num = num * 2 + grid[i][j];\n        }\n        sum += num;\n    }\n    return sum;\n}"
        }
    },
    "892": {
        "call_functions": {
            "c++": "#include <deque>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int k = $args;\n    int result = shortestSubarray(nums, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int shortestSubarray(int[] nums, int k) {\n    int n = nums.length;\n    int[] prefixSum = new int[n + 1];\n    for (int i = 0; i < n; i++) prefixSum[i + 1] = prefixSum[i] + nums[i];\n\n    int res = n + 1;\n    Deque<Integer> dq = new ArrayDeque<>();\n    for (int i = 0; i < n + 1; i++) {\n        while (!dq.isEmpty() && prefixSum[i] - prefixSum[dq.peek()] >= k) {\n            res = Math.min(res, i - dq.poll());\n        }\n        while (!dq.isEmpty() && prefixSum[i] <= prefixSum[dq.peekLast()]) {\n            dq.pollLast();\n        }\n        dq.offer(i);\n    }\n    return res <= n ? res : -1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = shortest_subarray(nums, k)\n    print(result)",
            "javascript": "function shortestSubarray(nums, k) {\n    const n = nums.length;\n    const prefixSum = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) prefixSum[i + 1] = prefixSum[i] + nums[i];\n\n    let res = n + 1;\n    const dq = [];\n    for (let i = 0; i < n + 1; i++) {\n        while (dq.length > 0 && prefixSum[i] - prefixSum[dq[0]] >= k) {\n            res = Math.min(res, i - dq.shift());\n        }\n        while (dq.length > 0 && prefixSum[i] <= prefixSum[dq[dq.length - 1]]) {\n            dq.pop();\n        }\n        dq.push(i);\n    }\n    return res <= n ? res : -1;\n}\n"
        }
    },
    "893": {
        "call_functions": {
            "c++": "vector<int> findNodesAtDistanceK(TreeNode* root, int targetVal, int k) {\n    if (k < 0) return {};\n    unordered_map<TreeNode*, TreeNode*> parentMap;\n    unordered_set<TreeNode*> visited;\n    TreeNode* targetNode = nullptr;\n    initializeParentMap(root, nullptr, targetVal, parentMap, targetNode);\n\n    vector<int> result;\n    findNodesAtDistanceKHelper(targetNode, k, visited, parentMap, result);\n    return result;\n}\n\nvoid initializeParentMap(TreeNode* node, TreeNode* parent, int targetVal, unordered_map<TreeNode*, TreeNode*> &parentMap, TreeNode* &targetNode) {\n    if (!node || targetNode) return;\n    if (node->val == targetVal) targetNode = node;\n    parentMap[node] = parent;\n    initializeParentMap(node->left, node, targetVal, parentMap, targetNode);\n    initializeParentMap(node->right, node, targetVal, parentMap, targetNode);\n}\n\nvoid findNodesAtDistanceKHelper(TreeNode* node, int k, unordered_set<TreeNode*> &visited, unordered_map<TreeNode*, TreeNode*> &parentMap, vector<int> &result) {\n    if (!node || visited.count(node)) return;\n    visited.insert(node);\n    if (k == 0) {\n        result.push_back(node->val);\n        return;\n    }\n    \n    findNodesAtDistanceKHelper(node->left, k-1, visited, parentMap, result);\n    findNodesAtDistanceKHelper(node->right, k-1, visited, parentMap, result);\n    findNodesAtDistanceKHelper(parentMap[node], k-1, visited, parentMap, result);\n}\n",
            "java": "public List<Integer> findNodesAtDistanceK(TreeNode root, int targetVal, int k) {\n    if (k < 0) return new ArrayList<>();\n    Map<TreeNode, TreeNode> parentMap = new HashMap<>();\n    Set<TreeNode> visited = new HashSet<>();\n    TreeNode targetNode = initializeParentMap(root, null, targetVal, parentMap);\n\n    List<Integer> result = new ArrayList<>();\n    findNodesAtDistanceKHelper(targetNode, k, visited, parentMap, result);\n    return result;\n}\n\nprivate TreeNode initializeParentMap(TreeNode node, TreeNode parent, int targetVal, Map<TreeNode, TreeNode> parentMap) {\n    if (node == null) return null;\n    if (node.val == targetVal) return node;\n    parentMap.put(node, parent);\n    TreeNode left = initializeParentMap(node.left, node, targetVal, parentMap);\n    TreeNode right = initializeParentMap(node.right, node, targetVal, parentMap);\n    return left != null ? left : right;\n}\n\nprivate void findNodesAtDistanceKHelper(TreeNode node, int k, Set<TreeNode> visited, Map<TreeNode, TreeNode> parentMap, List<Integer> result) {\n    if (node == null || visited.contains(node)) return;\n    visited.add(node);\n    if (k == 0) {\n        result.add(node.val);\n        return;\n    }\n    \n    findNodesAtDistanceKHelper(node.left, k-1, visited, parentMap, result);\n    findNodesAtDistanceKHelper(node.right, k-1, visited, parentMap, result);\n    findNodesAtDistanceKHelper(parentMap.get(node), k-1, visited, parentMap, result);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    target_val = $args[1]\n    k = $args[2]\n    result = find_nodes_at_distance_k(root, target_val, k)\n    print(result)",
            "javascript": "function findNodesAtDistanceK(root, targetVal, k) {\n    if (k < 0) return [];\n\n    let parentMap = new Map();\n    let visited = new Set();\n    let targetNode = initializeParentMap(root, null, targetVal, parentMap);\n\n    let result = [];\n    findNodesAtDistanceKHelper(targetNode, k, visited, parentMap, result);\n    return result;\n}\n\nfunction initializeParentMap(node, parent, targetVal, parentMap) {\n    if (!node) return null;\n    if (node.val === targetVal) return node;\n\n    parentMap.set(node, parent);\n    let left = initializeParentMap(node.left, node, targetVal, parentMap);\n    let right = initializeParentMap(node.right, node, targetVal, parentMap);\n    return left ? left : right;\n}\n\nfunction findNodesAtDistanceKHelper(node, k, visited, parentMap, result) {\n    if (!node || visited.has(node)) return;\n\n    visited.add(node);\n    if (k === 0) {\n        result.push(node.val);\n        return;\n    }\n\n    findNodesAtDistanceKHelper(node.left, k - 1, visited, parentMap, result);\n    findNodesAtDistanceKHelper(node.right, k - 1, visited, parentMap, result);\n    findNodesAtDistanceKHelper(parentMap.get(node), k - 1, visited, parentMap, result);\n}"
        }
    },
    "894": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <random>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<int> blacklist = {1, 2, 3}; // Example blacklist\n    Solution obj(n, blacklist);\n    int result = obj.pick();\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public Solution(int n, int[] blacklist) {\n        blacklistMap = new HashMap<>();\n        for (int b : blacklist) {\n            if (b < n) {\n                blacklistMap.put(b, -1);\n            }\n        }\n        reducedN = n - blacklistMap.size();\n\n        for (int b : blacklist) {\n            if (b >= reducedN) continue;\n            while (blacklistMap.containsKey(--n)) {}\n            blacklistMap.put(b, n);\n        }\n    }\n\n    public int pick() {\n        int randomInt = rand.nextInt(reducedN);\n        return blacklistMap.getOrDefault(randomInt, randomInt);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    blacklist = $args[1]\n    obj = Solution(n, blacklist)\n    result = obj.pick()\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const blacklist = [];\n    const solution = new Solution(n, blacklist);\n    const result = solution.pick();\n    console.log(result);\n}"
        }
    },
    "895": {
        "call_functions": {
            "c++": "int shortestPathAllKeys(vector<string>& grid) {\n    int m = grid.size(), n = grid[0].size(), steps = 0, k = 0, x = -1, y = -1, mask = 0;\n    queue<vector<int>> q;\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == '@') {\n                x = i;\n                y = j;\n            } else if (grid[i][j] >= 'a' && grid[i][j] <= 'f') {\n                k = max(k, grid[i][j] - 'a' + 1);\n            }\n        }\n    }\n    \n    q.push({ x, y, 0 });\n    unordered_set<string> visited;\n    visited.insert(to_string(x) + \",\" + to_string(y) + \",\" + to_string(mask));\n    \n    vector<vector<int>> dirs = { {-1, 0}, {1, 0}, {0, 1}, {0, -1} };\n    \n    while (!q.empty()) {\n        int qs = q.size();\n        \n        for (int sz = 0; sz < qs; sz++) {\n            vector<int> cur = q.front(); q.pop();\n            int x = cur[0], y = cur[1], mask = cur[2];\n            \n            if (mask == (1 << k) - 1) return steps;\n            \n            for (vector<int>& dir : dirs) {\n                int nx = x + dir[0], ny = y + dir[1], nmask = mask;\n                \n                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {\n                    if (grid[nx][ny] >= 'A' && grid[nx][ny] <= 'F' && !(nmask & (1 << (grid[nx][ny] - 'A')))) continue;\n                    if (grid[nx][ny] >= 'a' && grid[nx][ny] <= 'f') nmask |= (1 << (grid[nx][ny] - 'a'));\n                    \n                    string key = to_string(nx) + \",\" + to_string(ny) + \",\" + to_string(nmask);\n                    \n                    if (visited.count(key)) continue;\n                    \n                    visited.insert(key);\n                    q.push({ nx, ny, nmask });\n                }\n            }\n        }\n        \n        steps++;\n    }\n    \n    return -1;\n}",
            "java": "public int shortestPathAllKeys(String[] grid) {\n    int m = grid.length, n = grid[0].length(), steps = 0, k = 0, x = -1, y = -1, mask = 0;\n    Queue<int[]> q = new LinkedList<>();\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i].charAt(j) == '@') {\n                x = i;\n                y = j;\n            } else if (grid[i].charAt(j) >= 'a' && grid[i].charAt(j) <= 'f') {\n                k = Math.max(k, grid[i].charAt(j) - 'a' + 1);\n            }\n        }\n    }\n    \n    q.add(new int[]{ x, y, 0 });\n    Set<String> visited = new HashSet<>();\n    visited.add(x + \",\" + y + \",\" + mask);\n    \n    int[][] dirs = { {-1, 0}, {1, 0}, {0, 1}, {0, -1} };\n    \n    while (!q.isEmpty()) {\n        int qs = q.size();\n        \n        for (int sz = 0; sz < qs; sz++) {\n            int[] cur = q.poll();\n            int x = cur[0], y = cur[1], mask = cur[2];\n            \n            if (mask == (1 << k) - 1) return steps;\n            \n            for (int[] dir : dirs) {\n                int nx = x + dir[0], ny = y + dir[1], nmask = mask;\n                \n                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {\n                    char c = grid[nx].charAt(ny);\n                    if (c >= 'A' && c <= 'F' && (nmask & (1 << (c - 'A'))) == 0) continue;\n                    if (c >= 'a' && c <= 'f') nmask |= (1 << (c - 'a'));\n                    \n                    String key = nx + \",\" + ny + \",\" + nmask;\n                    \n                    if (visited.contains(key)) continue;\n                    \n                    visited.add(key);\n                    q.add(new int[]{ nx, ny, nmask });\n                }\n            }\n        }\n        \n        steps++;\n    }\n    \n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = shortestPathAllKeys(grid)\n    print(result)",
            "javascript": "function shortestPathAllKeys(grid) {\n    const m = grid.length, n = grid[0].length;\n    let steps = 0, k = 0, x = -1, y = -1, mask = 0;\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === '@') {\n                x = i;\n                y = j;\n            } else if (grid[i][j] >= 'a' && grid[i][j] <= 'f') {\n                k = Math.max(k, grid[i][j].charCodeAt() - 'a'.charCodeAt() + 1);\n            }\n        }\n    }\n    \n    const q = [[x, y, 0]];\n    const visited = new Set([`${x},${y},${mask}`]);\n    \n    const dirs = [[-1, 0], [1, 0], [0, 1], [0, -1]];\n    \n    while (q.length) {\n        const qs = q.length;\n        \n        for (let sz = 0; sz < qs; sz++) {\n            const [x, y, mask] = q.shift();\n            \n            if (mask === (1 << k) - 1) return steps;\n            \n            dirs.forEach(([dx, dy]) => {\n                const nx = x + dx, ny = y + dy;\n                let nmask = mask;\n                \n                if (0 <= nx && nx < m && 0 <= ny && ny < n) {\n                    const c = grid[nx][ny];\n                    if (c >= 'A' && c <= 'F' && (nmask & (1 << (c.charCodeAt() - 'A'.charCodeAt()))) === 0) return;\n                    if (c >= 'a' && c <= 'f') nmask |= (1 << (c.charCodeAt() - 'a'.charCodeAt()));\n                    \n                    const key = `${nx},${ny},${nmask}`;\n                    \n                    if (visited.has(key)) return;\n                    \n                    visited.add(key);\n                    q.push([nx, ny, nmask]);\n                }\n            });\n        }\n        \n        steps++;\n    }\n    \n    return -1;\n}"
        }
    },
    "897": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = primePalindrome(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int primePalindrome(int n) {\n    while (true) {\n        if (isPrime(n) && isPalindrome(n)) return n;\n        n++;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = prime_palindrome(n)\n    print(result)",
            "javascript": "function primePalindrome(n) {\n    while (true) {\n        if (isPrime(n) && isPalindrome(n)) return n;\n        n++;\n    }\n}"
        }
    },
    "898": {
        "call_functions": {
            "c++": "#include<vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> matrix = $args;\n    vector<vector<int>> result = transpose(matrix);\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = 0; j < result[0].size(); j++) {\n            cout << result[i][j] << ' ';\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public int[][] transpose(int[][] matrix) {\n    int rows = matrix.length;\n    int cols = matrix[0].length;\n    int[][] result = new int[cols][rows];\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = transpose(matrix)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args;\n    const result = transpose(matrix);\n    console.log(result);\n}"
        }
    },
    "899": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = longest_distance(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int longestDistance(int n) {\n    int last = -1, longest = 0;\n    for (int i = 0; n > 0; n >>= 1, i++) {\n        if ((n & 1) == 1) {\n            if (last >= 0)\n                longest = Math.max(longest, i - last);\n            last = i;\n        }\n    }\n    return longest;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = longest_distance(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = longestDistance(n);\n    console.log(result);\n}"
        }
    },
    "900": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <bitset>\n#include <string>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    bool result = reorderedPowerOf2(n);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean reorderedPowerOf2(int n) {\n    char[] s = String.valueOf(n).toCharArray();\n    Arrays.sort(s);\n    do {\n        if (s[0] != '0' && Integer.bitCount(Integer.parseInt(new String(s))) == 1) {\n            return true;\n        }\n    } while (nextPermutation(s));\n    return false;\n}\n\nprivate boolean nextPermutation(char[] s) {\n    int i = s.length - 2;\n    while (i >= 0 && s[i] >= s[i + 1]) {\n        i--;\n    }\n    if (i == -1) {\n        return false;\n    }\n    int j = s.length - 1;\n    while (s[j] <= s[i]) {\n        j--;\n    }\n    char temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n\n    int left = i + 1;\n    int right = s.length - 1;\n    while (left < right) {\n        temp = s[left];\n        s[left++] = s[right];\n        s[right--] = temp;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = reorderedPowerOf2(n)\n    print(result)",
            "javascript": "function reorderedPowerOf2(n) {\n    const s = Array.from(String(n));\n    s.sort();\n\n    function nextPermutation(arr) {\n        let i = arr.length - 2;\n        while (i >= 0 && arr[i] >= arr[i + 1]) {\n            i--;\n        }\n        if (i === -1) {\n            return false;\n        }\n        let j = arr.length - 1;\n        while (arr[j] <= arr[i]) {\n            j--;\n        }\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        \n        let left = i + 1;\n        let right = arr.length - 1;\n        while (left < right) {\n            [arr[left++], arr[right--]] = [arr[right], arr[left - 1]];\n        }\n        return true;\n    }\n\n    do {\n        if (s[0] !== \"0\" && (parseInt(s.join(\"\")).toString(2).split(\"1\").length === 2)) {\n            return true;\n        }\n    } while (nextPermutation(s));\n    return false;\n}"
        }
    },
    "901": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> advantageCount(vector<int>& nums1, vector<int>& nums2) {\n    multiset<int> s(nums1.begin(), nums1.end());\n    vector<int> res;\n    for (int num : nums2) {\n        auto it = s.upper_bound(num);\n        if (it == s.end())\n            it = s.begin();\n        res.push_back(*it);\n        s.erase(it);\n    }\n    return res;\n}\n\nint main() {\n    vector<int> nums1 = $args;\n    vector<int> nums2 = $args;\n    vector<int> result = advantageCount(nums1, nums2);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] advantageCount(int[] nums1, int[] nums2) {\n    int[] res = new int[nums1.length];\n    TreeMap<Integer, Integer> map = new TreeMap<>();\n    \n    for (int num : nums1) {\n        map.put(num, map.getOrDefault(num, 0) + 1);\n    }\n    \n    for (int i = 0; i < nums2.length; i++) {\n        Integer key = map.higherKey(nums2[i]);\n        if (key == null) {\n            key = map.firstKey();\n        }\n        \n        res[i] = key;\n        map.put(key, map.get(key) - 1);\n        if (map.get(key) == 0) {\n            map.remove(key);\n        }\n    }\n    \n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = advantageCount(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const result = advantageCount(nums1, nums2);\n    console.log(result);\n}"
        }
    },
    "902": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int target = $args;\n    int startFuel = $args;\n    vector<vector<int>> stations = $args;\n    int result = minRefuelStops(target, startFuel, stations);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int minRefuelStops(int target, int startFuel, int[][] stations) {\n    int i = 0, stops = 0, curFuel = startFuel;\n    PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\n    while (curFuel < target) {\n        while (i < stations.length && stations[i][0] <= curFuel) {\n            pq.offer(stations[i][1]);\n            i++;\n        }\n        if (pq.isEmpty()) return -1;\n        curFuel += pq.poll();\n        stops++;\n    }\n    return stops;\n}",
            "python": "if __name__ == \"__main__\":\n    target = $args[0]\n    startFuel = $args[1]\n    stations = $args[2]\n    result = minRefuelStops(target, startFuel, stations)\n    print(result)",
            "javascript": "function minRefuelStops(target, startFuel, stations) {\n    let i = 0, stops = 0, curFuel = startFuel;\n    let pq = new PriorityQueue((a, b) => b - a);\n    while (curFuel < target) {\n        while (i < stations.length && stations[i][0] <= curFuel) {\n            pq.offer(stations[i][1]);\n            i++;\n        }\n        if (pq.isEmpty()) return -1;\n        curFuel += pq.poll();\n        stops++;\n    }\n    return stops;\n}\n\nclass PriorityQueue {\n    constructor(comparator) {\n        this._heap = [];\n        this._comparator = comparator || ((a, b) => a - b);\n    }\n    size() {\n        return this._heap.length;\n    }\n    isEmpty() {\n        return this.size() == 0;\n    }\n    peek() {\n        return this._heap[0];\n    }\n    offer(value) {\n        this._heap.push(value);\n        this._siftUp();\n    }\n    poll() {\n        const head = this.peek();\n        this._heap[0] = this._heap.pop();\n        this._siftDown();\n        return head;\n    }\n    _parent(idx) {\n        return Math.floor((idx - 1) / 2);\n    }\n    _left(idx) {\n        return idx * 2 + 1;\n    }\n    _right(idx) {\n        return idx * 2 + 2;\n    }\n    _siftUp() {\n        let node = this.size() - 1;\n\n        while (node > 0 && this._comparator(this._heap[node], this._heap[this._parent(node)]) < 0) {\n            [this._heap[node], this._heap[this._parent(node)]] = [this._heap[this._parent(node)], this._heap[node]];\n            node = this._parent(node);\n        }\n    }\n    _siftDown() {\n        let node = 0;\n        while ((this._left(node) < this.size() && this._comparator(this._heap[this._left(node)], this._heap[node]) < 0) ||\n            (this._right(node) < this.size() && this._comparator(this._heap[this._right(node)], this._heap[node]) < 0)) {\n                \n            let minChild = this._left(node);\n            if (this._right(node) < this.size() && this._comparator(this._heap[this._right(node)], this._heap[this._left(node)]) < 0) {\n                minChild = this._right(node);\n            }\n\n            [this._heap[node], this._heap[minChild]] = [this._heap[minChild], this._heap[node]];\n            node = minChild;\n        }\n    }\n}"
        }
    },
    "903": {
        "call_functions": {
            "c++": "int main() {\n    int result;\n    result = rand10();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rand10() {\n    int result;\n    do {\n        result = (rand7() - 1) * 7 + rand7();\n    } while (result > 40);\n    return result % 10 + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    result = rand10()\n    print(result)",
            "javascript": "function main() {\n    const result = rand10();\n    console.log(result);\n}"
        }
    },
    "904": {
        "call_functions": {
            "c++": "bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n    std::vector<int> leaves1;\n    std::vector<int> leaves2;\n    getLeaves(root1, leaves1);\n    getLeaves(root2, leaves2);\n    return leaves1 == leaves2;\n}\n\nvoid getLeaves(TreeNode* node, std::vector<int>& leaves) {\n    if (!node) return;\n    if (!node->left && !node->right) leaves.push_back(node->val);\n    getLeaves(node->left, leaves);\n    getLeaves(node->right, leaves);\n}\n\nint main() {\n    TreeNode* root1 = $args;\n    TreeNode* root2 = $args;\n    bool result = leafSimilar(root1, root2);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n    List<Integer> leaves1 = new ArrayList<>();\n    List<Integer> leaves2 = new ArrayList<>();\n    getLeaves(root1, leaves1);\n    getLeaves(root2, leaves2);\n    return leaves1.equals(leaves2);\n}\n\nprivate void getLeaves(TreeNode node, List<Integer> leaves) {\n    if (node == null) return;\n    if (node.left == null && node.right == null) leaves.add(node.val);\n    getLeaves(node.left, leaves);\n    getLeaves(node.right, leaves);\n}",
            "python": "if __name__ == \"__main__\":\n    root1 = $args[0]\n    root2 = $args[1]\n    result = leafSimilar(root1, root2)\n    print(result)",
            "javascript": "function main() {\n    const root1 = $args[0];\n    const root2 = $args[1];\n    const result = leafSimilar(root1, root2);\n    console.log(result);\n}"
        }
    },
    "905": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> arr = $args;\n    int result = lenLongestFibSubseq(arr);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int lenLongestFibSubseq(int[] arr) {\n    int n = arr.length;\n    Map<Integer, Integer> index = new HashMap<>();\n    for (int i = 0; i < n; ++i)\n        index.put(arr[i], i);\n\n    Map<Integer, Integer> longest = new HashMap<>();\n    int ans = 0;\n\n    for (int k = 0; k < n; ++k)\n        for (int j = 0; j < k; ++j) {\n            int i = index.getOrDefault(arr[k] - arr[j], -1);\n            if (i >= 0 && i < j) {\n                longest.put(j * n + k, longest.getOrDefault(i * n + j, 1) + 1);\n                ans = Math.max(ans, longest.get(j * n + k) + 1);\n            }\n        }\n\n    return ans >= 3 ? ans : 0;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = lenLongestFibSubseq(arr)\n    print(result)",
            "javascript": "function lenLongestFibSubseq(arr) {\n    const index = new Map(arr.map((x, i) => [x, i]));\n\n    const longest = new Map();\n    let ans = 0;\n\n    for (let k = 0; k < arr.length; ++k) {\n        for (let j = 0; j < k; ++j) {\n            const i = index.get(arr[k] - arr[j]) || -1;\n            if (i >= 0 && i < j) {\n                longest.set(j * arr.length + k, (longest.get(i * arr.length + j) || 1) + 1);\n                ans = Math.max(ans, longest.get(j * arr.length + k) + 1);\n            }\n        }\n    }\n\n    return ans >= 3 ? ans : 0;\n}"
        }
    },
    "907": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> piles = $args;\n    int h = $args;\n    int result = minEatingSpeed(piles, h);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minEatingSpeed(int[] piles, int h) {\n    int left = 1, right = 1;\n    for (int pile : piles)\n        right = Math.max(right, pile);\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        int totalHours = 0;\n        for (int pile : piles)\n            totalHours += (pile + mid - 1) / mid;\n        if (totalHours > h)\n            left = mid + 1;\n        else\n            right = mid;\n    }\n    return left;\n}",
            "python": "if __name__ == \"__main__\":\n    piles = $args[0]\n    h = $args[1]\n    result = minEatingSpeed(piles, h)\n    print(result)",
            "javascript": "function main() {\n  const piles = $args[0];\n  const h = $args[1];\n  const result = minEatingSpeed(piles, h);\n  console.log(result);\n}"
        }
    },
    "909": {
        "call_functions": {
            "c++": "bool aliceWins(vector<int>& piles) {\n    int n = piles.size();\n    int dp[n][n];\n    for (int gap = 0; gap < n; ++gap) {\n        for (int i = 0, j = gap; j < n; ++i, ++j) {\n            int x = ((i + 2) <= j) ? dp[i + 2][j] : 0;\n            int y = ((i + 1) <= (j - 1)) ? dp[i + 1][j - 1] : 0;\n            int z = (i <= (j - 2)) ? dp[i][j - 2] : 0;\n            dp[i][j] = max(piles[i] + min(x, y), piles[j] + min(y, z));\n        }\n    }\n    int sum = accumulate(piles.begin(), piles.end(), 0);\n    return dp[0][n - 1] > (sum - dp[0][n - 1]);\n}"
        }
    },
    "910": {
        "call_functions": {}
    },
    "911": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int minProfit = $args;\n    vector<int> group = $args;\n    vector<int> profit = $args;\n    int result = profitableSchemes(n, minProfit, group, profit);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {\n    int[][] dp = new int[n + 1][minProfit + 1];\n    int mod = (int) 1e9 + 7;\n    dp[0][0] = 1;\n    for (int i = 0; i < group.length; ++i) {\n        for (int j = n; j >= group[i]; --j) {\n            for (int k = minProfit; k >= 0; --k) {\n                dp[j][k] = (dp[j][k] + dp[j - group[i]][Math.max(0, k - profit[i])]) % mod;\n            }\n        }\n    }\n    int res = 0;\n    for (int i = 1; i <= n; ++i) {\n        res = (res + dp[i][minProfit]) % mod;\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    minProfit = $args[1]\n    group = $args[2]\n    profit = $args[3]\n    result = profitableSchemes(n, minProfit, group, profit)\n    print(result)",
            "javascript": "function profitableSchemes(n, minProfit, group, profit) {\n    const dp = new Array(n + 1).fill(0).map(() => new Array(minProfit + 1).fill(0));\n    const mod = 1e9 + 7;\n    dp[0][0] = 1;\n    for (let i = 0; i < group.length; ++i) {\n        for (let j = n; j >= group[i]; --j) {\n            for (let k = minProfit; k >= 0; --k) {\n                dp[j][k] = (dp[j][k] + dp[j - group[i]][Math.max(0, k - profit[i])]) % mod;\n            }\n        }\n    }\n    let res = 0;\n    for (let i = 1; i <= n; ++i) {\n        res = (res + dp[i][minProfit]) % mod;\n    }\n    return res;\n}"
        }
    },
    "912": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <random>\n\nint main() {\n    std::vector<int> w = $args;\n    Solution obj(w);\n    int result = obj.pickIndex();\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int pickIndex() {\n        int num = random.nextInt(prefixSum[prefixSum.length - 1]) + 1;\n        int idx = 0;\n        while (num > prefixSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }",
            "python": "if __name__ == \"__main__\":\n    w = $args[0]\n    obj = Solution(w)\n    result = obj.pickIndex()\n    print(result)",
            "javascript": "function main() {\n    const w = $args;\n    const obj = new Solution(w);\n    const result = obj.pickIndex();\n    console.log(result);\n}"
        }
    },
    "913": {
        "call_functions": {
            "c++": "std::pair<int, int> pick() {\n    std::uniform_int_distribution<int> dist(0, _zero_count - 1);\n    int index = dist(_rng);\n\n    for (int i = 0; i < _grid.size(); ++i) {\n        for (int j = 0; j < _grid[0].size(); ++j) {\n            if (_grid[i][j] == 0) {\n                if (index == 0) {\n                    _grid[i][j] = 1;\n                    --_zero_count;\n                    return {i, j};\n                }\n                --index;\n            }\n        }\n    }\n    return {-1, -1};  // Should not happen\n}\n",
            "java": "public int[] pick() {\n        int index = rng.nextInt(zeroCount);\n\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == 0) {\n                    if (index == 0) {\n                        grid[i][j] = 1;\n                        zeroCount--;\n                        return new int[]{i, j};\n                    }\n                    index--;\n                }\n            }\n        }\n        return new int[]{-1, -1};  // Should not happen\n    }",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    obj = Solution(m, n)\n    result = obj.pick()\n    print(result)",
            "javascript": "function main() {\n    const m = $args[0];\n    const n = $args[1];\n    const solution = new Solution(m, n);\n    const result = solution.pick();\n    console.log(result);\n}"
        }
    },
    "914": {
        "call_functions": {
            "c++": "#include <vector>\n#include <random>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> rectangles = $args;\n    Solution obj(rectangles);\n    std::vector<int> result = obj.pick();\n    std::cout << \"[\" << result[0] << \", \" << result[1] << \"]\" << std::endl;\n    return 0;\n}",
            "java": "public int[] pick() {\n        int randomArea = random.nextInt(totalArea);\n        int rectIndex = 0;\n        while (areas.get(rectIndex) <= randomArea) {\n            rectIndex++;\n        }\n\n        int x = rects[rectIndex][0] + random.nextInt(rects[rectIndex][2] - rects[rectIndex][0] + 1);\n        int y = rects[rectIndex][1] + random.nextInt(rects[rectIndex][3] - rects[rectIndex][1] + 1);\n\n        return new int[] {x, y};\n    }",
            "python": "if __name__ == \"__main__\":\n    rects = $args[0]\n    obj = Solution(rects)\n    result = obj.pick()\n    print(result)",
            "javascript": "function main() {\n    const rects = $args;\n    const solution = new Solution(rects);\n    const result = solution.pick();\n    console.log(result);\n}"
        }
    },
    "915": {
        "call_functions": {
            "c++": "#include <math.h>\n#include <random>\n\nint main() {\n    double radius = $args[0];\n    double x_center = $args[1];\n    double y_center = $args[2];\n\n    Solution obj(radius, x_center, y_center);\n    vector<double> result = obj.randPoint();\n\n    cout << '[' << result[0] << ',' << result[1] << ']' << endl;\n    return 0;\n}",
            "java": "public double[] randPoint() {\n        double angle = random.nextDouble() * 2 * Math.PI;\n        double r = Math.sqrt(random.nextDouble()) * radius;\n        return new double[]{x_center + r * Math.cos(angle), y_center + r * Math.sin(angle)};\n    }",
            "python": "if __name__ == \"__main__\":\n    radius = $args[0]\n    x_center = $args[1]\n    y_center = $args[2]\n    obj = Solution(radius, x_center, y_center)\n    result = obj.randPoint()\n    print(result)",
            "javascript": "function randPoint() {\n    const angle = Math.random() * 2 * Math.PI;\n    const r = Math.sqrt(Math.random()) * this.radius;\n    return [this.x_center + r * Math.cos(angle), this.y_center + r * Math.sin(angle)];\n}"
        }
    },
    "916": {
        "call_functions": {
            "c++": "#include <string>\n#include <iostream>\n\nchar findKthCharacter(const std::string& s, int k) {\n    int n = s.length();\n    long long size = 0;\n\n    for (auto c : s) {\n        if (isdigit(c)) {\n            size *= c - '0';\n        } else {\n            size++;\n        }\n    }\n\n    for (int i = n - 1; i >= 0; --i) {\n        char c = s[i];\n        k %= size;\n        if (k == 0 && !isdigit(c)) {\n            return c;\n        }\n\n        if (isdigit(c)) {\n            size /= c - '0';\n        } else {\n            size--;\n        }\n    }\n\n    return '-';\n}\n\nint main() {\n    std::string s = $args;\n    int k = 5;\n    char result = findKthCharacter(s, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public char findKthCharacter(String s, int k) {\n    int n = s.length();\n\n    long size = 0;\n\n    for (char c : s.toCharArray()) {\n        if (Character.isDigit(c)) {\n            size = size * (c - '0');\n        } else {\n            size++;\n        }\n    }\n\n    for (int i = n - 1; i >= 0; i--) {\n        char c = s.charAt(i);\n        k %= size;\n        if (k == 0 && !Character.isDigit(c)) {\n            return c;\n        }\n\n        if (Character.isDigit(c)) {\n            size /= (c - '0');\n        } else {\n            size--;\n        }\n    }\n\n    return '-';\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = find_kth_character(s, k)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const k = $args[1];\n    const result = findKthCharacter(s, k);\n    console.log(result);\n}"
        }
    },
    "917": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> people = $args;\n    int limit = $args;\n    int result = numRescueBoats(people, limit);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int numRescueBoats(int[] people, int limit) {\n    Arrays.sort(people);\n    int left = 0, right = people.length - 1;\n    int boats = 0;\n    while (left <= right) {\n        if (people[left] + people[right] <= limit) {\n            left++;\n        }\n        right--;\n        boats++;\n    }\n    return boats;\n}",
            "python": "if __name__ == \"__main__\":\n    people = $args[0]\n    limit = $args[1]\n    result = num_rescue_boats(people, limit)\n    print(result)",
            "javascript": "function main() {\n    const people = $args[0];\n    const limit = $args[1];\n    const result = numRescueBoats(people, limit);\n    console.log(result);\n}"
        }
    },
    "918": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_set>\n#include <queue>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    vector<vector<int>> edges = $args;\n    int maxMoves = $args;\n    int n = $args;\n\n    int result = reachableNodes(edges, maxMoves, n);\n\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    edges = $args[0]\n    maxMoves = $args[1]\n    n = $args[2]\n    result = reachableNodes(edges, maxMoves, n)\n    print(result)",
            "javascript": "function reachableNodes(edges, maxMoves, n) {\n    const graph = Array.from({length: n}, () => []);\n    for (const edge of edges) {\n        const [u, v, cnt] = edge;\n        graph[u].push([v, cnt + 1]);\n        graph[v].push([u, cnt + 1]);\n    }\n\n    const visited = new Set();\n    const pq = [[maxMoves, 0]];\n\n    while (pq.length) {\n        const [moves_left, node] = pq.pop();\n\n        if (visited.has(node)) continue;\n        visited.add(node);\n\n        for (const neighbor of graph[node]) {\n            const [next_node, moves_needed] = neighbor;\n            const moves_left_after = moves_left - moves_needed;\n\n            if (!visited.has(next_node) && moves_left_after > 0) {\n                pq.push([moves_left_after, next_node]);\n                pq.sort((a, b) => b[0] - a[0]);\n            }\n        }\n    }\n\n    return visited.size;\n}\n"
        }
    },
    "919": {
        "call_functions": {
            "c++": "int projectionArea(vector<vector<int>>& grid) {\n    int n = grid.size();\n    int top = 0, front = 0, side = 0;\n    for (int i = 0; i < n; ++i) {\n        int maxFront = 0, maxSide = 0;\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] > 0) {\n                ++top;\n            }\n            maxFront = max(maxFront, grid[i][j]);\n            maxSide = max(maxSide, grid[j][i]);\n        }\n        front += maxFront;\n        side += maxSide;\n    }\n    return top + front + side;\n}",
            "java": "public int projectionArea(int[][] grid) {\n    int n = grid.length;\n    int top = 0, front = 0, side = 0;\n    for (int i = 0; i < n; i++) {\n        int maxFront = 0, maxSide = 0;\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] > 0) {\n                top++;\n            }\n            maxFront = Math.max(maxFront, grid[i][j]);\n            maxSide = Math.max(maxSide, grid[j][i]);\n        }\n        front += maxFront;\n        side += maxSide;\n    }\n    return top + front + side;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = projectionArea(grid)\n    print(result)",
            "javascript": "function projectionArea(grid) {\n    const n = grid.length;\n    let top = 0, front = 0, side = 0;\n    for (let i = 0; i < n; i++) {\n        let maxFront = 0, maxSide = 0;\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] > 0) {\n                top++;\n            }\n            maxFront = Math.max(maxFront, grid[i][j]);\n            maxSide = Math.max(maxSide, grid[j][i]);\n        }\n        front += maxFront;\n        side += maxSide;\n    }\n    return top + front + side;\n}"
        }
    },
    "920": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <sstream>\n#include <iostream>\n\nint main() {\n    std::string s1 = $args;\n    std::string s2 = $args;\n    std::vector<std::string> result = uncommonFromSentences(s1, s2);\n\n    for (const auto &word : result) {\n        std::cout << word << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
            "java": "public List<String> uncommonFromSentences(String s1, String s2) {\n    Map<String, Integer> wordCount = new HashMap<>();\n    for (String word : (s1 + \" \" + s2).split(\" \")) {\n        wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n    }\n\n    List<String> result = new ArrayList<>();\n    for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {\n        if (entry.getValue() == 1) {\n            result.add(entry.getKey());\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = uncommon_from_sentences(s1, s2)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const result = uncommonFromSentences(s1, s2);\n    console.log(result);\n}"
        }
    },
    "921": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<std::vector<int>> spiral_walk(int rows, int cols, int rStart, int cStart);\n\nint main() {\n    int rows = $args;\n    int cols = $args;\n    int rStart = $args;\n    int cStart = $args;\n\n    std::vector<std::vector<int>> result = spiral_walk(rows, cols, rStart, cStart);\n\n    for (const auto& point : result) {\n        std::cout << point[0] << \" \" << point[1] << std::endl;\n    }\n\n    return 0;\n}\n",
            "java": "public ArrayList<int[]> spiral_walk(int rows, int cols, int rStart, int cStart) {\n    ArrayList<int[]> result = new ArrayList<>();\n    int[] dr = {0, 1, 0, -1};\n    int[] dc = {1, 0, -1, 0};\n    int moves = rows * cols;\n    int r = rStart, c = cStart, dir = 0;\n    \n    while (result.size() < moves) {\n        result.add(new int[]{r, c});\n        r += dr[dir];\n        c += dc[dir];\n        \n        if (r < 0 || r >= rows || c < 0 || c >= cols) {\n            r -= dr[dir];\n            c -= dc[dir];\n            dir = (dir + 1) % 4;\n            r += dr[dir];\n            c += dc[dir];\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    rows = $args[0]\n    cols = $args[1]\n    rStart = $args[2]\n    cStart = $args[3]\n    result = spiral_walk(rows, cols, rStart, cStart)\n    print(result)",
            "javascript": "function main() {\n    const rows = $args[0];\n    const cols = $args[1];\n    const rStart = $args[2];\n    const cStart = $args[3];\n    const result = spiral_walk(rows, cols, rStart, cStart);\n    console.log(result);\n}"
        }
    },
    "922": {
        "call_functions": {
            "c++": "bool possible_bipartition(int n, vector<vector<int>> &dislikes) {\n    vector<int> groups(n + 1, 0);\n    vector<vector<int>> dislikeList(n + 1);\n\n    for (auto &dislikePair : dislikes) {\n        dislikeList[dislikePair[0]].push_back(dislikePair[1]);\n        dislikeList[dislikePair[1]].push_back(dislikePair[0]);\n    }\n\n    for (int person = 1; person <= n; person++) {\n        if (groups[person] == 0 && !dfs(person, 1, groups, dislikeList)) {\n            return false;\n        }\n    }\n\n    return true;\n}",
            "java": "public boolean possibleBipartition(int n, int[][] dislikes)",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    dislikes = $args[1]\n    result = possible_bipartition(n, dislikes)\n    print(result)",
            "javascript": "function possibleBipartition(n, dislikes) {\n    function dfs(person, group) {\n        if (groups[person] !== undefined) {\n            return groups[person] === group;\n        }\n        groups[person] = group;\n        for (let other of dislikeList[person]) {\n            if (!dfs(other, -group)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const groups = {};\n    const dislikeList = Array.from({ length: n + 1 }, () => []);\n    for (let [p1, p2] of dislikes) {\n        dislikeList[p1].push(p2);\n        dislikeList[p2].push(p1);\n    }\n\n    for (let person = 1; person <= n; person++) {\n        if (groups[person] === undefined && !dfs(person, 1)) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        }
    },
    "923": {
        "call_functions": {
            "c++": "int main() {\n    int k = $args;\n    int n = $args;\n    int result = min_moves(k, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int minMoves(int k, int n) {\n    if (k == 1 || n == 0 || n == 1) {\n        return n;\n    }\n    int res = Integer.MAX_VALUE;\n    for (int i = 1; i <= n; i++) {\n        int temp = Math.max(minMoves(k - 1, i - 1), minMoves(k, n - i));\n        res = Math.min(res, temp);\n    }\n    return res + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    n = $args[1]\n    result = min_moves(k, n)\n    print(result)",
            "javascript": "function main() {\n    const k = $args[0];\n    const n = $args[1];\n    const result = minMoves(k, n);\n    console.log(result);\n}"
        }
    },
    "924": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<int> fairCandySwap(std::vector<int>& aliceSizes, std::vector<int>& bobSizes);\n\nint main() {\n    std::vector<int> aliceSizes = $args;\n    std::vector<int> bobSizes;\n    int size;\n    std::cout << \"Enter the size of bobSizes: \";\n    std::cin >> size;\n    std::cout << \"Enter the elements of bobSizes: \";\n    for (int i = 0; i < size; i++) {\n        int candy;\n        std::cin >> candy;\n        bobSizes.push_back(candy);\n    }\n    std::vector<int> result = fairCandySwap(aliceSizes, bobSizes);\n    std::cout << \"[ \";\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i];\n        if (i != result.size() - 1) {\n            std::cout << \", \";\n        }\n    }\n    std::cout << \" ]\";\n    return 0;\n}",
            "java": "public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {\n    int aliceTotal = 0, bobTotal = 0;\n    for (int candy : aliceSizes) aliceTotal += candy;\n    for (int candy : bobSizes) bobTotal += candy;\n\n    int delta = (bobTotal - aliceTotal) / 2;\n    for (int a : aliceSizes) {\n        for (int b : bobSizes) {\n            if (a + delta == b) {\n                return new int[]{a, b};\n            }\n        }\n    }\n    return new int[]{};\n}",
            "python": "if __name__ == \"__main__\":\n    aliceSizes = $args[0]\n    bobSizes = $args[1]\n    result = fair_candy_swap(aliceSizes, bobSizes)\n    print(result)",
            "javascript": "function fairCandySwap(aliceSizes, bobSizes) {\n    const aliceTotal = aliceSizes.reduce((a, b) => a + b, 0);\n    const bobTotal = bobSizes.reduce((a, b) => a + b, 0);\n\n    const delta = (bobTotal - aliceTotal) / 2;\n    for (const a of aliceSizes) {\n        for (const b of bobSizes) {\n            if (a + delta === b) {\n                return [a, b];\n            }\n        }\n    }\n    return [];\n}"
        }
    },
    "926": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    std::string pattern = \"abba\";\n    std::vector<std::string> result = findAndReplacePatterns(words, pattern);\n    for (const std::string& word : result) {\n        std::cout << word << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public List<String> findAndReplacePatterns(String[] words, String pattern) {\n    List<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() != pattern.length()) continue;\n\n        Map<Character, Character> w2p = new HashMap<>();\n        Map<Character, Character> p2w = new HashMap<>();\n        boolean matches = true;\n        for (int i = 0; i < word.length(); ++i) {\n            char cWord = word.charAt(i);\n            char cPattern = pattern.charAt(i);\n\n            if (!w2p.containsKey(cWord)) w2p.put(cWord, cPattern);\n            if (!p2w.containsKey(cPattern)) p2w.put(cPattern, cWord);\n\n            if (w2p.get(cWord) != cPattern || p2w.get(cPattern) != cWord) {\n                matches = false;\n                break;\n            }\n        }\n        if (matches) result.add(word);\n    }\n    return result;\n}"
        }
    },
    "927": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <iostream>\n\nconst int MOD = 1e9 + 7;\n\nint sumOfWidths(std::vector<int>& nums) {\n    int n = nums.size();\n    std::sort(nums.begin(), nums.end());\n    long long res = 0, c = 1;\n    \n    for (int i = 0; i < n; i++, c = c * 2 % MOD)\n        res = (res + (nums[i] - nums[n - i - 1]) * c) % MOD;\n        \n    return res;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = sumOfWidths(nums);\n    std::cout << result << std::endl;\n    return 0;\n}\n"
        }
    },
    "928": {
        "call_functions": {
            "c++": "int surfaceArea(vector<vector<int>>& grid) {\n    int n = grid.size();\n    int area = 0;\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j]) {\n                area += 4 * grid[i][j] + 2;\n                if (i > 0) area -= 2 * min(grid[i][j], grid[i - 1][j]);\n                if (j > 0) area -= 2 * min(grid[i][j], grid[i][j - 1]);\n            }\n        }\n    }\n\n    return area;\n}",
            "java": "public int surfaceArea(int[][] grid) {\n    int n = grid.length;\n    int area = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] > 0) {\n                area += 4 * grid[i][j] + 2;\n                if (i > 0) area -= 2 * Math.min(grid[i][j], grid[i - 1][j]);\n                if (j > 0) area -= 2 * Math.min(grid[i][j], grid[i][j - 1]);\n            }\n        }\n    }\n\n    return area;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = surfaceArea(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = surfaceArea(grid);\n    console.log(result);\n}"
        }
    },
    "929": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    int result = numSpecialEquivalentGroups(words);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int numSpecialEquivalentGroups(String[] words) {\n    Set<String> groups = new HashSet<>();\n\n    for (String word : words) {\n        StringBuilder evens = new StringBuilder();\n        StringBuilder odds = new StringBuilder();\n\n        for (int i = 0; i < word.length(); ++i) {\n            if (i % 2 == 0) evens.append(word.charAt(i));\n            else odds.append(word.charAt(i));\n        }\n\n        char[] evenArr = evens.toString().toCharArray();\n        Arrays.sort(evenArr);\n        char[] oddArr = odds.toString().toCharArray();\n        Arrays.sort(oddArr);\n\n        groups.add(new String(evenArr) + new String(oddArr));\n    }\n\n    return groups.size();\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = num_special_equivalent_groups(words)\n    print(result)",
            "javascript": "function numSpecialEquivalentGroups(words) {\n    const groups = new Set();\n\n    for (const word of words) {\n        let evens = \"\";\n        let odds = \"\";\n\n        for (let i = 0; i < word.length; ++i) {\n            if (i % 2 === 0) evens += word[i];\n            else odds += word[i];\n        }\n\n        evens = evens.split(\"\").sort().join(\"\");\n        odds = odds.split(\"\").sort().join(\"\");\n\n        groups.add(evens + odds);\n    }\n\n    return groups.size;\n}"
        }
    },
    "931": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <map>\n#include <stack>\n\nclass FreqStack {\n    std::unordered_map<int, int> freq;\n    std::map<int, std::stack<int>> group;\n\npublic:\n    FreqStack() {}\n\n    void push(int x) {\n        int f = ++freq[x];\n        group[f].push(x);\n    }\n\n    int pop() {\n        auto& st = group.rbegin()->second;\n        int x = st.top();\n        st.pop();\n        if (st.empty()) {\n            group.erase(group.rbegin()->first);\n        }\n        --freq[x];\n        return x;\n    }\n};\n\nint main() {\n    FreqStack obj;\n    obj.push($args);\n    int result = obj.pop();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int pop() {\n        int x = group.get(group.keySet().iterator().next()).pop();\n        int f = freq.get(x) - 1;\n        freq.put(x, f);\n        \n        if (group.get(f + 1).empty()) {\n            group.remove(f + 1);\n        }\n        \n        return x;\n    }",
            "python": "if __name__ == \"__main__\":\n    stack = FreqStack()\n    stack.push(5)\n    stack.push(7)\n    stack.push(5)\n    stack.push(7)\n    stack.push(4)\n    stack.push(5)\n    result = stack.pop()\n    print(result)",
            "javascript": "class FreqStack {\n    constructor() {\n        this.freq = new Map();\n        this.group = new Map();\n    }\n\n    push(x) {\n        let f = (this.freq.get(x) || 0) + 1;\n        this.freq.set(x, f);\n        let stack = this.group.get(f) || [];\n        stack.push(x);\n        this.group.set(f, stack);\n    }\n\n    pop() {\n        let maxFreq = Math.max(...this.group.keys());\n        let stack = this.group.get(maxFreq);\n        let x = stack.pop();\n        this.freq.set(x, this.freq.get(x) - 1);\n        if (stack.length === 0) {\n            this.group.delete(maxFreq);\n        } else {\n            this.group.set(maxFreq, stack);\n        }\n        return x;\n    }\n}"
        }
    },
    "932": {
        "call_functions": {
            "c++": "bool isMonotonic(vector<int>& nums) {\n    bool increasing = true, decreasing = true;\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > nums[i - 1]) decreasing = false;\n        if (nums[i] < nums[i - 1]) increasing = false;\n    }\n    return increasing || decreasing;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    boolean result = isMonotonic(nums);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = isMonotonic(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = isMonotonic(nums);\n    console.log(result);\n}"
        }
    },
    "934": {
        "call_functions": {
            "c++": "#include <set>\n#include <vector>\n#include <iostream>\n\nint subarrayBitwiseORs(std::vector<int>& arr) {\n    std::set<int> result, current, temp;\n    for (int num : arr) {\n        temp = {num};\n        for (int c : current) {\n            temp.insert(num | c);\n        }\n        current = std::move(temp);\n        result.insert(current.begin(), current.end());\n    }\n    return result.size();\n}\n\nint main() {\n    std::vector<int> arr = $args;\n    int result = subarrayBitwiseORs(arr);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int subarrayBitwiseORs(int[] arr) {\n    Set<Integer> result = new HashSet<>(), current, temp;\n    for (int num : arr) {\n        temp = new HashSet<>();\n        temp.add(num);\n        for (int c : current) {\n            temp.add(num | c);\n        }\n        current = temp;\n        result.addAll(current);\n    }\n    return result.size();\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = subarrayBitwiseORs(arr)\n    print(result)",
            "javascript": "function subarrayBitwiseORs(arr) {\n    const result = subarrayBitwiseORs(arr);\n    console.log(result);\n}"
        }
    },
    "935": {
        "call_functions": {
            "c++": "#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args[0];\n    int k = $args[1];\n    string result = lex_smallest_string(s, k);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "938": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    vector<int> digits = {1, 2, 3, 4, 5};\n    int n = $args;\n    int result = num_digits_less_than_n(digits, n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "939": {
        "call_functions": {
            "c++": "#include <vector>\n#define MOD 1000000007\n\nint main() {\n    std::string s = $args;\n    int result = findValidPermutations(s);\n    return result;\n}",
            "java": "public int findValidPermutations(String s) {\n    int n = s.length();\n    long[] dp = new long[n + 2];\n    dp[0] = 1;\n    int MOD = 1000000007;\n\n    for (char c : s.toCharArray()) {\n        long[] new_dp = new long[n + 2];\n        if (c == 'I') {\n            for (int i = 0; i < n; ++i) {\n                new_dp[i + 1] = (new_dp[i + 1] + dp[i]) % MOD;\n            }\n        } else {\n            for (int i = n - 1; i >= 0; --i) {\n                new_dp[i] = (new_dp[i + 1] + dp[i + 1]) % MOD;\n            }\n        }\n        dp = new_dp;\n    }\n    return (int) dp[0];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = find_valid_permutations(s)\n    print(result)",
            "javascript": "function findValidPermutations(s) {\n    const n = s.length;\n    const MOD = 1000000007;\n    let dp = new Array(n + 2).fill(0);\n    dp[0] = 1;\n\n    for (const c of s) {\n        let new_dp = new Array(n + 2).fill(0);\n        if (c === 'I') {\n            for (let i = 0; i < n; ++i) {\n                new_dp[i + 1] = (new_dp[i + 1] + dp[i]) % MOD;\n            }\n        } else {\n            for (let i = n - 1; i >= 0; --i) {\n                new_dp[i] = (new_dp[i + 1] + dp[i + 1]) % MOD;\n            }\n        }\n        dp = new_dp;\n    }\n    return dp[0];\n}"
        }
    },
    "940": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nint totalFruit(vector<int>& fruits) {\n    int left = 0, right = 0, max_count = 0, n = fruits.size();\n    unordered_map<int, int> count;\n\n    while (right < n) {\n        count[fruits[right]]++;\n        while (count.size() > 2) {\n            count[fruits[left]]--;\n            if (count[fruits[left]] == 0) {\n                count.erase(fruits[left]);\n            }\n            left++;\n        }\n        max_count = max(max_count, right - left + 1);\n        right++;\n    }\n    return max_count;\n}\n\nint main() {\n    vector<int> fruits = $args;\n    int result = totalFruit(fruits);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int totalFruit(int[] fruits) {\n    int left = 0, right = 0, max_count = 0, n = fruits.length;\n    HashMap<Integer, Integer> count = new HashMap<>();\n\n    while (right < n) {\n        count.put(fruits[right], count.getOrDefault(fruits[right], 0) + 1);\n        while (count.size() > 2) {\n            count.put(fruits[left], count.get(fruits[left]) - 1);\n            if (count.get(fruits[left]) == 0) {\n                count.remove(fruits[left]);\n            }\n            left++;\n        }\n        max_count = Math.max(max_count, right - left + 1);\n        right++;\n    }\n    return max_count;\n}",
            "python": "if __name__ == \"__main__\":\n    fruits = $args[0]\n    result = totalFruit(fruits)\n    print(result)",
            "javascript": "function totalFruit(fruits) {\n    let left = 0, right = 0, max_count = 0;\n    const count = new Map();\n\n    while (right < fruits.length) {\n        count.set(fruits[right], (count.get(fruits[right]) || 0) + 1);\n        while (count.size > 2) {\n            count.set(fruits[left], count.get(fruits[left]) - 1);\n            if (count.get(fruits[left]) === 0) {\n                count.delete(fruits[left]);\n            }\n            left++;\n        }\n        max_count = Math.max(max_count, right - left + 1);\n        right++;\n    }\n    return max_count;\n}"
        }
    },
    "941": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    moveEvenOdd(nums);\n    for (int num : nums) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public void moveEvenOdd(int[] nums) {\n    int evenIndex = 0;\n    int oddIndex = nums.length - 1;\n\n    while (evenIndex < oddIndex) {\n        if (nums[evenIndex] % 2 == 0) {\n            evenIndex++;\n        } else {\n            int temp = nums[evenIndex];\n            nums[evenIndex] = nums[oddIndex];\n            nums[oddIndex] = temp;\n            oddIndex--;\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = move_even_odd(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    moveEvenOdd(nums);\n    console.log(nums);\n}"
        }
    },
    "942": {
        "call_functions": {
            "c++": "int main() {\n    string left = $args;\n    string right = $args;\n    int result = superpalindromesInRange(left, right);\n    cout << result << endl;\n    return 0;\n}",
            "java": "int superpalindromesInRange(String left, String right) {\n    long l = Long.parseLong(left);\n    long r = Long.parseLong(right);\n    int cnt = 0;\n    for (long base = 1; base * base <= r; ++base) {\n        if (isPalindrome(base) && isPalindrome(base * base)) {\n            if (base * base >= l) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}",
            "python": "if __name__ == \"__main__\":\n    left = $args[0]\n    right = $args[1]\n    result = superpalindromesInRange(left, right)\n    print(result)",
            "javascript": "function superpalindromesInRange(left, right) {\n    const l = parseInt(left);\n    const r = parseInt(right);\n    let cnt = 0;\n    for (let base = 1; base * base <= r; ++base) {\n        if (isPalindrome(base) && isPalindrome(base * base)) {\n            if (base * base >= l) {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n}"
        }
    },
    "943": {
        "call_functions": {
            "c++": "int sumOfMins(vector<int>& arr) {\n    int mod = 1e9 + 7;\n    int n = arr.size();\n    vector<int> left(n), right(n);\n    stack<int> st;\n\n    for (int i = 0; i < n; i++) {\n        while (!st.empty() && arr[st.top()] > arr[i]) {\n            st.pop();\n        }\n        left[i] = st.empty() ? -1 : st.top();\n        st.push(i);\n    }\n\n    while (!st.empty()) st.pop();\n    for (int i = n - 1; i >= 0; i--) {\n        while (!st.empty() && arr[st.top()] > arr[i]) {\n            st.pop();\n        }\n        right[i] = st.empty() ? n : st.top();\n        st.push(i);\n    }\n\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans = (ans + arr[i] * (i - left[i]) * (right[i] - i)) % mod;\n    }\n    return ans;\n}",
            "java": "public int sumOfMins(int[] arr)",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = sum_of_mins(arr)\n    print(result)",
            "javascript": "function sumOfMins(arr) {\n    let mod = 1e9 + 7;\n    let n = arr.length;\n    let left = new Array(n), right = new Array(n);\n    let st = [];\n\n    for (let i = 0; i < n; i++) {\n        while (st.length && arr[st[st.length - 1]] > arr[i]) {\n            st.pop();\n        }\n        left[i] = st.length === 0 ? -1 : st[st.length - 1];\n        st.push(i);\n    }\n\n    st = [];\n    for (let i = n - 1; i >= 0; i--) {\n        while (st.length && arr[st[st.length - 1]] > arr[i]) {\n            st.pop();\n        }\n        right[i] = st.length === 0 ? n : st[st.length - 1];\n        st.push(i);\n    }\n\n    let ans = 0;\n    for (let i = 0; i < n; i++) {\n        ans = (ans + arr[i] * (i - left[i]) * (right[i] - i)) % mod;\n    }\n    return ans;\n}"
        }
    },
    "944": {
        "call_functions": {
            "c++": "int minDifference(vector<int>& nums, int k) {\n    if(nums.size() <= 1) return 0;\n    sort(nums.begin(), nums.end());\n    int min_diff = nums.back() - nums.front();\n    for(int i=1; i<nums.size(); i++) {\n        int high = max(nums[i-1] + k, nums.back() - k);\n        int low = min(nums[i] - k, nums.front() + k);\n        min_diff = min(min_diff, high - low);\n    }\n    return min_diff;\n}",
            "java": "public int minDifference(int[] nums, int k) {\n    if(nums.length <= 1) return 0;\n    Arrays.sort(nums);\n    int min_diff = nums[nums.length - 1] - nums[0];\n    for(int i = 1; i < nums.length; i++) {\n        int high = Math.max(nums[i - 1] + k, nums[nums.length - 1] - k);\n        int low = Math.min(nums[i] - k, nums[0] + k);\n        min_diff = Math.min(min_diff, high - low);\n    }\n    return min_diff;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = minDifference(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = minDifference(nums, k);\n    console.log(result);\n}"
        }
    },
    "945": {
        "call_functions": {
            "c++": "int snakesAndLadders(vector<vector<int>> &board) {\n    int n = board.size();\n    auto getRowCol = [&](int x) {\n        int r = (x - 1) / n, c = (x - 1) % n;\n        if (r % 2) c = n - 1 - c;\n        return make_pair(n - 1 - r, c);\n    };\n\n    vector<bool> visited(n * n + 1, false);\n    queue<pair<int, int>> q;\n    q.push({1, 0});\n    visited[1] = true;\n\n    while (!q.empty()) {\n        auto cur = q.front(); q.pop();\n        int x = cur.first;\n        int steps = cur.second;\n        for (int jump = 1; jump <= 6; jump++) {\n            int next_x = x + jump;\n            if (next_x > n * n) break;\n            auto nextRC = getRowCol(next_x);\n            if (board[nextRC.first][nextRC.second] != -1) {\n                next_x = board[nextRC.first][nextRC.second];\n            }\n            if (next_x == n * n) return steps + 1;\n            if (!visited[next_x]) {\n                visited[next_x] = true;\n                q.push({next_x, steps + 1});\n            }\n        }\n    }\n    return -1;\n}",
            "java": "public int snakesAndLadders(int[][] board) {\n    int n = board.length;\n    int[] flattenedBoard = new int[n * n + 1];\n    boolean isRight = true;\n    int idx = 1;\n    for (int i = n - 1; i >= 0; i--) {\n        if (isRight) {\n            for (int j = 0; j < n; j++) {\n                flattenedBoard[idx++] = board[i][j];\n            }\n        } else {\n            for (int j = n - 1; j >= 0; j--) {\n                flattenedBoard[idx++] = board[i][j];\n            }\n        }\n        isRight = !isRight;\n    }\n\n    int[] moves = new int[n * n + 1];\n    Arrays.fill(moves, -1);\n    moves[1] = 0;\n    for (int i = 0; i < moves.length; i++) {\n        if (moves[i] != -1) {\n            for (int j = 1; j <= 6 && i + j < moves.length; j++) {\n                int nextPos = i + j;\n                int value = flattenedBoard[nextPos];\n                if (value == -1) {\n                    value = nextPos;\n                }\n                if (moves[value] == -1) {\n                    moves[value] = moves[i] + 1;\n                }\n            }\n        }\n    }\n    return moves[n * n];\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = snakesAndLadders(board)\n    print(result)",
            "javascript": "function main() {\n  const board = $args;\n  const result = snakesAndLadders(board);\n  console.log(result);\n}"
        }
    },
    "946": {
        "call_functions": {
            "c++": "int minimumScore(vector<int>& nums, int k) {\n    sort(nums.begin(), nums.end());\n    int n = nums.size();\n    int res = nums[n - 1] - nums[0];\n    \n    for (int i = 0; i < n - 1; ++i) {\n        int high = max(nums[i] + k, nums[n - 1] - k);\n        int low = min(nums[i + 1] - k, nums[0] + k);\n        res = min(res, high - low);\n    }\n    \n    return res;\n}"
        }
    },
    "947": {
        "call_functions": {
            "c++": "#include <vector>\n#include <map>\nusing namespace std;\n\nint main() {\n    vector<int> persons = $args;\n    vector<int> times = $args;\n    TopVotedCandidate obj(persons, times);\n    int t = $args;\n    int result = obj.q(t);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public TopVotedCandidate(int[] persons, int[] times) {\n        leaderMap = new TreeMap<>();\n        Map<Integer, Integer> votes = new HashMap<>();\n        int leader = -1;\n        for (int i = 0; i < times.length; i++) {\n            votes.put(persons[i], votes.getOrDefault(persons[i], 0) + 1);\n            if (votes.get(persons[i]) >= votes.getOrDefault(leader, 0)) {\n                leader = persons[i];\n            }\n            leaderMap.put(times[i], leader);\n        }\n    }\n\n    public int q(int t) {\n        return leaderMap.floorEntry(t).getValue();\n    }",
            "python": "if __name__ == \"__main__\":\n    persons = $args[0]\n    times = $args[1]\n    obj = TopVotedCandidate(persons, times)\n    t = $args[2]\n    result = obj.q(t)\n    print(result)",
            "javascript": "function main() {\n    const persons = $args[0];\n    const times = $args[1];\n    const obj = new TopVotedCandidate(persons, times);\n    const t = $args[2];\n    const result = obj.q(t);\n    console.log(result);\n}"
        }
    },
    "948": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid sortArray(std::vector<int>& nums) {\n    std::sort(nums.begin(), nums.end());\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    sortArray(nums);\n    for (int num : nums) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public void sortArray(int[] nums) {\n    Arrays.sort(nums);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = sortArray(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    sortArray(nums);\n    console.log(nums);\n}"
        }
    },
    "949": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <tuple>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> graph = $args;\n    int result = catMouseGame(graph);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    result = catMouseGame(graph)\n    print(result)",
            "javascript": "function catMouseGame(graph) {\n    const n = graph.length;\n    const status = [...Array(n)].map(() => [...Array(n)].map(() => Array(3).fill(-1)));\n    const queue = [];\n    \n    for (let i = 1; i < n; ++i) {\n        status[i][i][1] = 2;\n        status[i][i][2] = 2;\n        queue.push([i, i, 2, 2]);\n        queue.push([i, i, 1, 2]);\n    }\n\n    while (queue.length) {\n        const [pos_m, pos_c, t_type, t_result] = queue.shift();\n\n        for (const prev of t_type === 1 ? graph[pos_m] : graph[pos_c]) {\n            if ((t_type === 2 && prev === 0) || (t_result === 2 && status[prev][pos_c][3 - t_type] !== -1)) continue;\n            if (status[prev][pos_c][3 - t_type] !== -1) continue;\n            queue.push([pos_c, prev, 3 - t_type, 3 - t_result]);\n            status[prev][pos_c][3 - t_type] = 3 - t_result;\n        }\n    }\n    return status[1][2][1];\n}"
        }
    },
    "950": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nbool hasGroupsSizeX(vector<int>& deck) {\n    unordered_map<int, int> counts;\n    for (int card : deck) {\n        counts[card]++;\n    }\n    int gcd_result = 0;\n    for (auto& count : counts) {\n        gcd_result = gcd(gcd_result, count.second);\n    }\n    return gcd_result > 1;\n}\n\nint main() {\n    vector<int> deck = $args;\n    bool result = hasGroupsSizeX(deck);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean hasGroupsSizeX(int[] deck) {\n        HashMap<Integer, Integer> counts = new HashMap<>();\n        for (int card : deck) {\n            counts.put(card, counts.getOrDefault(card, 0) + 1);\n        }\n        int gcd_result = 0;\n        for (Map.Entry<Integer, Integer> count : counts.entrySet()) {\n            gcd_result = gcd(gcd_result, count.getValue());\n        }\n        return gcd_result > 1;\n    }",
            "python": "if __name__ == \"__main__\":\n    deck = $args[0]\n    result = hasGroupsSizeX(deck)\n    print(result)",
            "javascript": "function hasGroupsSizeX(deck) {\n   const counts = {};\n   for (const card of deck) {\n       if (card in counts) {\n           counts[card]++;\n       } else {\n           counts[card] = 1;\n       }\n   }\n   let gcd_result = 0;\n   for (const count in counts) {\n       gcd_result = gcd(gcd_result, counts[count]);\n   }\n   return gcd_result > 1;\n}"
        }
    },
    "951": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int result = partitionDisjoint(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int partitionDisjoint(int[] nums) {\n    int leftMax = nums[0], globalMax = nums[0], leftLength = 1;\n    for (int i = 1; i < nums.length; ++i) {\n        if (nums[i] < leftMax) {\n            leftMax = globalMax;\n            leftLength = i + 1;\n        } else {\n            globalMax = Math.max(globalMax, nums[i]);\n        }\n    }\n    return leftLength;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = partitionDisjoint(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = partitionDisjoint(nums);\n    console.log(result);\n}"
        }
    },
    "952": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nstd::vector<std::string> wordSubsets(std::vector<std::string>& words1, std::vector<std::string>& words2) {\n    std::unordered_map<char, int> max_chars;\n    for (const auto& word : words2) {\n        std::unordered_map<char, int> chars;\n        for (char c : word) {\n            chars[c]++;\n        }\n        for (const auto& entry : chars) {\n            max_chars[entry.first] = std::max(max_chars[entry.first], entry.second);\n        }\n    }\n\n    std::vector<std::string> result;\n    for (const auto& word : words1) {\n        std::unordered_map<char, int> word_chars;\n        for (char c : word) {\n            word_chars[c]++;\n        }\n\n        bool universal = true;\n        for (const auto& entry : max_chars) {\n            if (word_chars[entry.first] < entry.second) {\n                universal = false;\n                break;\n            }\n        }\n\n        if (universal) {\n            result.push_back(word);\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<std::string> words1 = $args;\n    std::vector<std::string> words2 = {\"subset1\", \"subset2\", \"subset3\"};\n    std::vector<std::string> result = wordSubsets(words1, words2);\n    for (const auto& word : result) {\n        std::cout << word << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}\n",
            "java": "public List<String> wordSubsets(String[] words1, String[] words2) {\n    Map<Character, Integer> maxChars = new HashMap<>();\n    for (String word : words2) {\n        Map<Character, Integer> chars = new HashMap<>();\n        for (char c : word.toCharArray()) {\n            chars.put(c, chars.getOrDefault(c, 0) + 1);\n        }\n        for (Map.Entry<Character, Integer> entry : chars.entrySet()) {\n            maxChars.put(entry.getKey(), Math.max(maxChars.getOrDefault(entry.getKey(), 0), entry.getValue()));\n        }\n    }\n\n    List<String> result = new ArrayList<>();\n    for (String word : words1) {\n        Map<Character, Integer> wordChars = new HashMap<>();\n        for (char c : word.toCharArray()) {\n            wordChars.put(c, wordChars.getOrDefault(c, 0) + 1);\n        }\n\n        boolean universal = true;\n        for (Map.Entry<Character, Integer> entry : maxChars.entrySet()) {\n            if (wordChars.getOrDefault(entry.getKey(), 0) < entry.getValue()) {\n                universal = false;\n                break;\n            }\n        }\n\n        if (universal) {\n            result.add(word);\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    words1 = $args[0]\n    words2 = $args[1]\n    result = word_subsets(words1, words2)\n    print(result)",
            "javascript": "function wordSubsets(words1, words2) {\n    const maxChars = {};\n    for (const word of words2) {\n        const chars = {};\n        for (const c of word) {\n            chars[c] = (chars[c] || 0) + 1;\n        }\n        for (const c in chars) {\n            maxChars[c] = Math.max(maxChars[c] || 0, chars[c]);\n        }\n    }\n\n    const result = [];\n    for (const word of words1) {\n        const wordChars = {};\n        for (const c of word) {\n            wordChars[c] = (wordChars[c] || 0) + 1;\n        }\n\n        let universal = true;\n        for (const c in maxChars) {\n            if ((wordChars[c] || 0) < maxChars[c]) {\n                universal = false;\n                break;\n            }\n        }\n\n        if (universal) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}"
        }
    },
    "953": {
        "call_functions": {
            "c++": "#include <string>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::string result = reverseString(s);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String reverseString(String s) {\n    StringBuilder result = new StringBuilder(s);\n    return result.reverse().toString();\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = reverse_string(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = reverseString(s);\n    console.log(result);\n}\n"
        }
    },
    "954": {
        "call_functions": {
            "c++": "bool canReorderDoubled(vector<int>& arr) {\n    map<int, int> count;\n    for (int a : arr) {\n        count[a]++;\n    }\n    \n    for (const auto& [a, c] : count) {\n        if (c > 0) {\n            int target = a < 0 ? a / 2 : a * 2;\n            if (count[target] < c) return false;\n            count[target] -= c;\n        }\n    }\n\n    return true;\n}",
            "java": "public boolean canReorderDoubled(int[] arr) {\n    Map<Integer, Integer> count = new TreeMap<>();\n    for (int a : arr) {\n        count.put(a, count.getOrDefault(a, 0) + 1);\n    }\n    \n    for (int a : count.keySet()) {\n        if (count.get(a) > 0) {\n            int target = a < 0 ? a / 2 : a * 2;\n            if (count.getOrDefault(target, 0) < count.get(a)) return false;\n            count.put(target, count.get(target) - count.get(a));\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = canReorderDoubled(arr)\n    print(result)",
            "javascript": "function main() {\n    const arr = $args;\n    const result = canReorderDoubled(arr);\n    console.log(result);\n}"
        }
    },
    "955": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    TreeNode* root = new TreeNode($args);\n    CBTInserter* obj = new CBTInserter(root);\n    int param_1 = obj->insert($args);\n    TreeNode* param_2 = obj->get_root();\n    cout << param_1 << endl;\n    return 0;\n}",
            "java": "public int insert(int v) {\n        TreeNode newNode = new TreeNode(v);\n        TreeNode parentNode = q.peek();\n        if (parentNode.left == null) {\n            parentNode.left = newNode;\n        } else {\n            parentNode.right = newNode;\n            q.add(parentNode.left);\n            q.add(parentNode.right);\n            q.poll();\n        }\n        return parentNode.val;\n    }",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    obj = CBTInserter(root)\n    param_1 = obj.insert($args[1])\n    param_2 = obj.get_root()\n    print(param_1)\n    print(param_2)",
            "javascript": "function main() {\n    const root = new TreeNode(1);\n    const cbtInserter = new CBTInserter(root);\n    const v = $args;\n    const result = cbtInserter.insert(v);\n    console.log(result);\n}"
        }
    },
    "956": {
        "call_functions": {
            "c++": "#include <vector>\n#define MOD 1000000007\n\nint main() {\n    int n = $args;\n    int goal = $args;\n    int k = $args;\n    int result = numMusicPlaylists(n, goal, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numMusicPlaylists(int n, int goal, int k) {\n    long MOD = 1000000007;\n    long[][] dp = new long[goal + 1][n + 1];\n    dp[0][0] = 1;\n    for (int i = 1; i <= goal; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = (dp[i - 1][j - 1] * (n - (j - 1)) % MOD + dp[i - 1][j] * Math.max(0, j - k) % MOD) % MOD;\n        }\n    }\n    return (int) dp[goal][n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    goal = $args[1]\n    k = $args[2]\n    result = numMusicPlaylists(n, goal, k)\n    print(result)",
            "javascript": "function numMusicPlaylists(n, goal, k) {\n    const MOD = 1_000_000_007;\n    const dp = Array.from({ length: goal + 1 }, () => Array.from({ length: n + 1 }, () => 0));\n    dp[0][0] = 1;\n    for (let i = 1; i <= goal; i++) {\n        for (let j = 1; j <= n; j++) {\n            dp[i][j] = ((dp[i - 1][j - 1] * (n - (j - 1))) % MOD + (dp[i - 1][j] * Math.max(0, j - k)) % MOD) % MOD;\n        }\n    }\n    return dp[goal][n];\n}"
        }
    },
    "957": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = minAddToMakeValid(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minAddToMakeValid(String s) {\n    int result = 0, balance = 0;\n    for (char c : s.toCharArray()) {\n        balance += (c == '(') ? 1 : -1;\n        if (balance == -1) {\n            result++;\n            balance++;\n        }\n    }\n    return result + balance;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = minAddToMakeValid(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = minAddToMakeValid(s);\n    console.log(result);\n}"
        }
    },
    "958": {
        "call_functions": {
            "c++": "vector<int> sortArrayByParityII(vector<int>& nums) {\n    int j = 1;\n    for (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2) {\n            while (nums[j] % 2) {\n                j += 2;\n            }\n            swap(nums[i], nums[j]);\n        }\n    }\n    return nums;\n}",
            "java": "public int[] sortArrayByParityII(int[] nums) {\n    int j = 1;\n    for (int i = 0; i < nums.length; i += 2) {\n        if (nums[i] % 2 != 0) {\n            while (nums[j] % 2 != 0) {\n                j += 2;\n            }\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n        }\n    }\n    return nums;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = sortArrayByParityII(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = sortArrayByParityII(nums);\n    console.log(result);\n}"
        }
    },
    "959": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> arr = $args;\n    int target = $args;\n    int result = threeSumMulti(arr, target);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int threeSumMulti(int[] arr, int target) {\n    int MOD = 1000000007;\n    long ans = 0;\n\n    Arrays.sort(arr);\n    int n = arr.length;\n\n    for (int i = 0; i < n - 2; ++i) {\n        int j = i + 1, k = n - 1;\n        while (j < k) {\n            int sum = arr[i] + arr[j] + arr[k];\n            if (sum > target) {\n                k--;\n            } else if (sum < target) {\n                j++;\n            } else {\n                if (arr[j] != arr[k]) {\n                    int left_count = 1, right_count = 1;\n\n                    while (j < n-1 && arr[j] == arr[j + 1]){\n                        left_count++; \n                        j++;\n                    }\n                    while (k > 0 && arr[k] == arr[k - 1]){\n                        right_count++;\n                        k--;\n                    }\n\n                    ans += (long) left_count * right_count;\n                    ans %= MOD;\n                    j++; k--;\n                } else {\n                    ans += (long) (k - j + 1) * (k - j) / 2;\n                    ans %= MOD;\n                    break;\n                }\n            }\n        }\n    }\n\n    return (int) ans;\n}",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    target = $args[1]\n    result = threeSumMulti(arr, target)\n    print(result)",
            "javascript": "function threeSumMulti(arr, target) {\n    const MOD = 1000000007;\n    let ans = 0;\n\n    arr.sort((a, b) => a - b);\n    const n = arr.length;\n\n    for (let i = 0; i < n - 2; ++i) {\n        let j = i + 1, k = n - 1;\n        while (j < k) {\n            const sum = arr[i] + arr[j] + arr[k];\n            if (sum > target) {\n                k--;\n            } else if (sum < target) {\n                j++;\n            } else {\n                if (arr[j] !== arr[k]) {\n                    let left_count = 1, right_count = 1;\n\n                    while (j < n - 1 && arr[j] === arr[j + 1]){\n                        left_count++; \n                        j++;\n                    }\n                    while (k > 0 && arr[k] === arr[k - 1]){\n                        right_count++;\n                        k--;\n                    }\n\n                    ans += left_count * right_count;\n                    ans %= MOD;\n                    j++; k--;\n                } else {\n                    ans += (k - j + 1) * (k - j) / 2;\n                    ans %= MOD;\n                    break;\n                }\n            }\n        }\n    }\n\n    return ans;\n}"
        }
    },
    "960": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_set>\n#include <queue>\n\nint main() {\n    std::vector<std::vector<int>> graph = $args;\n    std::vector<int> initial = $args;\n    int result = minMalwareSpread(graph, initial);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    initial = $args[1]\n    result = minMalwareSpread(graph, initial)\n    print(result)",
            "javascript": "function minMalwareSpread(graph, initial) {\n    const n = graph.length;\n    initial.sort((a, b) => a - b);\n    \n    const malware = new Set(initial);\n    \n    let minNode = initial[0];\n    let minSpread = n + 1;\n\n    for (const node of initial) {\n        const q = [];\n        const visited = new Array(n).fill(false);\n\n        for (const otherNode of initial) {\n            if (node !== otherNode) {\n                q.push(otherNode);\n                visited[otherNode] = true;\n            }\n        }\n\n        while (q.length) {\n            const cur = q.shift();\n            for (let next = 0; next < n; ++next) {\n                if (graph[cur][next] === 1 && !visited[next] && !malware.has(next)) {\n                    visited[next] = true;\n                    q.push(next);\n                }\n            }\n        }\n        \n        const spread = visited.reduce((acc, v) => acc + (v ? 1 : 0), 0);\n\n        if (spread < minSpread) {\n            minNode = node;\n            minSpread = spread;\n        }\n    }\n    \n    return minNode;\n}"
        }
    },
    "961": {
        "call_functions": {
            "c++": "bool isLongPressedName(string name, string typed) {\n    int i = 0, j = 0;\n    while (j < typed.length()) {\n        if (i < name.length() && name[i] == typed[j]) {\n            i++;\n        } else if (j == 0 || typed[j] != typed[j - 1]) {\n            return false;\n        }\n        j++;\n    }\n    return i == name.length();\n}",
            "java": "public static boolean isLongPressedName(String name, String typed) {\n    int i = 0, j = 0;\n    while (j < typed.length()) {\n        if (i < name.length() && name.charAt(i) == typed.charAt(j)) {\n            i++;\n        } else if (j == 0 || typed.charAt(j) != typed.charAt(j - 1)) {\n            return false;\n        }\n        j++;\n    }\n    return i == name.length();\n}",
            "python": "if __name__ == \"__main__\":\n    name = $args[0]\n    typed = $args[1]\n    result = isLongPressedName(name, typed)\n    print(result)",
            "javascript": "function main() {\n    const name = $args[0];\n    const typed = $args[1];\n    const result = isLongPressedName(name, typed);\n    console.log(result);\n}"
        }
    },
    "962": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = minFlipsMonoIncr(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minFlipsMonoIncr(String s) {\n    int flipCount = 0, oneCount = 0;\n    for (char c : s.toCharArray()) {\n        if (c == '1') {\n            oneCount++;\n        } else {\n            flipCount = Math.min(flipCount + 1, oneCount);\n        }\n    }\n    return flipCount;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = minFlipsMonoIncr(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = minFlipsMonoIncr(s);\n    console.log(result);\n}"
        }
    },
    "963": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<int> find_same_binary_value_parts(const std::vector<int>& arr);\n\nint main() {\n    std::vector<int> arr = $args;\n    std::vector<int> result = find_same_binary_value_parts(arr);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] findSameBinaryValueParts(int[] arr)",
            "python": "if __name__ == \"__main__\":\n    arr = $args[0]\n    result = find_same_binary_value_parts(arr)\n    print(result)",
            "javascript": "function findSameBinaryValueParts(arr) {\n    const ones = arr.reduce((sum, n) => sum + n, 0);\n\n    if (ones % 3 !== 0) return [-1, -1];\n\n    const target = Math.floor(ones / 3);\n    if (target === 0) return [0, arr.length - 2];\n\n    let count = 0, i = -1, j = -1;\n    let onesCount = 0;\n    for (let idx = 0; idx < arr.length; ++idx) {\n        if (arr[idx] === 1) {\n            onesCount++;\n            if (onesCount === target + 1) count++;\n            if (count === 1 && i === -1) i = idx;\n            if (count === 2 && j === -1) j = idx;\n            if (count === 3) break;\n        }\n    }\n\n    return [i, j];\n}"
        }
    },
    "964": {
        "call_functions": {
            "c++": "int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {\n    int n = graph.size(), res = 0, minSize = INT_MAX;\n    vector<int> color(n, -1);\n    int colors = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (color[i] == -1) {\n            queue<int> q;\n            q.push(i);\n            color[i] = colors;\n\n            while (!q.empty()) {\n                int t = q.front(); q.pop();\n                for (int j = 0; j < n; ++j) {\n                    if (graph[t][j] == 1 && color[j] == -1) {\n                        q.push(j);\n                        color[j] = colors;\n                    }\n                }\n            }\n            ++colors;\n        }\n    }\n\n    vector<int> area(colors, 0), count(colors, 0);\n    set<int> initiallyInfected(initial.begin(), initial.end());\n    for (int i = 0; i < n; ++i) {\n        ++area[color[i]];\n        if (initiallyInfected.count(i)) {\n            ++count[color[i]];\n        }\n    }\n\n    for (int i : initial) {\n        if (count[color[i]] == 1) {\n            if (area[color[i]] < minSize) {\n                minSize = area[color[i]];\n                res = i;\n            } else if (area[color[i]] == minSize && i < res) {\n                res = i;\n            }\n        }\n    }\n\n    return res;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    graph = $args[0]\n    initial = $args[1]\n    result = minMalwareSpread(graph, initial)\n    print(result)",
            "javascript": "function minMalwareSpread(graph, initial) {\n    const n = graph.length;\n    const color = new Array(n).fill(-1);\n    let colors = 0;\n\n    for (let i = 0; i < n; ++i) {\n        if (color[i] === -1) {\n            const q = [i];\n            color[i] = colors;\n\n            while (q.length) {\n                const t = q.shift();\n                for (let j = 0; j < n; ++j) {\n                    if (graph[t][j] === 1 && color[j] === -1) {\n                        q.push(j);\n                        color[j] = colors;\n                    }\n                }\n            }\n            ++colors;\n        }\n    }\n\n    const area = new Array(colors).fill(0);\n    const count = new Array(colors).fill(0);\n    const initiallyInfected = new Set(initial);\n\n    for (let i = 0; i < n; ++i) {\n        ++area[color[i]];\n        if (initiallyInfected.has(i)) {\n            ++count[color[i]];\n        }\n    }\n\n    let res = initial[0];\n    let minSize = n + 1;\n    for (const i of initial) {\n        if (count[color[i]] === 1) {\n            if (area[color[i]] < minSize) {\n                minSize = area[color[i]];\n                res = i;\n            } else if (area[color[i]] === minSize && i < res) {\n                res = i;\n            }\n        }\n    }\n\n    return res;\n}"
        }
    },
    "965": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <set>\n\nint main() {\n    std::vector<std::string> emails = $args;\n    int result = numUniqueEmails(emails);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int numUniqueEmails(String[] emails) {\n    Set<String> unique_emails = new HashSet<>();\n\n    for (String email : emails) {\n        String[] parts = email.split(\"@\");\n        String local_name = parts[0], domain_name = parts[1];\n\n        local_name = local_name.replaceAll(\"\\\\+\", \"@\").split(\"@\")[0];\n        local_name = local_name.replaceAll(\"\\\\.\", \"\");\n\n        unique_emails.add(local_name + \"@\" + domain_name);\n    }\n\n    return unique_emails.size();\n}",
            "python": "if __name__ == \"__main__\":\n    emails = $args[0]\n    result = num_unique_emails(emails)\n    print(result)",
            "javascript": "function main() {\n    const emails = $args;\n    const result = numUniqueEmails(emails);\n    console.log(result);\n}"
        }
    },
    "966": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nint numSubarraysWithSum(std::vector<int>& nums, int goal) {\n    std::unordered_map<int, int> prefix_sum_count = {{0, 1}};\n    int sum = 0, result = 0;\n    \n    for (const auto& num : nums) {\n        sum += num;\n        result += prefix_sum_count[sum - goal];\n        prefix_sum_count[sum]++;\n    }\n    \n    return result;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int goal = $args;\n    int result = numSubarraysWithSum(nums, goal);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int numSubarraysWithSum(int[] nums, int goal) {\n    HashMap<Integer, Integer> prefixSumCount = new HashMap<>();\n    prefixSumCount.put(0, 1);\n    int sum = 0, result = 0;\n    \n    for (int num : nums) {\n        sum += num;\n        result += prefixSumCount.getOrDefault(sum - goal, 0);\n        prefixSumCount.put(sum, prefixSumCount.getOrDefault(sum, 0) + 1);\n    }\n    \n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    goal = $args[1]\n    result = num_subarrays_with_sum(nums, goal)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const goal = $args[1];\n    const result = numSubarraysWithSum(nums, goal);\n    console.log(result);\n}"
        }
    },
    "967": {
        "call_functions": {
            "c++": "int minFallingPathSum(vector<vector<int>>& matrix) {\n    int n = matrix.size();\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            int min_val = matrix[i - 1][j];\n            if (j > 0) min_val = min(min_val, matrix[i - 1][j - 1]);\n            if (j < n - 1) min_val = min(min_val, matrix[i - 1][j + 1]);\n            matrix[i][j] += min_val;\n        }\n    }\n    return *min_element(matrix.back().begin(), matrix.back().end());\n}",
            "java": "public int minFallingPathSum(int[][] matrix) {\n    int n = matrix.length;\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            int min_val = matrix[i - 1][j];\n            if (j > 0) min_val = Math.min(min_val, matrix[i - 1][j - 1]);\n            if (j < n - 1) min_val = Math.min(min_val, matrix[i - 1][j + 1]);\n            matrix[i][j] += min_val;\n        }\n    }\n    return Arrays.stream(matrix[n - 1]).min().getAsInt();\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = minFallingPathSum(matrix)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args;\n    const result = minFallingPathSum(matrix);\n    console.log(result);\n}"
        }
    },
    "968": {
        "call_functions": {
            "c++": "vector<int> beautifulArray(int n) {\n    vector<int> result = {1};\n    while (result.size() < n) {\n        vector<int> temp;\n        for (int i : result) {\n            if (i * 2 - 1 <= n)\n                temp.push_back(i * 2 - 1);\n        }\n        for (int i : result) {\n            if (i * 2 <= n)\n                temp.push_back(i * 2);\n        }\n        result = temp;\n    }\n    return result;\n}",
            "java": "public int[] beautifulArray(int n) {\n    List<Integer> result = new ArrayList<>();\n    result.add(1);\n    while (result.size() < n) {\n        List<Integer> temp = new ArrayList<>();\n        for (int i : result) {\n            if (i * 2 - 1 <= n)\n                temp.add(i * 2 - 1);\n        }\n        for (int i : result) {\n            if (i * 2 <= n)\n                temp.add(i * 2);\n        }\n        result = temp;\n    }\n    return result.stream().mapToInt(i->i).toArray();\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = beautifulArray(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = beautifulArray(n);\n    console.log(result);\n}"
        }
    },
    "969": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    RecentCounter obj;\n    int t = $args;\n    int result = obj.ping(t);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int ping(int t) {\n        requests.add(t);\n        while (requests.peek() < t - 3000) {\n            requests.poll();\n        }\n        return requests.size();\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = RecentCounter()\n    result = obj.ping($args[0])\n    print(result)",
            "javascript": "function main() {\n    const recentCounter = new RecentCounter();\n    const t = $args;\n    const result = recentCounter.ping(t);\n    console.log(result);\n}"
        }
    },
    "970": {
        "call_functions": {
            "c++": "#include <vector>\n#include <cmath>\n#include <set>\n#include <iostream>\n\nstd::vector<int> powerfulIntegers(int x, int y, int bound);\n\nint main() {\n    int x = $args;\n    int y = $args;\n    int bound = $args;\n    std::vector<int> result = powerfulIntegers(x, y, bound);\n    \n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public List<Integer> powerfulIntegers(int x, int y, int bound) {\n    int max_i = x == 1 ? 0 : (int) (Math.log(bound) / Math.log(x));\n    int max_j = y == 1 ? 0 : (int) (Math.log(bound) / Math.log(y));\n    HashSet<Integer> resultSet = new HashSet<>();\n    \n    for (int i = 0; i <= max_i; i++) {\n        for (int j = 0; j <= max_j; j++) {\n            int powerfulNum = (int) (Math.pow(x, i) + Math.pow(y, j));\n            if (powerfulNum <= bound) {\n                resultSet.add(powerfulNum);\n            }\n        }\n    }\n    \n    return new ArrayList<>(resultSet);\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args[0]\n    y = $args[1]\n    bound = $args[2]\n    result = powerfulIntegers(x, y, bound)\n    print(result)",
            "javascript": "function powerfulIntegers(x, y, bound) {\n    const max_i = x === 1 ? 0 : Math.floor(Math.log(bound) / Math.log(x));\n    const max_j = y === 1 ? 0 : Math.floor(Math.log(bound) / Math.log(y));\n    const resultSet = new Set();\n    \n    for (let i = 0; i <= max_i; i++) {\n        for (let j = 0; j <= max_j; j++) {\n            const powerfulNum = Math.pow(x, i) + Math.pow(y, j);\n            if (powerfulNum <= bound) {\n                resultSet.add(powerfulNum);\n            }\n        }\n    }\n    \n    return Array.from(resultSet);\n}"
        }
    },
    "971": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<int>> grid = $args;\n    int result = shortestBridge(grid);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int shortestBridge(int[][] grid) {\n    int n = grid.length;\n    Queue<int[]> q = new LinkedList<>();\n    boolean[][] visited = new boolean[n][n];\n    boolean found = false;\n\n    for (int i = 0; i < n && !found; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                dfs(grid, q, visited, i, j);\n                found = true;\n                break;\n            }\n        }\n    }\n\n    int steps = 0;\n    int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n\n    while (!q.isEmpty()) {\n        int size = q.size();\n        for (int i = 0; i < size; i++) {\n            int[] coord = q.poll();\n            for (int[] d : dirs) {\n                int newx = coord[0] + d[0];\n                int newy = coord[1] + d[1];\n\n                if (newx >= 0 && newx < n && newy >= 0 && newy < n && !visited[newx][newy]) {\n                    if (grid[newx][newy] == 1) return steps;\n                    visited[newx][newy] = true;\n                    q.add(new int[]{newx, newy});\n                }\n            }\n        }\n        steps++;\n    }\n\n    return -1;\n}\n\nprivate void dfs(int[][] grid, Queue<int[]> q, boolean[][] visited, int x, int y) {\n    int n = grid.length;\n\n    if (x < 0 || x >= n || y < 0 || y >= n || visited[x][y] || grid[x][y] == 0) return;\n\n    visited[x][y] = true;\n    q.add(new int[]{x, y});\n    dfs(grid, q, visited, x - 1, y);\n    dfs(grid, q, visited, x + 1, y);\n    dfs(grid, q, visited, x, y - 1);\n    dfs(grid, q, visited, x, y + 1);\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = shortestBridge(grid)\n    print(result)",
            "javascript": "function shortestBridge(grid) {\n    const n = grid.length;\n    const q = [];\n\n    loop:\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                dfs(grid, q, i, j);\n                break loop;\n            }\n        }\n    }\n\n    let steps = 0;\n    const directions = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n\n    while (q.length) {\n        const size = q.length;\n        for (let i = 0; i < size; i++) {\n            const [x, y] = q.shift();\n            for (const [dx, dy] of directions) {\n                const nx = x + dx, ny = y + dy;\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] !== 2) {\n                    if (grid[nx][ny] === 1) return steps;\n                    grid[nx][ny] = 2;\n                    q.push([nx, ny]);\n                }\n            }\n        }\n        steps++;\n    }\n\n    return -1;\n}\n\nfunction dfs(grid, q, i, j) {\n    const n = grid.length;\n    if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] !== 1) return;\n    grid[i][j] = 2;\n    q.push([i, j]);\n\n    dfs(grid, q, i - 1, j);\n    dfs(grid, q, i + 1, j);\n    dfs(grid, q, i, j - 1);\n    dfs(grid, q, i, j + 1);\n}\n"
        }
    },
    "972": {
        "call_functions": {}
    },
    "973": {
        "call_functions": {}
    },
    "974": {
        "call_functions": {}
    },
    "975": {
        "call_functions": {}
    },
    "976": {
        "call_functions": {}
    },
    "977": {
        "call_functions": {}
    },
    "978": {
        "call_functions": {}
    },
    "979": {
        "call_functions": {}
    },
    "980": {
        "call_functions": {}
    },
    "981": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint minDeletionSize(vector<string>& strs) {\n    int num_deleted = 0;\n    for (int col = 0; col < strs[0].size(); ++col) {\n        for (int row = 1; row < strs.size(); ++row) {\n            if (strs[row][col] < strs[row - 1][col]) {\n                ++num_deleted;\n                break;\n            }\n        }\n    }\n    return num_deleted;\n}\n\nint main() {\n    vector<string> strs = $args;\n    int result = minDeletionSize(strs);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "982": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nint min_moves_unique(std::vector<int>& nums) {\n    std::sort(nums.begin(), nums.end());\n    int moves = 0;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] <= nums[i - 1]) {\n            moves += nums[i - 1] - nums[i] + 1;\n            nums[i] = nums[i - 1] + 1;\n        }\n    }\n    return moves;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    int result = min_moves_unique(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minMovesUnique(int[] nums) {\n    Arrays.sort(nums);\n    int moves = 0;\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] <= nums[i - 1]) {\n            moves += nums[i - 1] - nums[i] + 1;\n            nums[i] = nums[i - 1] + 1;\n        }\n    }\n    return moves;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = min_moves_unique(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = minMovesUnique(nums);\n    console.log(result);\n}"
        }
    },
    "983": {
        "call_functions": {
            "c++": "#include <iostream>\n#include <vector>\n#include <stack>\n\nbool validateStackSequences(std::vector<int>& pushed, std::vector<int>& popped) {\n    std::stack<int> stack;\n    int popIndex = 0;\n    \n    for (int pushValue : pushed) {\n        stack.push(pushValue);\n        while (!stack.empty() && stack.top() == popped[popIndex]) {\n            stack.pop();\n            popIndex++;\n        }\n    }\n    \n    return stack.empty();\n}\n\nint main() {\n    std::vector<int> pushed = $args;\n    std::vector<int> popped = $args;\n    bool result = validateStackSequences(pushed, popped);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public static void main(String[] args) {\n    int[] pushed = $args;\n    int[] popped = $args;\n    boolean result = validateStackSequences(pushed, popped);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    pushed = $args[0]\n    popped = $args[1]\n    result = validateStackSequences(pushed, popped)\n    print(result)",
            "javascript": "function main() {\n    const pushed = $args[0];\n    const popped = $args[1];\n    const result = validateStackSequences(pushed, popped);\n    console.log(result);\n}"
        }
    },
    "984": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> stones = $args;\n    int result = removeStones(stones);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    stones = $args[0]\n    result = removeStones(stones)\n    print(result)",
            "javascript": "function main() {\n    const stones = $args;\n    const result = removeStones(stones);\n    console.log(result);\n}"
        }
    }
}