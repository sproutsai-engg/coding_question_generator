{
    "1": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = $args;\n    std::vector<int> result = twoSum(nums, target);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = twoSum(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = twoSum(nums, target);\n    console.log(result);\n}"
        }
    },
    "3": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_set>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    int result = lengthOfLongestSubstring(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int lengthOfLongestSubstring(String s) {\n    int left = 0, right = 0, maxLength = 0;\n    Set<Character> characters = new HashSet<>();\n\n    while (right < s.length()) {\n        if (!characters.contains(s.charAt(right))) {\n            characters.add(s.charAt(right));\n            maxLength = Math.max(maxLength, right - left + 1);\n            right++;\n        } else {\n            characters.remove(s.charAt(left));\n            left++;\n        }\n    }\n\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args\n    result = length_of_longest_substring(s)\n    print(result)\n}",
            "javascript": "function main() {\n    const s = $args;\n    const result = lengthOfLongestSubstring(s);\n    console.log(result);\n}"
        }
    },
    "4": {
        "call_functions": {
            "c++": "double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    if (nums1.size() > nums2.size()) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n    \n    int x = nums1.size();\n    int y = nums2.size();\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxLeftX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];\n        int minRightX = (partitionX == x) ? INT_MAX : nums1[partitionX];\n        \n        int maxLeftY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];\n        int minRightY = (partitionY == y) ? INT_MAX : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((x + y) % 2 == 0) {\n                return (double(max(maxLeftX, maxLeftY) + min(minRightX, minRightY))) / 2;\n            } else {\n                return double(max(maxLeftX, maxLeftY));\n            }\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }    \n    return 0;\n}",
            "java": "public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n    \n    int x = nums1.length;\n    int y = nums2.length;\n    int low = 0;\n    int high = x;\n    \n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = (x + y + 1) / 2 - partitionX;\n        \n        int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\n        int minRightX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];\n        \n        int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\n        int minRightY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((x + y) % 2 == 0) {\n                return (double)(Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n            } else {\n                return (double)Math.max(maxLeftX, maxLeftY);\n            }\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }    \n    return 0;\n}",
            "python": "if __name__ == '__main__':\n    nums1 = $args\n    nums2 = $args\n    result = findMedianSortedArrays(nums1, nums2)\n    print(result)\n}",
            "javascript": "function findMedianSortedArrays(nums1, nums2) {\n    const x = nums1.length;\n    const y = nums2.length;\n    let low = 0;\n    let high = x;\n    \n    while (low <= high) {\n        const partitionX = Math.floor((low + high) / 2);\n        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;\n        \n        const maxLeftX = (partitionX === 0) ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];\n        const minRightX = (partitionX === x) ? Number.POSITIVE_INFINITY : nums1[partitionX];\n        \n        const maxLeftY = (partitionY === 0) ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];\n        const minRightY = (partitionY === y) ? Number.POSITIVE_INFINITY : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((x + y) % 2 === 0) {\n                return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n            } else {\n                return Math.max(maxLeftX, maxLeftY);\n            }\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }    \n    return 0;\n}"
        }
    },
    "5": {
        "call_functions": {
            "c++": "#include <string>\n\nint main() {\n  std::string s = $args;\n  std::string result = longestPalindromicSubstring(s);\n  std::cout << result << std::endl;\n  return 0;\n}",
            "java": "public String longestPalindromicSubstring(String s) {\n    int n = s.length();\n    if (n == 0) return \"\";\n\n    int start = 0, maxLength = 1;\n\n    for (int i = 0; i < n; ++i) {\n        int l = i, r = i;\n\n        while (r < n - 1 && s.charAt(r) == s.charAt(r + 1))\n            r++;\n        i = r;\n\n        while (l > 0 && r < n - 1 && s.charAt(l - 1) == s.charAt(r + 1)) {\n            l--;\n            r++;\n        }\n\n        int length = r - l + 1;\n        if (length > maxLength) {\n            start = l;\n            maxLength = length;\n        }\n    }\n\n    return s.substring(start, start + maxLength);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args\n    result = longest_palindromic_substring(s)\n    print(result)",
            "javascript": "function main() {\n  const s = $args;\n  const result = longestPalindromicSubstring(s);\n  console.log(result);\n}"
        }
    },
    "7": {
        "call_functions": {
            "c++": "int main() {\n    int x = $args;\n    int result = reverse(x);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int reverse(int x) {\n    long res = 0;\n    while (x != 0) {\n        res = res * 10 + x % 10;\n        x /= 10;\n    }\n    return (res < Integer.MIN_VALUE || res > Integer.MAX_VALUE) ? 0 : (int)res;\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args\n    result = reverse(x)\n    print(result)\n}",
            "javascript": "function main() {\n    const x = $args;\n    const sign = x < 0 ? -1 : 1;\n    x = Math.abs(x);\n    let res = 0;\n    while (x !== 0) {\n        res = res * 10 + x % 10;\n        x = Math.floor(x / 10);\n    }\n    res *= sign;\n    const result = (res < -(2 ** 31) || res > 2 ** 31 - 1) ? 0 : res;\n    console.log(result);\n}"
        }
    },
    "9": {
        "call_functions": {
            "c++": "int main() {\n    int x = $args;\n    bool result = isPalindrome(x);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int x = $args;\n    boolean result = isPalindrome(x);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args\n    result = is_palindrome(x)\n    print(result)\n",
            "javascript": "function main() {\n    const x = $args;\n    const result = isPalindrome(x);\n    console.log(result);\n}\n"
        }
    },
    "10": {
        "call_functions": {
            "c++": "bool isMatch(std::string s, std::string p) {\n    int m = s.length(), n = p.length();\n    std::vector<std::vector<bool>> dp(m + 1, std::vector<bool>(n + 1, false));\n    dp[0][0] = true;\n\n    for (int j = 1; j <= n; j++) {\n        if (p[j - 1] == '*' && dp[0][j - 2]) {\n            dp[0][j] = true;\n        }\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (p[j - 1] == s[i - 1] || p[j - 1] == '.') {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else if (p[j - 1] == '*') {\n                dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "java": "public boolean isMatch(String s, String p) {\n    int m = s.length(), n = p.length();\n    boolean[][] dp = new boolean[m + 1][n + 1];\n    dp[0][0] = true;\n\n    for (int j = 1; j <= n; j++) {\n        if (p.charAt(j - 1) == '*' && dp[0][j - 2]) {\n            dp[0][j] = true;\n        }\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (p.charAt(j - 1) == s.charAt(i - 1) || p.charAt(j - 1) == '.') {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else if (p.charAt(j - 1) == '*') {\n                dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2) == '.'));\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == '__main__':\n    s = $args[0]\n    p = $args[1]\n    result = is_match(s, p)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const p = $args[1];\n    const result = isMatch(s, p);\n    console.log(result);\n}"
        }
    },
    "11": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> height = $args;\n    int result = maxArea(height);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxArea(int[] height) {\n    int max_area = 0, left = 0, right = height.length - 1;\n    while (left < right) {\n        max_area = Math.max(max_area, Math.min(height[left], height[right]) * (right - left));\n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return max_area;\n}",
            "python": "if __name__ == \"__main__\":\n    height = $args\n    result = max_area(height)\n    print(result)\n}",
            "javascript": "function main() {\n    const height = $args;\n    const result = maxArea(height);\n    console.log(result);\n}"
        }
    },
    "6": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n\nint main() {\n    std::string s = $args;\n    int numRows = 3;\n    std::string result = convert(s, numRows);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "8": {
        "call_functions": {
            "c++": "int myAtoi(string s) {\n    long result = 0;\n    int i = 0, sign = 1;\n    while (s[i] == ' ') i++;\n    if (s[i] == '-' || s[i] == '+') sign = (s[i++] == '+') ? 1 : -1;\n    while (isdigit(s[i])) {\n        result = result * 10 + (s[i++] - '0');\n        if (result * sign > INT_MAX) return INT_MAX;\n        if (result * sign < INT_MIN) return INT_MIN;\n    }\n    return result * sign;\n}",
            "java": "public int myAtoi(String s) {\n    long result = 0;\n    int i = 0, sign = 1;\n    while (i < s.length() && s.charAt(i) == ' ') i++;\n    if (i < s.length() && (s.charAt(i) == '-' || s.charAt(i) == '+')) {\n        sign = (s.charAt(i++) == '+') ? 1 : -1;\n    }\n    while (i < s.length() && Character.isDigit(s.charAt(i))) {\n        result = result * 10 + (s.charAt(i++) - '0');\n        if (result * sign > Integer.MAX_VALUE) return Integer.MAX_VALUE;\n        if (result * sign < Integer.MIN_VALUE) return Integer.MIN_VALUE;\n    }\n    return (int) (result * sign);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = myAtoi(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = myAtoi(s);\n    console.log(result);\n}"
        }
    },
    "12": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = $args;\n    string result = intToRoman(num);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static String intToRoman(int num) {\n        List<Pair> romans = Arrays.asList(\n            new Pair(1000, \"M\"), new Pair(900, \"CM\"), new Pair(500, \"D\"), \n            new Pair(400, \"CD\"), new Pair(100, \"C\"), new Pair(90, \"XC\"),\n            new Pair(50, \"L\"), new Pair(40, \"XL\"), new Pair(10, \"X\"), \n            new Pair(9, \"IX\"), new Pair(5, \"V\"), new Pair(4, \"IV\"),\n            new Pair(1, \"I\")\n        );\n        StringBuilder roman = new StringBuilder();\n        for (Pair p : romans) {\n            while (num >= p.num) {\n                roman.append(p.symbol);\n                num -= p.num;\n            }\n        }\n        return roman.toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = int_to_roman(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = intToRoman(num);\n    console.log(result);\n}"
        }
    },
    "13": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = romanToInt(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int romanToInt(String s) {\n    Map<Character, Integer> romanValues = new HashMap<>();\n    romanValues.put('I', 1);\n    romanValues.put('V', 5);\n    romanValues.put('X', 10);\n    romanValues.put('L', 50);\n    romanValues.put('C', 100);\n    romanValues.put('D', 500);\n    romanValues.put('M', 1000);\n\n    int total = 0;\n    int prevValue = 0;\n\n    for (char c : s.toCharArray()) {\n        int currValue = romanValues.get(c);\n        total += currValue > prevValue ? currValue - 2 * prevValue : currValue;\n        prevValue = currValue;\n    }\n\n    return total;\n}"
        }
    },
    "14": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nstring longestCommonPrefix(vector<string>& strs) {\n    if (strs.empty()) return \"\";\n\n    for (int i = 0; i < strs[0].size(); ++i) {\n        char c = strs[0][i];\n        for (int j = 1; j < strs.size(); ++j) {\n            if (i == strs[j].size() || strs[j][i] != c) {\n                return strs[0].substr(0, i);\n            }\n        }\n    }\n    return strs[0];\n}\n\nint main() {\n    vector<string> strs = $args;\n    string result = longestCommonPrefix(strs);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) return \"\";\n\n    for (int i = 0; i < strs[0].length(); ++i) {\n        char c = strs[0].charAt(i);\n        for (int j = 1; j < strs.length; ++j) {\n            if (i == strs[j].length() || strs[j].charAt(i) != c) {\n                return strs[0].substring(0, i);\n            }\n        }\n    }\n    return strs[0];\n}"
        }
    },
    "15": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nstd::vector<std::vector<int>> threeSum(std::vector<int>& nums);\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = threeSum(nums);\n\n    for (const auto& triplet : result) {\n        for (const auto& num : triplet) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n\nstd::vector<std::vector<int>> threeSum(std::vector<int>& nums) {\n    std::vector<std::vector<int>> result;\n    std::sort(nums.begin(), nums.end());\n\n    for (int i = 0; i < (int)nums.size() - 2; ++i) {\n        if (i == 0 || nums[i] != nums[i - 1]) {\n            int j = i + 1, k = nums.size() - 1;\n            while (j < k) {\n                int sum = nums[i] + nums[j] + nums[k];\n                if (sum == 0) {\n                    result.push_back({nums[i], nums[j], nums[k]});\n                    while (j < k && nums[j] == nums[j + 1]) ++j;\n                    while (j < k && nums[k] == nums[k - 1]) --k;\n                    ++j;\n                    --k;\n                } else if (sum < 0) {\n                    ++j;\n                } else {\n                    --k;\n                }\n            }\n        }\n    }\n\n    return result;\n}"
        }
    },
    "16": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = $args;\n    int result = threeSumClosest(nums, target);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "17": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    string digits = $args;\n    vector<string> result = letterCombinations(digits);\n    for (const string &s : result) {\n        cout << s << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<String> letterCombinations(String digits) {\n    LinkedList<String> output = new LinkedList<>();\n    if(digits.isEmpty()) return output;\n    \n    String[] phone = new String[] {\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    output.add(\"\");\n    \n    for(char d : digits.toCharArray()){\n        while(output.peek().length() == digits.indexOf(d)){\n            String perm = output.remove();\n            for(char c : phone[d - '2'].toCharArray()){\n                output.add(perm + c);\n            }\n        }\n    }\n    \n    return output;\n}"
        }
    },
    "18": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> fourSum(vector<int>& nums, int target) {\n    vector<vector<int>> result;\n    int n = nums.size();\n    if(n < 4)\n        return result;\n\n    sort(nums.begin(), nums.end());\n    for(int i = 0; i < n - 3; i++) {\n        if(i > 0 && nums[i] == nums[i-1])\n            continue;\n\n        for(int j = i + 1; j < n - 2; j++) {\n            if(j > i + 1 && nums[j] == nums[j-1])\n                continue;\n\n            int left = j + 1;\n            int right = n - 1;\n            while(left < right) {\n                int sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if(sum == target) {\n                    result.push_back({nums[i], nums[j], nums[left], nums[right]});\n                    ++left;\n                    --right;\n                    while(left < right && nums[left] == nums[left-1]) ++left;\n                    while(left < right && nums[right] == nums[right+1]) --right;\n                } else if(sum < target) {\n                    ++left;\n                } else {\n                    --right;\n                }\n            }\n        }\n    }\n    return result;\n}\n",
            "java": "public List<List<Integer>> fourSum(int[] nums, int target) {\n    List<List<Integer>> result = new ArrayList<>();\n    if(nums == null || nums.length < 4)\n        return result;\n\n    Arrays.sort(nums);\n    for(int i = 0; i < nums.length - 3; i++) {\n        if(i > 0 && nums[i] == nums[i-1])\n            continue;\n\n        for(int j = i + 1; j < nums.length - 2; j++) {\n            if(j > i + 1 && nums[j] == nums[j-1])\n                continue;\n\n            int left = j + 1;\n            int right = nums.length - 1;\n            while(left < right) {\n                int sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if(sum == target) {\n                    result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));\n                    ++left;\n                    --right;\n                    while(left < right && nums[left] == nums[left - 1]) ++left;\n                    while(left < right && nums[right] == nums[right + 1]) --right;\n                } else if(sum < target) {\n                    ++left;\n                } else {\n                    --right;\n                }\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = fourSum(nums, target)\n    print(result)",
            "javascript": "function fourSum(nums, target) {\n    nums.sort((a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < nums.length - 3; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n\n        for (let j = i + 1; j < nums.length - 2; j++) {\n            if (j > i + 1 && nums[j] === nums[j - 1]) continue;\n\n            let left = j + 1;\n            let right = nums.length - 1;\n            while (left < right) {\n                const sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if (sum === target) {\n                    result.push([nums[i], nums[j], nums[left], nums[right]]);\n                    left++;\n                    right--;\n                    while (left < right && nums[left] === nums[left - 1]) left++;\n                    while (left < right && nums[right] === nums[right + 1]) right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return result;\n}"
        }
    },
    "20": {
        "call_functions": {
            "c++": "bool result = isValid(s);\nstd::cout << std::boolalpha << result << std::endl;"
        }
    },
    "24": {
        "call_functions": {
            "c++": "ListNode* swapPairs(ListNode* head) {\n    if (!head || !head->next) return head;\n\n    ListNode* second = head->next;\n    head->next = swapPairs(second->next);\n    second->next = head;\n    \n    return second;\n}"
        }
    },
    "26": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = removeDuplicates(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j < nums.length; j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = removeDuplicates(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = removeDuplicates(nums);\n    console.log(result);\n}\n"
        }
    },
    "27": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int val = $args;\n    int result = removeElement(nums, val);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int removeElement(int[] nums, int val) {\n    int i = 0;\n    for (int j = 0; j < nums.length; j++) {\n        if (nums[j] != val) {\n            nums[i] = nums[j];\n            i++;\n        }\n    }\n    return i;\n}"
        }
    },
    "29": {
        "call_functions": {
            "c++": "int main() {\n    int dividend = $args;\n    int divisor = $args;\n    int result = divide(dividend, divisor);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int divide(int dividend, int divisor) {\n    if (dividend == Integer.MIN_VALUE && divisor == -1) {\n        return Integer.MAX_VALUE;\n    }\n\n    int sign = (dividend > 0) ^ (divisor > 0) ? -1 : 1;\n\n    long dvd = Math.abs((long) dividend);\n    long dvs = Math.abs((long) divisor);\n    int ans = 0;\n\n    while (dvd >= dvs) {\n        long temp = dvs, multiple = 1;\n        while (dvd >= (temp << 1)) {\n            temp <<= 1;\n            multiple <<= 1;\n        }\n        dvd -= temp;\n        ans += multiple;\n    }\n\n    return ans * sign;\n}",
            "python": "if __name__ == \"__main__\":\n    dividend = $args[0]\n    divisor = $args[1]\n    result = divide(dividend, divisor)\n    print(result)",
            "javascript": "function main() {\n    const dividend = $args[0];\n    const divisor = $args[1];\n    const result = divide(dividend, divisor);\n    console.log(result);\n}"
        }
    },
    "30": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> words = {\"word1\", \"word2\", \"word3\"}; // Replace with actual words\n    std::vector<int> result = findSubstring(s, words);\n    \n    for (const auto& index : result) {\n        std::cout << index << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public List<Integer> findSubstring(String s, String[] words) {\n    if (s == null || s.length() == 0 || words == null || words.length == 0) return new ArrayList<>();\n    \n    Map<String, Integer> word_count = new HashMap<>();\n    for (String word : words) {\n        word_count.put(word, word_count.getOrDefault(word, 0) + 1);\n    }\n    \n    int word_length = words[0].length();\n    int total_words = words.length;\n    int total_length = word_length * total_words;\n    List<Integer> result = new ArrayList<>();\n    \n    for (int i = 0; i <= s.length() - total_length; i++) {\n        Map<String, Integer> temp_word_count = new HashMap<>();\n        for (int j = 0; j < total_words; j++) {\n            String current_word = s.substring(i + j * word_length, i + (j + 1) * word_length);\n            if (!word_count.containsKey(current_word)) break;\n            temp_word_count.put(current_word, temp_word_count.getOrDefault(current_word, 0) + 1);\n            if (temp_word_count.get(current_word) > word_count.get(current_word)) break;\n            if (j + 1 == total_words) result.add(i);\n        }\n    }\n    \n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    words = $args[1]\n    result = findSubstring(s, words)\n    print(result)",
            "javascript": "function findSubstring(s, words) {\n    if (!s || !words || words.length === 0) return [];\n\n    const word_count = new Map();\n    for (const word of words) {\n        word_count.set(word, (word_count.get(word) || 0) + 1);\n    }\n\n    const word_length = words[0].length;\n    const total_words = words.length;\n    const total_length = word_length * total_words;\n    const result = [];\n\n    for (let i = 0; i <= s.length - total_length; i++) {\n        const temp_word_count = new Map();\n        for (let j = 0; j < total_words; j++) {\n            const current_word = s.substr(i + j * word_length, word_length);\n            if (!word_count.has(current_word)) break;\n            temp_word_count.set(current_word, (temp_word_count.get(current_word) || 0) + 1);\n            if (temp_word_count.get(current_word) > word_count.get(current_word)) break;\n            if (j + 1 === total_words) result.push(i);\n        }\n    }\n\n    return result;\n}"
        }
    },
    "31": {
        "call_functions": {
            "c++": "#include <algorithm>\nvoid nextPermutation(vector<int>& nums) {\n    int n = nums.size(), k, l;\n    for (k = n - 2; k >= 0; k--) {\n        if (nums[k] < nums[k + 1]) break;\n    }\n    if (k < 0) {\n        reverse(nums.begin(), nums.end());\n    } else {\n        for (l = n - 1; l > k; l--) {\n            if (nums[l] > nums[k]) break;\n        }\n        swap(nums[k], nums[l]);\n        reverse(nums.begin() + k + 1, nums.end());\n    }\n}\n\nint main() {\n    vector<int> nums = $args;\n    nextPermutation(nums);\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public void nextPermutation(int[] nums) {\n    int n = nums.length, k = n - 2, l;\n    while(k >= 0 && nums[k] >= nums[k + 1]) k--;\n\n    if(k < 0) {\n        Arrays.sort(nums);\n    } else {\n        for (l = n - 1; l > k; l--) {\n            if (nums[l] > nums[k]) break;\n        }\n        int temp = nums[k];\n        nums[k] = nums[l];\n        nums[l] = temp;\n        Arrays.sort(nums, k + 1, n);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    nextPermutation(nums)\n    print(nums)",
            "javascript": "function nextPermutation(nums) {\n    const result = nextPermutation(nums);\n    console.log(result);\n}"
        }
    },
    "32": {
        "call_functions": {
            "c++": "#include <stack>\n\nint main() {\n    string s = $args;\n    int result = longestValidParentheses(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int longestValidParentheses(String s) {\n    int n = s.length();\n    int result = 0;\n    Stack<Integer> st = new Stack<>();\n\n    for (int i = 0; i < n; ++i) {\n        if (s.charAt(i) == '(') {\n            st.push(i);\n        } else {\n            if (!st.empty() && s.charAt(st.peek()) == '(') {\n                st.pop();\n            } else {\n                st.push(i);\n            }\n        }\n    }\n\n    if (st.empty()) {\n        result = n;\n    } else {\n        int right = n, left = 0;\n        while (!st.empty()) {\n            left = st.pop();\n            result = Math.max(result, right - left - 1);\n            right = left;\n        }\n        result = Math.max(result, right);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = longest_valid_parentheses(s)\n    print(result)",
            "javascript": "function longestValidParentheses(s) {\n    const n = s.length;\n    let result = 0;\n    const st = [];\n\n    for (let i = 0; i < n; ++i) {\n        if (s[i] === '(') {\n            st.push(i);\n        } else {\n            if (st.length > 0 && s[st[st.length - 1]] === '(') {\n                st.pop();\n            } else {\n                st.push(i);\n            }\n        }\n    }\n\n    if (st.length === 0) {\n        result = n;\n    } else {\n        let right = n, left = 0;\n        while (st.length > 0) {\n            left = st.pop();\n            result = Math.max(result, right - left - 1);\n            right = left;\n        }\n        result = Math.max(result, right);\n    }\n\n    return result;\n}"
        }
    },
    "33": {
        "call_functions": {
            "c++": "int search(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            return mid;\n        }\n        if (nums[mid] >= nums[left]) {\n            if (target >= nums[left] && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (target > nums[mid] && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
            "java": "public int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            return mid;\n        }\n        if (nums[mid] >= nums[left]) {\n            if (target >= nums[left] && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (target > nums[mid] && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}"
        }
    },
    "34": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<int> searchRange(std::vector<int>& nums, int target);\n\nint main() {\n    std::vector<int> nums = $args;\n    int target = $args;\n    std::vector<int> result = searchRange(nums, target);\n    std::cout << result[0] << \" \" << result[1] << std::endl;\n    return 0;\n}\n",
            "java": "public int[] searchRange(int[] nums, int target) {\n    int start = -1, end = -1;\n    int left = 0, right = nums.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n            if (nums[mid] == target) {\n                start = mid;\n            }\n        }\n    }\n    \n    left = 0;\n    right = nums.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n            if (nums[mid] == target) {\n                end = mid;\n            }\n        }\n    }\n    \n    return new int[] {start, end};\n}"
        }
    },
    "35": {
        "call_functions": {
            "c++": "int searchInsert(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return left;\n}",
            "java": "public int searchInsert(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return left;\n}"
        }
    },
    "37": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nbool isValid(vector<vector<char>>& board, int row, int col, char c) {\n    for (int i = 0; i < 9; i++) {\n        if (board[i][col] == c) return false; \n        if (board[row][i] == c) return false; \n        if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; \n    }\n    return true;\n}\n\nbool solveSudokuHelper(vector<vector<char>>& board) {\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            if (board[i][j] == '.') {\n                for (char c = '1'; c <= '9'; c++) {\n                    if (isValid(board, i, j, c)) {\n                        board[i][j] = c;\n\n                        if (solveSudokuHelper(board))\n                            return true;\n\n                        board[i][j] = '.';\n                    }\n                }\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvoid solveSudoku(vector<vector<char>>& board) {\n    solveSudokuHelper(board);\n}\n\nint main() {\n    vector<vector<char>> board = $args;\n    solveSudoku(board);\n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            cout << board[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public void solveSudoku(char[][] board)",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    solveSudoku(board)",
            "javascript": "function solveSudoku(board) {\n    solveSudokuHelper(board);\n}"
        }
    },
    "38": {
        "call_functions": {
            "c++": "#include <string>\n#include <iostream>\n\nstd::string countAndSay(int n) {\n    if (n == 1) return \"1\";\n    std::string previous = countAndSay(n-1);\n    std::string result = \"\";\n    int count = 1;\n    for (int i = 1; i < previous.length(); i++) {\n        if (previous[i] == previous[i-1]) {\n            count++;\n        } else {\n            result += std::to_string(count) + previous[i-1];\n            count = 1;\n        }\n    }\n    result += std::to_string(count) + previous.back();\n    return result;\n}\n\nint main() {\n    int n = $args;\n    std::string result = countAndSay(n);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "39": {
        "call_functions": {
            "c++": "#include <vector>\n\nint main() {\n    std::vector<int> candidates = $args;\n    int target = $args;\n    std::vector<std::vector<int>> result = combinationSum(candidates, target);\n    for (const auto& combination : result) {\n        for (const auto& num : combination) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"
        }
    },
    "40": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid combine(std::vector<int>& candidates, int target, std::vector<std::vector<int>>& result, std::vector<int>& combination, int index) {\n    if (target == 0) {\n        result.push_back(combination);\n        return;\n    }\n\n    for (int i = index; i < candidates.size() && target >= candidates[i]; ++i) {\n        if (i == index || candidates[i] != candidates[i - 1]) {\n            combination.push_back(candidates[i]);\n            combine(candidates, target - candidates[i], result, combination, i + 1);\n            combination.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<int>> combinationSum2(std::vector<int>& candidates, int target) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> combination;\n    std::sort(candidates.begin(), candidates.end());\n    combine(candidates, target, result, combination, 0);\n    return result;\n}\n\nint main() {\n    std::vector<int> candidates = $args;\n    int target = 10;\n    std::vector<std::vector<int>> result = combinationSum2(candidates, target);\n    for (const auto& combination : result) {\n        for (const auto& num : combination) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}"
        }
    },
    "41": {
        "call_functions": {
            "c++": "int firstMissingPositive(vector<int>& nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; ++i)\n        while(nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i])\n            swap(nums[i], nums[nums[i] - 1]);\n\n    for(int i = 0; i < n; ++i)\n        if(nums[i] != i + 1)\n            return i + 1;\n    return n + 1;\n}",
            "java": "public int firstMissingPositive(int[] nums) {\n    int n = nums.length;\n    for(int i = 0; i < n; i++) {\n        while(nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {\n            int temp = nums[i];\n            nums[i] = nums[temp - 1];\n            nums[temp - 1] = temp;\n        }\n    }\n\n    for(int i = 0; i < n; i++) {\n        if(nums[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = firstMissingPositive(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = firstMissingPositive(nums);\n    console.log(result);\n}"
        }
    },
    "42": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> height = $args;\n    int result = trap(height);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int trap(int[] height) {\n    int n = height.length, left = 0, right = n - 1, maxLeft = 0, maxRight = 0, water = 0;\n\n    while (left < right) {\n        if (height[left] <= height[right]) {\n            maxLeft = Math.max(maxLeft, height[left]);\n            water += maxLeft - height[left];\n            left++;\n        } else {\n            maxRight = Math.max(maxRight, height[right]);\n            water += maxRight - height[right];\n            right--;\n        }\n    }\n\n    return water;\n}"
        }
    },
    "43": {
        "call_functions": {
            "c++": "string multiply(string num1, string num2) {\n    int m = num1.size(), n = num2.size();\n    string res(m + n, '0');\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = n - 1; j >= 0; j--) {\n            int p1 = i + j, p2 = i + j + 1;\n            int mult = (num1[i] - '0') * (num2[j] - '0') + (res[p2] - '0');\n            res[p1] += mult / 10;\n            res[p2] = (mult % 10) + '0';\n        }\n    }\n    while (res.size() > 1 && res[0] == '0')\n        res.erase(res.begin());\n    return res;\n}"
        }
    },
    "44": {
        "call_functions": {
            "c++": "bool isMatch(const std::string& s, const std::string& p) {\n    int m = s.size(), n = p.size();\n    int i = 0, j = 0, asterisk = -1, match;\n    while (i < m) {\n        if (j < n && (s[i] == p[j] || p[j] == '?')) {\n            i++; j++;\n        } else if (j < n && p[j] == '*') {\n            match = i;\n            asterisk = j++;\n        } else if (asterisk >= 0) {\n            i = ++match;\n            j = asterisk + 1;\n        } else {\n            return false;\n        }\n    }\n    while (j < n && p[j] == '*') j++;\n    return j == n;\n}",
            "java": "public boolean isMatch(String s, String p) {\n    int m = s.length(), n = p.length();\n    int i = 0, j = 0, asterisk = -1, match = 0;\n    while (i < m) {\n        if (j < n && (s.charAt(i) == p.charAt(j) || p.charAt(j) == '?')) {\n            i++; j++;\n        } else if (j < n && p.charAt(j) == '*') {\n            match = i;\n            asterisk = j++;\n        } else if (asterisk != -1) {\n            i = ++match;\n            j = asterisk + 1;\n        } else {\n            return false;\n        }\n    }\n    while (j < n && p.charAt(j) == '*') j++;\n    return j == n;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    p = $args[1]\n    result = is_match(s, p)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const p = $args[1];\n    const result = isMatch(s, p);\n    console.log(result);\n}"
        }
    },
    "45": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = jump(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int jump(int[] nums) {\n    int jumps = 0, currentEnd = 0, currentFarthest = 0;\n    \n    for (int i = 0; i < nums.length - 1; i++) {\n        currentFarthest = Math.max(currentFarthest, i + nums[i]);\n        if (i == currentEnd) {\n            jumps++;\n            currentEnd = currentFarthest;\n        }\n    }\n    return jumps;\n}"
        }
    },
    "46": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid helper(std::vector<int>& nums, int index, std::vector<std::vector<int>>& results) {\n    if (index == nums.size() - 1) {\n        results.push_back(nums);\n        return;\n    }\n\n    for (int i = index; i < nums.size(); i++) {\n        std::swap(nums[index], nums[i]);\n        helper(nums, index + 1, results);\n        std::swap(nums[index], nums[i]);\n    }\n}\n\nstd::vector<std::vector<int>> permute(std::vector<int>& nums) {\n    std::vector<std::vector<int>> results;\n    helper(nums, 0, results);\n    return results;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = permute(nums);\n    for (const auto& res : result) {\n        for (const auto& num : res) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> results = new ArrayList<>();\n    helper(nums, 0, results);\n    return results;\n}\n\nprivate void helper(int[] nums, int index, List<List<Integer>> results) {\n    if (index == nums.length - 1) {\n        List<Integer> tempList = new ArrayList<>();\n        for (int n : nums) {\n            tempList.add(n);\n        }\n        results.add(tempList);\n        return;\n    }\n\n    for (int i = index; i < nums.length; i++) {\n        swap(nums, index, i);\n        helper(nums, index + 1, results);\n        swap(nums, index, i);\n    }\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    int temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = permute(nums)\n    print(result)",
            "javascript": "function main() {\n  const nums = $args;\n  const results = permute(nums);\n  console.log(results);\n}"
        }
    },
    "47": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n\nvoid backtrack(std::vector<std::vector<int>>& result, std::vector<int>& nums, int start) {\n    if (start == nums.size()) {\n        result.push_back(nums);\n        return;\n    }\n    for (int i = start; i < nums.size(); i++) {\n        if (i > start && nums[i] == nums[start]) continue;\n        std::swap(nums[start], nums[i]);\n        backtrack(result, nums, start + 1);\n        std::swap(nums[start], nums[i]);\n    }\n}\n\nstd::vector<std::vector<int>> permuteUnique(std::vector<int>& nums) {\n    std::sort(nums.begin(), nums.end());\n    std::vector<std::vector<int>> result;\n    backtrack(result, nums, 0);\n    return result;\n}",
            "java": "public List<List<Integer>> permuteUnique(int[] nums) {\n    Arrays.sort(nums);\n    List<List<Integer>> result = new ArrayList<>();\n    boolean[] visited = new boolean[nums.length];\n    backtrack(result, new ArrayList<>(), nums, visited);\n    return result;\n}\n\nprivate void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums, boolean[] visited) {\n    if (tempList.size() == nums.length) {\n        result.add(new ArrayList<>(tempList));\n    } else {\n        for (int i = 0; i < nums.length; i++) {\n            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])) continue;\n            visited[i] = true;\n            tempList.add(nums[i]);\n            backtrack(result, tempList, nums, visited);\n            tempList.remove(tempList.size() - 1);\n            visited[i] = false;\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = permuteUnique(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    nums.sort((a, b) => a - b);\n    const result = [];\n    const visited = new Array(nums.length).fill(false);\n\n    function backtrack(tempList) {\n        if (tempList.length === nums.length) {\n            result.push([...tempList]);\n            return;\n        }\n        for (let i = 0; i < nums.length; i++) {\n            if (visited[i] || (i > 0 && nums[i] === nums[i - 1] && !visited[i - 1])) continue;\n            visited[i] = true;\n            tempList.push(nums[i]);\n            backtrack(tempList);\n            tempList.pop();\n            visited[i] = false;\n        }\n    }\n\n    backtrack([]);\n    console.log(result);\n}\n"
        }
    },
    "48": {
        "call_functions": {
            "c++": "void rotate(vector<vector<int>>& matrix) {\n    int n = matrix.size();\n    for (int i = 0; i < n / 2; i++) {\n        for (int j = i; j < n - i - 1; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = temp;\n        }\n    }\n}",
            "java": "public void rotate(int[][] matrix) {\n    int n = matrix.length;\n    for (int i = 0; i < n / 2; i++) {\n        for (int j = i; j < n - i - 1; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = temp;\n        }\n    }\n}"
        }
    },
    "49": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nint main() {\n    std::vector<std::string> strs = $args;\n    std::vector<std::vector<std::string>> result = groupAnagrams(strs);\n\n    for (auto &group : result) {\n        for (std::string str : group) {\n            std::cout << str << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<String>> groupAnagrams(String[] strs) {\n    Map<String, List<String>> anagramMap = new HashMap<>();\n\n    for (String str : strs) {\n        char[] keyChars = str.toCharArray();\n        Arrays.sort(keyChars);\n        String key = new String(keyChars);\n\n        anagramMap.putIfAbsent(key, new ArrayList<>());\n        anagramMap.get(key).add(str);\n    }\n\n    return new ArrayList<>(anagramMap.values());\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    result = group_anagrams(strs)\n    print(result)",
            "javascript": "function main() {\n    const strs = $args;\n    const result = groupAnagrams(strs);\n    console.log(result);\n}"
        }
    },
    "50": {
        "call_functions": {
            "c++": "double myPow(double x, int n) {\n    double result;\n    if (n == 0) {\n        result = 1;\n    }\n    else {\n        if (n < 0) {\n            x = 1 / x;\n            n = -n;\n        }\n        result = 1;\n        double currentProduct = x;\n        for (long long i = n; i; i /= 2) {\n            if ((i % 2) == 1) {\n                result = result * currentProduct;\n            }\n            currentProduct = currentProduct * currentProduct;\n        }\n    }\n    return result;\n}",
            "java": "double myPow(double x, int n) {\n    if (n == 0) return 1;\n    if (n < 0) {\n        x = 1 / x;\n        n = -n;\n    }\n    double result = 1;\n    double currentProduct = x;\n    for (long i = n; i > 0; i /= 2) {\n        if ((i % 2) == 1) {\n            result *= currentProduct;\n        }\n        currentProduct *= currentProduct;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    x = $args[0]\n    n = $args[1]\n    result = myPow(x, n)\n    print(result)",
            "javascript": "function main() {\n    const x = $args[0];\n    const n = $args[1];\n    const result = myPow(x, n);\n    console.log(result);\n}"
        }
    },
    "51": {
        "call_functions": {
            "c++": "std::vector<std::vector<std::string>> solveNQueens(int n) {\n    std::vector<std::vector<std::string>> result;\n    std::vector<std::string> board(n, std::string(n, '.'));\n    solve(result, board, n, 0);\n    return result;\n}",
            "java": "public List<List<String>> solveNQueens(int n) {\n    List<List<String>> result = new ArrayList<>();\n    solve(result, new ArrayList<>(), n, 0);\n    return result;\n}\n\nprivate void solve(List<List<String>> result, List<Integer> current, int n, int col) {\n    if (col == n) {\n        result.add(generateBoard(current, n));\n        return;\n    }\n    for (int row = 0; row < n; row++) {\n        if(isSafe(current, row, col)) {\n            current.add(row);\n            solve(result, current, n, col + 1);\n            current.remove(col);\n        }\n    }\n}\n\nprivate boolean isSafe(List<Integer> current, int row, int col) {\n    for (int i = 0; i < col; i++) {\n        int prevRow = current.get(i);\n        if (prevRow == row || (Math.abs(col - i) == Math.abs(row - prevRow))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate List<String> generateBoard(List<Integer> current, int n) {\n    List<String> board = new ArrayList<>();\n    for (int row : current) {\n        StringBuilder sb = new StringBuilder();\n        for (int col = 0; col < n; col++)\n            sb.append((col == row) ? \"Q\" : \".\");\n        board.add(sb.toString());\n    }\n    return board;\n}"
        }
    },
    "52": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = totalNQueens(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int totalNQueens(int n) {\n    ArrayList<Integer> cols = new ArrayList<>();\n    return backtrack(n, cols);\n}\n\npublic int backtrack(int n, ArrayList<Integer> cols) {\n    if (cols.size() == n) {\n        return 1;\n    }\n\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (isSafe(cols, i)) {\n            cols.add(i);\n            count += backtrack(n, cols);\n            cols.remove(cols.size() - 1);\n        }\n    }\n    return count;\n}\n\npublic boolean isSafe(ArrayList<Integer> cols, int row) {\n    int col = cols.size();\n    for (int i = 0; i < cols.size(); i++) {\n        if (cols.get(i) == row || Math.abs(i - col) == Math.abs(cols.get(i) - row)) {\n            return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = total_n_queens(n)\n    print(result)",
            "javascript": "function totalNQueens(n) {\n    let cols = [];\n    return backtrack(n, cols);\n}"
        }
    },
    "53": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = maxSubArray(nums);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "54": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> matrix = $args;\n    vector<int> result = spiralOrder(matrix);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> spiralOrder(int[][] matrix) {\n    List<Integer> result = new ArrayList<>();\n    if (matrix == null || matrix.length == 0) return result;\n    int m = matrix.length, n = matrix[0].length;\n    int rowStart = 0, colStart = 0, rowEnd = m - 1, colEnd = n - 1;\n\n    while (rowStart <= rowEnd && colStart <= colEnd) {\n        for (int i = colStart; i <= colEnd; i++) {\n            result.add(matrix[rowStart][i]);\n        }\n        rowStart++;\n        for (int i = rowStart; i <= rowEnd; i++) {\n            result.add(matrix[i][colEnd]);\n        }\n        colEnd--;\n        if (rowStart <= rowEnd) {\n            for (int i = colEnd; i >= colStart; i--) {\n                result.add(matrix[rowEnd][i]);\n            }\n        }\n        rowEnd--;\n        if (colStart <= colEnd) {\n            for (int i = rowEnd; i >= rowStart; i--) {\n                result.add(matrix[i][colStart]);\n            }\n        }\n        colStart++;\n    }\n    return result;\n}"
        }
    },
    "55": {
        "call_functions": {
            "c++": "bool canJump(vector<int>& nums) {\n    int maxReach = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (i > maxReach) return false;\n        maxReach = max(maxReach, i + nums[i]);\n    }\n    return true;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    boolean result = canJump(nums);\n    System.out.println(result);\n}"
        }
    },
    "56": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    std::vector<std::vector<int>> result = merge(intervals);\n\n    for (const auto& interval : result) {\n        std::cout << '[' << interval[0] << ',' << interval[1] << ']';\n    }\n\n    return 0;\n}",
            "java": "public List<int[]> merge(int[][] intervals) {\n    if (intervals.length == 0) return new ArrayList<>();\n\n    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n    List<int[]> result = new ArrayList<>();\n    result.add(intervals[0]);\n\n    for (int i = 1; i < intervals.length; i++) {\n        if (result.get(result.size() - 1)[1] >= intervals[i][0]) {\n            result.get(result.size() - 1)[1] = Math.max(result.get(result.size() - 1)[1], intervals[i][1]);\n        } else {\n            result.add(intervals[i]);\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = merge(intervals)\n    print(result)",
            "javascript": "function merge(intervals) {\n    if (intervals.length === 0) return [];\n\n    intervals.sort((a, b) => a[0] - b[0]);\n    const result = [intervals[0]];\n\n    for (let i = 1; i < intervals.length; i++) {\n        if (result[result.length - 1][1] >= intervals[i][0]) {\n            result[result.length - 1][1] = Math.max(result[result.length - 1][1], intervals[i][1]);\n        } else {\n            result.push(intervals[i]);\n        }\n    }\n\n    return result;\n}"
        }
    },
    "57": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> intervals = $args;\n    vector<int> newInterval = $args;\n    vector<vector<int>> result = insert(intervals, newInterval);\n\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = 0; j < result[i].size(); j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        }
    },
    "58": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = lengthOfLastWord(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int lengthOfLastWord(String s) {\n    int length = 0;\n    int tail = s.length() - 1;\n    while (tail >= 0 && s.charAt(tail) == ' ') tail--;\n    while (tail >= 0 && s.charAt(tail) != ' ') {\n        length++;\n        tail--;\n    }\n    return length;\n}"
        }
    },
    "59": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> result = generateMatrix(n);\n\n    for (const auto& row : result) {\n        for (const auto& num : row) {\n            std::cout << num << ' ';\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}"
        }
    },
    "60": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    int k = $args;\n    std::string result = getPermutation(n, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String getPermutation(int n, int k) {\n    List<Integer> nums = new ArrayList<>();\n    int[] factorials = new int[n];\n    StringBuilder sb = new StringBuilder();\n    int index;\n\n    factorials[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        nums.add(i);\n        factorials[i - 1] = i * factorials[i - 1];\n    }\n\n    k--;\n\n    for (int i = n; i >= 1; --i) {\n        index = k / factorials[i - 1];\n        k %= factorials[i - 1];\n        sb.append(nums.get(index));\n        nums.remove(index);\n    }\n\n    return sb.toString();\n}"
        }
    },
    "65": {
        "call_functions": {
            "c++": "#include <regex>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    bool result = isNumber(s);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isNumber(String s) {\n        String pattern = \"^[-+]?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(e[-+]?[0-9]+)?$\";\n        return Pattern.matches(pattern, s);\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = is_number(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = isNumber(s);\n    console.log(result);\n}"
        }
    },
    "66": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> digits = $args;\n    std::vector<int> result = plusOne(digits);\n\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n"
        }
    },
    "67": {
        "call_functions": {
            "c++": "std::string addBinary(std::string a, std::string b) {\n    std::string result = \"\";\n    int i = a.size() - 1, j = b.size() - 1, carry = 0;\n    while (i >= 0 || j >= 0 || carry) {\n        if (i >= 0) carry += a[i--] - '0';\n        if (j >= 0) carry += b[j--] - '0';\n        result = char(carry % 2 + '0') + result;\n        carry /= 2;\n    }\n    return result;\n}\n\nint main() {\n    std::string a = $args;\n    std::string b = $args;\n    std::string result = addBinary(a, b);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String addBinary(String a, String b) {\n    StringBuilder result = new StringBuilder();\n    int i = a.length() - 1, j = b.length() - 1, carry = 0;\n    while (i >= 0 || j >= 0 || carry != 0) {\n        if (i >= 0) carry += a.charAt(i--) - '0';\n        if (j >= 0) carry += b.charAt(j--) - '0';\n        result.insert(0, carry % 2);\n        carry /= 2;\n    }\n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = addBinary(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = addBinary(a, b);\n    console.log(result);\n}"
        }
    },
    "68": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> fullJustify(vector<string>& words, int maxWidth) {\n    vector<string> result;\n    int idx = 0;\n    while (idx < words.size()) {\n        int totalChars = words[idx].size();\n        int last = idx + 1;\n        while (last < words.size()) {\n            if (totalChars + 1 + words[last].length() > maxWidth) break;\n            totalChars += 1 + words[last].length();\n            last++;\n        }\n        int gaps = last - idx - 1;\n        stringstream line;\n        if (last == words.size() || gaps == 0) {\n            for (int i = idx; i < last; i++) {\n                line << words[i];\n                if (i < last - 1) line << \" \";\n            }\n            line << string(maxWidth - line.str().size(), ' ');\n        } else {\n            int evenSpaces = (maxWidth - totalChars) / gaps;\n            int extraSpaces = (maxWidth - totalChars) % gaps;\n            for (int i = idx; i < last; i++) {\n                line << words[i];\n                if (i < last - 1) {\n                    line << string(evenSpaces + (i - idx < extraSpaces ? 1 : 0), ' ');\n                }\n            }\n        }\n        idx = last;\n        result.push_back(line.str());\n    }\n    return result;\n}",
            "java": "public List<String> fullJustify(String[] words, int maxWidth) {\n    List<String> result = new ArrayList<>();\n    int idx = 0;\n    while (idx < words.length) {\n        int totalChars = words[idx].length();\n        int last = idx + 1;\n        while (last < words.length) {\n            if (totalChars + 1 + words[last].length() > maxWidth) break;\n            totalChars += 1 + words[last].length();\n            last++;\n        }\n        int gaps = last - idx - 1;\n        StringBuilder line = new StringBuilder();\n        if (last == words.length || gaps == 0) {\n            for (int i = idx; i < last; i++) {\n                line.append(words[i]);\n                if (i < last - 1) line.append(\" \");\n            }\n            while (line.length() < maxWidth) line.append(\" \");\n        } else {\n            int evenSpaces = (maxWidth - totalChars) / gaps;\n            int extraSpaces = (maxWidth - totalChars) % gaps;\n            for (int i = idx; i < last; i++) {\n                line.append(words[i]);\n                if (i < last - 1) {\n                    line.append(\" \".repeat(evenSpaces + (i - idx < extraSpaces ? 1 : 0)));\n                }\n            }\n        }\n        idx = last;\n        result.add(line.toString());\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    maxWidth = $args[1]\n    result = fullJustify(words, maxWidth)\n    print(result)",
            "javascript": "function fullJustify(words, maxWidth) {\n    const result = [];\n    let idx = 0;\n    while (idx < words.length) {\n        let totalChars = words[idx].length;\n        let last = idx + 1;\n        while (last < words.length) {\n            if (totalChars + 1 + words[last].length > maxWidth) break;\n            totalChars += 1 + words[last].length;\n            last++;\n        }\n        const gaps = last - idx - 1;\n        let line = \"\";\n        if (last === words.length || gaps === 0) {\n            for (let i = idx; i < last; i++) {\n                line += words[i];\n                if (i < last - 1) line += \" \";\n            }\n            while (line.length < maxWidth) line += \" \";\n        } else {\n            const evenSpaces = Math.floor((maxWidth - totalChars) / gaps);\n            const extraSpaces = (maxWidth - totalChars) % gaps;\n            for (let i = idx; i < last; i++) {\n                line += words[i];\n                if (i < last - 1) {\n                    line += \" \".repeat(evenSpaces + (i - idx < extraSpaces ? 1 : 0));\n                }\n            }\n        }\n        idx = last;\n        result.push(line);\n    }\n    return result;\n}"
        }
    },
    "69": {
        "call_functions": {
            "c++": "int main() {\n    int x = $args;\n    int result = mySqrt(x);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int mySqrt(int x) {\n    if (x == 0 || x == 1) return x;\n    int start = 1, end = x, ans = 0;\n    while (start <= end) {\n        int mid = (start + end) / 2;\n        if (mid * mid == x) return mid;\n        if (mid <= x / mid) {\n            start = mid + 1;\n            ans = mid;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return ans;\n}"
        }
    },
    "71": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <sstream>\n\nint main() {\n    std::string path = $args;\n    std::string result = simplifyPath(path);\n    std::cout << result << std::endl;\n    return 0;\n}"
        }
    },
    "72": {
        "call_functions": {
            "c++": "int minDistance(string word1, string word2) {\n    int m = word1.size();\n    int n = word2.size();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n    \n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0) {\n                dp[i][j] = j;\n            } else if (j == 0) {\n                dp[i][j] = i;\n            } else if (word1[i - 1] == word2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}",
            "java": "public int minDistance(String word1, String word2) {\n    int m = word1.length();\n    int n = word2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    \n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0) {\n                dp[i][j] = j;\n            } else if (j == 0) {\n                dp[i][j] = i;\n            } else if (word1.charAt(i - 1) == word2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    word1 = $args[0]\n    word2 = $args[1]\n    result = minDistance(word1, word2)\n    print(result)",
            "javascript": "function minDistance(word1, word2) {\n    const m = word1.length;\n    const n = word2.length;\n    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    \n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            if (i === 0) {\n                dp[i][j] = j;\n            } else if (j === 0) {\n                dp[i][j] = i;\n            } else if (word1[i - 1] === word2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"
        }
    },
    "73": {
        "call_functions": {
            "c++": "void setZeroes(vector<vector<int>>& matrix) {\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    bool firstRow = false, firstCol = false;\n    \n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (matrix[i][j] == 0) {\n                if (i == 0) firstRow = true;\n                if (j == 0) firstCol = true;\n                matrix[i][0] = 0;\n                matrix[0][j] = 0;\n            }\n        }\n    }\n\n    for (int i = 1; i < rows; i++) {\n        for (int j = 1; j < cols; j++) {\n            if (matrix[i][0] == 0 || matrix[0][j] == 0)\n                matrix[i][j] = 0;\n        }\n    }\n\n    if (firstRow) {\n        for (int j = 0; j < cols; j++)\n            matrix[0][j] = 0;\n    }\n\n    if (firstCol) {\n        for (int i = 0; i < rows; i++)\n            matrix[i][0] = 0;\n    }\n}",
            "java": "public void setZeroes(int[][] matrix)"
        }
    },
    "75": {
        "call_functions": {
            "c++": "void sortColors(vector<int>& nums) {\n    int red = 0, white = 0, blue = nums.size() - 1;\n    while (white <= blue) {\n        if (nums[white] == 0) {\n            swap(nums[red++], nums[white++]);\n        } else if (nums[white] == 1) {\n            white++;\n        } else {\n            swap(nums[white], nums[blue--]);\n        }\n    }\n}",
            "java": "public void sortColors(int[] nums) {\n    int red = 0, white = 0, blue = nums.length - 1;\n    while (white <= blue) {\n        if (nums[white] == 0) {\n            int temp = nums[red];\n            nums[red++] = nums[white];\n            nums[white++] = temp;\n        } else if (nums[white] == 1) {\n            white++;\n        } else {\n            int temp = nums[white];\n            nums[white] = nums[blue];\n            nums[blue--] = temp;\n        }\n    }\n}"
        }
    },
    "76": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    std::string result = min_window(s, t);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public String minWindow(String s, String t) {\n    HashMap<Character, Integer> need = new HashMap<>();\n    HashMap<Character, Integer> window = new HashMap<>();\n    for (char c : t.toCharArray()) need.put(c, need.getOrDefault(c, 0) + 1);\n    \n    int left = 0, right = 0;\n    int valid = 0;\n    int start = 0, length = Integer.MAX_VALUE;\n\n    while (right < s.length()) {\n        char c = s.charAt(right);\n        right++;\n        if (need.containsKey(c)) {\n            window.put(c, window.getOrDefault(c, 0) + 1);\n            if (window.get(c) <= need.get(c)) valid++;\n        }\n\n        while (valid == t.length()) {\n            if (right - left < length) {\n                start = left;\n                length = right - left;\n            }\n\n            char d = s.charAt(left);\n            left++;\n            if (need.containsKey(d)) {\n                if (window.get(d) <= need.get(d)) valid--;\n                window.put(d, window.get(d) - 1);\n            }\n        }\n    }\n    return length == Integer.MAX_VALUE ? \"\" : s.substring(start, start + length);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = min_window(s, t)\n    print(result)",
            "javascript": "function minWindow(s, t) {\n    const need = new Map();\n    const window = new Map();\n\n    for (const c of t) {\n        need.set(c, (need.get(c) || 0) + 1);\n    }\n    \n    let left = 0, right = 0;\n    let valid = 0;\n    let start = 0, length = Infinity;\n\n    while (right < s.length) {\n        const c = s[right];\n        right++;\n        if (need.has(c)) {\n            window.set(c, (window.get(c) || 0) + 1);\n            if (window.get(c) <= need.get(c)) valid++;\n        }\n\n        while (valid === t.length) {\n            if (right - left < length) {\n                start = left;\n                length = right - left;\n            }\n\n            const d = s[left];\n            left++;\n            if (need.has(d)) {\n                if (window.get(d) <= need.get(d)) valid--;\n                window.set(d, window.get(d) - 1);\n            }\n        }\n    }\n    return length === Infinity ? \"\" : s.substring(start, start + length);\n}"
        }
    },
    "77": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid backtrack(int n, int k, int start, std::vector<int>& current, std::vector<std::vector<int>>& result) {\n    if (current.size() == k) {\n        result.push_back(current);\n        return;\n    }\n\n    for (int i = start; i <= n; ++i) {\n        current.push_back(i);\n        backtrack(n, k, i + 1, current, result);\n        current.pop_back();\n    }\n}\n\nstd::vector<std::vector<int>> combine(int n, int k) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> current;\n    backtrack(n, k, 1, current, result);\n    return result;\n}\n\nint main() {\n    int n = $args;\n    int k = $args;\n    std::vector<std::vector<int>> result = combine(n, k);\n    for (const auto& combination : result) {\n        for (const auto& num : combination) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> combine(int n, int k) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(n, k, 1, new ArrayList<>(), result);\n    return result;\n}\n\nprivate void backtrack(int n, int k, int start, List<Integer> current, List<List<Integer>> result) {\n    if (current.size() == k) {\n        result.add(new ArrayList<>(current));\n        return;\n    }\n\n    for (int i = start; i <= n; i++) {\n        current.add(i);\n        backtrack(n, k, i + 1, current, result);\n        current.remove(current.size() - 1);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = combine(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const k = $args;\n    const result = combine(n, k);\n    console.log(result);\n}"
        }
    },
    "78": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nstd::vector<std::vector<int>> subsets(std::vector<int>& nums);\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::vector<int>> result = subsets(nums);\n\n    for (const auto& subset : result) {\n        std::cout << '[';\n        for (int i = 0; i < subset.size(); ++i) {\n            std::cout << subset[i];\n            if (i != subset.size() - 1) {\n                std::cout << ',';\n            }\n        }\n        std::cout << ']';\n        std::cout << std::endl;\n    }\n\n    return 0;\n}\n",
            "java": "public List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    int n = nums.length;\n    int num_subsets = 1 << n;\n\n    for (int i = 0; i < num_subsets; ++i) {\n        List<Integer> subset = new ArrayList<>();\n        for (int j = 0; j < n; ++j) {\n            if ((i & (1 << j)) != 0) {\n                subset.add(nums[j]);\n            }\n        }\n        result.add(subset);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = subsets(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = subsets(nums);\n    console.log(result);\n}"
        }
    },
    "79": {
        "call_functions": {
            "c++": "bool exist(vector<vector<char>>& board, string word) {\n    int m = board.size();\n    int n = board[0].size();\n    \n    function<bool(int, int, int)> dfs = [&](int i, int j, int k) {\n        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != word[k])\n            return false;\n        if (k == word.length() - 1)\n            return true;\n        \n        char temp = board[i][j];\n        board[i][j] = '/';\n        bool res = dfs(i + 1, j, k + 1) || dfs(i - 1, j, k + 1) || dfs(i, j + 1, k + 1) || dfs(i, j - 1, k + 1);\n        board[i][j] = temp;\n        return res;\n    };\n    \n    for (int i = 0; i < m; i++)\n        for (int j = 0; j < n; j++)\n            if (dfs(i, j, 0))\n                return true;\n    return false;\n}",
            "java": "public boolean exist(char[][] board, String word) {\n    int m = board.length;\n    int n = board[0].length;\n\n    boolean[][] visited = new boolean[m][n];\n\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (dfs(board, i, j, 0, word, visited)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean dfs(char[][] board, int i, int j, int k, String word, boolean[][] visited) {\n    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(k) || visited[i][j]) {\n        return false;\n    }\n\n    if (k == word.length() - 1) {\n        return true;\n    }\n\n    visited[i][j] = true;\n    boolean result = dfs(board, i + 1, j, k + 1, word, visited)\n            || dfs(board, i - 1, j, k + 1, word, visited)\n            || dfs(board, i, j + 1, k + 1, word, visited)\n            || dfs(board, i, j - 1, k + 1, word, visited);\n    visited[i][j] = false;\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    word = $args[1]\n    result = exist(board, word)\n    print(result)",
            "javascript": "function exist(board, word) {\n    const m = board.length;\n    const n = board[0].length;\n\n    function dfs(i, j, k) {\n        if (i < 0 || i === m || j < 0 || j === n || board[i][j] !== word[k])\n            return false;\n        if (k === word.length - 1)\n            return true;\n        \n        const temp = board[i][j];\n        board[i][j] = '/';\n        const res = dfs(i + 1, j, k +1) || dfs(i - 1, j, k + 1) || dfs(i, j + 1, k + 1) || dfs(i, j - 1, k + 1);\n        board[i][j] = temp;\n        return res;\n    }\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (dfs(i, j, 0))\n                return true;\n        }\n    }\n    return false;\n}"
        }
    },
    "84": {
        "call_functions": {
            "c++": "int largestRectangleArea(vector<int>& heights) {\n    heights.push_back(0);\n    stack<int> s;\n    int max_area = 0;\n    for (int i = 0; i < heights.size(); i++) {\n        while (!s.empty() && heights[s.top()] > heights[i]) {\n            int height = heights[s.top()];\n            s.pop();\n            int width = s.empty() ? i : i - s.top() - 1;\n            max_area = max(max_area, height * width);\n        }\n        s.push(i);\n    }\n    return max_area;\n}",
            "java": "public int largestRectangleArea(int[] heights) {\n    Stack<Integer> stack = new Stack<>();\n    int max_area = 0;\n    for (int i = 0; i <= heights.length; i++) {\n        int height = (i == heights.length) ? 0 : heights[i];\n        while (!stack.isEmpty() && heights[stack.peek()] > height) {\n            int h = heights[stack.pop()];\n            int w = stack.isEmpty() ? i : i - stack.peek() - 1;\n            max_area = Math.max(max_area, h * w);\n        }\n        stack.push(i);\n    }\n    return max_area;\n}",
            "python": "if __name__ == \"__main__\":\n    heights = $args[0]\n    result = largestRectangleArea(heights)\n    print(result)",
            "javascript": "function main() {\n    const heights = $args;\n    const result = largestRectangleArea(heights);\n    console.log(result);\n}"
        }
    },
    "85": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<char>> matrix = $args;\n    int result = maximalRectangle(matrix);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maximalRectangle(char[][] matrix) {\n    if (matrix.length == 0) return 0;\n\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[] height = new int[n + 1];\n    int maxArea = 0;\n\n    for (int i = 0; i < m; ++i) {\n        Stack<Integer> s = new Stack<>();\n        for (int j = 0; j <= n; ++j) {\n            if (j < n) {\n                height[j] = matrix[i][j] == '1' ? height[j] + 1 : 0;\n            }\n            while (!s.empty() && height[j] < height[s.peek()]) {\n                int h = height[s.pop()];\n                int w = s.empty() ? j : j - s.peek() - 1;\n                maxArea = Math.max(maxArea, h * w);\n            }\n            s.push(j);\n        }\n    }\n\n    return maxArea;\n}\n",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = maximalRectangle(matrix)\n    print(result)",
            "javascript": "function maximalRectangle(matrix) {\n    if (!matrix.length) return 0;\n\n    let m = matrix.length;\n    let n = matrix[0].length;\n    let height = Array(n + 1).fill(0);\n    let maxArea = 0;\n\n    for (let i = 0; i < m; i++) {\n        let s = [];\n        for (let j = 0; j <= n; j++) {\n            if (j < n) {\n                height[j] = matrix[i][j] === '1' ? height[j] + 1 : 0;\n            }\n            while (s.length && height[j] < height[s[s.length - 1]]) {\n                let h = height[s.pop()];\n                let w = !s.length ? j : j - s[s.length - 1] - 1;\n                maxArea = Math.max(maxArea, h * w);\n            }\n            s.push(j);\n        }\n    }\n\n    return maxArea;\n}"
        }
    },
    "87": {
        "call_functions": {
            "c++": "bool result = isScramble($args);\nreturn result;",
            "java": "public boolean isScramble(String s1, String s2) {\n    if (s1.equals(s2)) return true;\n    if (sorted(s1).equals(sorted(s2)) == false) return false;\n\n    for (int i = 1; i < s1.length(); i++) {\n        if (isScramble(s1.substring(0, i), s2.substring(0, i)) && isScramble(s1.substring(i), s2.substring(i)))\n            return true;\n        if (isScramble(s1.substring(0, i), s2.substring(s2.length() - i)) && isScramble(s1.substring(i), s2.substring(0, s2.length() - i)))\n            return true;\n    }\n    return false;\n}\n\nprivate String sorted(String s) {\n    char[] chars = s.toCharArray();\n    Arrays.sort(chars);\n    return new String(chars);\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    result = isScramble(s1, s2)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const result = isScramble(s1, s2);\n    console.log(result);\n}"
        }
    },
    "88": {
        "call_functions": {
            "c++": "void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    int i = m - 1, j = n - 1, k = m + n - 1;\n    while (i >= 0 && j >= 0) {\n        if (nums1[i] > nums2[j])\n            nums1[k--] = nums1[i--];\n        else\n            nums1[k--] = nums2[j--];\n    }\n    while (j >= 0) {\n        nums1[k--] = nums2[j--];\n    }\n}\n\nint main() {\n    vector<int> nums1 = $args;\n    int m = nums1.size();\n    vector<int> nums2;\n    int n = nums2.size();\n    merge(nums1, m, nums2, n);\n    for (int i = 0; i < m + n; i++) {\n        cout << nums1[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        }
    },
    "89": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<int> result = grayCode(n);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}"
        }
    },
    "90": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\nusing namespace std;\n\nvoid backtrack(vector<int>& nums, int index, vector<int>& subset, set<vector<int>>& result);\n\nvector<vector<int>> subsetsWithDup(vector<int>& nums) {\n    set<vector<int>> result;\n    vector<int> subset;\n    sort(nums.begin(), nums.end());\n    backtrack(nums, 0, subset, result);\n    return vector<vector<int>>(result.begin(), result.end());\n}\n\nvoid backtrack(vector<int>& nums, int index, vector<int>& subset, set<vector<int>>& result) {\n    result.insert(subset);\n    for (int i = index; i < nums.size(); i++) {\n        subset.push_back(nums[i]);\n        backtrack(nums, i + 1, subset, result);\n        subset.pop_back();\n    }\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<vector<int>> result = subsetsWithDup(nums);\n    for (auto subset : result) {\n        for (auto num : subset) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> subsetsWithDup(int[] nums) {\n    Set<List<Integer>> result = new HashSet<>();\n    Arrays.sort(nums);\n    backtrack(nums, 0, new ArrayList<Integer>(), result);\n    return new ArrayList<>(result);\n}\n\nprivate void backtrack(int[] nums, int index, List<Integer> subset, Set<List<Integer>> result) {\n    result.add(new ArrayList<>(subset));\n    for (int i = index; i < nums.length; i++) {\n        subset.add(nums[i]);\n        backtrack(nums, i + 1, subset, result);\n        subset.remove(subset.size() - 1);\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = subsetsWithDup(nums)\n    print(result)",
            "javascript": "function main() {\n  const nums = $args;\n  const result = subsetsWithDup(nums);\n  console.log(result);\n}"
        }
    },
    "91": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = numDecodings(s);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "92": {
        "call_functions": {
            "c++": "ListNode* reverseBetween(ListNode* head, int left, int right) {\n    if (!head || left == right) return head;\n    ListNode dummy(0);\n    dummy.next = head;\n    ListNode* pre = &dummy;\n    for (int i = 1; i < left; ++i) pre = pre->next;\n    ListNode* cur = pre->next;\n    for (int i = left; i < right; ++i) {\n        ListNode* t = cur->next;\n        cur->next = t->next;\n        t->next = pre->next;\n        pre->next = t;\n    }\n    return dummy.next;\n}",
            "java": "public ListNode reverseBetween(ListNode head, int left, int right) {\n    if (head == null || left == right) return head;\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode pre = dummy;\n    for (int i = 1; i < left; ++i) pre = pre.next;\n    ListNode cur = pre.next;\n    for (int i = left; i < right; ++i) {\n        ListNode t = cur.next;\n        cur.next = t.next;\n        t.next = pre.next;\n        pre.next = t;\n    }\n    return dummy.next;\n}",
            "python": "if __name__ == \"__main__\":\n    head = $args[0]\n    left = $args[1]\n    right = $args[2]\n    result = reverseBetween(head, left, right)\n    print(result)"
        }
    },
    "93": {
        "call_functions": {
            "c++": "#include<vector>\n#include<string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    vector<string> result = restore_ip_address(s);\n    for (string ip : result) {\n        cout << ip << endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> restoreIpAddresses(String s) {\n    List<String> result = new ArrayList<>();\n    dfs(s, 0, \"\", result, 0);\n    return result;\n}\n\nprivate void dfs(String s, int start, String ip, List<String> result, int part) {\n    if (part == 4 && start == s.length()) {\n        result.add(ip.substring(0, ip.length() - 1));\n        return;\n    }\n    if (part == 4 || start >= s.length()) return;\n\n    int num = 0;\n    for (int i = start; i < s.length(); i++) {\n        num = num * 10 + (s.charAt(i) - '0');\n        if (num > 255) break;\n        dfs(s, i + 1, ip + s.charAt(i) + \".\", result, part + 1);\n        if (num == 0) break;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = restore_ip_addresses(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = restoreIpAddresses(s);\n    console.log(result);\n}"
        }
    },
    "97": {
        "call_functions": {
            "c++": "bool isInterleave(string s1, string s2, string s3) {\n    int m = s1.length(), n = s2.length();\n    if (m + n != s3.length()) return false;\n\n    vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\n    dp[0][0] = true;\n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i - 1][0] && s1[i - 1] == s3[i - 1];\n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j - 1] && s2[j - 1] == s3[j - 1];\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||\n                       (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);\n        }\n    }\n\n    return dp[m][n];\n}",
            "java": "public boolean isInterleave(String s1, String s2, String s3) {\n    int m = s1.length(), n = s2.length();\n    if (m + n != s3.length()) return false;\n\n    boolean[][] dp = new boolean[m + 1][n + 1];\n    dp[0][0] = true;\n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);\n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) ||\n                       (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    s1 = $args[0]\n    s2 = $args[1]\n    s3 = $args[2]\n    result = isInterleave(s1, s2, s3)\n    print(result)",
            "javascript": "function main() {\n    const s1 = $args[0];\n    const s2 = $args[1];\n    const s3 = $args[2];\n    const result = isInterleave(s1, s2, s3);\n    console.log(result);\n}"
        }
    },
    "99": {
        "call_functions": {
            "c++": "void recoverTree(TreeNode* root) {\n    TreeNode *first = nullptr, *second = nullptr, *prev = nullptr;\n    inorder(root, first, second, prev);\n    std::swap(first->val, second->val);\n}"
        }
    },
    "101": {
        "call_functions": {
            "c++": "bool isSymmetric(TreeNode* root) {\n    return checkSymmetry(root, root);\n}\n\nbool checkSymmetry(TreeNode* node1, TreeNode* node2) {\n    if (!node1 && !node2) return true;\n    if (!node1 || !node2) return false;\n    return (node1->val == node2->val) && checkSymmetry(node1->right, node2->left) && checkSymmetry(node1->left, node2->right);\n}",
            "java": "public boolean isSymmetric(TreeNode root) {\n    return checkSymmetry(root, root);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = isSymmetric(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = isSymmetric(root);\n    console.log(result);\n}"
        }
    },
    "104": {
        "call_functions": {
            "c++": "int main() {\n    TreeNode* root = $args;\n    int result = maxDepth(root);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "107": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n\nint main() {\n    TreeNode* root = $args;\n    std::vector<std::vector<int>> result = levelOrderBottom(root);\n\n    for (const auto& level : result) {\n        for (const auto& val : level) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<Integer>> levelOrderBottom(TreeNode root) {\n    List<List<Integer>> result = new ArrayList<>();\n    if (root == null) return result;\n\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n        List<Integer> level = new ArrayList<>();\n        int size = queue.size();\n\n        for (int i = 0; i < size; i++) {\n            TreeNode current = queue.poll();\n            level.add(current.val);\n\n            if (current.left != null) queue.add(current.left);\n            if (current.right != null) queue.add(current.right);\n        }\n        result.add(0, level);\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = levelOrderBottom(root)\n    print(result)",
            "javascript": "function levelOrderBottom(root) {\n    const result = [];\n    if (!root) return result;\n\n    const queue = [root];\n\n    while (queue.length > 0) {\n        const level = [];\n        const size = queue.length;\n\n        for (let i = 0; i < size; i++) {\n            const current = queue.shift();\n            level.push(current.val);\n\n            if (current.left) queue.push(current.left);\n            if (current.right) queue.push(current.right);\n        }\n        result.unshift(level);\n    }\n\n    return result;\n}"
        }
    },
    "115": {
        "call_functions": {
            "c++": "int numDistinct(string s, string t) {\n    int m = s.size(), n = t.size();\n    vector<vector<unsigned int>> dp(m + 1, vector<unsigned int>(n + 1, 0));\n\n    for (int i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (s[i - 1] == t[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "java": "public int numDistinct(String s, String t) {\n    int m = s.length(), n = t.length();\n    int[][] dp = new int[m + 1][n + 1];\n\n    for (int i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (s.charAt(i - 1) == t.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n\n    return dp[m][n];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = numDistinct(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = numDistinct(s, t);\n    console.log(result);\n}"
        }
    },
    "116": {
        "call_functions": {
            "c++": "void connect(Node* root) {\n    if (!root) return;\n    if (root->left) {\n        root->left->next = root->right;\n        if (root->next) {\n            root->right->next = root->next->left;\n        }\n    }\n    connect(root->left);\n    connect(root->right);\n}"
        }
    },
    "118": {
        "call_functions": {
            "c++": "vector<vector<int>> generate(int numRows) {\n    vector<vector<int>> pascalsTriangle(numRows);\n    for (int i = 0; i < numRows; i++) {\n        pascalsTriangle[i].resize(i + 1);\n        pascalsTriangle[i][0] = pascalsTriangle[i][i] = 1;\n        for (int j = 1; j < i; j++) {\n            pascalsTriangle[i][j] = pascalsTriangle[i - 1][j - 1] + pascalsTriangle[i - 1][j];\n        }\n    }\n    return pascalsTriangle;\n}",
            "java": "public List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> pascalsTriangle = new ArrayList<>();\n    for (int i = 0; i < numRows; i++) {\n        List<Integer> row = new ArrayList<>();\n        row.add(1);\n        for (int j = 1; j < i; j++) {\n            row.add(pascalsTriangle.get(i - 1).get(j - 1) + pascalsTriangle.get(i - 1).get(j));\n        }\n        if (i > 0) row.add(1);\n        pascalsTriangle.add(row);\n    }\n    return pascalsTriangle;\n}",
            "python": "if __name__ == \"__main__\":\n    numRows = $args[0]\n    result = generate(numRows)\n    print(result)",
            "javascript": "function main() {\n    const numRows = $args;\n    const result = generate(numRows);\n    console.log(result);\n}"
        }
    },
    "120": {
        "call_functions": {
            "c++": "int main() {\n    vector<vector<int>> triangle = $args;\n    int result = minimumTotal(triangle);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minimumTotal(List<List<Integer>> triangle) {\n    for (int row = triangle.size() - 2; row >= 0; row--) {\n        for (int col = 0; col < triangle.get(row).size(); col++) {\n            int minSum = Math.min(triangle.get(row + 1).get(col), triangle.get(row + 1).get(col + 1));\n            triangle.get(row).set(col, triangle.get(row).get(col) + minSum);\n        }\n    }\n    return triangle.get(0).get(0);\n}",
            "python": "if __name__ == \"__main__\":\n    triangle = $args[0]\n    result = minimumTotal(triangle)\n    print(result)",
            "javascript": "function main() {\n    const triangle = $args;\n    const result = minimumTotal(triangle);\n    console.log(result);\n}"
        }
    },
    "121": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "122": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxProfit(int[] prices) {\n    int max_profit = 0;\n    for (int i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max_profit += prices[i] - prices[i - 1];\n        }\n    }\n    return max_profit;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    result = max_profit(prices)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args;\n    const result = maxProfit(prices);\n    console.log(result);\n}"
        }
    },
    "123": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxProfit(int[] prices) {\n    int buy1 = Integer.MAX_VALUE, buy2 = Integer.MAX_VALUE;\n    int profit1 = 0, profit2 = 0;\n    \n    for (int price : prices) {\n        buy1 = Math.min(buy1, price);\n        profit1 = Math.max(profit1, price - buy1);\n        buy2 = Math.min(buy2, price - profit1);\n        profit2 = Math.max(profit2, price - buy2);\n    }\n    \n    return profit2;\n}"
        }
    },
    "125": {
        "call_functions": {
            "c++": "#include <cctype>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    bool result = isPalindrome(s);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isPalindrome(String s) {\n    StringBuilder cleaned = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLetterOrDigit(c)) {\n            cleaned.append(Character.toLowerCase(c));\n        }\n    }\n    int left = 0, right = cleaned.length() - 1;\n    while (left < right) {\n        if (cleaned.charAt(left++) != cleaned.charAt(right--)) return false;\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = isPalindrome(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = isPalindrome(s);\n    console.log(result);\n}"
        }
    },
    "126": {
        "call_functions": {
            "c++": "std::vector<std::vector<std::string>> findLadders(std::string beginWord, std::string endWord, std::vector<std::string>& wordList) {\n    std::unordered_set<std::string> dict(wordList.begin(), wordList.end());\n    if (dict.find(endWord) == dict.end()) {\n        return {};\n    }\n    std::unordered_map<std::string, std::vector<std::string>> adjacent;\n    std::unordered_map<std::string, int> distance;\n    \n    auto neighbors = [&](const std::string& word) {\n        std::vector<std::string> result;\n        std::string temp = word;\n        for (char& ch : temp) {\n            char original = ch;\n            for (int i = 'a'; i <= 'z'; ++i) {\n                ch = i;\n                if (dict.count(temp) && temp != word) {\n                    result.push_back(temp);\n                }\n            }\n            ch = original;\n        }\n        return result;\n    };\n    \n    std::queue<std::string> q;\n    q.push(beginWord);\n    distance[beginWord] = 0;\n    \n    while (!q.empty()) {\n        std::string current = q.front();\n        q.pop();\n        if (current == endWord) {\n            break;\n        }\n        for (const std::string& neighbor : neighbors(current)) {\n            if (!distance.count(neighbor)) {\n                distance[neighbor] = distance[current] + 1;\n                q.push(neighbor);\n            }\n            if (distance[neighbor] == distance[current] + 1) {\n                adjacent[current].push_back(neighbor);\n            }\n        }\n    }\n    \n    std::vector<std::vector<std::string>> result;\n    std::vector<std::string> path = {beginWord};\n    std::function<void(const std::string&)> backtrack = [&](const std::string& word) {\n        if (word == endWord) {\n            result.push_back(path);\n            return;\n        }\n        for (const std::string& next : adjacent[word]) {\n            path.push_back(next);\n            backtrack(next);\n            path.pop_back();\n        }\n    };\n    \n    backtrack(beginWord);\n    return result;\n}",
            "java": "public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n    Set<String> dict = new HashSet<>(wordList);\n    if (!dict.contains(endWord)) {\n        return Collections.emptyList();\n    }\n\n    Map<String, List<String>> adjacent = new HashMap<>();\n    Map<String, Integer> distance = new HashMap<>();\n    Queue<String> queue = new LinkedList<>();\n    queue.offer(beginWord);\n    distance.put(beginWord, 0);\n\n    while (!queue.isEmpty()) {\n        String current = queue.poll();\n        if (current.equals(endWord)) {\n            break;\n        }\n        for (String neighbor : neighbors(current)) {\n            if (!dict.contains(neighbor)) {\n                continue;\n            }\n            if (!distance.containsKey(neighbor)) {\n                distance.put(neighbor, distance.get(current) + 1);\n                queue.offer(neighbor);\n            }\n            if (distance.get(neighbor).equals(distance.get(current) + 1)) {\n                adjacent.computeIfAbsent(current, k -> new ArrayList<>()).add(neighbor);\n            }\n        }\n    }\n\n    List<List<String>> result = new ArrayList<>();\n    List<String> path = new ArrayList<>();\n    path.add(beginWord);\n    backtrack(beginWord, endWord, path, adjacent, result);\n    return result;\n}\n\nprivate void backtrack(String current, String endWord, List<String> path, Map<String, List<String>> adjacent, List<List<String>> result) {\n    if (current.equals(endWord)) {\n        result.add(new ArrayList<>(path));\n        return;\n    }\n    for (String next : adjacent.getOrDefault(current, Collections.emptyList())) {\n        path.add(next);\n        backtrack(next, endWord, path, adjacent, result);\n        path.remove(path.size() - 1);\n    }\n}\n\nprivate List<String> neighbors(String word) {\n    List<String> result = new ArrayList<>();\n    char[] chars = word.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        char original = chars[i];\n        for (char j = 'a'; j <= 'z'; j++) {\n            if (j == original) {\n                continue;\n            }\n            chars[i] = j;\n            result.add(new String(chars));\n        }\n        chars[i] = original;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    beginWord = $args[0]\n    endWord = $args[1]\n    wordList = $args[2]\n    result = findLadders(beginWord, endWord, wordList)\n    print(result)",
            "javascript": "function findLadders(beginWord, endWord, wordList) {\n    const dict = new Set(wordList);\n    if (!dict.has(endWord)) {\n        return [];\n    }\n\n    const adjacent = new Map();\n    const distance = new Map();\n    const queue = [beginWord];\n    distance.set(beginWord, 0);\n    \n    function neighbors(word) {\n        const result = [];\n        for (let i = 0; i < word.length; i++) {\n            for (let j = 'a'.charCodeAt(0); j <= 'z'.charCodeAt(0); j++) {\n                const next = word.slice(0, i) + String.fromCharCode(j) + word.slice(i + 1);\n                if (next !== word) {\n                    result.push(next);\n                }\n            }\n        }\n        return result;\n    }\n    \n    while (queue.length > 0) {\n        const current = queue.shift();\n        if (current === endWord) {\n            break;\n        }\n        for (const neighbor of neighbors(current)) {\n            if (!dict.has(neighbor)) {\n                continue;\n            }\n            if (!distance.has(neighbor)) {\n                distance.set(neighbor, distance.get(current) + 1);\n                queue.push(neighbor);\n            }\n            if (distance.get(neighbor) === distance.get(current) + 1) {\n                if (!adjacent.has(current)) {\n                    adjacent.set(current, []);\n                }\n                adjacent.get(current).push(neighbor);\n            }\n        }\n    }\n\n    const result = [];\n    const path = [beginWord];\n\n    function backtrack(word) {\n        if (word === endWord) {\n            result.push([...path]);\n            return;\n        }\n        for (const next of (adjacent.get(word) || [])) {\n            path.push(next);\n            backtrack(next);\n            path.pop();\n        }\n    }\n    \n    backtrack(beginWord);\n    return result;\n}"
        }
    },
    "127": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n\nint main() {\n    std::string beginWord = $args;\n    std::string endWord = $args;\n    std::vector<std::string> wordList = $args;\n    int result = ladderLength(beginWord, endWord, wordList);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n    Set<String> dict = new HashSet<>(wordList);\n    if (!dict.contains(endWord)) return 0;\n\n    Queue<String> q = new LinkedList<>();\n    q.offer(beginWord);\n    int steps = 1;\n\n    while (!q.isEmpty()) {\n        int size = q.size();\n        for (int i = 0; i < size; ++i) {\n            String currentWord = q.poll();\n            if (currentWord.equals(endWord)) return steps;\n\n            char[] charArray = currentWord.toCharArray();\n            for (int j = 0; j < charArray.length; ++j) {\n                char originalChar = charArray[j];\n                for (int k = 0; k < 26; ++k) {\n                    charArray[j] = (char) ('a' + k);\n                    String newWord = new String(charArray);\n                    if (dict.remove(newWord)) {\n                        q.offer(newWord);\n                    }\n                }\n                charArray[j] = originalChar;\n            }\n        }\n        ++steps;\n    }\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    beginWord = $args[0]\n    endWord = $args[1]\n    wordList = $args[2]\n    result = ladderLength(beginWord, endWord, wordList)\n    print(result)",
            "javascript": "function ladderLength(beginWord, endWord, wordList) {\n    const wordSet = new Set(wordList);\n    if (!wordSet.has(endWord)) return 0;\n\n    const q = [beginWord];\n    let steps = 1;\n\n    while (q.length > 0) {\n        const size = q.length;\n        const currentLevel = new Set();\n\n        for (let i = 0; i < size; ++i) {\n            const currentWord = q.shift();\n            if (currentWord === endWord) return steps;\n\n            const wordChars = currentWord.split('');\n            for (let j = 0; j < wordChars.length; ++j) {\n                const originalChar = wordChars[j];\n                for (let k = 0; k < 26; ++k) {\n                    wordChars[j] = String.fromCharCode('a'.charCodeAt(0) + k);\n                    const newWord = wordChars.join('');\n                    if (wordSet.has(newWord)) {\n                        q.push(newWord);\n                        currentLevel.add(newWord);\n                    }\n                }\n                wordChars[j] = originalChar;\n            }\n        }\n        steps++;\n        for (const word of currentLevel) {\n            wordSet.delete(word);\n        }\n    }\n    return 0;\n}"
        }
    },
    "128": {
        "call_functions": {
            "c++": "int longestConsecutive(vector<int>& nums) {\n    unordered_set<int> elements(nums.begin(), nums.end());\n    int longestSeq = 0;\n    \n    for (int num : nums) {\n        if (elements.find(num - 1) == elements.end()) {\n            int currentNum = num;\n            int currentSeq = 1;\n            \n            while (elements.find(currentNum + 1) != elements.end()) {\n                currentNum += 1;\n                currentSeq += 1;\n            }\n            \n            longestSeq = max(longestSeq, currentSeq);\n        }\n    }\n    return longestSeq;\n}",
            "java": "public int longestConsecutive(int[] nums) {\n    Set<Integer> elements = new HashSet<>();\n    for (int num : nums) {\n        elements.add(num);\n    }\n    \n    int longestSeq = 0;\n    \n    for (int num : nums) {\n        if (!elements.contains(num - 1)) {\n            int currentNum = num;\n            int currentSeq = 1;\n            \n            while (elements.contains(currentNum + 1)) {\n                currentNum++;\n                currentSeq++;\n            }\n            \n            longestSeq = Math.max(longestSeq, currentSeq);\n        }\n    }\n    return longestSeq;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = longest_consecutive(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = longestConsecutive(nums);\n    console.log(result);\n}"
        }
    },
    "129": {
        "call_functions": {
            "c++": "int main() {\n    TreeNode* root = $args;\n    int result = sumNumbers(root);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int sumNumbers(TreeNode root) {\n    return sumNumbersHelper(root, 0);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = sumNumbers(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const result = sumNumbers(root);\n    console.log(result);\n}\n"
        }
    },
    "131": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nbool isPalindrome(const std::string& s, int start, int end) {\n    while (start < end) {\n        if (s[start++] != s[end--]) return false;\n    }\n    return true;\n}\n\nvoid dfs(const std::string& s, int start, std::vector<std::vector<std::string>>& results, std::vector<std::string> current) {\n    if (start == s.length()) {\n        results.push_back(current);\n        return;\n    }\n    \n    for (int end = start; end < s.length(); ++end) {\n        if (isPalindrome(s, start, end)) {\n            current.push_back(s.substr(start, end - start + 1));\n            dfs(s, end + 1, results, current);\n            current.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<std::string>> partition(std::string s) {\n    std::vector<std::vector<std::string>> results;\n    std::vector<std::string> current;\n    dfs(s, 0, results, current);\n    return results;\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<std::vector<std::string>> result = partition(s);\n    for (const auto& vec : result) {\n        for (const auto& str : vec) {\n            std::cout << str << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<String>> partition(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = partition(s)\n    print(result)",
            "javascript": "function partition(s) {\n    let results = [];\n    dfs(s, 0, results, []);\n    return results;\n}"
        }
    },
    "132": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    int result = minCut(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minCut(String s) {\n    int n = $args.length();\n    int[] dp = new int[n + 1];\n    boolean[][] isPalindrome = new boolean[n][n];\n    \n    for (int i=0; i <= n; i++) {\n        dp[i] = i - 1;\n    }\n    \n    for (int j=1; j < n; j++) {\n        for (int i=j; i >= 0; i--) {\n            if ($args.charAt(i) == $args.charAt(j) && (j - i < 2 || isPalindrome[i + 1][j - 1])) {\n                isPalindrome[i][j] = true;\n                dp[j + 1] = Math.min(dp[j + 1], dp[i] + 1);\n            }\n        }\n    }\n    \n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = minCut(s)\n    print(result)",
            "javascript": "function minCut(s) {\n    const n = s.length;\n    const dp = Array.from({ length: n + 1 }, (_, i) => i - 1);\n    const isPalindrome = Array.from({ length: n }, () => Array(n).fill(false));\n    \n    for (let j = 1; j < n; j++) {\n        for (let i = j; i >= 0; i--) {\n            if (s[i] === s[j] && (j - i < 2 || isPalindrome[i + 1][j - 1])) {\n                isPalindrome[i][j] = true;\n                dp[j + 1] = Math.min(dp[j + 1], dp[i] + 1);\n            }\n        }\n    }\n    \n    return dp[n];\n}"
        }
    },
    "134": {
        "call_functions": {
            "c++": "int can_complete_circuit(vector<int>& gas, vector<int>& cost) {\n    int total_gas = 0, total_cost = 0, start = 0, gas_tank = 0;\n    for (int i = 0; i < gas.size(); ++i) {\n        total_gas += gas[i];\n        total_cost += cost[i];\n        gas_tank += gas[i] - cost[i];\n        if (gas_tank < 0) {\n            start = i + 1;\n            gas_tank = 0;\n        }\n    }\n    return (total_gas < total_cost) ? -1 : start;\n}"
        }
    },
    "135": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> ratings = $args;\n    int result = minCandies(ratings);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minCandies(int[] ratings) {\n    int n = ratings.length;\n    int[] candies = new int[n];\n    for (int i = 0; i < n; i++) candies[i] = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (ratings[i] > ratings[i - 1]) candies[i] = candies[i - 1] + 1;\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        if (ratings[i] > ratings[i + 1]) candies[i] = Math.max(candies[i], candies[i + 1] + 1);\n    }\n\n    int sum = 0;\n    for (int candy : candies) sum += candy;\n\n    return sum;\n}"
        }
    },
    "136": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = singleNumber(nums);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "137": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = singleNumber(nums);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "139": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\n#include <iostream>\n\nbool wordBreak(std::string s, std::vector<std::string>& wordDict) {\n    std::unordered_set<std::string> dict(wordDict.begin(), wordDict.end());\n    std::vector<bool> dp(s.size() + 1, false);\n    dp[0] = true;\n    for (size_t i = 1; i <= s.size(); ++i) {\n        for (size_t j = 0; j < i; ++j) {\n            if (dp[j] && dict.find(s.substr(j, i - j)) != dict.end()) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[s.size()];\n}\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> wordDict = {\"leet\", \"code\"};\n    bool result = wordBreak(s, wordDict);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean wordBreak(String s, List<String> wordDict) {\n    Set<String> dict = new HashSet<>(wordDict);\n    boolean[] dp = new boolean[s.length() + 1];\n    dp[0] = true;\n    for (int i = 1; i <= s.length(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (dp[j] && dict.contains(s.substring(j, i))) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[s.length()];\n}"
        }
    },
    "140": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_set>\n\nstd::vector<std::string> helper(const std::string& s, const std::unordered_set<std::string>& dict, std::unordered_map<std::string, std::vector<std::string>>& memo);\n\nstd::vector<std::string> wordBreak(std::string s, std::vector<std::string>& wordDict);\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> wordDict = {\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"};\n    std::vector<std::string> result = wordBreak(s, wordDict);\n    for (const auto& res : result) {\n        std::cout << res << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> wordBreak(String s, List<String> wordDict) {\n    HashSet<String> dict = new HashSet<>(wordDict);\n    HashMap<String, List<String>> memo = new HashMap<>();\n    return helper(s, dict, memo);\n}\n\nprivate List<String> helper(String s, HashSet<String> dict, HashMap<String, List<String>> memo) {\n    if (memo.containsKey(s)) {\n        return memo.get(s);\n    }\n    \n    List<String> res = new ArrayList<>();\n    if (dict.contains(s)) {\n        res.add(s);\n    }\n    \n    for (int i = 1; i < s.length(); ++i) {\n        String prefix = s.substring(0, i);\n        if (!dict.contains(prefix)) continue;\n        String suffix = s.substring(i);\n        List<String> temp = helper(suffix, dict, memo);\n        for (String t : temp) {\n            res.add(prefix + \" \" + t);\n        }\n    }\n\n    memo.put(s, res);\n    return res;\n}"
        }
    },
    "141": {
        "call_functions": {
            "c++": "bool hasCycle(ListNode *head) {\n    ListNode *slow = head, *fast = head;\n    while (fast != nullptr && fast->next != nullptr) {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean hasCycle(ListNode head) {\n    ListNode slow = head, fast = head;\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    head = $args[0]\n    result = hasCycle(head)\n    print(result)",
            "javascript": "function main() {\n    const head = $args;\n    const result = hasCycle(head);\n    console.log(result);\n}"
        }
    },
    "146": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <list>\nusing namespace std;\n\nint main() {\n    int capacity = $args;\n    LRUCache lru(capacity);\n    int result = lru.get(1);\n    lru.put(1, 1);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int get(int key) {\n        Node node = cache.get(key);\n        if (node == null) return -1;\n        moveToHead(node);\n        return node.value;\n    }",
            "python": "if __name__ == \"__main__\":\n    capacity = $args[0]\n    cache = LRUCache(capacity)\n    cache.put(1, 1)\n    cache.put(2, 2)\n    print(cache.get(1))\n    cache.put(3, 3)\n    print(cache.get(2))\n    cache.put(4, 4)\n    print(cache.get(1))\n    print(cache.get(3))\n    print(cache.get(4))",
            "javascript": "function main() {\n    const capacity = $args;\n    const cache = new LRUCache(capacity);\n    cache.put(1, 1);\n    cache.put(2, 2);\n    const value1 = cache.get(1);\n    console.log(value1);\n    cache.put(3, 3);\n    const value2 = cache.get(2);\n    console.log(value2);\n}"
        }
    },
    "149": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\nusing namespace std;\n\nint maxPoints(vector<vector<int>>& points) {\n    int n = points.size();\n    if (n <= 2) return n;\n    int max_count = 0;\n\n    for (int i = 0; i < n; i++) {\n        std::unordered_map<string, int> slope_map;\n        int duplicates = 0, local_max = 0;\n\n        for (int j = i + 1; j < n; j++) {\n            int deltaX = points[j][0] - points[i][0];\n            int deltaY = points[j][1] - points[i][1];\n\n            if (deltaX == 0 && deltaY == 0) {\n                duplicates++;\n                continue;\n            }\n\n            int gcd = std::gcd(deltaX, deltaY);\n            deltaX /= gcd;\n            deltaY /= gcd;\n\n            string key = to_string(deltaX) + \"_\" + to_string(deltaY);\n            slope_map[key]++;\n            local_max = max(local_max, slope_map[key]);\n        }\n        max_count = max(max_count, local_max + duplicates + 1);\n    }\n\n    return max_count;\n}\n\nint main() {\n    vector<vector<int>> points = $args;\n    int result = maxPoints(points);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxPoints(int[][] points) {\n    int n = points.length;\n    if (n <= 2) return n;\n    int maxCount = 0;\n\n    for (int i = 0; i < n-1; i++) {\n        HashMap<String, Integer> slopeMap = new HashMap<>();\n        int duplicates = 0, localMax = 0;\n\n        for (int j = i+1; j < n; j++) {\n            int deltaX = points[j][0] - points[i][0];\n            int deltaY = points[j][1] - points[i][1];\n\n            if (deltaX == 0 && deltaY == 0) {\n                duplicates++;\n                continue;\n            }\n\n            int gcd = gcd(deltaX, deltaY);\n            deltaX /= gcd;\n            deltaY /= gcd;\n\n            String key = deltaX + \"_\" + deltaY;\n            slopeMap.put(key, slopeMap.getOrDefault(key, 0) + 1);\n            localMax = Math.max(localMax, slopeMap.get(key));\n        }\n        maxCount = Math.max(maxCount, localMax + duplicates + 1);\n    }\n\n    return maxCount;\n}",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = maxPoints(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = maxPoints(points);\n    console.log(result);\n}"
        }
    },
    "150": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <stack>\n#include <iostream>\n\nint main() {\n    vector<string> tokens = $args;\n    int result = evalRPN(tokens);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "151": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string s = $args;\n    std::string result = reverseWords(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String reverseWords(String s) {\n    String[] words = s.trim().split(\"\\\\s+\");\n    Collections.reverse(Arrays.asList(words));\n    return String.join(\" \", words);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = reverseWords(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = reverseWords(s);\n    console.log(result);\n}"
        }
    },
    "152": {
        "call_functions": {
            "c++": "int maxProduct(vector<int>& nums) {\n    int max_so_far = nums[0];\n    int min_so_far = nums[0];\n    int result = nums[0];\n    \n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] < 0)\n            swap(max_so_far, min_so_far);\n        \n        max_so_far = max(nums[i], max_so_far * nums[i]);\n        min_so_far = min(nums[i], min_so_far * nums[i]);\n        result = max(result, max_so_far);\n    }\n    return result;\n}",
            "java": "public int maxProduct(int[] nums) {\n    int max_so_far = nums[0];\n    int min_so_far = nums[0];\n    int result = nums[0];\n    \n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] < 0) {\n            int temp = max_so_far;\n            max_so_far = min_so_far;\n            min_so_far = temp;\n        }\n        \n        max_so_far = Math.max(nums[i], max_so_far * nums[i]);\n        min_so_far = Math.min(nums[i], min_so_far * nums[i]);\n        result = Math.max(result, max_so_far);\n    }\n    return result;\n}"
        }
    },
    "153": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = findMin(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findMin(int[] nums) {\n    int left = 0, right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] > nums[right]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return nums[left];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = find_min(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findMin(nums);\n    console.log(result);\n}"
        }
    },
    "154": {
        "call_functions": {
            "c++": "int findMin(vector<int>& nums) {\n    int low = 0, high = nums.size() - 1;\n    \n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] > nums[high]) {\n            low = mid + 1;\n        } else if (nums[mid] < nums[high]) {\n            high = mid;\n        } else {\n            high--;\n        }\n    }\n    return nums[low];\n}",
            "java": "public int findMin(int[] nums) {\n    int low = 0, high = nums.length - 1;\n    \n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (nums[mid] > nums[high]) {\n            low = mid + 1;\n        } else if (nums[mid] < nums[high]) {\n            high = mid;\n        } else {\n            high--;\n        }\n    }\n    return nums[low];\n}"
        }
    },
    "159": {
        "call_functions": {
            "c++": "int lengthOfLongestSubstringTwoDistinct(string s) {\n    int l = 0, r = 0, max_len = 0, cur_len = 0;\n    unordered_map<char, int> char_count;\n\n    while (r < s.length()) {\n        char_count[s[r]]++;\n        if (char_count.size() <= 2) {\n            cur_len++;\n        } else {\n            while (char_count.size() > 2 && l <= r) {\n                char_count[s[l]]--;\n                if (char_count[s[l]] == 0) {\n                    char_count.erase(s[l]);\n                }\n                l++;\n                cur_len--;\n            }\n            cur_len++;\n        }\n        max_len = max(max_len, cur_len);\n        r++;\n    }\n    return max_len;\n}",
            "java": "public int lengthOfLongestSubstringTwoDistinct(String s) {\n    int l = 0, r = 0, max_len = 0, cur_len = 0;\n    HashMap<Character, Integer> char_count = new HashMap<>();\n\n    while (r < s.length()) {\n        char_count.put(s.charAt(r), char_count.getOrDefault(s.charAt(r), 0) + 1);\n        if (char_count.size() <= 2) {\n            cur_len++;\n        } else {\n            while (char_count.size() > 2 && l <= r) {\n                char_count.put(s.charAt(l), char_count.get(s.charAt(l)) - 1);\n                if (char_count.get(s.charAt(l)) == 0) {\n                    char_count.remove(s.charAt(l));\n                }\n                l++;\n                cur_len--;\n            }\n            cur_len++;\n        }\n        max_len = Math.max(max_len, cur_len);\n        r++;\n    }\n    return max_len;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = lengthOfLongestSubstringTwoDistinct(s)\n    print(result)",
            "javascript": "function lengthOfLongestSubstringTwoDistinct(s) {\n    const input = $args;\n    let l = 0, r = 0, max_len = 0, cur_len = 0;\n    const char_count = new Map();\n\n    while (r < input.length) {\n        char_count.set(input[r], (char_count.get(input[r]) || 0) + 1);\n        if (char_count.size <= 2) {\n            cur_len++;\n        } else {\n            while (char_count.size > 2 && l <= r) {\n                char_count.set(input[l], char_count.get(input[l]) - 1);\n                if (char_count.get(input[l]) === 0) {\n                    char_count.delete(input[l]);\n                }\n                l++;\n                cur_len--;\n            }\n            cur_len++;\n        }\n        max_len = Math.max(max_len, cur_len);\n        r++;\n    }\n    return max_len;\n}"
        }
    },
    "161": {
        "call_functions": {
            "c++": "bool isOneEditDistance(string s, string t) {\n    int m = s.length(), n = t.length();\n    if (m > n) {\n        return isOneEditDistance(t, s);\n    }\n    if (n - m > 1) {\n        return false;\n    }\n    bool flag = false;\n    for (int i = 0; i < m; ++i) {\n      if (s[i] != t[i]) {\n          if (m < n) {\n              return s.substr(i) == t.substr(i + 1);\n          } else {\n              return s.substr(i + 1) == t.substr(i + 1);\n          }\n      }\n    }\n    return m + 1 == n;\n}\n\nint main() {\n    string s = $args;\n    string t = $args;\n    bool result = isOneEditDistance(s, t);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean isOneEditDistance(String s, String t) {\n    int m = s.length();\n    int n = t.length();\n    if (m > n) {\n        return isOneEditDistance(t, s);\n    }\n    if (n - m > 1) {\n        return false;\n    }\n    for (int i = 0; i < m; ++i) {\n        if (s.charAt(i) != t.charAt(i)) {\n            if (m < n) {\n                return s.substring(i).equals(t.substring(i + 1));\n            } else {\n                return s.substring(i + 1).equals(t.substring(i + 1));\n            }\n        }\n    }\n    return m + 1 == n;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = isOneEditDistance(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = isOneEditDistance(s, t);\n    console.log(result);\n}"
        }
    },
    "162": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = findPeakElement(nums);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "163": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int lower = 0;\n    int upper = 10;\n    std::vector<std::string> result = findMissingRanges(nums, lower, upper);\n\n    for (const auto& range : result) {\n        std::cout << range << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<String> findMissingRanges(int[] nums, int lower, int upper) {\n    List<String> result = new ArrayList<>();\n    long prev = (long) lower - 1;\n\n    for (int i = 0; i <= nums.length; ++i) {\n        long cur = (i == nums.length) ? (long) upper + 1 : nums[i];\n        if (cur - prev >= 2) {\n            result.add(Long.toString(prev + 1) + (cur - prev == 2 ? \"\" : \"->\") + Long.toString(cur - 1));\n        }\n        prev = cur;\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    lower = $args[1]\n    upper = $args[2]\n    result = find_missing_ranges(nums, lower, upper)\n    print(result)",
            "javascript": "function findMissingRanges(nums, lower, upper) {\n    const result = findMissingRanges(nums, lower, upper);\n    console.log(result);\n}"
        }
    },
    "164": {
        "call_functions": {
            "c++": "int maximumGap(vector<int>& nums) {\n    if (nums.size() < 2) return 0;\n    \n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    int len = nums.size();\n    int bucket_size = max(1, (max_val - min_val) / (len - 1));\n    int bucket_num = (max_val - min_val) / bucket_size + 1;\n    vector<pair<int, int>> buckets(bucket_num, {INT_MAX, INT_MIN});\n\n    for (int num : nums) {\n        int idx = (num - min_val) / bucket_size;\n        buckets[idx].first = min(buckets[idx].first, num);\n        buckets[idx].second = max(buckets[idx].second, num);\n    }\n\n    int max_gap = 0, prev_max = min_val;\n    for (auto& bucket : buckets) {\n        if (bucket.first == INT_MAX) continue;\n        max_gap = max(max_gap, bucket.first - prev_max);\n        prev_max = bucket.second;\n    }\n    return max_gap;\n}",
            "java": "public int maximumGap(int[] nums) {\n    if (nums.length < 2) return 0;\n\n    int min_val = Arrays.stream(nums).min().getAsInt();\n    int max_val = Arrays.stream(nums).max().getAsInt();\n    int len = nums.length;\n    int bucket_size = Math.max(1, (max_val - min_val) / (len - 1));\n    int bucket_num = (max_val - min_val) / bucket_size + 1;\n    int[][] buckets = new int[bucket_num][2];\n    for (int i = 0; i < bucket_num; i++) {\n        buckets[i] = new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE};\n    }\n\n    for (int num : nums) {\n        int idx = (num - min_val) / bucket_size;\n        buckets[idx][0] = Math.min(buckets[idx][0], num);\n        buckets[idx][1] = Math.max(buckets[idx][1], num);\n    }\n\n    int max_gap = 0, prev_max = min_val;\n    for (int[] bucket : buckets) {\n        if (bucket[0] == Integer.MAX_VALUE) continue;\n        max_gap = Math.max(max_gap, bucket[0] - prev_max);\n        prev_max = bucket[1];\n    }\n    return max_gap;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maximumGap(nums)\n    print(result)",
            "javascript": "function maximumGap(nums) {\n    if (nums.length < 2) return 0;\n\n    let min_val = Math.min(...nums);\n    let max_val = Math.max(...nums);\n    let len = nums.length;\n    let bucket_size = Math.max(1, Math.floor((max_val - min_val) / (len - 1)));\n    let bucket_num = Math.floor((max_val - min_val) / bucket_size) + 1;\n    let buckets = Array.from({ length: bucket_num }, () => [Infinity, -Infinity]);\n\n    for (let num of nums) {\n        let idx = Math.floor((num - min_val) / bucket_size);\n        buckets[idx][0] = Math.min(buckets[idx][0], num);\n        buckets[idx][1] = Math.max(buckets[idx][1], num);\n    }\n\n    let max_gap = 0, prev_max = min_val;\n    for (let bucket of buckets) {\n        if (bucket[0] === Infinity) continue;\n        max_gap = Math.max(max_gap, bucket[0] - prev_max);\n        prev_max = bucket[1];\n    }\n    return max_gap;\n}"
        }
    },
    "165": {
        "call_functions": {
            "c++": "int compareVersion(string version1, string version2) {\n    int i = 0, j = 0;\n    while (i < version1.size() || j < version2.size()) {\n        int num1 = 0, num2 = 0;\n        while (i < version1.size() && version1[i] != '.') {\n            num1 = num1 * 10 + (version1[i++] - '0');\n        }\n        while (j < version2.size() && version2[j] != '.') {\n            num2 = num2 * 10 + (version2[j++] - '0');\n        }\n        if (num1 < num2) return -1;\n        if (num1 > num2) return 1;\n        i++; j++;\n    }\n    return 0;\n}",
            "java": "public int compareVersion(String version1, String version2) {\n    int i = 0, j = 0;\n    while (i < version1.length() || j < version2.length()) {\n        int num1 = 0, num2 = 0;\n        while (i < version1.length() && version1.charAt(i) != '.') {\n            num1 = num1 * 10 + (version1.charAt(i++) - '0');\n        }\n        while (j < version2.length() && version2.charAt(j) != '.') {\n            num2 = num2 * 10 + (version2.charAt(j++) - '0');\n        }\n        if (num1 < num2) return -1;\n        if (num1 > num2) return 1;\n        i++; j++;\n    }\n    return 0;\n}",
            "python": "if __name__ == \"__main__\":\n    version1 = $args[0]\n    version2 = $args[1]\n    result = compare_version(version1, version2)\n    print(result)",
            "javascript": "function main() {\n    const version1 = $args;\n    const version2 = $args;\n    const result = compareVersion(version1, version2);\n    console.log(result);\n}"
        }
    },
    "166": {
        "call_functions": {
            "c++": "#include <unordered_map>\nstd::string fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0) return \"0\";\n    std::string res;\n    if ((numerator > 0) ^ (denominator > 0)) res += '-';\n    long num = std::abs((long)numerator), den = std::abs((long)denominator);\n    res += std::to_string(num / den);\n    num %= den;\n    if (num == 0) return res;\n    res += '.';\n    std::unordered_map<int, int> map;\n    while (num) {\n        if (map.find(num) != map.end()) {\n            res.insert(map[num], \"(\");\n            res += \")\";\n            break;\n        }\n        map[num] = res.size();\n        num *= 10;\n        res += std::to_string(num / den);\n        num %= den;\n    }\n    return res;\n}\n\nint main() {\n    int numerator = $args;\n    int denominator = $args;\n    std::string result = fractionToDecimal(numerator, denominator);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String fractionToDecimal(int numerator, int denominator) {\n    if (numerator == 0) return \"0\";\n    StringBuilder res = new StringBuilder();\n    if ((numerator > 0) ^ (denominator > 0)) res.append('-');\n    long num = Math.abs((long)numerator), den = Math.abs((long)denominator);\n    res.append(num / den);\n    num %= den;\n    if (num == 0) return res.toString();\n    res.append('.');\n    HashMap<Long, Integer> map = new HashMap<>();\n    while (num != 0) {\n        if (map.containsKey(num)) {\n            res.insert(map.get(num), \"(\");\n            res.append(\")\");\n            break;\n        }\n        map.put(num, res.length());\n        num *= 10;\n        res.append(num / den);\n        num %= den;\n    }\n    return res.toString();\n}"
        }
    },
    "168": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int columnNumber = $args;\n    std::string result = convertToTitle(columnNumber);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String convertToTitle(int columnNumber) {\n    StringBuilder result = new StringBuilder();\n    while (columnNumber > 0) {\n        columnNumber--;\n        result.insert(0, (char) ('A' + columnNumber % 26));\n        columnNumber /= 26;\n    }\n    return result.toString();\n}"
        }
    },
    "169": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = majorityElement(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int[] args) {\n    int[] nums = args;\n    int count = 0;\n    Integer candidate = null;\n\n    for (int num : nums) {\n        if (count == 0) {\n            candidate = num;\n        }\n        count += (num == candidate) ? 1 : -1;\n    }\n\n    return candidate;\n}"
        }
    },
    "171": {
        "call_functions": {
            "c++": "int main() {\n    string columnTitle = $args;\n    int result = titleToNumber(columnTitle);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int titleToNumber(String columnTitle) {\n    int result = 0;\n    for (char c : columnTitle.toCharArray()) {\n        result = result * 26 + (c - 'A' + 1);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    column_title = $args[0]\n    result = title_to_number(column_title)\n    print(result)",
            "javascript": "function main() {\n    const columnTitle = $args;\n    const result = titleToNumber(columnTitle);\n    console.log(result);\n}"
        }
    },
    "174": {
        "call_functions": {
            "c++": "#include<vector>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> dungeon = $args;\n    int result = calculateMinimumHP(dungeon);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "179": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\n#include <vector>\n#include <iostream>\n\nbool compare(std::string a, std::string b) {\n    return a+b > b+a;\n}\n\nstd::string largestNumber(std::vector<int>& nums) {\n    std::vector<std::string> asStrs;\n    for (int num : nums) asStrs.push_back(std::to_string(num));\n    std::sort(asStrs.begin(), asStrs.end(), compare);\n    std::string res;\n    for (std::string s: asStrs) res += s;\n    return res[0] == '0' ? \"0\" : res;\n}\n\nint main() {\n    std::vector<int> nums = $args;\n    std::string result = largestNumber(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String largestNumber(int[] nums) {\n        String[] strNums = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            strNums[i] = String.valueOf(nums[i]);\n        }\n        Arrays.sort(strNums, (a, b) -> (b + a).compareTo(a + b));\n        if (strNums[0].equals(\"0\")) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String str : strNums) sb.append(str);\n        return sb.toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = largestNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = largestNumber(nums);\n    console.log(result);\n}"
        }
    },
    "187": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    std::vector<std::string> result = findRepeatedDnaSequences(s);\n    for (const std::string& sequence : result) {\n        std::cout << sequence << std::endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> findRepeatedDnaSequences(String s) {\n    List<String> result = new ArrayList<>();\n    HashMap<String, Integer> dnaCounter = new HashMap<>();\n\n    for (int i = 0; i <= s.length() - 10; i++) {\n        String sequence = s.substring(i, i + 10);\n        dnaCounter.put(sequence, dnaCounter.getOrDefault(sequence, 0) + 1);\n        if (dnaCounter.get(sequence) == 2) {\n            result.add(sequence);\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = findRepeatedDnaSequences(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = findRepeatedDnaSequences(s);\n    console.log(result);\n}"
        }
    },
    "188": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n\nint main() {\n    int k = $args;\n    std::vector<int> prices = {1, 2, 3, 4, 5};\n    int result = maxProfit(k, prices);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int maxProfit(int k, int[] prices) {\n    int n = prices.length;\n    if (k > n / 2) {\n        int maxProfit = 0;\n        for (int i = 1; i < n; ++i)\n            maxProfit += Math.max(prices[i] - prices[i - 1], 0);\n        return maxProfit;  \n    }\n\n    int[][] dp = new int[k + 1][n];\n    for (int i = 1; i <= k; ++i) {\n        int maxDiff = -prices[0];\n        for (int j = 1; j < n; ++j) {\n            dp[i][j] = Math.max(dp[i][j - 1], prices[j] + maxDiff);\n            maxDiff = Math.max(maxDiff, dp[i - 1][j] - prices[j]);\n        }\n    }\n    return dp[k][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    k = $args[0]\n    prices = $args[1]\n    result = maxProfit(k, prices)\n    print(result)",
            "javascript": "function maxProfit(k, prices) {\n    let n = prices.length;\n    if (k > n / 2) {\n        let maxProfit = 0;\n        for (let i = 1; i < n; ++i)\n            maxProfit += Math.max(prices[i] - prices[i - 1], 0);\n        return maxProfit;  \n    }\n\n    let dp = new Array(k + 1).fill(null).map(() => new Array(n).fill(0));\n    for (let i = 1; i <= k; ++i) {\n        let maxDiff = -prices[0];\n        for (let j = 1; j < n; ++j) {\n            dp[i][j] = Math.max(dp[i][j - 1], prices[j] + maxDiff);\n            maxDiff = Math.max(maxDiff, dp[i - 1][j] - prices[j]);\n        }\n    }\n    return dp[k][n - 1];\n}"
        }
    },
    "189": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int k = $args;\n    rotate(nums, k);\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << \" \";\n    }\n    return 0;\n}",
            "java": "public void rotate(int[] nums, int k) {\n    int n = nums.length;\n    k %= n;\n    reverse(nums, 0, n - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, n - 1);\n}\n\nprivate void reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start++] = nums[end];\n        nums[end--] = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = rotate(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    rotate(nums, k);\n    console.log(nums);\n}"
        }
    },
    "190": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nunsigned int reverseBits(unsigned int n) {\n    unsigned int res = 0;\n    for (int i = 0; i < 32; ++i) {\n        res <<= 1;\n        res |= n & 1;\n        n >>= 1;\n    }\n    return res;\n}\n\nint main() {\n    unsigned int n = $args;\n    unsigned int result = reverseBits(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "191": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    uint32_t n = $args;\n    int result = hammingWeight(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "194": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <sstream>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> content;\n    std::string line;\n    while (std::getline(std::cin, line)) {\n        content.push_back(line);\n    }\n\n    std::vector<std::string> result = transpose(content);\n\n    for (const std::string& word : result) {\n        std::cout << word << std::endl;\n    }\n\n    return 0;\n}\n",
            "java": "public List<String> transpose(List<String> content) {\n    List<List<String>> data = new ArrayList<>();\n    for (String line : content) {\n        List<String> row = new ArrayList<>(Arrays.asList(line.split(\" \")));\n        data.add(row);\n    }\n\n    List<String> result = new ArrayList<>(Collections.nCopies(data.get(0).size(), \"\"));\n    for (int i = 0; i < data.get(0).size(); i++) {\n        for (int j = 0; j < data.size(); j++) {\n            result.set(i, result.get(i) + (j > 0 ? \" \" : \"\") + data.get(j).get(i));\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    content = $args[0]\n    result = transpose(content)\n    print(result)",
            "javascript": "function main() {\n    const content = $args;\n    const result = transpose(content);\n    console.log(result);\n}"
        }
    },
    "198": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = rob(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rob(int[] nums) {\n    int prev1 = 0, prev2 = 0;\n    for (int num : nums) {\n        int temp = prev1;\n        prev1 = Math.max(prev2 + num, prev1);\n        prev2 = temp;\n    }\n    return prev1;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = rob(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = rob(nums);\n    console.log(result);\n}"
        }
    },
    "200": {
        "call_functions": {
            "c++": "void dfs(vector<vector<char>>& grid, int i, int j) {\n    if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == '0')\n        return;\n\n    grid[i][j] = '0';\n    dfs(grid, i + 1, j);\n    dfs(grid, i - 1, j);\n    dfs(grid, i, j + 1);\n    dfs(grid, i, j - 1);\n}\n\nint numIslands(vector<vector<char>>& grid) {\n    int count = 0;\n    for(int i = 0; i < grid.size(); i++) {\n        for(int j = 0; j < grid[0].size(); j++) {\n            if(grid[i][j] == '1') {\n                count++;\n                dfs(grid, i, j);\n            }\n        }\n    }\n    return count;\n}",
            "java": "public int numIslands(char[][] grid) {\n        int count = 0;\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                if(grid[i][j] == '1') {\n                    count++;\n                    dfs(grid, i, j);\n                }\n            }\n        }\n        return count;\n    }",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = numIslands(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = numIslands(grid);\n    console.log(result);\n}"
        }
    },
    "202": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    bool result = isHappy(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean isHappy(int n) {\n    int slow = n, fast = getNext(n);\n    while (fast != 1 && slow != fast) {\n        slow = getNext(slow);\n        fast = getNext(getNext(fast));\n    }\n    return fast == 1;\n}"
        }
    },
    "204": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = countPrimes(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "205": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <iostream>\n\nbool isIsomorphic(std::string s, std::string t);\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    bool result = isIsomorphic(s, t);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n\nbool isIsomorphic(std::string s, std::string t) {\n    std::unordered_map<char, char> map1, map2;\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (map1.find(s[i]) == map1.end()) {\n            map1[s[i]] = t[i];\n        }\n        if (map2.find(t[i]) == map2.end()) {\n            map2[t[i]] = s[i];\n        }\n        if (map1[s[i]] != t[i] || map2[t[i]] != s[i]) {\n            return false;\n        }\n    }\n    return true;\n}",
            "java": "public boolean isIsomorphic(String s, String t) {\n    HashMap<Character, Character> map1 = new HashMap<>();\n    HashMap<Character, Character> map2 = new HashMap<>();\n    \n    for (int i = 0; i < s.length(); i++) {\n        char sChar = s.charAt(i);\n        char tChar = t.charAt(i);\n        \n        if (!map1.containsKey(sChar)) {\n            map1.put(sChar, tChar);\n        }\n        if (!map2.containsKey(tChar)) {\n            map2.put(tChar, sChar);\n        }\n        \n        if (map1.get(sChar) != tChar || map2.get(tChar) != sChar) {\n           return false;\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = is_isomorphic(s, t)\n    print(result)",
            "javascript": "function isIsomorphic(s, t) {\n    let map1 = new Map();\n    let map2 = new Map();\n    for (let i = 0; i < s.length; i++) {\n        let sChar = s[i];\n        let tChar = t[i];\n\n        if (!map1.has(sChar)) {\n            map1.set(sChar, tChar);\n        }\n        if (!map2.has(tChar)) {\n            map2.set(tChar, sChar);\n        }\n\n        if (map1.get(sChar) !== tChar || map2.get(tChar) !== sChar) {\n            return false;\n        }\n    }\n    return true;\n}"
        }
    },
    "207": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <iostream>\n\nint main() {\n    int numCourses = $args;\n    std::vector<std::vector<int>> prerequisites;\n    bool result = canFinish(numCourses, prerequisites);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
            "java": "public boolean canFinish(int numCourses, int[][] prerequisites) {\n    List<List<Integer>> adj = new ArrayList<>(numCourses);\n    int[] inDegree = new int[numCourses];\n    \n    for (int i = 0; i < numCourses; i++)\n        adj.add(new ArrayList<>());\n    \n    for (int[] p : prerequisites) {\n        adj.get(p[1]).add(p[0]);\n        inDegree[p[0]]++;\n    }\n    \n    Queue<Integer> q = new LinkedList<>();\n    for (int i = 0; i < numCourses; i++) {\n        if (inDegree[i] == 0) q.add(i);\n    }\n    \n    while (!q.isEmpty()) {\n        int currCourse = q.poll();\n        numCourses--;\n        \n        for (int nextCourse : adj.get(currCourse)) {\n            inDegree[nextCourse]--;\n            if (inDegree[nextCourse] == 0) q.add(nextCourse);\n        }\n    }\n    \n    return numCourses == 0;\n}",
            "python": "if __name__ == \"__main__\":\n    numCourses = $args[0]\n    prerequisites = $args[1]\n    result = canFinish(numCourses, prerequisites)\n    print(result)",
            "javascript": "function main() {\n    const numCourses = $args[0];\n    const prerequisites = $args[1];\n    const result = canFinish(numCourses, prerequisites);\n    console.log(result);\n}"
        }
    },
    "209": {
        "call_functions": {
            "c++": "#include <climits>\n#include <vector>\n#include <iostream>\nusing namespace std;\n\nint minSubArrayLen(int target, vector<int>& nums) {\n    int left = 0, cur_sum = 0, min_len = INT_MAX;\n    for (int right = 0; right < nums.size(); right++) {\n        cur_sum += nums[right];\n        while (cur_sum >= target) {\n            min_len = min(min_len, right - left + 1);\n            cur_sum -= nums[left++];\n        }\n    }\n    return min_len == INT_MAX ? 0 : min_len;\n}\n\nint main() {\n    int target = $args;\n    vector<int> nums = {1, 4, 4};\n    int result = minSubArrayLen(target, nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minSubArrayLen(int target, int[] nums) {\n    int left = 0, cur_sum = 0, min_len = Integer.MAX_VALUE;\n    for (int right = 0; right < nums.length; right++) {\n        cur_sum += nums[right];\n        while (cur_sum >= target) {\n            min_len = Math.min(min_len, right - left + 1);\n            cur_sum -= nums[left++];\n        }\n    }\n    return min_len == Integer.MAX_VALUE ? 0 : min_len;\n}"
        }
    },
    "210": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nint main() {\n    int numCourses = $args;\n    vector<vector<int>> prerequisites;\n    // populate prerequisites vector\n    vector<int> result = findOrder(numCourses, prerequisites);\n    // print result\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] findOrder(int numCourses, int[][] prerequisites) {\n    int[] inDegree = new int[numCourses];\n    List<List<Integer>> adjList = new ArrayList<>();\n    \n    for (int i = 0; i < numCourses; i++) {\n        adjList.add(new ArrayList<>());\n    }\n    \n    for (int[] p : prerequisites) {\n        adjList.get(p[1]).add(p[0]);\n        inDegree[p[0]]++;\n    }\n    \n    Queue<Integer> q = new LinkedList<>();\n    for (int i = 0; i < numCourses; i++) {\n        if (inDegree[i] == 0) {\n            q.offer(i);\n        }\n    }\n    \n    int[] order = new int[numCourses];\n    int index = 0;\n    \n    while (!q.isEmpty()) {\n        int curr = q.poll();\n        order[index++] = curr;\n        for (int next : adjList.get(curr)) {\n            if (--inDegree[next] == 0) {\n                q.offer(next);\n            }\n        }\n    }\n    \n    return (index == numCourses) ? order : new int[0];\n}",
            "python": "if __name__ == \"__main__\":\n    numCourses = $args[0]\n    prerequisites = $args[1]\n    result = findOrder(numCourses, prerequisites)\n    print(result)",
            "javascript": "function findOrder(numCourses, prerequisites) {\n    const inDegree = new Array(numCourses).fill(0);\n    const adjList = Array.from({ length: numCourses }, () => []);\n    \n    for (const p of prerequisites) {\n        adjList[p[1]].push(p[0]);\n        inDegree[p[0]]++;\n    }\n    \n    const q = [];\n    for (let i = 0; i < numCourses; i++) {\n        if (inDegree[i] === 0) {\n            q.push(i);\n        }\n    }\n    \n    const order = [];\n    \n    while (q.length) {\n        const curr = q.shift();\n        order.push(curr);\n        for (const next of adjList[curr]) {\n            if (--inDegree[next] === 0) {\n                q.push(next);\n            }\n        }\n    }\n    \n    return (order.length === numCourses) ? order : [];\n}"
        }
    },
    "212": {
        "call_functions": {
            "c++": "std::vector<std::string> findWords(std::vector<std::vector<char>>& board, std::vector<std::string>& words) {\n    std::vector<std::string> result;\n    for (const auto& word : words) {\n        bool found = false;\n        std::vector<std::vector<bool>> visited(board.size(), std::vector<bool>(board[0].size(), false));\n        for (int i = 0; i < board.size() && !found; ++i) {\n            for (int j = 0; j < board[0].size() && !found; ++j) {\n                dfs(board, word, 0, i, j, visited, found);\n            }\n        }\n        if (found) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n",
            "java": "public List<String> findWords(char[][] board, String[] words) {\n    List<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (exist(board, word)) {\n            result.add(word);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    words = $args[1]\n    result = findWords(board, words)\n    print(result)",
            "javascript": "function findWords(board, words) {\n    function dfs(board, word, index, i, j, visited) {\n        if (index === word.length) {\n            return true;\n        }\n        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j] || board[i][j] !== word.charAt(index)) {\n            return false;\n        }\n        visited[i][j] = true;\n        const found = dfs(board, word, index + 1, i - 1, j, visited) ||\n                      dfs(board, word, index + 1, i + 1, j, visited) ||\n                      dfs(board, word, index + 1, i, j - 1, visited) ||\n                      dfs(board, word, index + 1, i, j + 1, visited);\n        visited[i][j] = false;\n        return found;\n    }\n\n    const res = [];\n    for (const word of words) {\n        let found = false;\n        for (let i = 0; i < board.length && !found; i++) {\n            for (let j = 0; j < board[0].length && !found; j++) {\n                if (dfs(board, word, 0, i, j, Array.from({ length: board.length }, () => Array(board[0].length).fill(false)))) {\n                    found = true;\n                }\n            }\n        }\n        if (found) {\n            res.push(word);\n        }\n    }\n    return res;\n}"
        }
    },
    "213": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = rob(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rob(int[] nums) {\n    if (nums.length == 1) return nums[0];\n    int prev = 0, curr = 0;\n    for (int i = 0; i < nums.length - 1; i++) {\n        int temp = Math.max(curr, prev + nums[i]);\n        prev = curr;\n        curr = temp;\n    }\n    int res = curr;\n    prev = 0;\n    curr = 0;\n    for (int i = 1; i < nums.length; i++) {\n        int temp = Math.max(curr, prev + nums[i]);\n        prev = curr;\n        curr = temp;\n    }\n    return Math.max(res, curr);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = rob(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = rob(nums);\n    console.log(result);\n}"
        }
    },
    "214": {
        "call_functions": {
            "c++": "#include <string>\n#include <iostream>\n\nstd::string shortestPalindrome(std::string s);\n\nint main() {\n    std::string s = $args;\n    std::string result = shortestPalindrome(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String shortestPalindrome(String s) {\n    int n = s.length();\n    String rev_s = new StringBuilder(s).reverse().toString();\n    \n    for (int i = 0; i < n; ++i) {\n        if(s.substring(0, n - i).equals(rev_s.substring(i)))\n            return rev_s.substring(0, i) + s;\n    }\n    return \"\";\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = shortest_palindrome(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = shortestPalindrome(s);\n    console.log(result);\n}\n"
        }
    },
    "216": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid helper(int k, int n, int current, std::vector<int>& current_comb, std::vector<std::vector<int>>& result) {\n    if (k == 0 && n == 0) {\n        result.push_back(current_comb);\n    } else if (k > 0 && n > 0) {\n        for (int i = current + 1; i <= 9; ++i) {\n            current_comb.push_back(i);\n            helper(k - 1, n - i, i, current_comb, result);\n            current_comb.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<int>> combinationSum3(int k, int n) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> current_comb;\n    helper(k, n, 0, current_comb, result);\n    return result;\n}\n\nint main() {\n    int k = $args;\n    int n = $args;\n    std::vector<std::vector<int>> result = combinationSum3(k, n);\n    for (const auto& comb : result) {\n        for (const auto& num : comb) {\n            std::cout << num << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> combinationSum3(int k, int n) {\n    List<List<Integer>> result = new ArrayList<>();\n    helper(k, n, 0, new ArrayList<>(), result);\n    return result;\n}"
        }
    },
    "217": {
        "call_functions": {
            "c++": "bool containsDuplicate(vector<int>& nums) {\n    unordered_set<int> s;\n    for (int num : nums) {\n        if (s.find(num) != s.end()) {\n            return true;\n        }\n        s.insert(num);\n    }\n    return false;\n}",
            "java": "public boolean containsDuplicate(int[] nums) {\n    Set<Integer> set = new HashSet<Integer>();\n    for (int num : nums) {\n        if (!set.add(num)) {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = containsDuplicate(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = containsDuplicate(nums);\n    console.log(result);\n}\n"
        }
    },
    "218": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<vector<int>> buildings = $args;\n    vector<vector<int>> result = getSkyline(buildings);\n    for (const auto &r : result) {\n        cout << r[0] << \" \" << r[1] << endl;\n    }\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n"
        }
    },
    "219": {
        "call_functions": {
            "c++": "bool containsNearbyDuplicate(vector<int>& nums, int k) {\n    unordered_map<int, int> valueIndexMap;\n    for (int i = 0; i < nums.size(); i++) {\n        if (valueIndexMap.find(nums[i]) != valueIndexMap.end() && i - valueIndexMap[nums[i]] <= k) {\n            return true;\n        }\n        valueIndexMap[nums[i]] = i;\n    }\n    return false;\n}",
            "java": "public boolean containsNearbyDuplicate(int[] nums, int k) {\n    HashMap<Integer, Integer> valueIndexMap = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        if (valueIndexMap.containsKey(nums[i]) && i - valueIndexMap.get(nums[i]) <= k) {\n            return true;\n        }\n        valueIndexMap.put(nums[i], i);\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = containsNearbyDuplicate(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = containsNearbyDuplicate(nums, k);\n    console.log(result);\n}"
        }
    },
    "220": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int k = $args;\n    int t = $args;\n    bool result = containsNearbyAlmostDuplicate(nums, k, t);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {\n    TreeSet<Long> window = new TreeSet<>();\n    for(int i = 0; i < nums.length; i++) {\n        if(i > k) {\n            window.remove((long)nums[i - k - 1]);\n        }\n        Long ceil = window.ceiling((long)nums[i] - t);\n        if(ceil != null && ceil - nums[i] <= t) {\n            return true;\n        }\n        window.add((long)nums[i]);\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    t = $args[2]\n    result = containsNearbyAlmostDuplicate(nums, k, t)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const t = $args[2];\n    const result = containsNearbyAlmostDuplicate(nums, k, t);\n    console.log(result);\n}"
        }
    },
    "221": {
        "call_functions": {
            "c++": "int maximalSquare(vector<vector<char>>& matrix) {\n    int m = matrix.size();\n    int n = matrix[0].size();\n    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));\n    int maxSize = 0;\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (matrix[i - 1][j - 1] == '1') {\n                dp[i][j] = min({dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]}) + 1;\n                maxSize = max(maxSize, dp[i][j]);\n            }\n        }\n    }\n\n    return maxSize * maxSize;\n}",
            "java": "public int maximalSquare(char[][] matrix) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int[][] dp = new int[m + 1][n + 1];\n    int maxSize = 0;\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (matrix[i - 1][j - 1] == '1') {\n                dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n                maxSize = Math.max(maxSize, dp[i][j]);\n            }\n        }\n    }\n\n    return maxSize * maxSize;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = maximalSquare(matrix)\n    print(result)",
            "javascript": "function maximalSquare(matrix) {\n    const m = matrix.length;\n    const n = matrix[0].length;\n    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    let maxSize = 0;\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (matrix[i - 1][j - 1] === '1') {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n                maxSize = Math.max(maxSize, dp[i][j]);\n            }\n        }\n    }\n\n    return maxSize * maxSize;\n}"
        }
    },
    "224": {
        "call_functions": {
            "c++": "int main() {\n    string s = $args;\n    int result = calculate(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int calculate(String s) {\n    int result = 0, sign = 1, num = 0;\n    Stack<Integer> st = new Stack<>();\n    for (char c : s.toCharArray()) {\n        if (Character.isDigit(c)) {\n            num = num * 10 + (c - '0');\n        } else {\n            result += sign * num;\n            num = 0;\n            if (c == '+') {\n                sign = 1;\n            } else if (c == '-') {\n                sign = -1;\n            } else if (c == '(') {\n                st.push(result);\n                st.push(sign);\n                result = 0;\n                sign = 1;\n            } else if (c == ')') {\n                int prev_sign = st.pop();\n                int prev_result = st.pop();\n                result = prev_result + prev_sign * result;\n            }\n        }\n    }\n    result += sign * num;\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = calculate(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = calculate(s);\n    console.log(result);\n}"
        }
    },
    "225": {
        "call_functions": {
            "c++": "void push(int x) {\n        q2.push(x);\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        std::swap(q1, q2);\n    }\n\n    int pop() {\n        int top = q1.front();\n        q1.pop();\n        return top;\n    }\n\n    int top() {\n        return q1.front();\n    }\n\n    bool empty() {\n        return q1.empty();\n    }",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    stack = MyStack()\n    stack.push($args[0])\n    stack.push($args[1])\n    stack.push($args[2])\n    result1 = stack.pop()\n    result2 = stack.top()\n    result3 = stack.empty()\n    print(result1)\n    print(result2)\n    print(result3)",
            "javascript": "function main() {\n    const stack = new MyStack();\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    const result1 = stack.pop();\n    const result2 = stack.top();\n    const result3 = stack.empty();\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n}"
        }
    },
    "227": {
        "call_functions": {
            "c++": "int calculate(string s) {\n    int result = 0, num = 0, sign = 1;\n    stack<int> st;\n    \n    for (char c : s) {\n        if (isdigit(c)) {\n            num = num * 10 + (c - '0');\n        } else if (c == '+') {\n            result += sign * num;\n            num = 0;\n            sign = 1;\n        } else if (c == '-') {\n            result += sign * num;\n            num = 0;\n            sign = -1;\n        } else if (c == '(') {\n            st.push(result);\n            st.push(sign);\n            result = 0;\n            sign = 1;\n        } else if (c == ')') {\n            result += sign * num;\n            num = 0;\n            result *= st.top(); st.pop();\n            result += st.top(); st.pop();\n        }\n    }\n    if (num) result += sign * num;\n    return result;\n}"
        }
    },
    "228": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    std::vector<std::string> result = find_ranges(nums);\n    for (const std::string& range : result) {\n        std::cout << range << std::endl;\n    }\n    return 0;\n}"
        }
    },
    "229": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> majorityElement(vector<int>& nums) {\n    int n = nums.size();\n    unordered_map<int, int> count;\n    vector<int> result;\n\n    for (int num : nums) {\n        if (count.find(num) == count.end()) {\n            count[num] = 1;\n        } else {\n            count[num]++;\n        }\n        if (count[num] > n / 3 && find(result.begin(), result.end(), num) == result.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = majorityElement(nums);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> majorityElement(int[] nums) {\n    int n = nums.length;\n    HashMap<Integer, Integer> count = new HashMap<>();\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int num : nums) {\n        count.put(num, count.getOrDefault(num, 0) + 1);\n        if (count.get(num) > n / 3 && !result.contains(num)) {\n            result.add(num);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = majorityElement(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = majorityElement(nums);\n    console.log(result);\n}"
        }
    },
    "233": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = countDigitOne(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "237": {
        "call_functions": {
            "c++": "void deleteNode(ListNode* node) {\n    ListNode* nextNode = node->next;\n    *node = *nextNode;\n    delete nextNode;\n}"
        }
    },
    "238": {
        "call_functions": {
            "c++": "vector<int> productExceptSelf(vector<int>& nums) {\n    int n = nums.size();\n    vector<int> answer(n, 1);\n    \n    int left = 1;\n    for (int i = 0; i < n; i++) {\n        answer[i] *= left;\n        left *= nums[i];\n    }\n    \n    int right = 1;\n    for (int i = n - 1; i >= 0; i--) {\n        answer[i] *= right;\n        right *= nums[i];\n    }\n    \n    return answer;\n}"
        }
    },
    "239": {
        "call_functions": {
            "c++": "#include <vector>\n#include <deque>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = 3;\n    std::vector<int> result = maxSlidingWindow(nums, k);\n\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n\n    return 0;\n}\n",
            "java": "public int[] maxSlidingWindow(int[] nums, int k) {\n    if (nums == null || nums.length == 0) return new int[0];\n    int[] result = new int[nums.length - k + 1];\n    int idx = 0;\n    Deque<Integer> deque = new LinkedList<Integer>();\n    \n    for (int i = 0; i < nums.length; i++) {\n        if (!deque.isEmpty() && deque.peekFirst() == i - k) deque.poll();\n            \n        while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {\n            deque.removeLast();\n        }    \n            \n        deque.offer(i);\n        if (i >= k - 1) {\n            result[idx++] = nums[deque.peek()];\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = maxSlidingWindow(nums, k)\n    print(result)",
            "javascript": "function maxSlidingWindow(nums, k) {\n  let result = [];\n  let dq = [];\n\n  for (let i = 0; i < nums.length; i++) {\n    while (dq.length && dq[0] < i - k + 1) {\n      dq.shift();\n    }\n\n    while (dq.length && nums[dq[dq.length - 1]] < nums[i]) {\n      dq.pop();\n    }\n\n    dq.push(i);\n\n    if (i >= k - 1) {\n      result.push(nums[dq[0]]);\n    }\n  }\n\n  return result;\n}"
        }
    },
    "241": {
        "call_functions": {
            "c++": "#include<vector>\n#include<string>\n#include<iostream>\n\nusing namespace std;\n\nvector<int> diffWaysToCompute(string input) {\n    vector<int> result;\n    for (int i = 0; i < input.size(); i++) {\n        char c = input[i];\n        if (c == '+' || c == '-' || c == '*') {\n            auto left = diffWaysToCompute(input.substr(0, i));\n            auto right = diffWaysToCompute(input.substr(i + 1));\n            for (int l : left) {\n                for (int r : right) {\n                    if (c == '+') result.push_back(l + r);\n                    else if (c == '-') result.push_back(l - r);\n                    else if (c == '*') result.push_back(l * r);\n                }\n            }\n        }\n    }\n    if (result.empty()) result.push_back(stoi(input));\n    return result;\n}\n\nint main() {\n    string input = $args;\n    vector<int> result = diffWaysToCompute(input);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        }
    },
    "243": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <climits>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> wordsDict = $args;\n    std::string word1 = $args;\n    std::string word2 = $args;\n    int result = shortestDistance(wordsDict, word1, word2);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int shortestDistance(String[] wordsDict, String word1, String word2) {\n    int idx1 = -1, idx2 = -1, minDistance = Integer.MAX_VALUE;\n    for (int i = 0; i < wordsDict.length; i++) {\n        if (word1.equals(wordsDict[i])) idx1 = i;\n        if (word2.equals(wordsDict[i])) idx2 = i;\n        if (idx1 != -1 && idx2 != -1)\n            minDistance = Math.min(minDistance, Math.abs(idx1 - idx2));\n    }\n    return minDistance;\n}",
            "python": "if __name__ == \"__main__\":\n    wordsDict = $args[0]\n    word1 = $args[1]\n    word2 = $args[2]\n    result = shortestDistance(wordsDict, word1, word2)\n    print(result)",
            "javascript": "function shortestDistance(wordsDict, word1, word2) {\n    const result = shortestDistance(wordsDict, word1, word2);\n    console.log(result);\n}"
        }
    },
    "245": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <limits>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> wordsDict = $args;\n    std::string word1 = $args;\n    std::string word2 = $args;\n    int result = shortestDistance(wordsDict, word1, word2);\n    std::cout << result << std::endl;\n    return 0;\n}\n"
        }
    },
    "246": {
        "call_functions": {
            "c++": "bool isStrobogrammatic(string num) {\n    unordered_map<char, char> lookup {{'0', '0'}, {'1', '1'}, {'6', '9'}, {'8', '8'}, {'9', '6'}};\n    int left = 0, right = num.size() - 1;\n    while(left <= right) {\n        if(lookup[num[left]] != num[right]) return false;\n        left++;\n        right--;\n    }\n    return true;\n}",
            "java": "public boolean isStrobogrammatic(String num) {\n    HashMap<Character, Character> lookup = new HashMap<Character, Character>() {{\n        put('0', '0');\n        put('1', '1');\n        put('6', '9');\n        put('8', '8');\n        put('9', '6');\n    }};\n    int left = 0, right = num.length() - 1;\n    while(left <= right) {\n        if(!lookup.containsKey(num.charAt(left)) || lookup.get(num.charAt(left)) != num.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}"
        }
    },
    "247": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nstd::vector<std::string> findStrobogrammatic(int n) {\n    return helper(n, n);\n}\n\nstd::vector<std::string> helper(int n, int m) {\n    if (n == 0) return {\"\"};\n    if (n == 1) return {\"0\", \"1\", \"8\"};\n    \n    std::vector<std::string> list = helper(n - 2, m);\n    std::vector<std::string> res;\n\n    for (int i = 0; i < list.size(); i++) {\n        std::string s = list[i];\n        \n        if (n != m) res.push_back(\"0\" + s + \"0\");\n\n        res.push_back(\"1\" + s + \"1\");\n        res.push_back(\"6\" + s + \"9\");\n        res.push_back(\"8\" + s + \"8\");\n        res.push_back(\"9\" + s + \"6\");\n    }\n\n    return res;\n}",
            "java": "public List<String> findStrobogrammatic(int n) {\n    return helper(n, n);\n}\n\nprivate List<String> helper(int n, int m) {\n    if (n == 0) return new ArrayList<>(Arrays.asList(\"\"));\n    if (n == 1) return new ArrayList<>(Arrays.asList(\"0\", \"1\", \"8\"));\n    \n    List<String> list = helper(n - 2, m);\n    List<String> res = new ArrayList<>();\n\n    for (int i = 0; i < list.size(); i++) {\n        String s = list.get(i);\n        \n        if (n != m) res.add(\"0\" + s + \"0\");\n\n        res.add(\"1\" + s + \"1\");\n        res.add(\"6\" + s + \"9\");\n        res.add(\"8\" + s + \"8\");\n        res.add(\"9\" + s + \"6\");\n    }\n\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findStrobogrammatic(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = findStrobogrammatic(n);\n    console.log(result);\n}"
        }
    },
    "248": {
        "call_functions": {
            "c++": "int strobogrammaticInRange(string low, string high) {\n    int count = 0;\n    for(int len = low.size(); len <= high.size(); ++len)\n        count += helper(len, len) <= high ? helper(len, len) >= low ? 1 : 0 : 0;\n    return count;\n}\n\nstring helper(int m, int n) {\n    if(m == 0) return \"\";\n    if(m == 1) return \"0 1 8\";\n    if(n == 0) return \"11 69 88 96\";\n    string res = \"\";\n    for(auto a : helper(m - 2, n)) {\n        if(m != n) res += a + \"0\" + a;\n        res += a + \"1\" + a;\n        res += a + \"6\" + a;\n        res += a + \"8\" + a;\n        res += a + \"9\" + a;\n    }\n    return res;\n}",
            "java": "public int strobogrammaticInRange(String low, String high) {\n    int count = 0;\n    for(int len = low.length(); len <= high.length(); ++len)\n        count += withinRange(helper(len, len), low, high) ? 1 : 0;\n    return count;\n}"
        }
    },
    "249": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nint main() {\n    std::vector<std::string> strings = $args;\n    std::vector<std::vector<std::string>> result = groupStrings(strings);\n    \n    // Print the result\n    for (const auto& group : result) {\n        for (const auto& str : group) {\n            std::cout << str << \" \";\n        }\n        std::cout << std::endl;\n    }\n    \n    return 0;\n}\n"
        }
    },
    "252": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    bool result = canAttendMeetings(intervals);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}"
        }
    },
    "253": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> intervals = $args;\n    int result = minMeetingRooms(intervals);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int minMeetingRooms(int[][] intervals) {\n    if (intervals == null || intervals.length == 0) return 0;\n    \n    Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n    \n    minHeap.add(intervals[0][1]);\n    for (int i = 1; i < intervals.length; i++) {\n        if (intervals[i][0] >= minHeap.peek()) {\n            minHeap.poll();\n        }\n        minHeap.add(intervals[i][1]);\n    }\n    \n    return minHeap.size();\n}",
            "python": "if __name__ == \"__main__\":\n    intervals = $args[0]\n    result = minMeetingRooms(intervals)\n    print(result)",
            "javascript": "function main() {\n    const intervals = $args;\n    const result = minMeetingRooms(intervals);\n    console.log(result);\n}"
        }
    },
    "254": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nvoid helper(int n, int start, std::vector<int>& path, std::vector<std::vector<int>>& result) {\n    if (n == 1) {\n        if (path.size() > 1) {\n            result.push_back(path);\n        }\n        return;\n    }\n\n    for (int i = start; i <= n; ++i) {\n        if (n % i == 0) {\n            path.push_back(i);\n            helper(n / i, i, path, result);\n            path.pop_back();\n        }\n    }\n}\n\nstd::vector<std::vector<int>> getFactors(int n) {\n    std::vector<std::vector<int>> result;\n    std::vector<int> path;\n    helper(n, 2, path, result);\n    return result;\n}\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> result = getFactors(n);\n    for (const auto& factors : result) {\n        for (const auto& factor : factors) {\n            std::cout << factor << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<List<Integer>> getFactors(int n) {\n    List<List<Integer>> result = new ArrayList<>();\n    helper(n, 2, new ArrayList<Integer>(), result);\n    return result;\n}\n\nprivate void helper(int n, int start, List<Integer> path, List<List<Integer>> result) {\n    if (n == 1) {\n        if (path.size() > 1) {\n            result.add(new ArrayList<>(path));\n        }\n        return;\n    }\n\n    for (int i = start; i <= n; i++) {\n        if (n % i == 0) {\n            path.add(i);\n            helper(n / i, i, path, result);\n            path.remove(path.size() - 1);\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = getFactors(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = getFactors(n);\n    console.log(result);\n}"
        }
    },
    "255": {
        "call_functions": {
            "c++": "bool isValidPreorder(vector<int>& preorder) {\n    stack<int> stk;\n    int lower_bound = INT_MIN;\n    for (int num : preorder) {\n        if (num < lower_bound) return false;\n        while (!stk.empty() && num > stk.top()) {\n            lower_bound = stk.top();\n            stk.pop();\n        }\n        stk.push(num);\n    }\n    return true;\n}",
            "java": "public static void main(String[] args) {\n    int[] preorder = $args;\n    boolean result = isValidPreorder(preorder);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    preorder = $args[0]\n    result = isValidPreorder(preorder)\n    print(result)",
            "javascript": "function main() {\n    const preorder = $args;\n    let stack = [];\n    let lowerBound = Number.MIN_SAFE_INTEGER;\n    for (let num of preorder) {\n        if (num < lowerBound) return false;\n        while (stack.length > 0 && num > stack[stack.length - 1]) {\n            lowerBound = stack.pop();\n        }\n        stack.push(num);\n    }\n    return true;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "256": {
        "call_functions": {
            "c++": "int minCost(vector<vector<int>>& costs) {\n    if (costs.empty()) return 0;\n    for (int i = 1; i < costs.size(); ++i) {\n        costs[i][0] += min(costs[i - 1][1], costs[i - 1][2]);\n        costs[i][1] += min(costs[i - 1][0], costs[i - 1][2]);\n        costs[i][2] += min(costs[i - 1][0], costs[i - 1][1]);\n    }\n    return min(costs.back()[0], min(costs.back()[1], costs.back()[2]));\n}"
        }
    },
    "258": {
        "call_functions": {
            "c++": "int main() {\n    int num = $args;\n    int result = addDigits(num);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "259": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int target = $args;\n    int result = threeSumSmaller(nums, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int threeSumSmaller(int[] nums, int target) {\n    int count = 0;\n    Arrays.sort(nums);\n    for (int i = 0; i < nums.length; ++i) {\n        int j = i + 1, k = nums.length - 1;\n        while (j < k) {\n            if (nums[i] + nums[j] + nums[k] < target) {\n                count += k - j;\n                ++j;\n            } else {\n                --k;\n            }\n        }\n    }\n    return count;\n}"
        }
    },
    "260": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = singleNumber(nums);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] singleNumber(int[] nums) {\n    int xor_all = 0;\n    for (int num : nums) {\n        xor_all ^= num;\n    }\n\n    int bit = xor_all & -xor_all;\n    int n1 = 0;\n    int n2 = 0;\n    for (int num : nums) {\n        if ((num & bit) != 0) {\n            n1 ^= num;\n        } else {\n            n2 ^= num;\n        }\n    }\n\n    return new int[]{n1, n2};\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = singleNumber(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = singleNumber(nums);\n    console.log(result);\n}"
        }
    },
    "261": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nbool hasCycle(const std::vector<std::vector<int>>& neighbors, std::vector<bool>& visited, int parent, int node);\n\nbool isTree(int n, std::vector<std::vector<int>>& edges) {\n    std::vector<std::vector<int>> neighbors(n);\n    for (const auto& edge : edges) {\n        neighbors[edge[0]].push_back(edge[1]);\n        neighbors[edge[1]].push_back(edge[0]);\n    }\n    std::vector<bool> visited(n, false);\n    if(hasCycle(neighbors, visited, -1, 0)) return false;\n    for (const auto& visit : visited)\n        if (!visit) return false;\n    return true;\n}\n\nbool hasCycle(const std::vector<std::vector<int>>& neighbors, std::vector<bool>& visited, int parent, int node) {\n    visited[node] = true;\n    for (const auto& neighbor : neighbors[node])\n        if ((neighbor != parent && visited[neighbor]) || (!visited[neighbor] && hasCycle(neighbors, visited, node, neighbor))) return true;\n    return false;\n}\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> edges;\n    // Fill the edges vector with input values\n    bool result = isTree(n, edges);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isTree(int n, int[][] edges) {\n    List<List<Integer>> neighbors = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) neighbors.add(new ArrayList<>());\n    for (int[] edge : edges) {\n        neighbors.get(edge[0]).add(edge[1]);\n        neighbors.get(edge[1]).add(edge[0]);\n    }\n    boolean[] visited = new boolean[n];\n    if(hasCycle(neighbors, visited, -1, 0)) return false;\n    for (boolean visit : visited)\n        if (!visit) return false;\n    return true;\n}\n\nprivate boolean hasCycle(List<List<Integer>> neighbors, boolean[] visited, int parent, int node) {\n    visited[node] = true;\n    for (int neighbor : neighbors.get(node))\n        if ((neighbor != parent && visited[neighbor]) || (!visited[neighbor] && hasCycle(neighbors, visited, node, neighbor))) return true;\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = isTree(n, edges)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const edges = $args[1];\n    const result = isTree(n, edges);\n    console.log(result);\n}"
        }
    },
    "264": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = nthUglyNumber(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "265": {
        "call_functions": {
            "c++": "int minCost(vector<vector<int>>& costs) {\n    if (costs.empty()) return 0;\n\n    int n = costs.size();\n    int k = costs[0].size();\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < k; ++j) {\n            int minCost = INT_MAX;\n            for (int l = 0; l < k; ++l) {\n                if (l == j) continue;\n                minCost = min(minCost, costs[i - 1][l]);\n            }\n            costs[i][j] += minCost;\n        }\n    }\n    return *min_element(costs[n - 1].begin(), costs[n - 1].end());\n}",
            "java": "public int minCost(int[][] costs) {\n    if (costs == null || costs.length == 0) return 0;\n\n    int n = costs.length;\n    int k = costs[0].length;\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < k; j++) {\n            int minCost = Integer.MAX_VALUE;\n            for (int l = 0; l < k; l++) {\n                if (l == j) continue;\n                minCost = Math.min(minCost, costs[i - 1][l]);\n            }\n            costs[i][j] += minCost;\n        }\n    }\n    return Arrays.stream(costs[n - 1]).min().getAsInt();\n}",
            "python": "if __name__ == \"__main__\":\n    costs = $args[0]\n    result = min_cost(costs)\n    print(result)",
            "javascript": "function main() {\n    const costs = $args;\n    const result = minCost(costs);\n    console.log(result);\n}"
        }
    },
    "266": {
        "call_functions": {
            "c++": "bool canPermutePalindrome(string s) {\n    unordered_map<char, int> count;\n    for (char c : s) {\n        count[c]++;\n    }\n    int odd_count = 0;\n    for (auto it = count.begin(); it != count.end(); ++it) {\n        if (it->second % 2) {\n            odd_count++;\n        }\n    }\n    return odd_count <= 1;\n}"
        }
    },
    "267": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<string> generatePalindromes(string s) {\n    unordered_map<char, int> charCount;\n    for (const char &c : s) {\n        charCount[c]++;\n    }\n    \n    int numOdds = 0;\n    string halfStr = \"\", midChar = \"\";\n    for (const auto &entry : charCount) {\n        if (entry.second % 2 == 1) {\n            numOdds++;\n            midChar = entry.first;\n        }\n        halfStr += string(entry.second / 2, entry.first);\n        \n        if (numOdds > 1) {\n            return {};\n        }\n    }\n    \n    vector<string> result;\n    sort(halfStr.begin(), halfStr.end());\n    do {\n        string palindrome = halfStr + midChar + string(halfStr.rbegin(), halfStr.rend());\n        result.push_back(palindrome);\n    } while (next_permutation(halfStr.begin(), halfStr.end()));\n    \n    return result;\n}\n\nint main() {\n    string s = $args;\n    vector<string> result = generatePalindromes(s);\n    for (const string &palindrome : result) {\n        cout << palindrome << endl;\n    }\n    return 0;\n}",
            "java": "public List<String> generatePalindromes(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = generatePalindromes(s)\n    print(result)",
            "javascript": "function generatePalindromes(s) {\n    const result = [];\n    const charCount = new Map();\n    for (const c of s) {\n        charCount.set(c, (charCount.get(c) || 0) + 1);\n    }\n\n    let midChar = \"\";\n    const halfChars = [];\n    let numOdds = 0;\n    charCount.forEach((count, char) => {\n        if (count % 2 === 1) {\n            numOdds++;\n            midChar = char;\n        }\n        for (let i = 0; i < Math.floor(count / 2); i++) {\n            halfChars.push(char);\n        }\n\n        if (numOdds > 1) {\n            return [];\n        }\n    });\n\n    function btPerm(idx, current) {\n        if (idx === halfChars.length) {\n            const firstHalf = current.join('');\n            result.push(firstHalf + midChar + firstHalf.split('').reverse().join(''));\n            return;\n        }\n\n        for (let i = 0; i < halfChars.length; i++) {\n            if (i > 0 && halfChars[i] === halfChars[i - 1]) {\n                continue;\n            }\n            const char = halfChars.splice(i, 1)[0];\n            current.push(char);\n            btPerm(idx + 1, current);\n            current.pop();\n            halfChars.splice(i, 0, char);\n        }\n    }\n\n    halfChars.sort();\n    btPerm(0, []);\n\n    return result;\n}"
        }
    },
    "268": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = missingNumber(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    int result = missingNumber(nums);\n    System.out.println(result);\n}"
        }
    },
    "269": {
        "call_functions": {
            "c++": "std::string alienOrder(std::vector<std::string> &words) {\n    std::unordered_map<char, std::unordered_set<char>> graph;\n    std::unordered_map<char, int> inDegree;\n    \n    for (const std::string &word : words)\n        for (char c : word)\n            inDegree[c] = 0;\n    \n    for (int i = 0; i < words.size() - 1; i++) {\n        std::string word1 = words[i], word2 = words[i + 1];\n        \n        bool found = false;\n        for (int j = 0; j < std::min(word1.size(), word2.size()); j++) {\n            char c1 = word1[j], c2 = word2[j];\n            if (c1 != c2) {\n                if (!graph[c1].count(c2)) {\n                    graph[c1].insert(c2);\n                    inDegree[c2]++;\n                }\n                found = true;\n                break;\n            }\n        }\n        \n        if (!found && word1.size() > word2.size())\n            return \"\";\n    }\n\n    std::queue<char> q;\n    for (auto &[c, deg] : inDegree)\n        if (deg == 0)\n            q.push(c);\n    \n    std::string result;\n    while (!q.empty()) {\n        char c = q.front();\n        q.pop();\n        result += c;\n        \n        for (char neigh : graph[c]) {\n            inDegree[neigh]--;\n            if (inDegree[neigh] == 0)\n                q.push(neigh);\n        }\n    }\n    \n    if (result.size() < inDegree.size())\n        return \"\";\n    \n    return result;\n}",
            "java": "public String alienOrder(String[] words) {\n    Map<Character, Set<Character>> graph = new HashMap<>();\n    Map<Character, Integer> inDegree = new HashMap<>();\n    \n    for (String word : words) {\n        for (char c : word.toCharArray())\n            inDegree.put(c, 0);\n    }\n    \n    for (int i = 0; i < words.length - 1; i++) {\n        String word1 = words[i], word2 = words[i + 1];\n        \n        boolean found = false;\n        for (int j = 0; j < Math.min(word1.length(), word2.length()); j++) {\n            char c1 = word1.charAt(j), c2 = word2.charAt(j);\n            if (c1 != c2) {\n                graph.putIfAbsent(c1, new HashSet<>());\n                if (!graph.get(c1).contains(c2)) {\n                    graph.get(c1).add(c2);\n                    inDegree.put(c2, inDegree.get(c2) + 1);\n                }\n                found = true;\n                break;\n            }\n        }\n        \n        if (!found && word1.length() > word2.length())\n            return \"\";\n    }\n\n    Queue<Character> q = new LinkedList<>();\n    for (Map.Entry<Character, Integer> entry : inDegree.entrySet())\n        if (entry.getValue() == 0)\n            q.offer(entry.getKey());\n    \n    StringBuilder result = new StringBuilder();\n    while (!q.isEmpty()) {\n        char c = q.poll();\n        result.append(c);\n        \n        if (graph.containsKey(c)) {\n            for (char neigh : graph.get(c)) {\n                inDegree.put(neigh, inDegree.get(neigh) - 1);\n                if (inDegree.get(neigh) == 0)\n                    q.offer(neigh);\n            }\n        }\n    }\n    \n    if (result.length() < inDegree.size())\n        return \"\";\n    \n    return result.toString();\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = alienOrder(words)\n    print(result)",
            "javascript": "function alienOrder(words) {\n    const graph = new Map();\n    const inDegree = new Map();\n    \n    for (const word of words)\n        for (const c of word)\n            inDegree.set(c, 0);\n    \n    for (let i = 0; i < words.length - 1; i++) {\n        const word1 = words[i], word2 = words[i + 1];\n        \n        let found = false;\n        for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n            const c1 = word1[j], c2 = word2[j];\n            if (c1 !== c2) {\n                if (!graph.has(c1)) graph.set(c1, new Set());\n                if (!graph.get(c1).has(c2)) {\n                    graph.get(c1).add(c2);\n                    inDegree.set(c2, inDegree.get(c2) + 1);\n                }\n                found = true;\n                break;\n            }\n        }\n        \n        if (!found && word1.length > word2.length)\n            return \"\";\n    }\n\n    const q = [];\n    for (const [c, deg] of inDegree.entries())\n        if (deg === 0)\n            q.push(c);\n    \n    let result = \"\";\n    while (q.length) {\n        const c = q.shift();\n        result += c;\n        \n        if (graph.has(c)) {\n            for (const neigh of graph.get(c)) {\n                inDegree.set(neigh, inDegree.get(neigh) - 1);\n                if (inDegree.get(neigh) === 0)\n                    q.push(neigh);\n            }\n        }\n    }\n    \n    if (result.length < inDegree.size)\n        return \"\";\n    \n    return result;\n}"
        }
    },
    "271": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> strs = $args;\n    std::string encoded_string = encode(strs);\n    std::cout << encoded_string << std::endl;\n\n    std::string decoded_string = decode(encoded_string);\n    for (const auto& s : decoded_string) {\n        std::cout << s << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public String encode(List<String> strs) {\n    StringBuilder encodedString = new StringBuilder();\n    for (String s : strs) {\n        encodedString.append(s.length()).append('#').append(s);\n    }\n    return encodedString.toString();\n}\n\npublic List<String> decode(String s) {\n    List<String> strs = new ArrayList<>();\n    int i = 0;\n    while (i < s.length()) {\n        int delimiterPos = s.indexOf('#', i);\n        int length = Integer.parseInt(s.substring(i, delimiterPos));\n        strs.add(s.substring(delimiterPos + 1, delimiterPos + 1 + length));\n        i = delimiterPos + 1 + length;\n    }\n    return strs;\n}",
            "python": "if __name__ == \"__main__\":\n    strs = $args[0]\n    encoded = encode(strs)\n    print(encoded)\n    decoded = decode(encoded)\n    print(decoded)",
            "javascript": "function main() {\n    const strs = $args;\n    const encodedString = encode(strs);\n    console.log(encodedString);\n\n    const decodedStrings = decode(encodedString);\n    console.log(decodedStrings);\n}"
        }
    },
    "272": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <cstdlib>\nusing namespace std;\n\nint main() {\n    TreeNode* root = $args;\n    double target = $args;\n    int k = $args;\n    vector<int> result = closestKValues(root, target, k);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> closestKValues(TreeNode root, double target, int k) {\n    PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> Double.compare(b[1], a[1]));\n    List<Integer> values = new ArrayList<>();\n\n    inorderTraversal(root, target, k, maxHeap);\n\n    while (!maxHeap.isEmpty()) {\n        values.add(maxHeap.poll()[0]);\n    }\n    return values;\n}\n\nvoid inorderTraversal(TreeNode node, double target, int k, PriorityQueue<int[]> maxHeap) {\n    if (node == null) return;\n\n    inorderTraversal(node.left, target, k, maxHeap);\n    maxHeap.offer(new int[]{node.val, Math.abs(node.val - target)});\n    if (maxHeap.size() > k) maxHeap.poll();\n    inorderTraversal(node.right, target, k, maxHeap);\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    target = $args[1]\n    k = $args[2]\n    result = closestKValues(root, target, k)\n    print(result)",
            "javascript": "function closestKValues(root, target, k) {\n    const values = [];\n    const maxHeap = [];\n\n    function inorderTraversal(node) {\n        if (!node) return;\n        inorderTraversal(node.left);\n        maxHeap.push({diff: Math.abs(node.val - target), val: node.val});\n        maxHeap.sort((a, b) => b.diff - a.diff);\n        if (maxHeap.length > k) maxHeap.pop();\n        inorderTraversal(node.right);\n    }\n\n    inorderTraversal(root);\n    for (let item of maxHeap) {\n        values.push(item.val);\n    }\n    return values;\n}"
        }
    },
    "22": {
        "call_functions": {}
    },
    "28": {
        "call_functions": {
            "c++": "int main() {\n    string haystack = $args;\n    string needle = $args;\n    int result = strStr(haystack, needle);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int strStr(String haystack, String needle) {\n    int index = haystack.indexOf(needle);\n    return index;\n}\n\npublic static void main(String[] args) {\n    String haystack = $args[0];\n    String needle = $args[1];\n    int result = strStr(haystack, needle);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    haystack = $args[0]\n    needle = $args[1]\n    result = strStr(haystack, needle)\n    print(result)",
            "javascript": "function main() {\n    const haystack = $args[0];\n    const needle = $args[1];\n    const result = strStr(haystack, needle);\n    console.log(result);\n}"
        }
    },
    "36": {
        "call_functions": {
            "c++": "bool isValidSudoku(vector<vector<char>>& board) {\n    unordered_set<string> seen;\n    \n    for(int i = 0; i < 9; i++) {\n        for(int j = 0; j < 9; j++) {\n            char current_val = board[i][j];\n            if(current_val != '.') {\n                string row = to_string(current_val) + \" in row \" + to_string(i);\n                string col = to_string(current_val) + \" in col \" + to_string(j);\n                string box = to_string(current_val) + \" in box \" + to_string(i/3) + \"-\" + to_string(j/3);\n                if(seen.count(row) || seen.count(col) || seen.count(box)) {\n                    return false;\n                }\n                seen.insert(row);\n                seen.insert(col);\n                seen.insert(box);\n            }\n        }\n    }\n    return true;\n}",
            "java": "public boolean isValidSudoku(char[][] board) {\n    HashSet<String> seen = new HashSet<>();\n    \n    for(int i = 0; i < 9; i++) {\n        for(int j = 0; j < 9; j++) {\n            char current_val = board[i][j];\n            if(current_val != '.') {\n                String row = current_val + \" in row \" + i;\n                String col = current_val + \" in col \" + j;\n                String box = current_val + \" in box \" + i / 3 + \"-\" + j / 3;\n                if(seen.contains(row) || seen.contains(col) || seen.contains(box)) {\n                    return false;\n                }\n                seen.add(row);\n                seen.add(col);\n                seen.add(box);\n            }\n        }\n    }\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = isValidSudoku(board)\n    print(result)",
            "javascript": "function main() {\n    const board = $args;\n    const result = isValidSudoku(board);\n    console.log(result);\n}"
        }
    },
    "62": {
        "call_functions": {
            "c++": "int main() {\n    int m = $args;\n    int n = $args;\n    int result = uniquePaths(m, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int uniquePaths(int m, int n) {\n    int[][] dp = new int[m][n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n    }\n    return dp[m - 1][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    result = uniquePaths(m, n)\n    print(result)",
            "javascript": "function main() {\n    const m = $args[0];\n    const n = $args[1];\n    const result = uniquePaths(m, n);\n    console.log(result);\n}"
        }
    },
    "63": {
        "call_functions": {
            "c++": "int uniquePathsWithObstacles(vector<vector<int>>& grid) {\n    int m = grid.size();\n    int n = grid[0].size();\n    if (grid[0][0] == 1) return 0;\n    \n    grid[0][0] = 1;\n    for (int i = 1; i < m; ++i)\n        grid[i][0] = (grid[i][0] == 0 && grid[i - 1][0] == 1) ? 1 : 0;\n    for (int i = 1; i < n; ++i)\n        grid[0][i] = (grid[0][i] == 0 && grid[0][i - 1] == 1) ? 1 : 0;\n\n    for (int i = 1; i < m; ++i)\n        for (int j = 1; j < n; ++j)\n            if (grid[i][j] == 0) \n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\n            else \n                grid[i][j] = 0;\n\n    return grid[m - 1][n - 1];\n}",
            "java": "public int uniquePathsWithObstacles(int[][] grid) {\n    int m = grid.length;\n    int n = grid[0].length;\n    if (grid[0][0] == 1) return 0;\n    \n    grid[0][0] = 1;\n    for (int i = 1; i < m; ++i)\n        grid[i][0] = (grid[i][0] == 0 && grid[i - 1][0] == 1) ? 1 : 0;\n    for (int i = 1; i < n; ++i)\n        grid[0][i] = (grid[0][i] == 0 && grid[0][i - 1] == 1) ? 1 : 0;\n\n    for (int i = 1; i < m; ++i)\n        for (int j = 1; j < n; ++j)\n            if (grid[i][j] == 0)\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\n            else\n                grid[i][j] = 0;\n\n    return grid[m - 1][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = uniquePathsWithObstacles(grid)\n    print(result)",
            "javascript": "function uniquePathsWithObstacles(grid) {\n    const m = grid.length;\n    const n = grid[0].length;\n    if (grid[0][0] === 1) return 0;\n\n    grid[0][0] = 1;\n    for (let i = 1; i < m; ++i) {\n        grid[i][0] = (grid[i][0] === 0 && grid[i - 1][0] === 1) ? 1 : 0;\n    }\n    for (let i = 1; i < n; ++i) {\n        grid[0][i] = (grid[0][i] === 0 && grid[0][i - 1] === 1) ? 1 : 0;\n    }\n\n    for (let i = 1; i < m; ++i) {\n        for (let j = 1; j < n; ++j) {\n            if (grid[i][j] === 0) {\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\n            } else {\n                grid[i][j] = 0;\n            }\n        }\n    }\n\n    return grid[m - 1][n - 1];\n}"
        }
    },
    "64": {
        "call_functions": {
            "c++": "int minPathSum(vector<vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    \n    for(int i = 1; i < m; i++)\n        grid[i][0] += grid[i - 1][0];\n        \n    for(int i = 1; i < n; i++)\n        grid[0][i] += grid[0][i - 1];\n        \n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]);\n        }\n    }\n    return grid[m - 1][n - 1];\n}",
            "java": "public int minPathSum(int[][] grid) {\n    int m = grid.length, n = grid[0].length;\n    \n    for(int i = 1; i < m; i++)\n        grid[i][0] += grid[i - 1][0];\n    \n    for(int i = 1; i < n; i++)\n        grid[0][i] += grid[0][i - 1];\n    \n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);\n        }\n    }\n    return grid[m - 1][n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = minPathSum(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = minPathSum(grid);\n    console.log(result);\n}"
        }
    },
    "70": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = climbStairs(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "74": {
        "call_functions": {
            "c++": "bool searchMatrix(vector<vector<int>>& matrix, int target) {\n    int m = matrix.size();\n    int n = matrix[0].size();\n    int l = 0, r = m * n - 1;\n    \n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        int midVal = matrix[mid / n][mid % n];\n        \n        if (midVal == target) {\n            return true;\n        } else if (midVal < target) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    \n    return false;\n}",
            "java": "public boolean searchMatrix(int[][] matrix, int target) {\n    int m = matrix.length;\n    int n = matrix[0].length;\n    int l = 0, r = m * n - 1;\n\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        int midVal = matrix[mid / n][mid % n];\n\n        if (midVal == target) {\n            return true;\n        } else if (midVal < target) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    target = $args[1]\n    result = searchMatrix(matrix, target)\n    print(result)",
            "javascript": "function searchMatrix(matrix, target) {\n    const m = matrix.length;\n    const n = matrix[0].length;\n    let l = 0, r = m * n - 1;\n\n    while (l <= r) {\n        const mid = l+ Math.floor((r - l) / 2);\n        const midVal = matrix[Math.floor(mid / n)][mid % n];\n\n        if (midVal === target) {\n            return true;\n        } else if (midVal < target) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    return false;\n}"
        }
    },
    "80": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int result = removeDuplicates(nums);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int removeDuplicates(int[] nums) {\n    int i = 0;\n    for (int num : nums) {\n        if (i < 2 || num > nums[i - 2]) {\n            nums[i++] = num;\n        }\n    }\n    return i;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = remove_duplicates(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = removeDuplicates(nums);\n    console.log(result);\n}"
        }
    },
    "81": {
        "call_functions": {
            "c++": "bool search(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return true;\n\n        if (nums[mid] == nums[left]) {\n            left++;\n        } else if (nums[mid] > nums[left]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}",
            "java": "public boolean search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return true;\n\n        if (nums[mid] == nums[left]) {\n            left++;\n        } else if (nums[mid] > nums[left]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = search(nums, target)\n    print(result)",
            "javascript": "function search(nums, target) {\n    let left = 0, right = nums.length - 1;\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (nums[mid] === target) return true;\n\n        if (nums[mid] === nums[left]) {\n            left++;\n        } else if (nums[mid] > nums[left]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}"
        }
    },
    "96": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = numTrees(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numTrees(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        for (int j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i - j - 1];\n        }\n    }\n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = numTrees(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = numTrees(n);\n    console.log(result);\n}"
        }
    },
    "111": {
        "call_functions": {}
    },
    "114": {
        "call_functions": {
            "c++": "void flatten(TreeNode* root) {\n    if (!root) return;\n    flatten(root->left);\n    flatten(root->right);\n    if (root->left) {\n        TreeNode* temp = root->right;\n        root->right = root->left;\n        root->left = nullptr;\n        while (root->right) root = root->right;\n        root->right = temp;\n    }\n}",
            "java": "public void flatten(TreeNode root) {\n    if (root == null) return;\n    flatten(root.left);\n    flatten(root.right);\n    if (root.left != null) {\n        TreeNode temp = root.right;\n        root.right = root.left;\n        root.left = null;\n        while (root.right != null) root = root.right;\n        root.right = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    flatten(root)\n    print(root)",
            "javascript": "function main() {\n    const root = $args;\n    flatten(root);\n    console.log(root);\n}"
        }
    },
    "119": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int rowIndex = $args;\n    vector<int> result = getRow(rowIndex);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> getRow(int rowIndex) {\n    List<Integer> row = new ArrayList<>();\n    for (int i = 0; i <= rowIndex; i++) {\n        row.add(1);\n        for (int j = i - 1; j > 0; j--) {\n            row.set(j, row.get(j) + row.get(j - 1));\n        }\n    }\n    return row;\n}",
            "python": "if __name__ == \"__main__\":\n    rowIndex = $args[0]\n    result = get_row(rowIndex)\n    print(result)",
            "javascript": "function main() {\n    const rowIndex = $args;\n    const result = getRow(rowIndex);\n    console.log(result);\n}"
        }
    },
    "157": {
        "call_functions": {
            "c++": "int main() {\n    char buf[$args];\n    int n = sizeof(buf);\n    int result = read(buf, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int read(char[] buf, int n) {\n    int totalRead = 0;\n    char[] buf4 = new char[4];\n\n    while (totalRead < n) {\n        int read4Count = read4(buf4);\n        for (int i = 0; i < read4Count && totalRead < n; i++) {\n            buf[totalRead++] = buf4[i];\n        }\n        if (read4Count < 4) break;\n    }\n\n    return totalRead;\n}",
            "python": "if __name__ == \"__main__\":\n    buf = $args[0]\n    n = $args[1]\n    result = read(buf, n)\n    print(result)",
            "javascript": "function main() {\n    const buf = $args[0];\n    const n = $args[1];\n    const result = read(buf, n);\n    console.log(result);\n}"
        }
    },
    "167": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = $args;\n    int target = $args;\n    vector<int> result = twoSum(numbers, target);\n    for (int i : result) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n",
            "java": "public int[] twoSum(int[] numbers, int target) {\n    int left = 0, right = numbers.length - 1;\n    while (left < right) {\n        int current_sum = numbers[left] + numbers[right];\n        if (current_sum == target) {\n            return new int[]{left + 1, right + 1};\n        } else if (current_sum < target) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return new int[]{};\n}",
            "python": "if __name__ == \"__main__\":\n    numbers = $args[0]\n    target = $args[1]\n    result = twoSum(numbers, target)\n    print(result)",
            "javascript": "function main() {\n    const numbers = $args[0];\n    const target = $args[1];\n    const result = twoSum(numbers, target);\n    console.log(result);\n}"
        }
    },
    "172": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = trailingZeroes(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int trailingZeroes(int n) {\n    int count = 0;\n    while (n > 0) {\n        n = n / 5;\n        count += n;\n    }\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = trailing_zeroes(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = trailingZeroes(n);\n    console.log(result);\n}\n"
        }
    },
    "186": {
        "call_functions": {
            "c++": "void reverseWords(vector<char>& s) {\n    reverse(s.begin(), s.end());\n    int start = 0, end;\n    while ((end = find(s.begin() + start, s.end(), ' ') - s.begin()) < s.size()) {\n        reverse(s.begin() + start, s.begin() + end);\n        start = end + 1;\n    }\n    reverse(s.begin() + start, s.end());\n}",
            "java": "public void reverseWords(char[] s) {\n    reverse(s, 0, s.length - 1);\n    int start = 0;\n    for (int i = 0; i <= s.length; i++) {\n        if (i == s.length || s[i] == ' ') {\n            reverse(s, start, i - 1);\n            start = i + 1;\n        }\n    }\n}\n\nprivate void reverse(char[] s, int start, int end) {\n    while (start < end) {\n        char temp = s[start];\n        s[start++] = s[end];\n        s[end--] = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    reverseWords(s)\n    print(s)",
            "javascript": "function main() {\n    const s = $args;\n    reverseWords(s);\n    console.log(s);\n}"
        }
    },
    "201": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int left = $args;\n    int right = $args;\n    int result = rangeBitwiseAnd(left, right);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int rangeBitwiseAnd(int left, int right) {\n    int shift = 0;\n    while (left != right) {\n        left >>= 1;\n        right >>= 1;\n        shift++;\n    }\n    return left << shift;\n}",
            "python": "if __name__ == \"__main__\":\n    left = $args[0]\n    right = $args[1]\n    result = range_bitwise_and(left, right)\n    print(result)",
            "javascript": "function main() {\n    const left = $args[0];\n    const right = $args[1];\n    const result = rangeBitwiseAnd(left, right);\n    console.log(result);\n}"
        }
    },
    "215": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    int k = $args;\n    int result = findKthLargest(nums, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int findKthLargest(int[] nums, int k) {\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n    for (int num : nums) {\n        minHeap.add(num);\n        if (minHeap.size() > k) {\n            minHeap.poll();\n        }\n    }\n    return minHeap.poll();\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = findKthLargest(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = findKthLargest(nums, k);\n    console.log(result);\n}"
        }
    },
    "223": {
        "call_functions": {
            "c++": "int main() {\n    int ax1 = $args;\n    int ay1 = $args;\n    int ax2 = $args;\n    int ay2 = $args;\n    int bx1 = $args;\n    int by1 = $args;\n    int bx2 = $args;\n    int by2 = $args;\n\n    int result = totalArea(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "231": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfTwo(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isPowerOfTwo(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = is_power_of_two(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfTwo(n);\n    console.log(result);\n}"
        }
    },
    "240": {
        "call_functions": {
            "c++": "bool searchMatrix(vector<vector<int>>& matrix, int target) {\n    int row = matrix.size() - 1, col = 0;\n    while (row >= 0 && col < matrix[0].size()) {\n        if (matrix[row][col] > target) {\n            row--;\n        } else if (matrix[row][col] < target) {\n            col++;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean searchMatrix(int[][] matrix, int target) {\n    int row = matrix.length - 1, col = 0;\n    while (row >= 0 && col < matrix[0].length) {\n        if (matrix[row][col] > target) {\n            row--;\n        } else if (matrix[row][col] < target) {\n            col++;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    target = $args[1]\n    result = searchMatrix(matrix, target)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args[0];\n    const target = $args[1];\n    const result = searchMatrix(matrix, target);\n    console.log(result);\n}"
        }
    },
    "242": {
        "call_functions": {
            "c++": "bool isAnagram(std::string s, std::string t) {\n    if(s.size() != t.size())\n        return false;\n    \n    std::unordered_map<char, int> counts;\n    for(char c : s)\n        counts[c]++;\n        \n    for(char c : t) {\n        if(counts[c] == 0)\n            return false;\n        counts[c]--;\n    }\n    \n    return true;\n}",
            "java": "public boolean isAnagram(String s, String t) {\n    if(s.length() != t.length())\n        return false;\n\n    int[] counts = new int[26];\n    for(char c : s.toCharArray())\n        counts[c - 'a']++;\n\n    for(char c : t.toCharArray()) {\n        if(counts[c - 'a'] == 0)\n            return false;\n        counts[c - 'a']--;\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = is_anagram(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = isAnagram(s, t);\n    console.log(result);\n}"
        }
    },
    "263": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    bool result = isUgly(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isUgly(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = is_ugly(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isUgly(n);\n    console.log(result);\n}"
        }
    },
    "274": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> citations = $args;\n    int result = hIndex(citations);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int hIndex(int[] citations) {\n    Arrays.sort(citations);\n    int h = 0;\n    for (int i = citations.length - 1; i >= 0; i--) {\n        int rank = citations.length - i;\n        if (citations[i] >= rank) {\n            h = rank;\n        } else {\n            break;\n        }\n    }\n    return h;\n}",
            "python": "if __name__ == \"__main__\":\n    citations = $args[0]\n    result = hIndex(citations)\n    print(result)",
            "javascript": "function main() {\n    const citations = $args;\n    const result = hIndex(citations);\n    console.log(result);\n}"
        }
    },
    "275": {
        "call_functions": {
            "c++": "int hIndex(vector<int>& citations) {\n    int n = citations.size();\n    int left = 0, right = n - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (citations[mid] == n - mid) {\n            return n - mid;\n        } else if (citations[mid] < n - mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return n - left;\n}",
            "java": "public int hIndex(int[] citations) {\n    int n = citations.length;\n    int left = 0, right = n - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (citations[mid] == n - mid) {\n            return n - mid;\n        } else if (citations[mid] < n - mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return n - left;\n}",
            "python": "if __name__ == \"__main__\":\n    citations = $args[0]\n    result = hIndex(citations)\n    print(result)",
            "javascript": "function main() {\n    const citations = $args;\n    const n = citations.length;\n    let left = 0, right = n - 1;\n\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (citations[mid] === n - mid) {\n            return n - mid;\n        } else if (citations[mid] < n - mid) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return n - left;\n}\n\nconst result = main();\nconsole.log(result);"
        }
    },
    "276": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int k = $args;\n    int result = numWays(n, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int callNumWays(int n, int k) {\n    int result = numWays(n, k);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    k = $args[1]\n    result = numWays(n, k)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const k = $args[1];\n    const result = numWays(n, k);\n    console.log(result);\n}"
        }
    },
    "277": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = findCelebrity(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int findCelebrity(int n) {\n    int candidate = 0;\n    for (int i = 1; i < n; i++) {\n        if (knows(candidate, i)) {\n            candidate = i;\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n        if (i != candidate && (knows(candidate, i) || !knows(i, candidate))) {\n            return -1;\n        }\n    }\n    return candidate;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = findCelebrity(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = findCelebrity(n);\n    console.log(result);\n}"
        }
    },
    "278": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = firstBadVersion(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int firstBadVersion(int n) {\n    int left = 1;\n    int right = n;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (isBadVersion(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = first_bad_version(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = firstBadVersion(n);\n    console.log(result);\n}\n"
        }
    },
    "279": {
        "call_functions": {
            "c++": "#include <vector>\n#include <limits>\n#include <cmath>\n\nint main() {\n    int n = $args;\n    int result = numSquares(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numSquares(int n) {\n    int[] dp = new int[n + 1];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    dp[0] = 0;\n    \n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j * j <= i; j++) {\n            dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n        }\n    }\n    \n    return dp[n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = numSquares(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = numSquares(n);\n    console.log(result);\n}"
        }
    },
    "280": {
        "call_functions": {
            "c++": "void wiggleSort(vector<int>& nums) {\n    for (int i = 1; i < nums.size(); i++) {\n        if (i%2 == 0 && nums[i] > nums[i-1] || i%2 == 1 && nums[i] < nums[i-1]) {\n            swap(nums[i], nums[i-1]);\n        }\n    }\n}"
        }
    },
    "282": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <iostream>\n\nvoid helper(const std::string &num, int target, int pos, long long currVal, long long prevVal, std::string currExpr, std::vector<std::string> &res) {\n    if (pos == num.size()) {\n        if (currVal == target) {\n            res.push_back(currExpr);\n        }\n        return;\n    }\n\n    for (int i = pos; i < num.size(); ++i) {\n        if (i != pos && num[pos] == '0') break;\n        long long val = std::stoll(num.substr(pos, i - pos + 1));\n        if (pos == 0) {\n            helper(num, target, i + 1, val, val, currExpr + num.substr(pos, i - pos + 1), res);\n        } else {\n            helper(num, target, i + 1, currVal + val, val, currExpr + \"+\" + num.substr(pos, i - pos + 1), res);\n            helper(num, target, i + 1, currVal - val, -val, currExpr + \"-\" + num.substr(pos, i - pos + 1), res);\n            helper(num, target, i + 1, currVal - prevVal + prevVal * val, prevVal * val, currExpr + \"*\" + num.substr(pos, i - pos + 1), res);\n        }\n    }\n}\n\nstd::vector<std::string> addOperators(std::string num, int target) {\n    std::vector<std::string> res;\n    helper(num, target, 0, 0, 0, \"\", res);\n    return res;\n}\n\nint main() {\n    std::string num = $args;\n    int target = 10;\n    std::vector<std::string> result = addOperators(num, target);\n    for (const std::string& expr : result) {\n        std::cout << expr << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> addOperators(String num, int target) {\n    List<String> res = new ArrayList<>();\n    helper(num, target, 0, 0, 0, \"\", res);\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    target = $args[1]\n    result = addOperators(num, target)\n    print(result)",
            "javascript": "function addOperators(num, target) {\n    const res = [];\n    const helper = (num, target, pos, currVal, prevVal, currExpr) => {\n        if (pos === num.length) {\n            if (currVal === target) {\n                res.push(currExpr);\n            }\n            return;\n        }\n\n        for (let i = pos; i < num.length; ++i) {\n            if (i !== pos && num[pos] === '0') break;\n\n            const val = parseInt(num.substring(pos, i + 1));\n            if (pos === 0) {\n                helper(num, target, i + 1, val, val, currExpr + num.substring(pos, i + 1));\n            } else {\n                helper(num, target, i + 1, currVal + val, val, currExpr + '+' + num.substring(pos, i + 1));\n                helper(num, target, i + 1, currVal - val, -val, currExpr + '-' + num.substring(pos, i + 1));\n                helper(num, target, i + 1, currVal - prevVal + prevVal * val, prevVal * val, currExpr + '*' + num.substring(pos, i + 1));\n            }\n        }\n    }\n\n    helper(num, target, 0, 0, 0, '');\n    return res;\n}"
        }
    },
    "283": {
        "call_functions": {
            "c++": "void moveZeroes(vector<int>& nums) {\n    int index = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] != 0) {\n            nums[index++] = nums[i];\n        }\n    }\n    for (int i = index; i < nums.size(); i++) {\n        nums[i] = 0;\n    }\n}"
        }
    },
    "286": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\nusing namespace std;\n\nvoid wallsAndGates(vector<vector<int>>& rooms) {\n    const int INF = 2147483647;\n    int m = rooms.size();\n    int n = rooms[0].size();\n    queue<pair<int, int>> q;\n\n    for(int i = 0; i < m; i++) {\n        for(int j = 0; j < n; j++) {\n            if(rooms[i][j] == 0) {\n                q.push(make_pair(i, j));\n            }\n        }\n    }\n\n    int directions[][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    while(!q.empty()) {\n        int i = q.front().first;\n        int j = q.front().second;\n        q.pop();\n\n        for(auto d : directions) {\n            int ni = i + d[0];\n            int nj = j + d[1];\n\n            if(ni >= 0 && ni < m && nj >= 0 && nj < n && rooms[ni][nj] == INF) {\n                rooms[ni][nj] = rooms[i][j] + 1;\n                q.push(make_pair(ni, nj));\n            }\n        }\n    }\n}",
            "java": "public void wallsAndGates(int[][] rooms)",
            "python": "if __name__ == \"__main__\":\n    rooms = $args[0]\n    result = wallsAndGates(rooms)\n    print(result)",
            "javascript": "function wallsAndGates(rooms) {\n    const m = rooms.length;\n    const n = rooms[0].length;\n    const q = [];\n    const INF = 2147483647;\n    \n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (rooms[i][j] === 0) {\n                q.push([i, j]);\n            }\n        }\n    }\n\n    const directions = [\n        [0, 1],\n        [0, -1],\n        [1, 0],\n        [-1, 0]\n    ];\n\n    while (q.length) {\n        const [i, j] = q.shift();\n\n        directions.forEach(([di, dj]) => {\n            const ni = i + di;\n            const nj = j + dj;\n\n            if (ni >= 0 && ni < m && nj >= 0 && nj < n && rooms[ni][nj] === INF) {\n                rooms[ni][nj] = rooms[i][j] + 1;\n                q.push([ni, nj]);\n            }\n        });\n    }\n}"
        }
    },
    "287": {
        "call_functions": {
            "c++": "int findDuplicate(vector<int>& nums) {\n    int slow = nums[0];\n    int fast = nums[0];\n\n    do {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    } while (slow != fast);\n\n    slow = nums[0];\n\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n\n    return slow;\n}",
            "java": "public int findDuplicate(int[] nums) {\n    int slow = nums[0];\n    int fast = nums[0];\n\n    do {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    } while (slow != fast);\n\n    slow = nums[0];\n\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n\n    return slow;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findDuplicate(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findDuplicate(nums);\n    console.log(result);\n}"
        }
    },
    "289": {
        "call_functions": {
            "c++": "#include <vector>\n\nstd::vector<std::vector<int>> gameOfLife(std::vector<std::vector<int>>& board) {\n    int m = board.size();\n    int n = board[0].size();\n    std::vector<std::vector<int>> result(m, std::vector<int>(n, 0));\n    \n    std::vector<std::vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            int liveNeighbors = 0;\n            \n            for (std::vector<int> dir : dirs) {\n                int newRow = i + dir[0];\n                int newCol = j + dir[1];\n                \n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && board[newRow][newCol] == 1) {\n                    liveNeighbors++;\n                }\n            }\n            \n            if (board[i][j] == 1 && (liveNeighbors == 2 || liveNeighbors == 3)) {\n                result[i][j] = 1;\n            } else if (board[i][j] == 0 && liveNeighbors == 3) {\n                result[i][j] = 1;\n            }\n        }\n    }\n    \n    return result;\n}",
            "java": "public int[][] gameOfLife(int[][] board)",
            "python": "if __name__ == \"__main__\":\n    board = $args[0]\n    result = gameOfLife(board)\n    print(result)",
            "javascript": "function gameOfLife(board) {\n    let m = board.length;\n    let n = board[0].length;\n    let result = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    let dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            let liveNeighbors = 0;\n\n            for (let dir of dirs) {\n                let newRow = i + dir[0];\n                let newCol = j + dir[1];\n\n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && board[newRow][newCol] === 1) {\n                    liveNeighbors++;\n                }\n            }\n\n            if (board[i][j] === 1 && (liveNeighbors === 2 || liveNeighbors === 3)) {\n                result[i][j] = 1;\n            } else if (board[i][j] === 0 && liveNeighbors === 3) {\n                result[i][j] = 1;\n            }\n        }\n    }\n\n    return result;\n}"
        }
    },
    "290": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string pattern = $args;\n    string s = $args;\n    bool result = wordPattern(pattern, s);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
            "java": "public boolean wordPattern(String pattern, String s) {\n    String[] words = s.split(\" \");\n    if (pattern.length() != words.length) return false;\n\n    Map<Character, String> charMap = new HashMap<>();\n    Map<String, Character> wordMap = new HashMap<>();\n\n    for (int i = 0; i < pattern.length(); i++) {\n        char c = pattern.charAt(i);\n        String word = words[i];\n        if (!charMap.containsKey(c) && !wordMap.containsKey(word)) {\n            charMap.put(c, word);\n            wordMap.put(word, c);\n        } else {\n            if (!word.equals(charMap.get(c)) || c != wordMap.get(word)) return false;\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    pattern = $args[0]\n    s = $args[1]\n    result = word_pattern(pattern, s)\n    print(result)",
            "javascript": "function main() {\n    const pattern = $args[0];\n    const s = $args[1];\n    const result = wordPattern(pattern, s);\n    console.log(result);\n}"
        }
    },
    "291": {
        "call_functions": {
            "c++": "bool wordPatternMatch(string pattern, string s) {\n    unordered_map<char, string> pattern_map;\n    unordered_set<string> words;\n    return backtrack(pattern, 0, s, 0, pattern_map, words);\n}\n\nbool backtrack(string& pattern, int p_index, string& s, int s_index, unordered_map<char, string>& pattern_map, unordered_set<string>& words) {\n    if (p_index == pattern.size() && s_index == s.size()) return true;\n    if (p_index == pattern.size() || s_index == s.size()) return false;\n\n    char p = pattern[p_index];\n    if (pattern_map.count(p)) {\n        string word = pattern_map[p];\n        if (s.substr(s_index, word.size()) != word) return false;\n        return backtrack(pattern, p_index + 1, s, s_index + word.size(), pattern_map, words);\n    } else {\n        for (int length = 1; length <= s.size() - s_index; length++) {\n            string word = s.substr(s_index, length);\n            if (words.count(word)) continue;\n            pattern_map[p] = word;\n            words.insert(word);\n            if (backtrack(pattern, p_index + 1, s, s_index + length, pattern_map, words)) return true;\n            pattern_map.erase(p);\n            words.erase(word);\n        }\n    }\n    return false;\n}",
            "java": "public boolean wordPatternMatch(String pattern, String s) {\n    Map<Character, String> patternMap = new HashMap<>();\n    Set<String> words = new HashSet<>();\n    return backtrack(pattern, 0, s, 0, patternMap, words);\n}\n\nprivate boolean backtrack(String pattern, int pIndex, String s, int sIndex, Map<Character, String> patternMap, Set<String> words) {\n    if (pIndex == pattern.length() && sIndex == s.length()) return true;\n    if (pIndex == pattern.length() || sIndex == s.length()) return false;\n\n    char p = pattern.charAt(pIndex);\n    if (patternMap.containsKey(p)) {\n        String word = patternMap.get(p);\n        if (!s.startsWith(word, sIndex)) return false;\n        return backtrack(pattern, pIndex + 1, s, sIndex + word.length(), patternMap, words);\n    } else {\n        for (int length = 1; length <= s.length() - sIndex; length++) {\n            String word = s.substring(sIndex, sIndex + length);\n            if (words.contains(word)) continue;\n            patternMap.put(p, word);\n            words.add(word);\n            if (backtrack(pattern, pIndex + 1, s, sIndex + length, patternMap, words)) return true;\n            patternMap.remove(p);\n            words.remove(word);\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    pattern = $args[0]\n    s = $args[1]\n    result = wordPatternMatch(pattern, s)\n    print(result)",
            "javascript": "function wordPatternMatch(pattern, s) {\n    const patternMap = new Map();\n    const words = new Set();\n    return backtrack(pattern, 0, s, 0, patternMap, words);\n    \n    function backtrack(pattern, pIndex, s, sIndex, patternMap, words) {\n        if (pIndex == pattern.length && sIndex == s.length) return true;\n        if (pIndex == pattern.length || sIndex == s.length) return false;\n\n        let p = pattern[pIndex];\n        if (patternMap.has(p)) {\n            let word = patternMap.get(p);\n            if (s.slice(sIndex, sIndex + word.length) !== word) return false;\n            return backtrack(pattern, pIndex + 1, s, sIndex + word.length, patternMap, words);\n        } else {\n            for (let length = 1; length <= s.length - sIndex; length++) {\n                let word = s.substr(sIndex, length);\n                if (words.has(word)) continue;\n                patternMap.set(p, word);\n                words.add(word);\n                if (backtrack(pattern, pIndex + 1, s, sIndex + length, patternMap, words)) return true;\n                patternMap.delete(p);\n                words.delete(word);\n            }\n        }\n        return false;\n    }\n}"
        }
    },
    "292": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = canWinNim(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = canWinNim(n);\n        System.out.println(result);\n    }",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = canWinNim(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = canWinNim(n);\n    console.log(result);\n}"
        }
    },
    "293": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::string currentState = $args;\n    std::vector<std::string> result = generatePossibleNextMoves(currentState);\n    for (const auto& str : result) {\n        std::cout << str << std::endl;\n    }\n    return 0;\n}",
            "java": "public List<String> generatePossibleNextMoves(String currentState) {\n    List<String> result = new ArrayList<>();\n    for (int i = 1; i < currentState.length(); i++) {\n        if (currentState.charAt(i) == '+' && currentState.charAt(i - 1) == '+') {\n            result.add(currentState.substring(0, i - 1) + \"--\" + currentState.substring(i + 1));\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    current_state = $args[0]\n    result = generate_possible_next_moves(current_state)\n    print(result)",
            "javascript": "function main() {\n    const currentState = $args;\n    const result = generatePossibleNextMoves(currentState);\n    console.log(result);\n}"
        }
    },
    "294": {
        "call_functions": {
            "c++": "bool canWin(string currentState) {\n    for (int i = 0; i < currentState.size() - 1; ++i) {\n        if (currentState[i] == '+' && currentState[i + 1] == '+') {\n            currentState[i] = '-';\n            currentState[i + 1] = '-';\n            bool opponentWins = canWin(currentState);\n            currentState[i] = '+';\n            currentState[i + 1] = '+';\n            if (!opponentWins) return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean canWin(String currentState) {\n    for (int i = 0; i < currentState.length() - 1; ++i) {\n        if (currentState.charAt(i) == '+' && currentState.charAt(i + 1) == '+') {\n            String temp = currentState.substring(0, i) + \"--\" + currentState.substring(i + 2);\n            if (!canWin(temp)) return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    currentState = $args[0]\n    result = canWin(currentState)\n    print(result)",
            "javascript": "function main() {\n    const currentState = $args;\n    const result = canWin(currentState);\n    console.log(result);\n}"
        }
    },
    "295": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    MedianFinder obj;\n    int n = $args;\n    obj.addNum(n);\n    double result = obj.findMedian();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public void addNum(int num) {\n        if (left.isEmpty() || num <= left.peek()) {\n            left.offer(num);\n        } else {\n            right.offer(num);\n        }\n        \n        if (left.size() < right.size()) {\n            left.offer(right.poll());\n        } else if (left.size() > right.size() + 1) {\n            right.offer(left.poll());\n        }\n    }\n    \n    public double findMedian() {\n        if (left.size() == right.size()) {\n            return (left.peek() + right.peek()) / 2.0;\n        } else {\n            return left.peek();\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    mf = MedianFinder()\n    nums = $args[0]\n    for num in nums:\n        mf.addNum(num)\n    result = mf.findMedian()\n    print(result)",
            "javascript": "function main() {\n    const mf = new MedianFinder();\n    const nums = $args;\n    for (let i = 0; i < nums.length; i++) {\n        mf.addNum(nums[i]);\n    }\n    const result = mf.findMedian();\n    console.log(result);\n}"
        }
    },
    "296": {
        "call_functions": {
            "c++": "int minTotalDistance(vector<vector<int>>& grid) {\n    vector<int> rows, cols;\n    int m = grid.size(), n = grid[0].size();\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j]) {\n                rows.push_back(i);\n                cols.push_back(j);\n            }\n        }\n    }\n    sort(cols.begin(), cols.end());\n    int row_median = rows[rows.size() / 2], col_median = cols[cols.size() / 2];\n    int distance = 0;\n    for (int i : rows) distance += abs(i - row_median);\n    for (int j : cols) distance += abs(j - col_median);\n    return distance;\n}",
            "java": "public int minTotalDistance(int[][] grid) {\n    List<Integer> rows = new ArrayList<Integer>();\n    List<Integer> cols = new ArrayList<Integer>();\n    int m = grid.length, n = grid[0].length;\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                rows.add(i);\n                cols.add(j);\n            }\n        }\n    }\n    Collections.sort(cols);\n    int row_median = rows.get(rows.size() / 2), col_median = cols.get(cols.size() / 2);\n    int distance = 0;\n    for (int i : rows) distance += Math.abs(i - row_median);\n    for (int j : cols) distance += Math.abs(j - col_median);\n    return distance;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = minTotalDistance(grid)\n    print(result)",
            "javascript": "function main() {\n    const grid = $args;\n    const result = minTotalDistance(grid);\n    console.log(result);\n}"
        }
    },
    "299": {
        "call_functions": {
            "c++": "std::string getHint(std::string secret, std::string guess) {\n    int bulls = 0, cows = 0;\n    std::vector<int> secret_count(10, 0);\n    std::vector<int> guess_count(10, 0);\n\n    for (size_t i = 0; i < secret.length(); i++) {\n        if (secret[i] == guess[i]) {\n            bulls++;\n        } else {\n            secret_count[secret[i] - '0']++;\n            guess_count[guess[i] - '0']++;\n        }\n    }\n\n    for (size_t i = 0; i < 10; i++) {\n        cows += std::min(secret_count[i], guess_count[i]);\n    }\n\n    return std::to_string(bulls) + \"A\" + std::to_string(cows) + \"B\";\n}",
            "java": "public String getHint(String secret, String guess) {\n    int bulls = 0, cows = 0;\n    int[] secretCount = new int[10];\n    int[] guessCount = new int[10];\n\n    for (int i = 0; i < secret.length(); i++) {\n        if (secret.charAt(i) == guess.charAt(i)) {\n            bulls++;\n        } else {\n            secretCount[secret.charAt(i) - '0']++;\n            guessCount[guess.charAt(i) - '0']++;\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        cows += Math.min(secretCount[i], guessCount[i]);\n    }\n\n    return bulls + \"A\" + cows + \"B\";\n}",
            "python": "if __name__ == \"__main__\":\n    secret = $args[0]\n    guess = $args[1]\n    result = get_hint(secret, guess)\n    print(result)",
            "javascript": "function getHint(secret, guess) {\n    let bulls = 0, cows = 0;\n    let secretCount = Array(10).fill(0);\n    let guessCount = Array(10).fill(0);\n\n    for (let i = 0; i < secret.length; i++) {\n        if (secret[i] === guess[i]) {\n            bulls++;\n        } else {\n            secretCount[parseInt(secret[i])]++;\n            guessCount[parseInt(guess[i])]++;\n        }\n    }\n\n    for (let i = 0; i < 10; i++) {\n        cows += Math.min(secretCount[i], guessCount[i]);\n    }\n\n    return `${bulls}A${cows}B`;\n}"
        }
    },
    "300": {
        "call_functions": {
            "c++": "int lengthOfLIS(vector<int>& nums) {\n    vector<int> dp(nums.size(), 1);\n    int max_length = 1;\n    for (int i = 1; i < nums.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        max_length = max(max_length, dp[i]);\n    }\n    return max_length;\n}",
            "java": "public int lengthOfLIS(int[] nums) {\n    int[] dp = new int[nums.length];\n    int max_length = 1;\n    Arrays.fill(dp, 1);\n    for (int i = 1; i < nums.length; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        max_length = Math.max(max_length, dp[i]);\n    }\n    return max_length;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = lengthOfLIS(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = lengthOfLIS(nums);\n    console.log(result);\n}"
        }
    },
    "301": {
        "call_functions": {
            "c++": "vector<string> removeInvalidParentheses(string s) {\n    set<string> visited;\n    queue<string> q;\n    vector<string> result;\n    bool found = false;\n\n    visited.insert(s);\n    q.push(s);\n\n    while (!q.empty()) {\n        string cur = q.front();\n        q.pop();\n\n        if (isValid(cur)) {\n            found = true;\n            result.push_back(cur);\n        }\n\n        if (found) continue;\n\n        for (int i = 0; i < cur.length(); ++i) {\n            if (cur[i] == '(' || cur[i] == ')') {\n                string next = cur.substr(0, i) + cur.substr(i+1);\n                if (visited.find(next) == visited.end()) {\n                    visited.insert(next);\n                    q.push(next);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nbool isValid(const string &s) {\n    int count = 0;\n    for (char c : s) {\n        if (c == '(') count++;\n        if (c == ')') count--;\n        if (count < 0) return false;\n    }\n    return count == 0;\n}",
            "java": "public List<String> removeInvalidParentheses(String s)",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    solution = Solution()\n    result = solution.removeInvalidParentheses(s)\n    print(result)",
            "javascript": "removeInvalidParentheses(s)"
        }
    },
    "302": {
        "call_functions": {
            "c++": "int minArea(vector<vector<char>>& image, int x, int y) {\n    int top = x, bottom = x, left = y, right = y;\n    for (int i = 0; i < image.size(); ++i) {\n        for (int j = 0; j < image[i].size(); ++j) {\n            if (image[i][j] == '1') {\n                top = min(top, i);\n                bottom = max(bottom, i);\n                left = min(left, j);\n                right = max(right, j);\n            }\n        }\n    }\n    return (bottom - top + 1) * (right - left + 1);\n}",
            "java": "public int minArea(char[][] image, int x, int y) {\n    int top = x, bottom = x, left = y, right = y;\n    for (int i = 0; i < image.length; ++i) {\n        for (int j = 0; j < image[i].length; ++j) {\n            if (image[i][j] == '1') {\n                top = Math.min(top, i);\n                bottom = Math.max(bottom, i);\n                left = Math.min(left, j);\n                right = Math.max(right, j);\n            }\n        }\n    }\n    return (bottom - top + 1) * (right - left + 1);\n}",
            "python": "if __name__ == \"__main__\":\n    image = $args[0]\n    x = $args[1]\n    y = $args[2]\n    result = minArea(image, x, y)\n    print(result)",
            "javascript": "function main() {\n    const image = $args[0];\n    const x = $args[1];\n    const y = $args[2];\n    const result = minArea(image, x, y);\n    console.log(result);\n}"
        }
    },
    "305": {
        "call_functions": {
            "c++": "#include <vector>\n\nusing namespace std;\n\nint main() {\n    int m = $args;\n    int n = $args;\n    vector<vector<int>> positions = $args;\n    vector<int> result = numIslands2(m, n, positions);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> numIslands2(int m, int n, int[][] positions) {\n    int[] roots = new int[m * n];\n    Arrays.fill(roots, -1);\n    int[][] dirs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n    int islandCount = 0;\n    List<Integer> result = new ArrayList<>();\n\n    for (int[] position : positions) {\n        int i = position[0], j = position[1], index = i * n + j;\n        if (roots[index] != -1) {\n            result.add(islandCount);\n            continue;\n        }\n        islandCount++;\n        roots[index] = index;\n        for (int[] dir : dirs) {\n            int ni = i + dir[0], nj = j + dir[1], neighbor = ni * n + nj;\n            if (ni >= 0 && ni < m && nj >= 0 && nj < n && roots[neighbor] != -1) {\n                int rootNb = find(roots, neighbor);\n                if (index != rootNb) {\n                    roots[rootNb] = index;\n                    islandCount--;\n                }\n            }\n        }\n        result.add(islandCount);\n    }\n    return result;\n}\n\nprivate int find(int[] roots, int x) {\n    if (roots[x] != x) roots[x] = find(roots, roots[x]);\n    return roots[x];\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    positions = $args[2]\n    result = numIslands2(m, n, positions)\n    print(result)",
            "javascript": "function numIslands2(m, n, positions) {\n    const roots = new Array(m * n).fill(-1);\n    const dirs = [[0, 1], [1, 0], [-1, 0], [0, -1]];\n    let islandCount = 0;\n    const result = [];\n\n    const index = (x, y) => x * n + y;\n    \n    function find(x) {\n        if (roots[x] !== x) roots[x] = find(roots[x]);\n        return roots[x];\n    }\n\n    for (const [i, j] of positions) {\n        const idx = index(i, j);\n        if (roots[idx] !== -1) {\n            result.push(islandCount);\n            continue;\n        }\n        islandCount++;\n        roots[idx] = idx;\n        for (const [dx, dy] of dirs) {\n            const ni = i + dx, nj = j + dy;\n            const neighbor = index(ni, nj);\n            if (ni >= 0 && ni < m && nj >= 0 && nj < n && roots[neighbor] !== -1) {\n                const root_neighbor = find(neighbor);\n                if (idx !== root_neighbor) {\n                    roots[root_neighbor] = idx;\n                    islandCount--;\n                }\n            }\n        }\n        result.push(islandCount);\n    }\n    return result;\n}"
        }
    },
    "306": {
        "call_functions": {
            "c++": "bool isAdditiveNumber(std::string num) {\n    for (int i = 1; i <= num.length() / 2; i++) {\n        for (int j = 1; j <= (num.length() - i) / 2; j++) {\n            if (check(num.substr(0, i), num.substr(i, j), num.substr(i + j))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nbool check(std::string num1, std::string num2, std::string remaining) {\n    if ((num1.size() > 1 && num1[0] == '0') || (num2.size() > 1 && num2[0] == '0')) {\n        return false;\n    }\n    std::string sum = add(num1, num2);\n    if (remaining == sum) {\n        return true;\n    }\n    if (remaining.substr(0, sum.size()) != sum) {\n        return false;\n    }\n    return check(num2, sum, remaining.substr(sum.size()));\n}\n\nstd::string add(std::string num1, std::string num2) {\n    int carry = 0;\n    std::string result;\n    for (int i = num1.size() - 1, j = num2.size() - 1;\n         i >= 0 || j >= 0 || carry > 0; i--, j--) {\n        int n1 = i >= 0 ? num1[i] - '0' : 0;\n        int n2 = j >= 0 ? num2[j] - '0' : 0;\n        int sum = n1 + n2 + carry;\n        carry = sum / 10;\n        result.push_back('0' + sum % 10);\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n}",
            "java": "public boolean isAdditiveNumber(String num) {\n    for (int i = 1; i <= num.length() / 2; i++) {\n        for (int j = 1; j <= (num.length() - i) / 2; j++) {\n            if (check(num.substring(0, i), num.substring(i, i + j), num.substring(i + j))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean check(String num1, String num2, String remaining) {\n    if ((num1.length() > 1 && num1.charAt(0) == '0') || (num2.length() > 1 && num2.charAt(0) == '0')) {\n        return false;\n    }\n    String sum = add(num1, num2);\n    if (remaining.equals(sum)) {\n        return true;\n    }\n    if (!remaining.startsWith(sum)) {\n        return false;\n    }\n    return check(num2, sum, remaining.substring(sum.length()));\n}\n\nprivate String add(String num1, String num2) {\n    int carry = 0;\n    StringBuilder result = new StringBuilder();\n    for (int i = num1.length() - 1, j = num2.length() - 1;\n         i >= 0 || j >= 0 || carry > 0; i--, j--) {\n        int n1 = i >= 0 ? num1.charAt(i) - '0' : 0;\n        int n2 = j >= 0 ? num2.charAt(j) - '0' : 0;\n        int sum = n1 + n2 + carry;\n        carry = sum / 10;\n        result.append((char) ('0' + sum % 10));\n    }\n    return result.reverse().toString();\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = isAdditiveNumber(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = isAdditiveNumber(num);\n    console.log(result);\n}"
        }
    },
    "309": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> prices = $args;\n    int result = maxProfit(prices);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxProfit(int[] prices) {\n    int profit = 0;\n    for (int i = 1; i < prices.length; i++) {\n        profit += Math.max(prices[i] - prices[i - 1], 0);\n    }\n    return profit;\n}",
            "python": "if __name__ == \"__main__\":\n    prices = $args[0]\n    result = maxProfit(prices)\n    print(result)",
            "javascript": "function main() {\n    const prices = $args;\n    const result = maxProfit(prices);\n    console.log(result);\n}"
        }
    },
    "310": {
        "call_functions": {
            "c++": "vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n    if (n == 1) return {0};\n\n    vector<int> degrees(n, 0);\n    vector<vector<int>> adjList(n);\n    for (const auto &edge : edges) {\n        adjList[edge[0]].push_back(edge[1]);\n        adjList[edge[1]].push_back(edge[0]);\n        degrees[edge[0]]++;\n        degrees[edge[1]]++;\n    }\n\n    queue<int> q;\n    for (int i = 0; i < n; ++i) {\n        if (degrees[i] == 1) q.push(i);\n    }\n\n    while (n > 2) {\n        int leaves_size = q.size();\n        n -= leaves_size;\n        for (int i = 0; i < leaves_size; i++) {\n            int leaf = q.front(); q.pop();\n            for (int neighbor : adjList[leaf]) {\n                if (--degrees[neighbor] == 1) q.push(neighbor);\n            }\n        }\n    }\n\n    vector<int> result;\n    while (!q.empty()) {\n        result.push_back(q.front());\n        q.pop();\n    }\n\n    return result;\n}",
            "java": "public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n    if (n == 1) {\n        List<Integer> result = new ArrayList<>();\n        result.add(0);\n        return result;\n    }\n\n    int[] degrees = new int[n];\n    List<List<Integer>> adjList = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) {\n        adjList.add(new ArrayList<>());\n    }\n\n    for (int[] edge : edges) {\n        adjList.get(edge[0]).add(edge[1]);\n        adjList.get(edge[1]).add(edge[0]);\n        degrees[edge[0]]++;\n        degrees[edge[1]]++;\n    }\n\n    Queue<Integer> queue = new LinkedList<>();\n    for (int i = 0; i < n; i++) {\n        if (degrees[i] == 1) queue.add(i);\n    }\n\n    while (n > 2) {\n        int leavesSize = queue.size();\n        n -= leavesSize;\n        for (int i = 0; i < leavesSize; i++) {\n            int leaf = queue.poll();\n            for (int neighbor : adjList.get(leaf)) {\n                if (--degrees[neighbor] == 1) queue.add(neighbor);\n            }\n        }\n    }\n\n    return new ArrayList<>(queue);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = find_min_height_trees(n, edges)\n    print(result)",
            "javascript": "function main() {\n  const n = $args;\n  const edges = $args;\n  const result = findMinHeightTrees(n, edges);\n  console.log(result);\n}"
        }
    },
    "311": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> multiply(vector<vector<int>>& mat1, vector<vector<int>>& mat2) {\n    int m = mat1.size();\n    int k = mat1[0].size();\n    int n = mat2[0].size();\n    vector<vector<int>> result(m, vector<int>(n, 0));\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < k; j++) {\n            if (mat1[i][j] != 0) {\n                for (int l = 0; l < n; l++) {\n                    result[i][l] += mat1[i][j] * mat2[j][l];\n                }\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    vector<vector<int>> mat1 = $args;\n    vector<vector<int>> mat2 = $args;\n    vector<vector<int>> result = multiply(mat1, mat2);\n    for (int i = 0; i < result.size(); i++) {\n        for (int j = 0; j < result[0].size(); j++) {\n            cout << result[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
            "java": "public int[][] multiply(int[][] mat1, int[][] mat2) {\n    int m = mat1.length;\n    int k = mat1[0].length;\n    int n = mat2[0].length;\n    int[][] result = new int[m][n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < k; j++) {\n            if (mat1[i][j] != 0) {\n                for (int l = 0; l < n; l++) {\n                    result[i][l] += mat1[i][j] * mat2[j][l];\n                }\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    mat1 = $args[0]\n    mat2 = $args[1]\n    result = multiply(mat1, mat2)\n    print(result)",
            "javascript": "function main() {\n    const mat1 = $args[0];\n    const mat2 = $args[1];\n    const result = multiply(mat1, mat2);\n    console.log(result);\n}"
        }
    },
    "312": {
        "call_functions": {
            "c++": "int maxCoins(vector<int>& nums) {\n    int n = nums.size();\n    nums.insert(nums.begin(), 1);\n    nums.push_back(1);\n\n    vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));\n    for (int len = 1; len <= n; len++) {\n        for (int left = 1; left <= n - len + 1; left++) {\n            int right = left + len - 1;\n            for (int i = left; i <= right; i++) {\n                dp[left][right] = max(dp[left][right], nums[left - 1] * nums[i] * nums[right + 1] + dp[left][i - 1] + dp[i + 1][right]);\n            }\n        }\n    }\n\n    return dp[1][n];\n}",
            "java": "public int maxCoins(int[] nums) {\n    int n = nums.length;\n    int[] newNums = new int[n + 2];\n    newNums[0] = 1;\n    newNums[n + 1] = 1;\n    for (int i = 1; i <= n; i++) {\n        newNums[i] = nums[i - 1];\n    }\n\n    int[][] dp = new int[n + 2][n + 2];\n    for (int len = 1; len <= n; len++) {\n        for (int left = 1; left <= n - len + 1; left++) {\n            int right = left + len - 1;\n            for (int i = left; i <= right; i++) {\n                dp[left][right] = Math.max(dp[left][right], newNums[left - 1] * newNums[i] * newNums[right + 1] + dp[left][i - 1] + dp[i + 1][right]);\n            }\n        }\n    }\n\n    return dp[1][n];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = maxCoins(nums)\n    print(result)",
            "javascript": "function maxCoins(nums) {\n    nums.unshift(1);\n    nums.push(1);\n    const n = nums.length;\n\n    const dp = [];\n    for (let i = 0; i < n; i++) {\n        dp.push(new Array(n).fill(0));\n    }\n\n    for (let len = 1; len <= n - 2; len++) {\n        for (let left = 1; left <= n - len - 1; left++) {\n            const right = left + len - 1;\n            for (let i = left; i <= right; i++) {\n                dp[left][right] = Math.max(dp[left][right], nums[left - 1] * nums[i] * nums[right + 1] + dp[left][i - 1] + dp[i + 1][right]);\n            }\n        }\n    }\n\n    return dp[1][n - 2];\n}"
        }
    },
    "313": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    vector<int> primes = {2, 3, 5};\n    int result = nthSuperUglyNumber(n, primes);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int nthSuperUglyNumber(int n, int[] primes) {\n    int[] ugly = new int[n];\n    ugly[0] = 1;\n    int[] indices = new int[primes.length];\n\n    for (int i = 1; i < n; i++) {\n        int minVal = Integer.MAX_VALUE;\n\n        for (int j = 0; j < primes.length; j++)\n            minVal = Math.min(minVal, ugly[indices[j]] * primes[j]);\n\n        ugly[i] = minVal;\n\n        for (int j = 0; j < primes.length; j++)\n            if (ugly[i] == ugly[indices[j]] * primes[j])\n                indices[j]++;\n    }\n\n    return ugly[n - 1];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    primes = $args[1]\n    result = nthSuperUglyNumber(n, primes)\n    print(result)",
            "javascript": "function nthSuperUglyNumber(n, primes) {\n    let ugly = new Array(n);\n    ugly[0] = 1;\n    let indices = new Array(primes.length).fill(0);\n\n    for (let i = 1; i < n; i++) {\n        let minVal = Number.MAX_SAFE_INTEGER;\n\n        for (let j = 0; j < primes.length; j++)\n            minVal = Math.min(minVal, ugly[indices[j]] * primes[j]);\n\n        ugly[i] = minVal;\n\n        for (let j = 0; j < primes.length; j++)\n            if (ugly[i] == ugly[indices[j]] * primes[j])\n                indices[j]++;\n    }\n\n    return ugly[n - 1];\n}"
        }
    },
    "314": {
        "call_functions": {
            "c++": "#include <vector>\n#include <map>\n#include <queue>\n\nclass TreeNode {\npublic:\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n\nstd::vector<std::vector<int>> verticalOrder(TreeNode* root) {\n    if (!root) return {};\n\n    std::map<int, std::vector<int>> columnTable;\n    std::queue<std::pair<TreeNode*, int>> q;\n    q.push({root, 0});\n\n    while (!q.empty()) {\n        TreeNode* curNode = q.front().first;\n        int column = q.front().second;\n        q.pop();\n\n        if (curNode) {\n            columnTable[column].push_back(curNode->val);\n            q.push({curNode->left, column - 1});\n            q.push({curNode->right, column + 1});\n        }\n    }\n\n    std::vector<std::vector<int>> result;\n    for (auto& [_, values] : columnTable) {\n        result.push_back(std::move(values));\n    }\n\n    return result;\n}\n\nint main() {\n    TreeNode* root = $args;\n    std::vector<std::vector<int>> result = verticalOrder(root);\n\n    // Print the result\n    for (const auto& row : result) {\n        for (const auto& val : row) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<Integer>> verticalOrder(TreeNode root)",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = verticalOrder(root)\n    print(result)",
            "javascript": "var verticalOrder = function(root) {\n    if (!root) return [];\n    \n    const columnTable = new Map();\n    const q = [[root, 0]];\n\n    while (q.length) {\n        const [curNode, column] = q.shift();\n\n        if (curNode) {\n            if (!columnTable.has(column)) columnTable.set(column, []);\n            columnTable.get(column).push(curNode.val);\n            q.push([curNode.left, column - 1]);\n            q.push([curNode.right, column + 1]);\n        }\n    }\n\n    return Array.from(columnTable.entries()).sort((a, b) => a[0] - b[0]).map(entry => entry[1]);\n};"
        }
    },
    "315": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvoid mergeSort(vector<int>& nums, vector<int>& indices, vector<int>& result, int left, int right);\n\nvector<int> countSmaller(vector<int>& nums) {\n    vector<int> result(nums.size(), 0);\n    vector<int> indices(nums.size(), 0);\n\n    for (int i = 0; i < nums.size(); ++i) {\n        indices[i] = i;\n    }\n\n    mergeSort(nums, indices, result, 0, nums.size() - 1);\n    return result;\n}\n\nvoid mergeSort(vector<int>& nums, vector<int>& indices, vector<int>& result, int left, int right) {\n    if (left >= right) {\n        return;\n    }\n\n    int mid = left + (right - left) / 2;\n    mergeSort(nums, indices, result, left, mid);\n    mergeSort(nums, indices, result, mid + 1, right);\n\n\n    int I = left;\n    int J = mid + 1;\n    int K = 0;\n    vector<int> temp(right - left + 1);\n    while (I <= mid && J <= right) {\n        if (nums[indices[I]] <= nums[indices[J]]) {\n            result[indices[I]] += (J - mid - 1);\n            temp[K++] = indices[I++];\n        } else {\n            temp[K++] = indices[J++];\n        }\n    }\n\n    while (I <= mid) {\n        result[indices[I]] += (J - mid - 1);\n        temp[K++] = indices[I++];\n    }\n\n    while (J <= right) {\n        temp[K++] = indices[J++];\n    }\n\n    for (int i = left, k = 0; i <= right; ++i, ++k) {\n        indices[i] = temp[k];\n    }\n}\n",
            "java": "public List<Integer> countSmaller(int[] nums) {\n    int n = nums.length;\n    int[] indices = new int[n];\n    int[] counts = new int[n];\n    \n    for (int i = 0; i < n; i++) {\n        indices[i] = i;\n    }\n    \n    mergeSort(nums, indices, counts, 0, n - 1);\n    List<Integer> result = new ArrayList<>();\n    for (int count : counts) {\n        result.add(count);\n    }\n    return result;\n}\n\nprivate void mergeSort(int[] nums, int[] indices, int[] counts, int left, int right) {\n    if (left >= right) {\n        return;\n    }\n    \n    int mid = left + (right - left) / 2;\n    mergeSort(nums, indices, counts, left, mid);\n    mergeSort(nums, indices, counts, mid + 1, right);\n    \n    int[] temp = new int[right - left + 1];\n    int i = left, j = mid + 1, k = 0;\n    while (i <= mid && j <= right) {\n        if (nums[indices[i]] <= nums[indices[j]]) {\n            counts[indices[i]] += j - mid - 1;\n            temp[k++] = indices[i++];\n        } else {\n            temp[k++] = indices[j++];\n        }\n    }\n    \n    while (i <= mid) {\n        counts[indices[i]] += j - mid - 1;\n        temp[k++] = indices[i++];\n    }\n    \n    while (j <= right) {\n        temp[k++] = indices[j++];\n    }\n    \n    System.arraycopy(temp, 0, indices, left, right - left + 1);\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = countSmaller(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = countSmaller(nums);\n    console.log(result);\n}"
        }
    },
    "316": {
        "call_functions": {
            "c++": "#include <string>\n#include <vector>\n#include <stack>\nusing namespace std;\n\nstring removeDuplicateLetters(string s) {\n    vector<int> count(256, 0);\n    vector<bool> visited(256, false);\n    stack<char> st;\n    \n    for (char ch : s) {\n        count[ch]++;\n    }\n    \n    for (char ch : s) {\n        count[ch]--;\n        if (visited[ch]) continue;\n        while (!st.empty() && ch < st.top() && count[st.top()] > 0) {\n            visited[st.top()] = false;\n            st.pop();\n        }\n        st.push(ch);\n        visited[ch] = true;\n    }\n    \n    string result = \"\";\n    while (!st.empty()) {\n        result = st.top() + result;\n        st.pop();\n    }\n    return result;\n}\n\nint main() {\n    string s = $args;\n    string result = removeDuplicateLetters(s);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String removeDuplicateLetters(String s) {\n        int[] count = new int[256];\n        boolean[] visited = new boolean[256];\n        Stack<Character> st = new Stack<>();\n        \n        for (char ch : s.toCharArray()) {\n            count[ch]++;\n        }\n        \n        for (char ch : s.toCharArray()) {\n            count[ch]--;\n            if (visited[ch]) continue;\n            while (!st.isEmpty() && ch < st.peek() && count[st.peek()] > 0) {\n                visited[st.pop()] = false;\n            }\n            st.push(ch);\n            visited[ch] = true;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (!st.empty()) {\n            result.append(st.pop());\n        }\n        return result.reverse().toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = removeDuplicateLetters(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = removeDuplicateLetters(s);\n    console.log(result);\n}"
        }
    },
    "317": {
        "call_functions": {
            "c++": "#include <vector>\n#include <queue>\n\nusing namespace std;\n\nint main() {\n    vector<vector<int>> grid = $args;\n    int result = shortestDistance(grid);\n    cout << result << endl;\n    return 0;\n}\n",
            "java": "public int shortestDistance(int[][] grid) {\n    int m = grid.length;\n    int n = grid[0].length;\n    \n    int[][] total_count = new int[m][n];\n    int[][] dist_sum = new int[m][n];\n    int house_count = 0;\n    \n    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                house_count++;\n                Queue<int[]> q = new LinkedList<>();\n                q.offer(new int[]{i, j});\n                boolean[][] visited = new boolean[m][n];\n                int level = 1;\n                while (!q.isEmpty()) {\n                    int sz = q.size();\n                    for (int q_i = 0; q_i < sz; q_i++) {\n                        int[] cur = q.poll();\n                        int x = cur[0];\n                        int y = cur[1];\n                        for (int[] dir : dirs) {\n                            int x_new = x + dir[0];\n                            int y_new = y + dir[1];\n                            if (x_new >= 0 && x_new < m && y_new >= 0 && y_new < n && !visited[x_new][y_new] && grid[x_new][y_new] == 0) {\n                                visited[x_new][y_new] = true;\n                                q.offer(new int[]{x_new, y_new});\n                                dist_sum[x_new][y_new] += level;\n                                total_count[x_new][y_new]++;\n                            }\n                        }\n                    }\n                    level++;\n                }\n            }\n        }\n    }\n                                         \n    int min_dist = Integer.MAX_VALUE;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (total_count[i][j] == house_count) {\n                min_dist = Math.min(min_dist, dist_sum[i][j]);\n            }\n        }\n    }\n    \n    return min_dist == Integer.MAX_VALUE ? -1 : min_dist;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = shortestDistance(grid)\n    print(result)",
            "javascript": "function shortestDistance(grid) {\n    let m = grid.length;\n    let n = grid[0].length;\n    \n    let total_count = Array.from({length: m}, () => Array(n).fill(0));\n    let dist_sum = Array.from({length: m}, () => Array(n).fill(0));\n    let house_count = 0;\n    \n    let dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    \n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                house_count++;\n                let q = [{x: i, y: j}];\n                let visited = Array.from({length: m}, () => Array(n).fill(false));\n                let level = 1;\n                while (q.length) {\n                    let sz = q.length;\n                    for (let q_i = 0; q_i < sz; q_i++) {\n                        let { x, y } = q.shift();\n                        dirs.forEach(([dx, dy]) => {\n                            let x_new = x + dx;\n                            let y_new = y + dy;\n                            if (x_new >= 0 && x_new < m && y_new >= 0 && y_new < n && !visited[x_new][y_new] && grid[x_new][y_new] === 0) {\n                                visited[x_new][y_new] = true;\n                                q.push({ x: x_new, y: y_new });\n                                dist_sum[x_new][y_new] += level;\n                                total_count[x_new][y_new]++;\n                            }\n                        });\n                    }\n                    level++;\n                }\n            }\n        }\n    }\n                                          \n    let min_dist = Infinity;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (total_count[i][j] === house_count) {\n                min_dist = Math.min(min_dist, dist_sum[i][j]);\n            }\n        }\n    }\n    \n    return min_dist === Infinity ? -1 : min_dist;\n}"
        }
    },
    "318": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::vector<std::string> words = $args;\n    int result = maxProduct(words);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int maxProduct(String[] words) {\n        int n = words.length;\n        int[] mask = new int[n];\n        for (int i = 0; i < n; i++) {\n            for (char c : words[i].toCharArray()) {\n                mask[i] |= (1 << (c - 'a'));\n            }\n        }\n\n        int maxProduct = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((mask[i] & mask[j]) == 0) {\n                    maxProduct = Math.max(maxProduct, words[i].length() * words[j].length());\n                }\n            }\n        }\n\n        return maxProduct;\n    }",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = maxProduct(words)\n    print(result)",
            "javascript": "function main() {\n    const words = $args;\n    const result = maxProduct(words);\n    console.log(result);\n}"
        }
    },
    "319": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = bulbSwitch(n);\n    cout << result << endl;\n    return 0;\n}"
        }
    },
    "320": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nstd::vector<std::string> generateAbbreviations(std::string word);\n\nint main() {\n    std::string word = $args;\n    std::vector<std::string> result = generateAbbreviations(word);\n    for (const std::string& res : result) {\n        std::cout << res << std::endl;\n    }\n    return 0;\n}\n",
            "java": "public List<String> generateAbbreviations(String word) {\n    List<String> res = new ArrayList<>();\n    res.add(word.isEmpty() ? \"\" : Integer.toString(word.length()));\n    for (int i = 0; i < word.length(); ++i) {\n        String pre = word.substring(0, i);\n        for (String abbr : generateAbbreviations(word.substring(i + 1))) {\n            int num = abbr.chars().findFirst_NEG_INT().getAsInt();\n            if (abbr.isEmpty() || num > 0) {\n                res.add(pre + '1' + abbr);\n            }\n            if (i == 0 || abbr.isEmpty() || abbr.charAt(0) > '9') {\n                res.add(word.substring(0, i + 1) + abbr);\n            }\n        }\n    }\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    word = $args[0]\n    result = generateAbbreviations(word)\n    print(result)",
            "javascript": "function main() {\n    const word = $args;\n    const result = generateAbbreviations(word);\n    console.log(result);\n}"
        }
    },
    "321": {
        "call_functions": {
            "c++": "std::vector<int> maxNumber(std::vector<int>& nums1, std::vector<int>& nums2, int k) {\n    int m = nums1.size(), n = nums2.size();\n    std::vector<int> ans(k, 0);\n    for (int i = std::max(0, k - n); i <= k && i <= m; ++i) {\n        std::vector<int> candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);\n        if (greater(candidate, 0, ans, 0)) ans = candidate;\n    }\n    return ans;\n}\n\nstd::vector<int> maxArray(std::vector<int>& nums, int k) {\n    int n = nums.size();\n    std::vector<int> ans(k, 0);\n    for (int i = 0, j = 0; i < n; ++i) {\n        while (n - i > k - j && j > 0 && ans[j - 1] < nums[i]) j--;\n        if (j < k) ans[j++] = nums[i];\n    }\n    return ans;\n}\n\nstd::vector<int> merge(std::vector<int>& nums1, std::vector<int>& nums2, int k) {\n    std::vector<int> ans(k, 0);\n    for (int i = 0, j = 0, r = 0; r < k; ++r)\n        ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];\n    return ans;\n}\n\nbool greater(std::vector<int>& nums1, int i, std::vector<int>& nums2, int j) {\n    while (i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]) {\n        i++;\n        j++;\n    }\n    return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);\n}",
            "java": "public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n    int[] ans = new int[k];\n    int m = nums1.length, n = nums2.length;\n    \n    for (int i = Math.max(0, k - n); i <= k && i <= m; i++) {\n        int[] candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);\n        if (greater(candidate, 0, ans, 0)) ans = candidate;\n    }\n    return ans;\n}\n\nprivate int[] maxArray(int[] nums, int k) {\n    int n = nums.length;\n    int[] ans = new int[k];\n    for (int i = 0, j = 0; i < n; i++) {\n        while (n - i > k - j && j > 0 && ans[j - 1] < nums[i]) j--;\n        if (j < k) ans[j++] = nums[i];\n    }\n    return ans;\n}\n\nprivate int[] merge(int[] nums1, int[] nums2, int k) {\n    int[] ans = new int[k];\n    for (int i = 0, j = 0, r = 0; r < k; r++)\n        ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];\n    return ans;\n}\n\nprivate boolean greater(int[] nums1, int i, int[] nums2, int j) {\n    while (i < nums1.length && j < nums2.length && nums1[i] == nums2[j]) {\n        i++;\n        j++;\n    }\n    return j == nums2.length || (i < nums1.length && nums1[i] > nums2[j]);\n}",
            "javascript": "def main():\n    nums1 = $args[0]\n    nums2 = $args[1]\n    k = $args[2]\n    \n    def maxArray(nums, k):\n        ans = []\n        for i, num in enumerate(nums):\n            while len(ans) + len(nums) - i > k and ans and ans[-1] < num:\n                ans.pop()\n            if len(ans) < k:\n                ans.append(num)\n        return ans\n\n    def merge(nums1, nums2):\n        return [max(nums1, nums2).pop(0) for _ in nums1 + nums2]\n\n    result = max(merge(maxArray(nums1, i), maxArray(nums2, k - i))\n               for i in range(k + 1)\n               if i <= len(nums1) and k - i <= len(nums2))\n    print(result)\n\nmain()",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    k = $args[2]\n    result = maxNumber(nums1, nums2, k)\n    print(result)"
        }
    },
    "322": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::vector<int> coins = $args;\n    int amount = $args;\n    int result = coinChange(coins, amount);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int coinChange(int[] coins, int amount) {\n    int[] dp = new int[amount + 1];\n    Arrays.fill(dp, amount + 1);\n    dp[0] = 0;\n    \n    for (int coin : coins) {\n        for (int i = coin; i <= amount; i++) {\n            dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n        }\n    }\n\n    return dp[amount] <= amount ? dp[amount] : -1;\n}",
            "python": "if __name__ == \"__main__\":\n    coins = $args[0]\n    amount = $args[1]\n    result = coinChange(coins, amount)\n    print(result)",
            "javascript": "function main() {\n    const coins = $args[0];\n    const amount = $args[1];\n    const result = coinChange(coins, amount);\n    console.log(result);\n}"
        }
    },
    "323": {
        "call_functions": {
            "c++": "#include <vector>\n#include <iostream>\n\nint main() {\n    int n = $args;\n    std::vector<std::vector<int>> edges = { {0, 1}, {1, 2}, {3, 4} }; // Example input\n    int result = countComponents(n, edges);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int countComponents(int n, int[][] edges) {\n    List<List<Integer>> adjList = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n        adjList.add(new ArrayList<>());\n    }\n    for (int[] edge : edges) {\n        adjList.get(edge[0]).add(edge[1]);\n        adjList.get(edge[1]).add(edge[0]);\n    }\n\n    boolean[] visited = new boolean[n];\n    int connectedComponents = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (!visited[i]) {\n            dfs(i, visited, adjList);\n            connectedComponents++;\n        }\n    }\n    return connectedComponents;\n}\n\nvoid dfs(int node, boolean[] visited, List<List<Integer>> adjList) {\n    visited[node] = true;\n    for (int neighbor : adjList.get(node)) {\n        if (!visited[neighbor]) {\n            dfs(neighbor, visited, adjList);\n        }\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    edges = $args[1]\n    result = countComponents(n, edges)\n    print(result)",
            "javascript": "function main() {\n    const n = $args[0];\n    const edges = $args[1];\n    const result = countComponents(n, edges);\n    console.log(result);\n}"
        }
    },
    "324": {
        "call_functions": {
            "c++": "#include <algorithm>\n\nvoid wiggleSort(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    for (int i = 1; i < nums.size() - 1; i += 2) {\n        swap(nums[i], nums[i + 1]);\n    }\n}\n\nint main() {\n    vector<int> nums = $args;\n    wiggleSort(nums);\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << \" \";\n    }\n    return 0;\n}",
            "java": "public void wiggleSort(int[] nums)",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = wiggleSort(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    wiggleSort(nums);\n    console.log(nums);\n}"
        }
    },
    "325": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int k = $args;\n    int result = maxSubArrayLen(nums, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int maxSubArrayLen(int[] nums, int k) {\n    Map<Integer, Integer> sumIndex = new HashMap<>();\n    int maxLength = 0, sum = 0;\n    for(int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum == k) maxLength = i + 1;\n        if (sumIndex.containsKey(sum - k)) maxLength = Math.max(maxLength, i - sumIndex.get(sum - k));\n        if (!sumIndex.containsKey(sum)) sumIndex.put(sum, i);\n    }\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = maxSubArrayLen(nums, k)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const k = $args[1];\n    const result = maxSubArrayLen(nums, k);\n    console.log(result);\n}"
        }
    },
    "326": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfThree(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isPowerOfThree(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = is_power_of_three(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfThree(n);\n    console.log(result);\n}"
        }
    },
    "327": {
        "call_functions": {
            "c++": "int countRangeSum(vector<int>& nums, int lower, int upper) {\n    int n = nums.size();\n    vector<long> sums(n + 1, 0);\n    for (int i = 0; i < n; ++i)\n        sums[i + 1] = sums[i] + nums[i];\n\n    function<int(int, int)> mergeSort = [&](int start, int end) {\n        if (start == end)\n            return 0;\n        int mid = start + (end - start) / 2;\n        int count = mergeSort(start, mid) + mergeSort(mid + 1, end);\n\n        int j = mid + 1, k = mid + 1;\n        for (int i = start; i <= mid; ++i) {\n            while (j <= end && sums[j] - sums[i] < lower) ++j;\n            while (k <= end && sums[k] - sums[i] <= upper) ++k;\n            count += k - j;\n        }\n\n        inplace_merge(sums.begin() + start, sums.begin() + mid + 1, sums.begin() + end + 1);\n        return count;\n    };\n\n    return mergeSort(0, n);\n}",
            "java": "public int countRangeSum(int[] nums, int lower, int upper) {\n    long[] sums = new long[nums.length + 1];\n    for (int i = 0; i < nums.length; ++i)\n        sums[i + 1] = sums[i] + nums[i];\n\n    return countWhileMergeSort(sums, lower, upper, 0, nums.length);\n}\n\nprivate int countWhileMergeSort(long[] sums, int lower, int upper, int start, int end) {\n    if (start >= end)\n        return 0;\n\n    int mid = start + (end - start) / 2;\n    int count = countWhileMergeSort(sums, lower, upper, start, mid) + countWhileMergeSort(sums, lower, upper, mid + 1, end);\n\n    int j = mid + 1, k = mid + 1;\n    for (int i = start; i <= mid; ++i) {\n        while (j <= end && sums[j] - sums[i] < lower) ++j;\n        while (k <= end && sums[k] - sums[i] <= upper) ++k;\n        count += k - j;\n    }\n\n    Arrays.sort(sums, start, end + 1);\n    return count;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    lower = $args[1]\n    upper = $args[2]\n    result = countRangeSum(nums, lower, upper)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const lower = $args[1];\n    const upper = $args[2];\n    const result = countRangeSum(nums, lower, upper);\n    console.log(result);\n}"
        }
    },
    "329": {
        "call_functions": {
            "c++": "int longestIncreasingPath(vector<vector<int>>& matrix) {\n    int m = matrix.size(), n = matrix[0].size();\n    \n    vector<vector<int>> memo(m, vector<int>(n, 0));\n    \n    int ans = 0;\n    for (int i = 0; i < m; ++i)\n        for (int j = 0; j < n; ++j)\n            ans = max(ans, dfs(matrix, memo, i, j));\n    \n    return ans;\n}",
            "java": "public int longestIncreasingPath(int[][] matrix) {\n    int m = matrix.length, n = matrix[0].length;\n    \n    int[][] memo = new int[m][n];\n    \n    int ans = 0;\n    for (int i = 0; i < m; ++i)\n        for (int j = 0; j < n; ++j)\n            ans = Math.max(ans, dfs(matrix, memo, i, j));\n    \n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    result = longest_increasing_path(matrix)\n    print(result)",
            "javascript": "function longestIncreasingPath(matrix) {\n    const m = matrix.length, n = matrix[0].length;\n    \n    const memo = Array.from({length: m}, () => Array.from({length: n}, () => 0));\n    \n    let ans = 0;\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            ans = Math.max(ans, dfs(matrix, memo, i, j));\n        }\n    }\n    \n    return ans;\n}"
        }
    },
    "330": {
        "call_functions": {
            "c++": "int main() {\n    vector<int> nums = $args;\n    int n = $args;\n    int result = minPatches(nums, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int minPatches(int[] nums, int n) {\n    long maxSum = 0;\n    int patches = 0, i = 0;\n    \n    while (maxSum < n) {\n        if (i < nums.length && nums[i] <= maxSum + 1) {\n            maxSum += nums[i];\n            i++;\n        } else {\n            maxSum += maxSum + 1;\n            patches++;\n        }\n    }\n    return patches;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    n = $args[1]\n    result = minPatches(nums, n)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const n = $args[1];\n    const result = minPatches(nums, n);\n    console.log(result);\n}"
        }
    },
    "331": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <vector>\n\nint main() {\n    std::string preorder = $args;\n    bool result = isValidSerialization(preorder);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    String preorder = $args;\n    boolean result = isValidSerialization(preorder);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    preorder = $args[0]\n    result = is_valid_serialization(preorder)\n    print(result)",
            "javascript": "function main() {\n    const preorder = $args;\n    const result = isValidSerialization(preorder);\n    console.log(result);\n}"
        }
    },
    "332": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <set>\n\nusing namespace std;\n\nint main() {\n    vector<vector<string>> tickets = $args;\n    vector<string> result = findItinerary(tickets);\n    \n    for (const auto& airport : result) {\n        cout << airport << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
            "java": "public List<String> findItinerary(List<List<String>> tickets)",
            "python": "if __name__ == \"__main__\":\n    tickets = $args[0]\n    result = findItinerary(tickets)\n    print(result)",
            "javascript": "function main() {\n    const tickets = $args;\n    const result = findItinerary(tickets);\n    console.log(result);\n}"
        }
    },
    "334": {
        "call_functions": {
            "c++": "bool findTriplets(vector<int>& nums) {\n    int first = INT_MAX, second = INT_MAX;\n\n    for (int num : nums) {\n        if (num <= first) {\n            first = num;\n        } else if (num <= second) {\n            second = num;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "java": "public boolean findTriplets(int[] nums) {\n    int first = Integer.MAX_VALUE;\n    int second = Integer.MAX_VALUE;\n\n    for (int num : nums) {\n        if (num <= first) {\n            first = num;\n        } else if (num <= second) {\n            second = num;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = findTriplets(nums)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args;\n    const result = findTriplets(nums);\n    console.log(result);\n}"
        }
    },
    "335": {
        "call_functions": {
            "c++": "bool isPathCrossing(const std::vector<int>& distance) {\n    std::unordered_set<std::pair<int, int>, pair_hash> visited;\n    int x = 0, y = 0;\n    visited.insert({x, y});\n    int dx[] = {0, -1, 0, 1};\n    int dy[] = {1, 0, -1, 0};\n    \n    for (int i = 0; i < distance.size(); ++i) {\n        int direction = i % 4;\n        for (int j = 0; j < distance[i]; ++j) {\n            x += dx[direction];\n            y += dy[direction];\n            if (!visited.insert({x, y}).second) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
            "java": "public boolean isPathCrossing(int[] distance) {\n    Set<Pair<Integer, Integer>> visited = new HashSet<>();\n    int x = 0, y = 0;\n    visited.add(new Pair<>(x, y));\n    int[] dx = {0, -1, 0, 1};\n    int[] dy = {1, 0, -1, 0};\n    \n    for (int i = 0; i < distance.length; i++) {\n        int direction = i % 4;\n        for (int j = 0; j < distance[i]; j++) {\n            x += dx[direction];\n            y += dy[direction];\n            Pair<Integer, Integer> point = new Pair<>(x, y);\n            if (!visited.add(point)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
            "python": "if __name__ == \"__main__\":\n    distance = $args[0]\n    result = is_path_crossing(distance)\n    print(result)",
            "javascript": "function main() {\n    const distance = $args;\n    const result = isPathCrossing(distance);\n    console.log(result);\n}"
        }
    },
    "336": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nstd::vector<std::pair<int, int>> palindromePairs(const std::vector<std::string> &words) {\n    std::vector<std::pair<int, int>> result;\n\n    for (size_t i = 0; i < words.size(); i++) {\n        for (size_t j = 0; j < words.size(); j++) {\n            if (i == j) continue;\n            std::string concat = words[i] + words[j];\n\n            bool is_palindrome = true;\n            for (size_t left = 0, right = concat.size() - 1; left < right; left++, right--) {\n                if (concat[left] != concat[right]) {\n                    is_palindrome = false;\n                    break;\n                }\n            }\n\n            if (is_palindrome) {\n                result.push_back(std::make_pair(i, j));\n            }\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<std::string> words = $args;\n    std::vector<std::pair<int, int>> result = palindromePairs(words);\n\n    for (const auto& pair : result) {\n        std::cout << pair.first << \" \" << pair.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public List<List<Integer>> palindromePairs(String[] words) {\n    List<List<Integer>> result = new ArrayList<>();\n\n    for (int i = 0; i < words.length; i++) {\n        for (int j = 0; j < words.length; j++) {\n            if (i == j) continue;\n            String concat = words[i] + words[j];\n\n            boolean isPalindrome = true;\n            for (int left = 0, right = concat.length() - 1; left < right; left++, right--) {\n                if (concat.charAt(left) != concat.charAt(right)) {\n                    isPalindrome = false;\n                    break;\n                }\n            }\n\n            if (isPalindrome) {\n                List<Integer> pair = new ArrayList<>();\n                pair.add(i);\n                pair.add(j);\n                result.add(pair);\n            }\n        }\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    words = $args[0]\n    result = palindrome_pairs(words)\n    print(result)",
            "javascript": "function palindromePairs(words) {\n    function isPalindrome(s) {\n        return s === s.split('').reverse().join('');\n    }\n\n    const result = palindromePairs(words);\n\n    return result;\n}"
        }
    },
    "337": {
        "call_functions": {
            "c++": "int rob(TreeNode* root) {\n    int includeNode = 0, excludeNode = 0;\n    return robHelper(root, includeNode, excludeNode);\n}",
            "java": "public int rob(TreeNode root) {\n    int[] result = robHelper(root);\n    return Math.max(result[0], result[1]);\n}\n\nprivate int[] robHelper(TreeNode node) {\n    if (node == null) return new int[2];\n\n    int[] left = robHelper(node.left);\n    int[] right = robHelper(node.right);\n    int[] result = new int[2];\n\n    result[0] = node.val + left[1] + right[1];\n    result[1] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    root = $args[0]\n    result = rob(root)\n    print(result)",
            "javascript": "function main() {\n    const root = $args;\n    const [withNode, withoutNode] = robHelper(root);\n    return Math.max(withNode, withoutNode);\n}\n\nfunction robHelper(node) {\n    if (!node) return [0, 0];\n\n    const [leftWithNode, leftWithoutNode] = robHelper(node.left);\n    const [rightWithNode, rightWithoutNode] = robHelper(node.right);\n\n    const withNode = node.val + leftWithoutNode + rightWithoutNode;\n    const withoutNode = Math.max(leftWithNode, leftWithoutNode) + Math.max(rightWithNode, rightWithoutNode);\n    return [withNode, withoutNode];\n}\n\nconst root = $args;\nconst result = main(root);\nconsole.log(result);"
        }
    },
    "338": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    vector<int> result = countBits(n);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public int[] countBits(int n) {\n    int[] ans = new int[n + 1];\n    for (int i = 1; i <= n; ++i) {\n        ans[i] = ans[i & (i - 1)] + 1;\n    }\n    return ans;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = countBits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = countBits(n);\n    console.log(result);\n}"
        }
    },
    "339": {
        "call_functions": {
            "c++": "#include <vector>\n#include <variant>\n#include <iostream>\n\nusing NestedList = std::vector<std::variant<int, std::vector<std::variant<int, std::vector<int>>>>>;\n\nint depthSumHelper(NestedList nestedList, int depth) {\n    int sum = 0;\n    for (auto& element : nestedList) {\n        if (std::holds_alternative<int>(element)) {\n            sum += std::get<int>(element) * depth;\n        } else {\n            sum += depthSumHelper(std::get<std::vector<std::variant<int, std::vector<int>>>>(element), depth + 1);\n        }\n    }\n    return sum;\n}\n\nint depthSum(NestedList nestedList) {\n    return depthSumHelper(nestedList, 1);\n}\n\nint main() {\n    NestedList nestedList = $args;\n    int result = depthSum(nestedList);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int depthSum(List<?> nestedList) {\n    return depthSumHelper(nestedList, 1);\n}",
            "python": "if __name__ == \"__main__\":\n    nested_list = $args[0]\n    result = depth_sum(nested_list)\n    print(result)",
            "javascript": "function main() {\n    const nestedList = $args;\n    const result = depthSum(nestedList);\n    console.log(result);\n}"
        }
    },
    "340": {
        "call_functions": {
            "c++": "#include <unordered_map>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string s = $args;\n    int k = $args;\n    int result = lengthOfLongestSubstringKDistinct(s, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int lengthOfLongestSubstringKDistinct(String s, int k) {\n    HashMap<Character, Integer> charCount = new HashMap<>();\n    int left = 0, maxLength = 0;\n\n    for (int right = 0; right < s.length(); ++right) {\n        charCount.put(s.charAt(right), charCount.getOrDefault(s.charAt(right), 0) + 1);\n\n        while (charCount.size() > k) {\n            charCount.put(s.charAt(left), charCount.get(s.charAt(left)) - 1);\n            if (charCount.get(s.charAt(left)) == 0) {\n                charCount.remove(s.charAt(left));\n            }\n            left++;\n        }\n\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n    return maxLength;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = length_of_longest_substring_k_distinct(s, k)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const k = $args[1];\n    const result = lengthOfLongestSubstringKDistinct(s, k);\n    console.log(result);\n}"
        }
    },
    "342": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isPowerOfFour(int n);\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfFour(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
            "java": "public static void main(String[] args) {\n    int n = $args;\n    boolean result = isPowerOfFour(n);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = isPowerOfFour(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = isPowerOfFour(n);\n    console.log(result);\n}"
        }
    },
    "343": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = integerBreak(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int main(int args) {\n    int n = args;\n    int result = integerBreak(n);\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = integer_break(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = integerBreak(n);\n    console.log(result);\n}"
        }
    },
    "344": {
        "call_functions": {
            "c++": "void reverseString(vector<char>& s) {\n    int left = 0, right = s.size() - 1;\n    while (left < right) {\n        swap(s[left++], s[right--]);\n    }\n}",
            "java": "public void reverseString(char[] s) {\n    int left = 0, right = s.length - 1;\n    while (left < right) {\n        char temp = s[left];\n        s[left++] = s[right];\n        s[right--] = temp;\n    }\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    reverseString(s)\n    print(s)",
            "javascript": "function main() {\n    const s = $args;\n    reverseString(s);\n    console.log(s);\n}"
        }
    },
    "345": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <string>\n\nstd::string reverseVowels(std::string s) {\n    int i = 0, j = s.size() - 1;\n    while (i < j) {\n        if (!isVowel(s[i])) {\n            i++;\n        } else if (!isVowel(s[j])) {\n            j--;\n        } else {\n            std::swap(s[i], s[j]);\n            i++;\n            j--;\n        }\n    }\n    return s;\n}\n\nbool isVowel(char c) {\n    c = std::tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\nint main() {\n    std::string s = $args;\n    std::string result = reverseVowels(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public String reverseVowels(String s) {\n    int i = 0, j = s.length() - 1;\n    char[] result = new char[s.length()];\n    Set<Character> vowels = new HashSet<>();\n    for (char c : \"aeiouAEIOU\".toCharArray()) {\n        vowels.add(c);\n    }\n    while (i <= j) {\n        char ci = s.charAt(i);\n        char cj = s.charAt(j);\n        if (!vowels.contains(ci)) {\n            result[i++] = ci;\n        } else if (!vowels.contains(cj)) {\n            result[j--] = cj;\n        } else {\n            result[i++] = cj;\n            result[j--] = ci;\n        }\n    }\n    return new String(result);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = reverseVowels(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = reverseVowels(s);\n    console.log(result);\n}"
        }
    },
    "346": {
        "call_functions": {
            "c++": "#include <queue>\nusing namespace std;\n\nint main() {\n    int size = $args;\n    MovingAverage obj(size);\n    double result = obj.next(5);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public double next(int val) {\n        if (queue.size() == maxSize) {\n            sum -= queue.remove();\n        }\n        queue.add(val);\n        sum += val;\n        return sum / queue.size();\n    }",
            "python": "if __name__ == \"__main__\":\n    size = $args[0]\n    values = $args[1]\n    obj = MovingAverage(size)\n    result = []\n    for val in values:\n        result.append(obj.next(val))\n    print(result)",
            "javascript": "function main() {\n    const size = $args;\n    const obj = new MovingAverage(size);\n    const result = obj.next(val);\n    console.log(result);\n}"
        }
    },
    "347": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <queue>\nusing namespace std;\n\nvector<int> kMostFrequent(vector<int>& nums, int k) {\n    unordered_map<int, int> frequency;\n    for (int num : nums) {\n        frequency[num]++;\n    }\n\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> min_heap;\n    for (const auto& entry : frequency) {\n        min_heap.push({entry.second, entry.first});\n        if (min_heap.size() > k) {\n            min_heap.pop();\n        }\n    }\n\n    vector<int> result;\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top().second);\n        min_heap.pop();\n    }\n\n    return result;\n}\n\nint main() {\n    vector<int> nums = $args;\n    int k = 3;\n    vector<int> result = kMostFrequent(nums, k);\n    for (int num : result) {\n        cout << num << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> kMostFrequent(int[] nums, int k) {\n    Map<Integer, Integer> frequency = new HashMap<>();\n    for (int num : nums) {\n        frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n    }\n\n    PriorityQueue<Map.Entry<Integer, Integer>> min_heap = new PriorityQueue<>(Comparator.comparingInt(Map.Entry::getValue));\n    for (Map.Entry<Integer, Integer> entry : frequency.entrySet()) {\n        min_heap.offer(entry);\n        if (min_heap.size() > k) {\n            min_heap.poll();\n        }\n    }\n\n    List<Integer> result = new ArrayList<>();\n    while (!min_heap.isEmpty()) {\n        result.add(min_heap.poll().getKey());\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    k = $args[1]\n    result = k_most_frequent(nums, k)\n    print(result)",
            "javascript": "function kMostFrequent(nums, k) {\n  const frequency = new Map();\n  for (const num of nums) {\n    frequency.set(num, (frequency.get(num) || 0) + 1);\n  }\n\n  const minHeap = [];\n\n  for (const [num, freq] of frequency) {\n    minHeap.push([freq, num]);\n    if (minHeap.length > k) {\n      minHeap.sort((a, b) => a[0] - b[0]).shift();\n    }\n  }\n\n  return minHeap.map(entry => entry[1]);\n}\n"
        }
    },
    "349": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n\nstd::vector<int> intersection(std::vector<int>& nums1, std::vector<int>& nums2) {\n    std::set<int> set1(nums1.begin(), nums1.end());\n    std::set<int> result;\n    for (int num : nums2) {\n        if (set1.count(num)) {\n            result.insert(num);\n        }\n    }\n    return std::vector<int>(result.begin(), result.end());\n}\n\nint main() {\n    std::vector<int> nums1 = $args;\n    std::vector<int> nums2 = $args;\n    std::vector<int> result = intersection(nums1, nums2);\n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public int[] intersection(int[] nums1, int[] nums2) {\n    Set<Integer> set1 = new HashSet<>();\n    for (int num : nums1) {\n        set1.add(num);\n    }\n    \n    Set<Integer> resultSet = new HashSet<>();\n    for (int num : nums2) {\n        if (set1.contains(num)) {\n            resultSet.add(num);\n        }\n    }\n    \n    int[] result = new int[resultSet.size()];\n    int i = 0;\n    for (int num : resultSet) {\n        result[i++] = num;\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = intersection(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const set1 = new Set(nums1);\n    const resultSet = new Set();\n\n    for (const num of nums2) {\n        if (set1.has(num)) {\n            resultSet.add(num);\n        }\n    }\n\n    const result = Array.from(resultSet);\n    console.log(result);\n}"
        }
    },
    "350": {
        "call_functions": {
            "c++": "#include <vector>\n#include <unordered_map>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums1 = $args;\n    std::vector<int> nums2 = $args;\n    std::vector<int> result = intersect(nums1, nums2);\n    \n    for (int num : result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public int[] intersect(int[] nums1, int[] nums2) {\n    HashMap<Integer, Integer> countMap = new HashMap<>();\n    ArrayList<Integer> result = new ArrayList<>();\n    \n    for (int num : nums1) {\n        countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n    }\n    \n    for (int num : nums2) {\n        if (countMap.getOrDefault(num, 0) > 0) {\n            result.add(num);\n            countMap.put(num, countMap.get(num) - 1);\n        }\n    }\n\n    return result.stream().mapToInt(i -> i).toArray();\n}\n",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    result = intersect(nums1, nums2)\n    print(result)",
            "javascript": "function main() {\n    const nums1 = $args[0];\n    const nums2 = $args[1];\n    const countMap = {};\n    const result = [];\n    \n    for (const num of nums1) {\n        countMap[num] = (countMap[num] || 0) + 1;\n    }\n    \n    for (const num of nums2) {\n        if (countMap[num] > 0) {\n            result.push(num);\n            countMap[num]--;\n        }\n    }\n\n    console.log(result);\n}"
        }
    },
    "351": {
        "call_functions": {
            "c++": "int main() {\n    int m = $args;\n    int n = $args;\n    int result = numberOfPatterns(m, n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int numberOfPatterns(int m, int n) {\n    int[][] jumps = new int[10][10];\n    jumps[1][3] = jumps[3][1] = 2;\n    jumps[1][7] = jumps[7][1] = 4;\n    jumps[3][9] = jumps[9][3] = 6;\n    jumps[7][9] = jumps[9][7] = 8;\n    jumps[1][9] = jumps[9][1] = jumps[2][8] = jumps[8][2] = jumps[3][7] = jumps[7][3] = jumps[4][6] = jumps[6][4] = 5;\n\n    boolean[] visited = new boolean[10];\n\n    int cnt = 0;\n    for (int i = m; i <= n; ++i) {\n        cnt += dfs(jumps, visited, 1, i - 1) * 4; // 1, 3, 7, 9\n        cnt += dfs(jumps, visited, 2, i - 1) * 4; // 2, 4, 6, 8\n        cnt += dfs(jumps, visited, 5, i - 1);     // 5\n    }\n\n    return cnt;\n}\n\nprivate int dfs(int[][] jumps, boolean[] visited, int curr, int remaining) {\n    if (remaining < 0) return 0;\n    if (remaining == 0) return 1;\n\n    visited[curr] = true;\n    int cnt = 0;\n    for (int next = 1; next <= 9; ++next) {\n        if (!visited[next] && (jumps[curr][next] == 0 || visited[jumps[curr][next]])) {\n            cnt += dfs(jumps, visited, next, remaining - 1);\n        }\n    }\n    visited[curr] = false;\n\n    return cnt;\n}",
            "python": "if __name__ == \"__main__\":\n    m = $args[0]\n    n = $args[1]\n    result = numberOfPatterns(m, n)\n    print(result)",
            "javascript": "function numberOfPatterns(m, n) {\n    const jumps = Array.from({length: 10}, () => Array(10).fill(0));\n    jumps[1][3] = jumps[3][1] = 2;\n    jumps[1][7] = jumps[7][1] = 4;\n    jumps[3][9] = jumps[9][3] = 6;\n    jumps[7][9] = jumps[9][7] = 8;\n    jumps[1][9] = jumps[9][1] = jumps[2][8] = jumps[8][2] = jumps[3][7] = jumps[7][3] = jumps[4][6] = jumps[6][4] = 5;\n\n    const visited = Array(10).fill(false);\n\n    let cnt = 0;\n    for (let i = m; i <= n; ++i) {\n        cnt += dfs(jumps, visited, 1, i - 1) * 4; // 1, 3, 7, 9\n        cnt += dfs(jumps, visited, 2, i - 1) * 4; // 2, 4, 6, 8\n        cnt += dfs(jumps, visited, 5, i - 1);     // 5\n    }\n\n    return cnt;\n}\n\nfunction dfs(jumps, visited, curr, remaining) {\n    if (remaining < 0) return 0;\n    if (remaining === 0) return 1;\n\n    visited[curr] = true;\n    let cnt = 0;\n    for (let next = 1; next <= 9; ++next) {\n        if (!visited[next] && (jumps[curr][next] === 0 || visited[jumps[curr][next]])) {\n            cnt += dfs(jumps, visited, next, remaining - 1);\n        }\n    }\n    visited[curr] = false;\n\n    return cnt;\n}"
        }
    },
    "352": {
        "call_functions": {
            "c++": "void addNum(int val) {\n        if (intervals.empty() || intervals.begin()->first > val + 1) {\n            intervals[val] = val;\n        } else {\n            auto it = intervals.lower_bound(val);\n            auto left = prev(it), right = it;\n            \n            if (left != intervals.end() && left->second + 1 == val) {\n                left->second++;\n                if (right != intervals.end() && val + 1 == right->first) {\n                    left->second = right->second;\n                    intervals.erase(right);\n                }\n            } else if (right != intervals.end() && val + 1 == right->first) {\n                intervals[val] = right->second;\n                intervals.erase(right);\n            } else {\n                intervals[val] = val;\n            }\n        }\n    }\n\n    vector<vector<int>> getIntervals() {\n        vector<vector<int>> result;\n        for (const auto& interval : intervals) {\n            result.push_back({interval.first, interval.second});\n        }\n        return result;\n    }",
            "java": "public void addNum(int val) {\n        if (intervals.isEmpty() || intervals.firstKey() > val + 1) {\n            intervals.put(val, val);\n            return;\n        }\n        Integer lower = intervals.lowerKey(val);\n        Integer upper = intervals.higherKey(val);\n        if (lower != null && intervals.get(lower) + 1 == val) {\n            intervals.put(lower, intervals.get(lower) + 1);\n\n            if (upper != null && val + 1 == upper) {\n                intervals.put(lower, intervals.get(upper));\n                intervals.remove(upper);\n            }\n        } else if (upper != null && val + 1 == upper) {\n            intervals.put(val, intervals.get(upper));\n            intervals.remove(upper);\n        } else {\n            intervals.put(val, val);\n        }\n    }\n\n    public List<List<Integer>> getIntervals() {\n        List<List<Integer>> result = new ArrayList<>();\n        for (Integer key : intervals.keySet()) {\n            List<Integer> range = new ArrayList<>();\n            range.add(key);\n            range.add(intervals.get(key));\n            result.add(range);\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = SummaryRanges()\n    nums = $args[0]\n    for num in nums:\n        obj.addNum(num)\n    result = obj.getIntervals()\n    print(result)",
            "javascript": "class SummaryRanges {\n    constructor() {\n        this.intervals = new Map();\n    }\n\n    addNum(val) {\n        if (!this.intervals.size || [...this.intervals.keys()][0] > val + 1) {\n            this.intervals.set(val, val);\n        } else {\n            let keys = [...this.intervals.keys()];\n            let index = keys.findIndex(key => key > val);\n\n            if (index > 0 && keys[index - 1] <= val && val <= this.intervals.get(keys[index - 1])) {\n                return;\n            } else if (index !== -1 && val + 1 === keys[index]) {\n                this.intervals.set(val, this.intervals.get(keys[index]));\n                this.intervals.delete(keys[index]);\n            } else {\n                this.intervals.set(val, val);\n            }\n        }\n    }\n\n    getIntervals() {\n        return [...this.intervals.entries()].map(([start, end]) => [start, end]);\n    }\n}\n"
        }
    },
    "353": {
        "call_functions": {
            "c++": "int main() {\n    int width = $args;\n    int height = $args;\n    std::vector<std::vector<int>> food = $args;\n\n    SnakeGame game(width, height, food);\n\n    std::string direction;\n    while (std::cin >> direction) {\n        int result = game.move(direction);\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}",
            "java": "public int move(String direction)",
            "python": "if __name__ == \"__main__\":\n    width = $args[0]\n    height = $args[1]\n    food = $args[2]\n    game = SnakeGame(width, height, food)\n    directions = $args[3]\n    result = []\n    for direction in directions:\n        score = game.move(direction)\n        result.append(score)\n    print(result)",
            "javascript": "function main() {\n    const width = $args[0];\n    const height = $args[1];\n    const food = $args[2];\n\n    const game = new SnakeGame(width, height, food);\n    const direction = $args[3];\n    const result = game.move(direction);\n\n    console.log(result);\n}"
        }
    },
    "354": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint maxEnvelopes(std::vector<std::vector<int>>& envelopes) {\n    std::sort(envelopes.begin(), envelopes.end(), [](const std::vector<int>& a, const std::vector<int>& b) {\n        return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];\n    });\n    \n    std::vector<int> dp;\n    for (const auto& envelope : envelopes) {\n        auto it = std::lower_bound(dp.begin(), dp.end(), envelope[1]);\n        if (it == dp.end()) {\n            dp.push_back(envelope[1]);\n        } else {\n            *it = envelope[1];\n        }\n    }\n    \n    return dp.size();\n}\n\nint main() {\n    std::vector<std::vector<int>> envelopes = $args;\n    int result = maxEnvelopes(envelopes);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int maxEnvelopes(int[][] envelopes) {\n    Arrays.sort(envelopes, new Comparator<int[]>() {\n        public int compare(int[] a, int[] b) {\n            return a[0] == b[0] ? b[1] - a[1] : a[0] - b[0];\n        }\n    });\n\n    int[] dp = new int[envelopes.length];\n    int len = 0;\n    for (int[] envelope : envelopes) {\n        int idx = Arrays.binarySearch(dp, 0, len, envelope[1]);\n        if (idx < 0) {\n            idx = -(idx + 1);\n        }\n        dp[idx] = envelope[1];\n        if (idx == len) {\n            len++;\n        }\n    }\n\n    return len;\n}",
            "python": "if __name__ == \"__main__\":\n    envelopes = $args[0]\n    result = max_envelopes(envelopes)\n    print(result)",
            "javascript": "function main() {\n    const envelopes = $args;\n    envelopes.sort((a, b) => a[0] === b[0] ? b[1] - a[1] : a[0] - b[0]);\n    const dp = [];\n\n    for (const envelope of envelopes) {\n        const idx = lowerBound(dp, envelope[1]);\n        if (idx === dp.length) {\n            dp.push(envelope[1]);\n        } else {\n            dp[idx] = envelope[1];\n        }\n    }\n\n    return dp.length;\n\n    function lowerBound(arr, target) {\n        let low = 0, high = arr.length;\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (arr[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}"
        }
    },
    "355": {
        "call_functions": {
            "c++": "vector<int> result = getNewsFeed($args);",
            "java": "public static void main(String[] args) {\n        int n = $args;\n        boolean result = isPowerOfFour(n);\n        System.out.println(result);\n    }\n",
            "python": "if __name__ == \"__main__\":\n    userId = $args[0]\n    tweetId = $args[1]\n    twitter = Twitter()\n    twitter.postTweet(userId, tweetId)\n    result = twitter.getNewsFeed(userId)\n    print(result)",
            "javascript": "function main() {\n    const twitter = new Twitter();\n\n    // Call postTweet\n    twitter.postTweet($args[0], $args[1]);\n\n    // Call getNewsFeed\n    const feed = twitter.getNewsFeed($args[2]);\n    console.log(feed);\n\n    // Call follow\n    twitter.follow($args[3], $args[4]);\n\n    // Call unfollow\n    twitter.unfollow($args[5], $args[6]);\n}"
        }
    },
    "356": {
        "call_functions": {
            "c++": "bool isReflected(vector<vector<int>>& points) {\n    int minX = INT_MAX;\n    int maxX = INT_MIN;\n\n    unordered_set<string> pointSet;\n    for(const auto& point : points) {\n        minX = min(minX, point[0]);\n        maxX = max(maxX, point[0]);\n        pointSet.insert(to_string(point[0]) + \",\" + to_string(point[1]));\n    }\n\n    int sum = minX + maxX;\n    for(const auto& point : points) {\n        if(!pointSet.count(to_string(sum - point[0]) + \",\" + to_string(point[1]))) {\n            return false;\n        }\n    }\n\n    return true;\n}",
            "java": "public boolean isReflected(int[][] points) {\n    int minX = Integer.MAX_VALUE;\n    int maxX = Integer.MIN_VALUE;\n    Set<String> pointSet = new HashSet<>();\n\n    for (int[] point : points) {\n        minX = Math.min(minX, point[0]);\n        maxX = Math.max(maxX, point[0]);\n        pointSet.add(point[0] + \",\" + point[1]);\n    }\n\n    int sum = minX + maxX;\n    for (int[] point : points) {\n        if (!pointSet.contains((sum - point[0]) + \",\" + point[1])) {\n            return false;\n        }\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    points = $args[0]\n    result = isReflected(points)\n    print(result)",
            "javascript": "function main() {\n    const points = $args;\n    const result = isReflected(points);\n    console.log(result);\n}"
        }
    },
    "357": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = countNumbersWithUniqueDigits(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int countNumbersWithUniqueDigits(int n) {\n    if (n == 0) return 1;\n\n    int total = 10;\n    int uniqueDigits = 9;\n    int currentAvailableDigits = 9;\n\n    while (n-- > 1 && currentAvailableDigits > 0) {\n        uniqueDigits *= currentAvailableDigits;\n        total += uniqueDigits;\n        currentAvailableDigits--;\n    }\n\n    return total;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = countNumbersWithUniqueDigits(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = countNumbersWithUniqueDigits(n);\n    console.log(result);\n}"
        }
    },
    "358": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nstring rearrangeString(string s, int k);\n\nint main() {\n    string s = $args;\n    int k = 3;\n    string result = rearrangeString(s, k);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public String rearrangeString(String s, int k) {\n        if (k == 0) return s;\n\n        Map<Character, Integer> freqMap = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n\n        PriorityQueue<Map.Entry<Character, Integer>> maxHeap =\n                new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());\n        maxHeap.addAll(freqMap.entrySet());\n\n        StringBuilder result = new StringBuilder();\n        while (!maxHeap.isEmpty()) {\n            List<Map.Entry<Character, Integer>> temp = new ArrayList<>();\n\n            for (int i = 0; i < k && !maxHeap.isEmpty(); i++) {\n                Map.Entry<Character, Integer> curr = maxHeap.poll();\n\n                result.append(curr.getKey());\n                if (curr.getValue() - 1 > 0) {\n                    curr.setValue(curr.getValue() - 1);\n                    temp.add(curr);\n                }\n            }\n\n            maxHeap.addAll(temp);\n\n            if (maxHeap.isEmpty()) break;\n            if (result.length() < s.length()) {\n                int spaces = k - temp.size();\n                while (spaces-- > 0) result.append(\" \");\n            }\n        }\n\n        if (result.length() < s.length()) return \"\";\n        return result.toString();\n    }",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    k = $args[1]\n    result = rearrange_string(s, k)\n    print(result)",
            "javascript": "function main() {\n  const s = $args[0];\n  const k = $args[1];\n  const result = rearrangeString(s, k);\n  console.log(result);\n}"
        }
    },
    "360": {
        "call_functions": {
            "c++": "vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {\n    vector<int> result(nums.size());\n    int i = 0, j = nums.size() - 1, index = (a >= 0) ? nums.size() - 1 : 0;\n    \n    while (i <= j) {\n        int left = nums[i] * nums[i] * a + nums[i] * b + c;\n        int right = nums[j] * nums[j] * a + nums[j] * b + c;\n        \n        if (a >= 0) {\n            if (left >= right) {\n                result[index--] = left;\n                i++;\n            } else {\n                result[index--] = right;\n                j--;\n            }\n        } else {\n            if (left <= right) {\n                result[index++] = left;\n                i++;\n            } else {\n                result[index++] = right;\n                j--;\n            }\n        }\n    }\n    return result;\n}",
            "java": "public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\n    int[] result = new int[nums.length];\n    int i = 0, j = nums.length - 1, index = (a >= 0) ? nums.length - 1 : 0;\n    \n    while (i <= j) {\n        int left = nums[i] * nums[i] * a + nums[i] * b + c;\n        int right = nums[j] * nums[j] * a + nums[j] * b + c;\n        \n        if (a >= 0) {\n            if (left >= right) {\n                result[index--] = left;\n                i++;\n            } else {\n                result[index--] = right;\n                j--;\n            }\n        } else {\n            if (left <= right) {\n                result[index++] = left;\n                i++;\n            } else {\n                result[index++] = right;\n                j--;\n            }\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    a = $args[1]\n    b = $args[2]\n    c = $args[3]\n    result = sort_transformed_array(nums, a, b, c)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const a = $args[1];\n    const b = $args[2];\n    const c = $args[3];\n    const result = sortTransformedArray(nums, a, b, c);\n    console.log(result);\n}"
        }
    },
    "361": {
        "call_functions": {
            "c++": "int maxKilledEnemies(vector<vector<char>>& grid) {\n    if (grid.empty()) return 0;\n    int m = grid.size(), n = grid[0].size(), result = 0, rowhits = 0;\n    vector<int> colhits(n, 0);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (j == 0 || grid[i][j - 1] == 'W') {\n                rowhits = 0;\n                for (int k = j; k < n && grid[i][k] != 'W'; k++)\n                    rowhits += grid[i][k] == 'E';\n            }\n            if (i == 0 || grid[i - 1][j] == 'W') {\n                colhits[j] = 0;\n                for (int k = i; k < m && grid[k][j] != 'W'; k++)\n                    colhits[j] += grid[k][j] == 'E';\n            }\n            if (grid[i][j] == '0') result = max(result, rowhits + colhits[j]);\n        }\n    }\n    return result;\n}",
            "java": "public int maxKilledEnemies(char[][] grid) {\n    if (grid.length == 0) return 0;\n    int m = grid.length, n = grid[0].length, result = 0, rowhits;\n    int[] colhits = new int[n];\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (j == 0 || grid[i][j-1] == 'W') {\n                rowhits = 0;\n                for (int k = j; k < n && grid[i][k] != 'W'; k++)\n                    rowhits += grid[i][k] == 'E' ? 1 : 0;\n            }\n            if (i == 0 || grid[i-1][j] == 'W') {\n                colhits[j] = 0;\n                for (int k = i; k < m && grid[k][j] != 'W'; k++)\n                    colhits[j] += grid[k][j] == 'E' ? 1 : 0;\n            }\n            if (grid[i][j] == '0') result = Math.max(result, rowhits + colhits[j]);\n        }\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    grid = $args[0]\n    result = maxKilledEnemies(grid)\n    print(result)",
            "javascript": "function maxKilledEnemies(grid) {\n    if (!grid.length) return 0;\n    let m = grid.length, n = grid[0].length, result = 0, rowhits;\n    let colhits = new Array(n).fill(0);\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (j === 0 || grid[i][j - 1] === 'W') {\n                rowhits = 0;\n                for (let k = j; k < n && grid[i][k] !== 'W'; k++)\n                    rowhits += grid[i][k] === 'E' ? 1 : 0;\n            }\n            if (i === 0 || grid[i - 1][j] === 'W') {\n                colhits[j] = 0;\n                for (let k = i; k < m && grid[k][j] !== 'W'; k++)\n                    colhits[j] += grid[k][j] === 'E' ? 1 : 0;\n            }\n            if (grid[i][j] === '0') result = Math.max(result, rowhits + colhits[j]);\n        }\n    }\n    return result;\n}"
        }
    },
    "362": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    HitCounter hc;\n    int timestamp = $args;\n    hc.hit(timestamp);\n    int result = hc.getHits(timestamp);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getHits(int timestamp) {\n        while (!queue.isEmpty() && queue.peek() <= (timestamp - 300)) {\n            queue.poll();\n        }\n        return queue.size();\n    }",
            "python": "if __name__ == \"__main__\":\n    hit_counter = HitCounter()\n    hits = $args[0]\n    for hit in hits:\n        hit_counter.hit(hit)\n    timestamp = $args[1]\n    result = hit_counter.getHits(timestamp)\n    print(result)",
            "javascript": "function main() {\n  const hitCounter = new HitCounter();\n  const timestamp1 = $args[0];\n  const timestamp2 = $args[1];\n  hitCounter.hit(timestamp1);\n  hitCounter.hit(timestamp2);\n  const result = hitCounter.getHits(timestamp2);\n  console.log(result);\n}"
        }
    },
    "363": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n#include <iostream>\n\nint main() {\n    std::vector<std::vector<int>> matrix = $args;\n    int k = 5;\n    int result = maxSumSubmatrix(matrix, k);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int maxSumSubmatrix(int[][] matrix, int k) {\n    int rows = matrix.length;\n    int cols = matrix[0].length;\n    int maxSum = Integer.MIN_VALUE;\n\n    for (int l = 0; l < cols; ++l) {\n        int[] sums = new int[rows];\n        for (int r = l; r < cols; ++r) {\n            for (int i = 0; i < rows; ++i) {\n                sums[i] += matrix[i][r];\n            }\n\n            TreeSet<Integer> sortedSums = new TreeSet<>();\n            sortedSums.add(0);\n            int currSum = 0;\n            for (int sum : sums) {\n                currSum += sum;\n                Integer it = sortedSums.ceiling(currSum - k);\n                if (it != null)\n                    maxSum = Math.max(maxSum, currSum - it);\n                sortedSums.add(currSum);\n            }\n        }\n    }\n\n    return maxSum;\n}",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    k = $args[1]\n    result = maxSumSubmatrix(matrix, k)\n    print(result)",
            "javascript": "function main() {\n    const matrix = $args[0];\n    const k = $args[1];\n    const result = maxSumSubmatrix(matrix, k);\n    console.log(result);\n}"
        }
    },
    "364": {
        "call_functions": {
            "c++": "#include <variant>\n#include <vector>\n\nusing NestedInteger = std::variant<int, std::vector<std::variant<int, std::vector<NestedInteger>>>>;\n\nint sumHelper(NestedInteger& nested, int depth) {\n    int sum = 0;\n    if (auto pInt = std::get_if<int>(&nested)) {\n        sum += depth * (*pInt);\n    } else {\n        auto& list = std::get<std::vector<NestedInteger>>(nested);\n        for (auto& element : list) {\n            sum += sumHelper(element, depth - 1);\n        }\n    }\n    return sum;\n}\n\nint maxDepth(NestedInteger& nested) {\n    if (std::holds_alternative<int>(nested)) return 0;\n    int depth = 1;\n    for (auto& element : std::get<std::vector<NestedInteger>>(nested)) {\n        depth = std::max(depth, 1 + maxDepth(element));\n    }\n    return depth;\n}\n\nint depthSumInverse(std::vector<NestedInteger>& nestedList) {\n    int max_depth = 1;\n    for (auto& nested : nestedList) {\n        max_depth = std::max(max_depth, 1 + maxDepth(nested));\n    }\n    int sum = 0;\n    for (auto& nested : nestedList) {\n        sum += sumHelper(nested, max_depth);\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<NestedInteger> nestedList = $args;\n    int result = depthSumInverse(nestedList);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int depthSumInverse(List<NestedInteger> nestedList) {\n    int maxDepth = maxDepth(nestedList);\n    return sumHelper(nestedList, maxDepth);\n}\n\nprivate int maxDepth(List<NestedInteger> nestedList) {\n    int depth = 1;\n    for (NestedInteger nested : nestedList) {\n        if (!nested.isInteger()) {\n            depth = Math.max(depth, 1 + maxDepth(nested.getList()));\n        }\n    }\n    return depth;\n}\n\nprivate int sumHelper(List<NestedInteger> nestedList, int depth) {\n    int sum = 0;\n    for (NestedInteger nested : nestedList) {\n        if (nested.isInteger()) {\n            sum += depth * nested.getInteger();\n        } else {\n            sum += sumHelper(nested.getList(), depth - 1);\n        }\n    }\n    return sum;\n}",
            "python": "if __name__ == \"__main__\":\n    nestedList = $args[0]\n    result = depthSumInverse(nestedList)\n    print(result)",
            "javascript": "function depthSumInverse(nestedList) {\n    function maxDepthHelper(nestedList) {\n        let depth = 1;\n        for (let nested of nestedList) {\n            if (Array.isArray(nested)) {\n                depth = Math.max(depth, 1 + maxDepthHelper(nested));\n            }\n        }\n        return depth;\n    }\n    function sumHelper(nestedList, depth) {\n        let sum = 0;\n        for (let nested of nestedList) {\n            if (typeof nested === \"number\") {\n                sum += depth * nested;\n            } else {\n                sum += sumHelper(nested, depth - 1);\n            }\n        }\n        return sum;\n    }\n    let maxDepth = maxDepthHelper(nestedList);\n    return sumHelper(nestedList, maxDepth);\n}"
        }
    },
    "365": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity) {\n    if (targetCapacity > jug1Capacity + jug2Capacity) return false;\n    if (jug1Capacity == targetCapacity || jug2Capacity == targetCapacity \n        || jug1Capacity + jug2Capacity == targetCapacity) return true;\n    return targetCapacity % gcd(jug1Capacity, jug2Capacity) == 0;\n}\n\nint gcd(int a, int b) {\n    while (b) {\n        int tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}\n\nint main() {\n    int jug1Capacity = $args;\n    int jug2Capacity = $args;\n    int targetCapacity = $args;\n    bool result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public boolean canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity) {\n    if (targetCapacity > jug1Capacity + jug2Capacity) return false;\n    if (jug1Capacity == targetCapacity || jug2Capacity == targetCapacity \n        || jug1Capacity + jug2Capacity == targetCapacity) return true;\n    return targetCapacity % gcd(jug1Capacity, jug2Capacity) == 0;\n}\n\nprivate int gcd(int a, int b) {\n    while (b != 0) {\n        int tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}\n\npublic static void main(String[] args) {\n    int jug1Capacity = $args;\n    int jug2Capacity = $args;\n    int targetCapacity = $args;\n    boolean result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    jug1Capacity = $args[0]\n    jug2Capacity = $args[1]\n    targetCapacity = $args[2]\n    result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n    print(result)",
            "javascript": "function main() {\n    const jug1Capacity = $args[0];\n    const jug2Capacity = $args[1];\n    const targetCapacity = $args[2];\n    const result = canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity);\n    console.log(result);\n}"
        }
    },
    "367": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isPerfectSquare(int num) {\n    if (num < 2) return true;\n    long long left = 2, right = num / 2, mid, square;\n    while (left <= right) {\n        mid = left + (right - left) / 2;\n        square = mid * mid;\n        if (square == num) return true;\n        if (square > num) right = mid - 1;\n        else left = mid + 1;\n    }\n    return false;\n}\n\nint main() {\n    int num = $args;\n    bool result = isPerfectSquare(num);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    int num = $args;\n    boolean result = isPerfectSquare(num);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    num = $args[0]\n    result = is_perfect_square(num)\n    print(result)",
            "javascript": "function main() {\n    const num = $args;\n    const result = isPerfectSquare(num);\n    console.log(result);\n}"
        }
    },
    "368": {
        "call_functions": {
            "c++": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> largestDivisibleSubset(vector<int>& nums) {\n    sort(nums.begin(), nums.end());\n    int n = nums.size();\n    vector<int> count(n, 1), prev(n, -1), res;\n    int max_idx = 0;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (nums[i] % nums[j] == 0 && count[i] < count[j] + 1) {\n                count[i] = count[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (count[max_idx] < count[i]) max_idx = i;\n    }\n\n    for (int i = max_idx; i >= 0; i = prev[i]) {\n        res.push_back(nums[i]);\n    }\n\n    return res;\n}\n\nint main() {\n    vector<int> nums = $args;\n    vector<int> result = largestDivisibleSubset(nums);\n    for (int i = 0; i < result.size(); ++i) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
            "java": "public List<Integer> largestDivisibleSubset(int[] nums) {\n    Arrays.sort(nums);\n    int n = nums.length;\n    int[] count = new int[n];\n    int[] prev = new int[n];\n    int max_idx = 0;\n    Arrays.fill(prev, -1);\n    Arrays.fill(count, 1);\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] % nums[j] == 0 && count[i] < count[j] + 1) {\n                count[i] = count[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (count[max_idx] < count[i]) max_idx = i;\n    }\n\n    List<Integer> res = new ArrayList<>();\n    for (int i = max_idx; i >= 0; i = prev[i]) {\n        res.add(nums[i]);\n    }\n\n    return res;\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    result = largestDivisibleSubset(nums)\n    print(result)",
            "javascript": "function largestDivisibleSubset(nums) {\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    const count = new Array(n).fill(1);\n    const prev = new Array(n).fill(-1);\n    let max_idx = 0;\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (nums[i] % nums[j] === 0 && count[i] < count[j] + 1) {\n                count[i] = count[j] + 1;\n                prev[i] = j;\n            }\n        }\n        if (count[max_idx] < count[i]) {\n            max_idx = i;\n        }\n    }\n\n    const res = [];\n    for (let i = max_idx; i >= 0; i = prev[i]) {\n        res.push(nums[i]);\n    }\n\n    return res;\n}"
        }
    },
    "370": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    int length = $args;\n    vector<vector<int>> updates = {{1, 3, 2}, {2, 4, 3}, {0, 2, -2}};\n    vector<int> result = getUpdatedArray(length, updates);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        }
    },
    "371": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = $args;\n    int b = $args;\n    int result = add(a, b);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int add(int a, int b) {\n    while (b != 0) {\n        int carry = a & b;\n        a = a ^ b;\n        b = carry << 1;\n    }\n    return a;\n}",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = add(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = add(a, b);\n    console.log(result);\n}"
        }
    },
    "372": {
        "call_functions": {
            "c++": "int main() {\n    int a = $args[0];\n    vector<int> b = $args[1];\n    int result = superPow(a, b);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int superPow(int a, int[] b)",
            "python": "if __name__ == \"__main__\":\n    a = $args[0]\n    b = $args[1]\n    result = superPow(a, b)\n    print(result)",
            "javascript": "function main() {\n    const a = $args[0];\n    const b = $args[1];\n    const result = superPow(a, b);\n    console.log(result);\n}"
        }
    },
    "373": {
        "call_functions": {
            "c++": "vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n    auto comp = [&nums1, &nums2](pair<int, int> a, pair<int, int> b) {\n        return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];\n    };\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> min_heap(comp);\n    vector<vector<int>> result;\n\n    if (nums1.empty() || nums2.empty()) return result;\n\n    for (int i = 0; i < nums1.size(); ++i) {\n        min_heap.emplace(i, 0);\n    }\n\n    while (k-- && !min_heap.empty()) {\n        auto curr = min_heap.top();\n        min_heap.pop();\n        result.push_back({nums1[curr.first], nums2[curr.second]});\n        if (curr.second + 1 < nums2.size()) {\n            min_heap.emplace(curr.first, curr.second + 1);\n        }\n    }\n    return result;\n}",
            "java": "public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n    PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> (a[0] + a[1]) - (b[0] + b[1]));\n    List<int[]> result = new ArrayList<>();\n\n    if (nums1.length == 0 || nums2.length == 0 || k == 0) {\n        return result;\n    }\n\n    for (int i = 0; i < nums1.length && i < k; i++) {\n        minHeap.offer(new int[]{nums1[i], nums2[0], 0});\n    }\n\n    while (k-- > 0 && !minHeap.isEmpty()) {\n        int[] curr = minHeap.poll();\n        result.add(new int[]{curr[0], curr[1]});\n        if (curr[2] == nums2.length - 1) {\n            continue;\n        }\n        minHeap.offer(new int[]{curr[0], nums2[curr[2] + 1], curr[2] + 1});\n    }\n\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    nums1 = $args[0]\n    nums2 = $args[1]\n    k = $args[2]\n    result = kSmallestPairs(nums1, nums2, k)\n    print(result)",
            "javascript": "function kSmallestPairs(nums1, nums2, k) {\n    const minHeap = new PriorityQueue(k, (a, b) => a[0] + a[1] - (b[0] + b[1]));\n    const result = [];\n\n    if (nums1.length === 0 || nums2.length === 0 || k === 0) {\n        return result;\n    }\n\n    for (let i = 0; i < nums1.length && i < k; i++) {\n        minHeap.offer([nums1[i], nums2[0], 0]);\n    }\n\n    while (k-- > 0 && !minHeap.isEmpty()) {\n        const curr = minHeap.poll();\n        result.push([curr[0], curr[1]]);\n        if (curr[2] === nums2.length - 1) {\n            continue;\n        }\n        minHeap.offer([curr[0], nums2[curr[2] + 1], curr[2] + 1]);\n    }\n\n    return result;\n}"
        }
    },
    "374": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = guessNumber(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int guessNumber(int n) {\n    int low = 1, high = n;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        int result = guess(mid);\n        if (result == 0) {\n            return mid;\n        } else if (result < 0) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = guessNumber(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = guessNumber(n);\n    console.log(result);\n}"
        }
    },
    "375": {
        "call_functions": {
            "c++": "int main() {\n    int n = $args;\n    int result = getMoneyAmount(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getMoneyAmount(int n) {\n    int[][] dp = new int[n + 1][n + 1];\n    for (int i = n - 1; i >= 1; i--) {\n        for (int j = i + 1; j <= n; j++) {\n            int min_cost = Integer.MAX_VALUE;\n            for (int k = i; k < j; k++) {\n                int cost = k + Math.max(dp[i][k - 1], dp[k + 1][j]);\n                min_cost = Math.min(min_cost, cost);\n            }\n            dp[i][j] = min_cost;\n        }\n    }\n    return dp[1][n];\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = getMoneyAmount(n)\n    print(result)",
            "javascript": "function getMoneyAmount(n) {\n    const dp = Array.from(Array(n + 1), () => Array(n + 1).fill(0));\n    for (let i = n - 1; i >= 1; i--) {\n        for (let j = i + 1; j <= n; j++) {\n            let min_cost = Infinity;\n            for (let k = i; k < j; k++) {\n                const cost = k + Math.max(dp[i][k - 1], dp[k + 1][j]);\n                min_cost = Math.min(min_cost, cost);\n            }\n            dp[i][j] = min_cost;\n        }\n    }\n    return dp[1][n];\n}"
        }
    },
    "376": {
        "call_functions": {
            "c++": "int wiggleMaxLength(vector<int>& nums) {\n    int len = nums.size();\n    if (len < 2) return len;\n\n    int up = 1, down = 1;\n    for (int i = 1; i < len; ++i) {\n        if (nums[i] > nums[i - 1])\n            up = down + 1;\n        else if (nums[i] < nums[i - 1])\n            down = up + 1;\n    }\n    return max(up, down);\n}"
        }
    },
    "377": {
        "call_functions": {
            "c++": "#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = $args;\n    int target = $args;\n    int result = combinationSum(nums, target);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int combinationSum(int[] nums, int target) {\n    int[] dp = new int[target + 1];\n    dp[0] = 1;\n\n    for(int num : nums) {\n        for(int i = num; i <= target; i++) {\n            dp[i] += dp[i - num];\n        }\n    }\n\n    return dp[target];\n}",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    target = $args[1]\n    result = combination_sum(nums, target)\n    print(result)",
            "javascript": "function main() {\n    const nums = $args[0];\n    const target = $args[1];\n    const result = combinationSum(nums, target);\n    console.log(result);\n}"
        }
    },
    "378": {
        "call_functions": {
            "c++": "#include <queue>\n#include <vector>\n\nint main() {\n    std::vector<std::vector<int>> matrix = $args;\n    int k = $args;\n    int result = kthSmallest(matrix, k);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int kthSmallest(int[][] matrix, int k) {\n    int n = matrix.length;\n    PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n\n    for (int i = 0; i < n; i++) {\n        minHeap.offer(new int[]{matrix[i][0], i, 0});\n    }\n\n    while (--k > 0) {\n        int[] element = minHeap.poll();\n        int row = element[1];\n        int col = element[2];\n\n        if (col + 1 < n) {\n            minHeap.offer(new int[]{matrix[row][col + 1], row, col + 1});\n        }\n    }\n\n    return minHeap.peek()[0];\n}\n",
            "python": "if __name__ == \"__main__\":\n    matrix = $args[0]\n    k = $args[1]\n    result = kthSmallest(matrix, k)\n    print(result)",
            "javascript": "function kthSmallest(matrix, k) {\n    const n = matrix.length;\n    const minHeap = [];\n\n    for (let i = 0; i < n; i++) {\n        minHeap.push({ value: matrix[i][0], row: i, col: 0 });\n    }\n\n    minHeap.sort((a, b) => a.value - b.value);\n\n    while (--k) {\n        const { value, row, col } = minHeap.shift();\n\n        if (col + 1 < n) {\n            const newVal = { value: matrix[row][col + 1], row: row, col: col + 1 };\n            insertSorted(minHeap, newVal, (a, b) => a.value - b.value);\n        }\n    }\n\n    return minHeap[0].value;\n}\n\nfunction insertSorted(arr, item, comparator) {\n    const insertIndex = arr.findIndex((el) => comparator(el, item) > 0);\n\n    if (insertIndex === -1) {\n        arr.push(item);\n    } else {\n        arr.splice(insertIndex, 0, item);\n    }\n}\n"
        }
    },
    "379": {
        "call_functions": {
            "c++": "int main() {\n    int maxNumbers = $args;\n    PhoneDirectory pd(maxNumbers);\n    int result1 = pd.get();\n    bool result2 = pd.check(result1);\n    pd.release(result1);\n    cout << result1 << endl;\n    cout << boolalpha << result2 << endl;\n    return 0;\n}",
            "java": "public int get() {\n        if (!released.isEmpty()) {\n            int number = released.poll();\n            available[number] = false;\n            return number;\n        }\n        for (int i = 0; i < available.length; i++) {\n            if (available[i]) {\n                available[i] = false;\n                return i;\n            }\n        }\n        return -1;\n    }",
            "python": "if __name__ == \"__main__\":\n    maxNumbers = $args[0]\n    phoneDirectory = PhoneDirectory(maxNumbers)\n    result1 = phoneDirectory.get()\n    result2 = phoneDirectory.check($args[1])\n    phoneDirectory.release($args[2])\n    print(result1)\n    print(result2)",
            "javascript": "function main() {\n    const maxNumbers = $args;\n    const phoneDirectory = new PhoneDirectory(maxNumbers);\n    const result1 = phoneDirectory.get();\n    const result2 = phoneDirectory.check(0);\n    phoneDirectory.release(0);\n    const result3 = phoneDirectory.get();\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n}"
        }
    },
    "380": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    RandomizedSet obj;\n    bool result;\n\n    // Insert function call\n    result = obj.insert($args);\n    cout << boolalpha << result << endl;\n\n    // Remove function call\n    result = obj.remove($args);\n    cout << boolalpha << result << endl;\n\n    // getRandom function call\n    int random = obj.getRandom();\n    cout << random << endl;\n\n    return 0;\n}",
            "java": "public boolean insert(int val) {\n        if (indexMap.containsKey(val)) return false;\n\n        indexMap.put(val, nums.size());\n        nums.add(val);\n        return true;\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = RandomizedSet()\n    insert_val = $args[0]\n    remove_val = $args[1]\n    insert_result = obj.insert(insert_val)\n    remove_result = obj.remove(remove_val)\n    random_val = obj.getRandom()\n    print(insert_result)\n    print(remove_result)\n    print(random_val)",
            "javascript": "class RandomizedSet {\n    constructor() {\n        this.indexMap = new Map();\n        this.nums = [];\n    }\n\n    insert(val) {\n        if (this.indexMap.has(val)) return false;\n\n        this.indexMap.set(val, this.nums.length);\n        this.nums.push(val);\n        return true;\n    }\n\n    remove(val) {\n        if (!this.indexMap.has(val)) return false;\n\n        const last = this.nums[this.nums.length - 1];\n        this.indexMap.set(last, this.indexMap.get(val));\n        this.nums[this.indexMap.get(val)] = last;\n\n        this.nums.pop();\n        this.indexMap.delete(val);\n        return true;\n    }\n\n    getRandom() {\n        return this.nums[Math.floor(Math.random() * this.nums.length)];\n    }\n}"
        }
    },
    "381": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    RandomizedCollection obj;\n    obj.insert($args);\n    obj.remove($args);\n    int result = obj.getRandom();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getRandom() {\n        int index = (int) (Math.random() * nums.size());\n        return nums.get(index);\n    }",
            "python": "if __name__ == \"__main__\":\n    obj = RandomizedCollection()\n    obj.insert($args[0])\n    obj.remove($args[1])\n    result = obj.getRandom()\n    print(result)",
            "javascript": "function main() {\n    const val = $args;\n    const collection = new RandomizedCollection();\n    const insertResult = collection.insert(val);\n    const removeResult = collection.remove(val);\n    const randomResult = collection.getRandom();\n    console.log(insertResult);\n    console.log(removeResult);\n    console.log(randomResult);\n}"
        }
    },
    "382": {
        "call_functions": {
            "c++": "#include <cstdlib>\n#include <ctime>\n#include <iostream>\nusing namespace std;\n\nint main() {\n    ListNode* head = new ListNode($args);\n    Solution obj(head);\n    int result = obj.getRandom();\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int getRandom() {\n        ListNode current = head;\n        int result = current.val, i;\n        for (i = 1; current != null; i++) {\n            if (random.nextInt(i) == 0) {\n                result = current.val;\n            }\n            current = current.next;\n        }\n        return result;\n    }",
            "python": "if __name__ == \"__main__\":\n    head = ListNode($args[0])\n    obj = Solution(head)\n    result = obj.getRandom()\n    print(result)",
            "javascript": "function getRandom() {\n    let current = this.head;\n    let result = current.val;\n    for (let i = 1; current !== null; i++) {\n        if (Math.floor(Math.random() * i) === 0) {\n            result = current.val;\n        }\n        current = current.next;\n    }\n    return result;\n}"
        }
    },
    "383": {
        "call_functions": {
            "c++": "#include <string>\n#include <unordered_map>\n#include <iostream>\n\nbool canConstruct(std::string ransomNote, std::string magazine) {\n    std::unordered_map<char, int> letterCount;\n    for (char c : magazine) {\n        letterCount[c]++;\n    }\n    \n    for (char c : ransomNote) {\n        if (letterCount[c] == 0) {\n            return false;\n        }\n        letterCount[c]--;\n    }\n\n    return true;\n}\n\nint main() {\n    std::string ransomNote = $args;\n    std::string magazine = $args;\n    bool result = canConstruct(ransomNote, magazine);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean canConstruct(String ransomNote, String magazine) {\n    HashMap<Character, Integer> letterCount = new HashMap<>();\n    \n    for (char c : magazine.toCharArray()) {\n        letterCount.put(c, letterCount.getOrDefault(c, 0) + 1);\n    }\n    \n    for (char c : ransomNote.toCharArray()) {\n        if (!letterCount.containsKey(c) || letterCount.get(c) == 0) {\n            return false;\n        }\n        letterCount.put(c, letterCount.get(c) - 1);\n    }\n\n    return true;\n}",
            "python": "if __name__ == \"__main__\":\n    ransom_note = $args[0]\n    magazine = $args[1]\n    result = can_construct(ransom_note, magazine)\n    print(result)",
            "javascript": "function main() {\n    const ransomNote = $args[0];\n    const magazine = $args[1];\n    const result = canConstruct(ransomNote, magazine);\n    console.log(result);\n}"
        }
    },
    "384": {
        "call_functions": {
            "c++": "#include <algorithm>\n#include <vector>\n#include <ctime>\n#include <iostream>\n\nint main() {\n    std::vector<int> nums = $args;\n    Solution obj(nums);\n    std::vector<int> reset_result = obj.reset();\n    std::vector<int> shuffle_result = obj.shuffle();\n    \n    std::cout << \"Reset Result: \";\n    for (int num : reset_result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    std::cout << \"Shuffle Result: \";\n    for (int num : shuffle_result) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n    \n    return 0;\n}",
            "java": "public int[] reset() {\n        return original;\n    }",
            "python": "if __name__ == \"__main__\":\n    nums = $args[0]\n    obj = Solution(nums)\n    param_1 = obj.reset()\n    param_2 = obj.shuffle()\n    print(param_1)\n    print(param_2)",
            "javascript": "function main() {\n    const nums = $args;\n    const obj = new Solution(nums);\n    const resetResult = obj.reset();\n    const shuffleResult = obj.shuffle();\n    console.log(resetResult);\n    console.log(shuffleResult);\n}"
        }
    },
    "386": {
        "call_functions": {
            "c++": "#include <vector>\n#include <string>\n#include <iostream>\n\nvoid lexicographicalOrderHelper(int current, int n, std::vector<int>& result) {\n    if (current > n) return;\n\n    result.push_back(current);\n    for (int i = 0; i <= 9; ++i) {\n        lexicographicalOrderHelper(current * 10 + i, n, result);\n    }\n}\n\nstd::vector<int> lexicalOrder(int n) {\n    std::vector<int> result;\n    for (int i = 1; i <= 9; ++i) {\n        lexicographicalOrderHelper(i, n, result);\n    }\n    return result;\n}\n\nint main() {\n    int n = $args;\n    std::vector<int> result = lexicalOrder(n);\n    for (int i : result) {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
            "java": "public static List<Integer> lexicalOrder(int n) {\n    List<Integer> result = new ArrayList<>();\n    for (int i = 1; i <= 9; ++i) {\n        lexicographicalOrderHelper(i, n, result);\n    }\n    return result;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = lexical_order(n)\n    print(result)",
            "javascript": "function lexicalOrder(n) {\n    let result = [];\n    for (let i = 1; i <= 9; ++i) {\n        lexicographicalOrderHelper(i, n, result);\n    }\n    return result;\n}"
        }
    },
    "387": {
        "call_functions": {
            "c++": "int main() {\n    std::string s = $args;\n    int result = firstUniqChar(s);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public int firstUniqChar(String s) {\n    HashMap<Character, Integer> charCount = new HashMap<>();\n    for (char c : s.toCharArray())\n        charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n    for (int i = 0; i < s.length(); i++)\n        if (charCount.get(s.charAt(i)) == 1)\n            return i;\n    return -1;\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    result = firstUniqChar(s)\n    print(result)",
            "javascript": "function main() {\n    const s = $args;\n    const result = firstUniqChar(s);\n    console.log(result);\n}\n"
        }
    },
    "388": {
        "call_functions": {
            "c++": "#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nint main() {\n    std::string input = $args;\n    int result = lengthLongestPath(input);\n    std::cout << result << std::endl;\n    return 0;\n}\n",
            "java": "public int lengthLongestPath(String input) {\n    Stack<Integer> dirLengthStack = new Stack<>();\n    String[] lines = input.split(\"\\n\");\n    int maxFileLength = 0;\n\n    for (String line : lines) {\n        int level = line.lastIndexOf('\\t') + 1;\n        line = line.substring(level);\n\n        while (dirLengthStack.size() > level) {\n            dirLengthStack.pop();\n        }\n\n        int length = (dirLengthStack.isEmpty()) ? line.length() : dirLengthStack.peek() + line.length() + 1;\n        dirLengthStack.push(length);\n\n        if (line.contains(\".\")) {\n            maxFileLength = Math.max(maxFileLength, length);\n        }\n    }\n\n    return maxFileLength;\n}\n",
            "python": "if __name__ == \"__main__\":\n    input = $args[0]\n    result = length_longest_path(input)\n    print(result)",
            "javascript": "function main() {\n    const input = $args;\n    const result = lengthLongestPath(input);\n    console.log(result);\n}"
        }
    },
    "389": {
        "call_functions": {
            "c++": "char findTheDifference(std::string s, std::string t) {\n    int sum_s = 0, sum_t = 0;\n    for(char c : s) sum_s += c;\n    for(char c : t) sum_t += c;\n    return sum_t - sum_s;\n}\n\nint main() {\n    std::string s = $args[0];\n    std::string t = $args[1];\n    char result = findTheDifference(s, t);\n    std::cout << result << std::endl;\n    return 0;\n}",
            "java": "public char findTheDifference(String s, String t) {\n    int sum_s = 0, sum_t = 0;\n    for(char c : s.toCharArray()) sum_s += c;\n    for(char c : t.toCharArray()) sum_t += c;\n    return (char)(sum_t - sum_s);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = findTheDifference(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = findTheDifference(s, t);\n    console.log(result);\n}"
        }
    },
    "390": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = lastRemaining(n);\n    cout << result << endl;\n    return 0;\n}",
            "java": "public int lastRemaining(int n) {\n    boolean direction = true;\n    int head = 1, remaining = n, step = 1;\n\n    while (remaining > 1) {\n        if (direction || remaining % 2 == 1) {\n            head += step;\n        }\n        remaining /= 2;\n        step *= 2;\n        direction = !direction;\n    }\n\n    return head;\n}",
            "python": "if __name__ == \"__main__\":\n    n = $args[0]\n    result = last_remaining(n)\n    print(result)",
            "javascript": "function main() {\n    const n = $args;\n    const result = lastRemaining(n);\n    console.log(result);\n}"
        }
    },
    "391": {
        "call_functions": {
            "c++": "#include <vector>\n#include <set>\n\nbool isRectangleCover(std::vector<std::vector<int>>& rectangles) {\n    int area = 0;\n    std::set<std::pair<int, int>> points;\n    int lx = INT_MAX, ly = INT_MAX, rx = INT_MIN, ry = INT_MIN;\n\n    for (auto& rect : rectangles) {\n        lx = std::min(lx, rect[0]);\n        ly = std::min(ly, rect[1]);\n        rx = std::max(rx, rect[2]);\n        ry = std::max(ry, rect[3]);\n\n        area += (rect[2] - rect[0]) * (rect[3] - rect[1]);\n\n        std::pair<int, int> p1(rect[0], rect[1]);\n        std::pair<int, int> p2(rect[0], rect[3]);\n        std::pair<int, int> p3(rect[2], rect[1]);\n        std::pair<int, int> p4(rect[2], rect[3]);\n\n        if (!points.erase(p1)) points.insert(p1);\n        if (!points.erase(p2)) points.insert(p2);\n        if (!points.erase(p3)) points.insert(p3);\n        if (!points.erase(p4)) points.insert(p4);\n    }\n\n    if (points.count({lx, ly}) && points.count({lx, ry}) &&\n        points.count({rx, ly}) && points.count({rx, ry}) &&\n        points.size() == 4)\n        return area == (rx - lx) * (ry - ly);\n\n    return false;\n}\n\nint main() {\n    std::vector<std::vector<int>> rectangles = $args;\n    bool result = isRectangleCover(rectangles);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
            "java": "public boolean isRectangleCover(int[][] rectangles) {\n        int area = 0;\n        Set<Point> points = new HashSet<>();\n        int lx = Integer.MAX_VALUE, ly = Integer.MAX_VALUE, rx = Integer.MIN_VALUE, ry = Integer.MIN_VALUE;\n\n        for (int[] rect : rectangles) {\n            lx = Math.min(lx, rect[0]);\n            ly = Math.min(ly, rect[1]);\n            rx = Math.max(rx, rect[2]);\n            ry = Math.max(ry, rect[3]);\n\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1]);\n\n            Point p1 = new Point(rect[0], rect[1]);\n            Point p2 = new Point(rect[0], rect[3]);\n            Point p3 = new Point(rect[2], rect[1]);\n            Point p4 = new Point(rect[2], rect[3]);\n\n            if (!points.remove(p1)) points.add(p1);\n            if (!points.remove(p2)) points.add(p2);\n            if (!points.remove(p3)) points.add(p3);\n            if (!points.remove(p4)) points.add(p4);\n        }\n\n        if (points.contains(new Point(lx, ly)) && points.contains(new Point(lx, ry)) &&\n            points.contains(new Point(rx, ly)) && points.contains(new Point(rx, ry)) &&\n            points.size() == 4)\n            return area == (rx - lx) * (ry - ly);\n\n        return false;\n    }",
            "python": "if __name__ == \"__main__\":\n    rectangles = $args[0]\n    result = isRectangleCover(rectangles)\n    print(result)",
            "javascript": "function isRectangleCover(rectangles) {\n    let area = 0;\n    let points = new Set();\n    let lx = Infinity, ly = Infinity, rx = -Infinity, ry = -Infinity;\n\n    for (let rect of rectangles) {\n        lx = Math.min(lx, rect[0]);\n        ly = Math.min(ly, rect[1]);\n        rx = Math.max(rx, rect[2]);\n        ry = Math.max(ry, rect[3]);\n\n        area += (rect[2] - rect[0]) * (rect[3] - rect[1]);\n\n        let p1 = rect[0] + \",\" + rect[1];\n        let p2 = rect[0] + \",\" + rect[3];\n        let p3 = rect[2] + \",\" + rect[1];\n        let p4 = rect[2] + \",\" + rect[3];\n\n        if (points.has(p1)) points.delete(p1);\n        else points.add(p1);\n        if (points.has(p2)) points.delete(p2);\n        else points.add(p2);\n        if (points.has(p3)) points.delete(p3);\n        else points.add(p3);\n        if (points.has(p4)) points.delete(p4);\n        else points.add(p4);\n    }\n\n    return points.size === 4 &&\n           points.has(lx + \",\" + ly) && points.has(lx + \",\" + ry) &&\n           points.has(rx + \",\" + ly) && points.has(rx + \",\" + ry) &&\n           area === (rx - lx) * (ry - ly);\n}"
        }
    },
    "392": {
        "call_functions": {
            "c++": "#include <iostream>\nusing namespace std;\n\nbool isSubsequence(std::string s, std::string t) {\n    int si = 0, ti = 0;\n\n    while (si < s.size() && ti < t.size()) {\n        if (s[si] == t[ti])\n            si++;\n        ti++;\n    }\n\n    return si == s.size();\n}\n\nint main() {\n    std::string s = $args;\n    std::string t = $args;\n    bool result = isSubsequence(s, t);\n    cout << boolalpha << result << endl;\n    return 0;\n}",
            "java": "public static void main(String[] args) {\n    String s = $args[0];\n    String t = $args[1];\n    boolean result = isSubsequence(s, t);\n    System.out.println(result);\n}",
            "python": "if __name__ == \"__main__\":\n    s = $args[0]\n    t = $args[1]\n    result = is_subsequence(s, t)\n    print(result)",
            "javascript": "function main() {\n    const s = $args[0];\n    const t = $args[1];\n    const result = isSubsequence(s, t);\n    console.log(result);\n}"
        }
    }
}