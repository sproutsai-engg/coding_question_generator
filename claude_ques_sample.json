[
    {
        "problem": "Number of Steps to Reduce a Number to Zero",
        "function description": "Given an integer num, return the number of steps to reduce it to zero. In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",
        "sample code c": "#include <stdio.h>\n\nint numberOfSteps(int num) {\n    int steps = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            num /= 2;\n        } else {\n            num--;\n        }\n        steps++;\n    }\n    return steps;\n}\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def numberOfSteps(num):\n    steps = 0\n    while num > 0:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num -= 1\n        steps += 1\n    return steps\n\nnum = $args\nprint(numberOfSteps(num))\n",
        "sample code javascript": "function numberOfSteps(num) {\n    let steps = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            num /= 2;\n        } else {\n            num--;\n        }\n        steps++;\n    }\n    return steps;\n}\n\nconst result = numberOfSteps($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            14,
            8,
            123
          ],
          "outputs": [
            6,
            4,
            12
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n\nint numberOfSteps(int num) {\n    // Your logic goes here\n}\n",
          "python": "def numberOfSteps(num):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function numberOfSteps(num) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\nusing namespace std;\n\nint numberOfSteps(int num) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    printf(\"%d\", result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "num = $args\nprint(numberOfSteps(num))\n",
          "javascript_call": "const result = numberOfSteps($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\nusing namespace std;\n\nint numberOfSteps(int num) {\n    int steps = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            num /= 2;\n        } else {\n            num--;\n        }\n        steps++;\n    }\n    return steps;\n}\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    cout << result << endl;\n    return 0;\n}\n",
        "title": "Number of Steps to Reduce a Number to Zero"
       },
       {
        "problem": "Decode Ways",
        "function description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'. To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, '11106' can be mapped into 'AABF', '111', '06', or 'ABF'. Given a string s containing only digits, return the number of ways to decode it.",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n\nint numDecodings(char* s) {\n    int n = strlen(s);\n    if (n == 0 || s[0] == '0') return 0;\n    int dp[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        int one = s[i - 1] - '0';\n        int two = (s[i - 2] - '0') * 10 + one;\n        dp[i] = 0;\n        if (one >= 1 && one <= 9) dp[i] += dp[i - 1];\n        if (two >= 10 && two <= 26) dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}\n\nint main() {\n    char s[] = $args;\n    int result = numDecodings(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def numDecodings(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        one = int(s[i - 1])\n        two = int(s[i - 2:i])\n        if 1 <= one <= 9:\n            dp[i] += dp[i - 1]\n        if 10 <= two <= 26:\n            dp[i] += dp[i - 2]\n    return dp[n]\n\ns = $args\nprint(numDecodings(s))\n",
        "sample code javascript": "function numDecodings(s) {\n    if (!s || s[0] === '0') return 0;\n    const n = s.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = 1;\n    for (let i = 2; i <= n; i++) {\n        const one = parseInt(s[i - 1]);\n        const two = parseInt(s.slice(i - 2, i));\n        if (one >= 1 && one <= 9) dp[i] += dp[i - 1];\n        if (two >= 10 && two <= 26) dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}\n\nconst result = numDecodings($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            "12",
            "226",
            "0",
            "1123"
          ],
          "outputs": [
            2,
            3,
            0,
            5
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n\nint numDecodings(char* s) {\n    // Your logic goes here\n}\n",
          "python": "def numDecodings(s):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function numDecodings(s) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint numDecodings(string s) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char s[] = $args;\n    int result = numDecodings(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = numDecodings(s);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "s = $args\nprint(numDecodings(s))\n",
          "javascript_call": "const result = numDecodings($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint numDecodings(string s) {\n    int n = s.length();\n    if (n == 0 || s[0] == '0') return 0;\n    vector<int> dp(n + 1);\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        int one = s[i - 1] - '0';\n        int two = (s[i - 2] - '0') * 10 + one;\n        dp[i] = 0;\n        if (one >= 1 && one <= 9) dp[i] += dp[i - 1];\n        if (two >= 10 && two <= 26) dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}\n\nint main() {\n    string s = $args;\n    int result = numDecodings(s);\n    cout << result << endl;\n    return 0;\n}\n",
        "title": "Decode Ways"
       }
]