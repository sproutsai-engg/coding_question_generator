// [
//     {
//         "problem": "Is Subsequence",
//         "function description": "The function takes two strings, s and t, as input. It should return true if all the characters in s appear in t in the same order (not necessarily contiguous), and false otherwise. In other words, it checks if s is a subsequence of t.",
//         "sample code c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool isSubsequence(char *s, char *t) {\n    int i = 0, j = 0;\n    while (s[i] != '\\0' && t[j] != '\\0') {\n        if (s[i] == t[j]) {\n            i++;\n        }\n        j++;\n    }\n    return s[i] == '\\0';\n}\n\nint main() {\n    char s[100], t[100];\n    scanf(\"%s %s\", s, t);\n    bool result = isSubsequence(s, t);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//         "sample code python": "def isSubsequence(s, t):\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n        j += 1\n    return i == len(s)\n\ns = input()\nt = input()\nprint(\"true\" if isSubsequence(s, t) else \"false\")",
//         "sample code javascript": "'use strict';\nconst ps = require('prompt-sync');\nconst prompt = ps();\nfunction isSubsequence(s, t) {\n    let i = 0, j = 0;\n    while (i < s.length && j < t.length) {\n        if (s[i] === t[j]) {\n            i++;\n        }\n        j++;\n    }\n    return i === s.length;\n}\n\nlet s = prompt();\nlet t = prompt();\nlet result = isSubsequence(s, t);\nconsole.log(result ? \"true\" : \"false\");",
//         "test cases": {
//           "inputs": [
//             "ace, abcde",
//             "aec, abcde",
//             "abc, ahbgdc",
//             "axc, ahbgdc",
//             " , ahbgdc",
//             "leeeeetcode, yyyyylyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
//           ],
//           "outputs": [
//             "true",
//             "false",
//             "true",
//             "false",
//             "true",
//             "true"
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool isSubsequence(char *s, char *t) {\n    // Your logic goes here\n}\n",
//           "python": "def isSubsequence(s, t):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction isSubsequence(s, t) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isSubsequence(string s, string t) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    char *arr[2]=$args;\n    printf('%s\n', isSubsequence(arr[0], arr[1]) ? 'True' : 'False');;\n    return 0;\n}\n",
//           "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s=$args, t;\n    cin >> s >> t;\n    bool result = isSubsequence(s, t);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//           "python_call": "s = input($args)\nt = input($args)\nprint(\"true\" if isSubsequence(s, t) else \"false\")",
//           "javascript_call": "const ps = require('prompt-sync');\nconst prompt = ps();\nlet s = prompt($args);\nlet t = prompt($args);\nlet result = isSubsequence(s, t);\nconsole.log(result ? \"true\" : \"false\");"
//         },
//         "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isSubsequence(string s, string t) {\n    int i = 0, j = 0;\n    while (i < s.length() && j < t.length()) {\n        if (s[i] == t[j]) {\n            i++;\n        }\n        j++;\n    }\n    return i == s.length();\n}\n\nint main() {\n    string s, t;\n    cin >> s >> t;\n    bool result = isSubsequence(s, t);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//         "title": "Is Subsequence"
//       },
//       {
//         "problem": "Ransom Note",
//         "function description": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise. Each letter in magazine can only be used once in ransomNote.",
//         "sample code c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool canConstruct(char *ransomNote, char *magazine) {\n    int count[26] = {0};\n    for (int i = 0; magazine[i]; i++) {\n        count[magazine[i] - 'a']++;\n    }\n    for (int i = 0; ransomNote[i]; i++) {\n        if (--count[ransomNote[i] - 'a'] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    char ransomNote[100], magazine[100];\n    scanf(\"%s %s\", ransomNote, magazine);\n    bool result = canConstruct(ransomNote, magazine);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//         "sample code python": "def canConstruct(ransomNote, magazine):\n    count = [0] * 26\n    for char in magazine:\n        count[ord(char) - ord('a')] += 1\n    for char in ransomNote:\n        if count[ord(char) - ord('a')] == 0:\n            return False\n        count[ord(char) - ord('a')] -= 1\n    return True\n\nransomNote = input()\nmagazine = input()\nprint(\"true\" if canConstruct(ransomNote, magazine) else \"false\")",
//         "sample code javascript": "'use strict';\nconst ps = require('prompt-sync');\nconst prompt = ps();\nfunction canConstruct(ransomNote, magazine) {\n    const count = new Array(26).fill(0);\n    for (const char of magazine) {\n        count[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    for (const char of ransomNote) {\n        if (--count[char.charCodeAt(0) - 'a'.charCodeAt(0)] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet ransomNote = prompt();\nlet magazine = prompt();\nlet result = canConstruct(ransomNote, magazine);\nconsole.log(result ? \"true\" : \"false\");",
//         "test cases": {
//           "inputs": [
//             ["a", "b"],
//             ["aa", "ab"],
//             ["aa", "aab"],
//             ["bg", "efjbdfbdgfjhhaiigfhbaihifebaaafeihcaecfbfjddgbdbfagbcffdbdhdfhfdihbutdtfiigigcbbcgbcctfdihffbfbffbfhfbffcbffcbfbfhffbcgaccgggacggggfhihffhifcbfhfgabdbdbdbddfhbfbfbfgcgcgcbfbfbfcbcfdihffdbfcbgggacbggfbfbfebbffbfcbfbfcbfbffbcgbfcgbfcccfbgbbfcfbfbfbdbfbdfddfdhbgfdhffcccfccffgbcbffbggbdgbddbghdhbdfhdfgfhbfcdcdgdcbdbdgbfbdhgfhdbdfbffbdfbdbcbgfhhhffbcfbhbhbhchghghffhfhfffbffcbfbfhbhbbhbfbhfhcbhcfbhfhbfhbfbfhfcfcfcbfbfcbffcfbfhbfhffbfhbfbdhbfbfbfdfcfbffbfbfbfbfbfbdffbbdbfbbbffbfbfbfbffffbfbfbfbffbfbfbfbfbfbfbfb"],
//             ["aab", "baa"]
//           ],
//           "outputs": [
//             "false",
//             "false",
//             "true",
//             "true",
//             "true"
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool canConstruct(char *ransomNote, char *magazine) {\n    // Your logic goes here\n}\n",
//           "python": "def canConstruct(ransomNote, magazine):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction canConstruct(ransomNote, magazine) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool canConstruct(string ransomNote, string magazine) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    char ransomNote[100]=$args, magazine[100]=$args;\n    scanf(\"%s %s\", ransomNote, magazine);\n    bool result = canConstruct(ransomNote, magazine);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string ransomNote, magazine;\n    cin >> ransomNote >> magazine;\n    bool result = canConstruct(ransomNote, magazine);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//           "python_call": "ransomNote = input()\nmagazine = input()\nprint(\"true\" if canConstruct(ransomNote, magazine) else \"false\")",
//           "javascript_call": "const ps = require('prompt-sync');\nconst prompt = ps();\nlet ransomNote = prompt();\nlet magazine = prompt();\nlet result = canConstruct(ransomNote, magazine);\nconsole.log(result ? \"true\" : \"false\");"
//         },
//         "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool canConstruct(string ransomNote, string magazine) {\n    int count[26] = {0};\n    for (char c : magazine) {\n        count[c - 'a']++;\n    }\n    for (char c : ransomNote) {\n        if (--count[c - 'a'] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    string ransomNote, magazine;\n    cin >> ransomNote >> magazine;\n    bool result = canConstruct(ransomNote, magazine);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//         "title": "Ransom Note"
//       },
//       {
//         "problem": "Isomorphic Strings",
//         "function description": "Given two strings s and t, determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
//         "sample code c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool isIsomorphic(char *s, char *t) {\n    int mapStoT[256] = {0}, mapTtoS[256] = {0};\n    int len = strlen(s);\n    for (int i = 0; i < len; i++) {\n        if (mapStoT[s[i]] != mapTtoS[t[i]]) {\n            return false;\n        }\n        mapStoT[s[i]] = i + 1;\n        mapTtoS[t[i]] = i + 1;\n    }\n    return true;\n}\n\nint main() {\n    char s[100], t[100];\n    scanf(\"%s %s\", s, t);\n    bool result = isIsomorphic(s, t);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//         "sample code python": "def isIsomorphic(s, t):\n    map_s_t = {}\n    map_t_s = {}\n    for i in range(len(s)):\n        if s[i] not in map_s_t and t[i] not in map_t_s:\n            map_s_t[s[i]] = t[i]\n            map_t_s[t[i]] = s[i]\n        elif map_s_t.get(s[i]) != t[i] or map_t_s.get(t[i]) != s[i]:\n            return False\n    return True\n\ns = input()\nt = input()\nprint(\"true\" if isIsomorphic(s, t) else \"false\")",
//         "sample code javascript": "'use strict';\nconst ps = require('prompt-sync');\nconst prompt = ps();\nfunction isIsomorphic(s, t) {\n    const mapStoT = new Map();\n    const mapTtoS = new Map();\n    for (let i = 0; i < s.length; i++) {\n        if (mapStoT.has(s[i]) && mapStoT.get(s[i]) !== t[i]) {\n            return false;\n        }\n        if (mapTtoS.has(t[i]) && mapTtoS.get(t[i]) !== s[i]) {\n            return false;\n        }\n        mapStoT.set(s[i], t[i]);\n        mapTtoS.set(t[i], s[i]);\n    }\n    return true;\n}\n\nlet s = prompt();\nlet t = prompt();\nlet result = isIsomorphic(s, t);\nconsole.log(result ? \"true\" : \"false\");",
//         "test cases": {
//           "inputs": [
//             ["egg", "add"],
//             ["foo", "bar"],
//             ["paper", "title"],
//             ["ab", "ca"]
//           ],
//           "outputs": [
//             "true",
//             "false",
//             "true",
//             "true"
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool isIsomorphic(char *s, char *t) {\n    // Your logic goes here\n}\n",
//           "python": "def isIsomorphic(s, t):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction isIsomorphic(s, t) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nbool isIsomorphic(string s, string t) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    char s[100], t[100];\n    scanf(\"%s %s\", s, t);\n    bool result = isIsomorphic(s, t);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s, t;\n    cin >> s >> t;\n    bool result = isIsomorphic(s, t);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//           "python_call": "s = input()\nt = input()\nprint(\"true\" if isIsomorphic(s, t) else \"false\")",
//           "javascript_call": "const ps = require('prompt-sync');\nconst prompt = ps();\nlet s = prompt();\nlet t = prompt();\nlet result = isIsomorphic(s, t);\nconsole.log(result ? \"true\" : \"false\");"
//         },
//         "sample code cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nbool isIsomorphic(string s, string t) {\n    unordered_map<char, char> mapStoT, mapTtoS;\n    for (int i = 0; i < s.length(); i++) {\n        if (mapStoT.count(s[i]) && mapStoT[s[i]] != t[i]) {\n            return false;\n        }\n        if (mapTtoS.count(t[i]) && mapTtoS[t[i]] != s[i]) {\n            return false;\n        }\n        mapStoT[s[i]] = t[i];\n        mapTtoS[t[i]] = s[i];\n    }\n    return true;\n}\n\nint main() {\n    string s, t;\n    cin >> s >> t;\n    bool result = isIsomorphic(s, t);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//         "title": "Isomorphic Strings"
//       },
//       {
//         "problem": "Word Pattern",
//         "function description": "Given a pattern and a string s, find if s follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.",
//         "sample code c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool wordPattern(char *pattern, char *s) {\n    char *words[26] = {0};\n    int count = 0;\n    char *word = strtok(s, \" \");\n    for (int i = 0; pattern[i]; i++) {\n        int index = pattern[i] - 'a';\n        if (!words[index]) {\n            words[index] = word;\n            count++;\n        } else if (strcmp(words[index], word)) {\n            return false;\n        }\n        word = strtok(NULL, \" \");\n    }\n    return count == strlen(pattern);\n}\n\nint main() {\n    char pattern[100], s[100];\n    scanf(\"%s %s\", pattern, s);\n    bool result = wordPattern(pattern, s);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//         "sample code python": "def wordPattern(pattern, s):\n    words = {}\n    s = s.split()\n    if len(pattern) != len(s):\n        return False\n    for i, word in enumerate(s):\n        if pattern[i] not in words:\n            if word in words.values():\n                return False\n            words[pattern[i]] = word\n        elif words[pattern[i]] != word:\n            return False\n    return True\n\npattern = input()\ns = input()\nprint(\"true\" if wordPattern(pattern, s) else \"false\")",
//         "sample code javascript": "'use strict';\nconst ps = require('prompt-sync');\nconst prompt = ps();\nfunction wordPattern(pattern, s) {\n    const words = {};\n    const wordArray = s.split(' ');\n    if (pattern.length !== wordArray.length) {\n        return false;\n    }\n    for (let i = 0; i < pattern.length; i++) {\n        const char = pattern[i];\n        const word = wordArray[i];\n        if (!words[char]) {\n            if (Object.values(words).includes(word)) {\n                return false;\n            }\n            words[char] = word;\n        } else if (words[char] !== word) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet pattern = prompt();\nlet s = prompt();\nlet result = wordPattern(pattern, s);\nconsole.log(result ? \"true\" : \"false\");",
//         "test cases": {
//           "inputs": [
//             ["abba", "dog cat cat dog"],
//             ["abba", "dog cat cat fish"],
//             ["aaaa", "dog cat cat dog"],
//             ["abba", "dog dog dog dog"]
//           ],
//           "outputs": [
//             "true",
//             "false",
//             "false",
//             "false"
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nbool wordPattern(char *pattern, char *s) {\n    // Your logic goes here\n}\n",
//           "python": "def wordPattern(pattern, s):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction wordPattern(pattern, s) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nbool wordPattern(string pattern, string s) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    char pattern[100], s[100];\n    scanf(\"%s %s\", pattern, s);\n    bool result = wordPattern(pattern, s);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string pattern, s;\n    cin >> pattern >> s;\n    bool result = wordPattern(pattern, s);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//           "python_call": "pattern = input()\ns = input()\nprint(\"true\" if wordPattern(pattern, s) else \"false\")",
//           "javascript_call": "const ps = require('prompt-sync');\nconst prompt = ps();\nlet pattern = prompt();\nlet s = prompt();\nlet result = wordPattern(pattern, s);\nconsole.log(result ? \"true\" : \"false\");"
//         },
//         "sample code cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nbool wordPattern(string pattern, string s) {\n    unordered_map<char, string> map;\n    istringstream iss(s);\n    string word;\n    for (char c : pattern) {\n        if (!iss >> word) {\n            return false;\n        }\n        if (map.count(c) && map[c] != word) {\n            return false;\n        } else if (!map.count(c) && map.count(map.begin(), map.end(), word)) {\n            return false;\n        }\n        map[c] = word;\n    }\n    return !iss >> word;\n}\n\nint main() {\n    string pattern, s;\n    cin >> pattern >> s;\n    bool result = wordPattern(pattern, s);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//         "title": "Word Pattern"
//       },
//       {
//         "problem": "Missing Number",
//         "function description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
//         "sample code c": "#include <stdio.h>\n\nint missingNumber(int *nums, int numsSize) {\n    int n = numsSize;\n    int expectedSum = n * (n + 1) / 2;\n    int actualSum = 0;\n    for (int i = 0; i < numsSize; i++) {\n        actualSum += nums[i];\n    }\n    return expectedSum - actualSum;\n}\n\nint main() {\n    int nums[] = {3, 0, 1};\n    int n = sizeof(nums) / sizeof(nums[0]);\n    int result = missingNumber(nums, n);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
//         "sample code python": "def missingNumber(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n\nnums = list(map(int, input().split()))\nprint(missingNumber(nums))",
//         "sample code javascript": "'use strict';\nfunction missingNumber(nums) {\n    const n = nums.length;\n    const expectedSum = n * (n + 1) / 2;\n    let actualSum = 0;\n    for (const num of nums) {\n        actualSum += num;\n    }\n    return expectedSum - actualSum;\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('Enter the array: ', (input) => {\n    const nums = input.split(' ').map(Number);\n    const result = missingNumber(nums);\n    console.log(result);\n    rl.close();\n});",
//         "test cases": {
//           "inputs": [
//             [3, 0, 1],
//             [0, 1],
//             [9, 6, 4, 2, 3, 5, 7, 0, 1],
//             [0]
//           ],
//           "outputs": [
//             2,
//             2,
//             8,
//             1
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n\nint missingNumber(int *nums, int numsSize) {\n    // Your logic goes here\n}\n",
//           "python": "def missingNumber(nums):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction missingNumber(nums) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint missingNumber(vector<int>& nums) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    int nums[] = {3, 0, 1};\n    int n = sizeof(nums) / sizeof(nums[0]);\n    int result = missingNumber(nums, n);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    cout << \"Enter the array elements: \";\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    int result = missingNumber(nums);\n    cout << \"The missing number is: \" << result << endl;\n    return 0;\n}",
//           "python_call": "nums = list(map(int, input().split()))\nprint(missingNumber(nums))",
//           "javascript_call": "const readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('Enter the array: ', (input) => {\n    const nums = input.split(' ').map(Number);\n    const result = missingNumber(nums);\n    console.log(result);\n    rl.close();\n});"
//         },
//         "sample code cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint missingNumber(vector<int>& nums) {\n    int n = nums.size();\n    int expectedSum = n * (n + 1) / 2;\n    int actualSum = 0;\n    for (int num : nums) {\n        actualSum += num;\n    }\n    return expectedSum - actualSum;\n}\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    cout << \"Enter the array elements: \";\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    int result = missingNumber(nums);\n    cout << \"The missing number is: \" << result << endl;\n    return 0;\n}",
//         "title": "Missing Number"
//       },
//       {
//         "problem": "Add Binary",
//         "function description": "Given two binary strings a and b, return their sum as a binary string.",
//         "sample code c": "#include <stdio.h>\n#include <string.h>\n\nchar *addBinary(char *a, char *b) {\n    int len_a = strlen(a), len_b = strlen(b);\n    int max_len = (len_a > len_b) ? len_a : len_b;\n    char *result = (char *)malloc(sizeof(char) * (max_len + 2));\n    int carry = 0, i = len_a - 1, j = len_b - 1, k = max_len;\n    result[max_len + 1] = '\\0';\n    while (i >= 0 || j >= 0) {\n        int sum = carry;\n        if (i >= 0) sum += a[i--] - '0';\n        if (j >= 0) sum += b[j--] - '0';\n        result[k--] = sum % 2 + '0';\n        carry = sum / 2;\n    }\n    if (carry) result[k] = '1';\n    else result++;\n    return result;\n}\n\nint main() {\n    char a[100], b[100];\n    scanf(\"%s %s\", a, b);\n    char *result = addBinary(a, b);\n    printf(\"%s\\n\", result);\n    free(result);\n    return 0;\n}",
//         "sample code python": "def addBinary(a, b):\n    result = ''\n    carry = 0\n    a_len = len(a) - 1\n    b_len = len(b) - 1\n    while a_len >= 0 or b_len >= 0 or carry:\n        carry += (int(a[a_len]) if a_len >= 0 else 0) + (int(b[b_len]) if b_len >= 0 else 0)\n        result = str(carry % 2) + result\n        carry //= 2\n        a_len -= 1\n        b_len -= 1\n    return result\n\na = input()\nb = input()\nprint(addBinary(a, b))",
//         "sample code javascript": "'use strict';\nconst ps = require('prompt-sync');\nconst prompt = ps();\nfunction addBinary(a, b) {\n    let result = '';\n    let carry = 0;\n    let i = a.length - 1;\n    let j = b.length - 1;\n    while (i >= 0 || j >= 0 || carry) {\n        carry += (i >= 0 ? parseInt(a[i--]) : 0) + (j >= 0 ? parseInt(b[j--]) : 0);\n        result = (carry % 2) + result;\n        carry = Math.floor(carry / 2);\n    }\n    return result;\n}\n\nlet a = prompt();\nlet b = prompt();\nlet result = addBinary(a, b);\nconsole.log(result);",
//         "test cases": {
//           "inputs": [
//             ["11", "1"],
//             ["1010", "1011"],
//             ["0", "0"],
//             ["1111", "1111"]
//           ],
//           "outputs": [
//             "100",
//             "10101",
//             "0",
//             "11110"
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n#include <string.h>\n\nchar *addBinary(char *a, char *b) {\n    // Your logic goes here\n}\n",
//           "python": "def addBinary(a, b):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction addBinary(a, b) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring addBinary(string a, string b) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    char a[100], b[100];\n    scanf(\"%s %s\", a, b);\n    char *result = addBinary(a, b);\n    printf(\"%s\\n\", result);\n    free(result);\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string a, b;\n    cin >> a >> b;\n    string result = addBinary(a, b);\n    cout << result << endl;\n    return 0;\n}",
//           "python_call": "a = input()\nb = input()\nprint(addBinary(a, b))",
//           "javascript_call": "const ps = require('prompt-sync');\nconst prompt = ps();\nlet a = prompt();\nlet b = prompt();\nlet result = addBinary(a, b);\nconsole.log(result);"
//         },
//         "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring addBinary(string a, string b) {\n    string result;\n    int carry = 0;\n    int i = a.size() - 1, j = b.size() - 1;\n    while (i >= 0 || j >= 0 || carry) {\n        carry += (i >= 0 ? a[i--] - '0' : 0) + (j >= 0 ? b[j--] - '0' : 0);\n        result = to_string(carry % 2) + result;\n        carry /= 2;\n    }\n    return result;\n}\n\nint main() {\n    string a, b;\n    cin >> a >> b;\n    string result = addBinary(a, b);\n    cout << result << endl;\n    return 0;\n}",
//         "title": "Add Binary"
//       },
//       {
//         "problem": "Remove Duplicates from Sorted Array",
//         "function description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Return the number of unique elements in the array.",
//         "sample code c": "#include <stdio.h>\n\nint removeDuplicates(int *nums, int numsSize) {\n    if (numsSize <= 1) {\n        return numsSize;\n    }\n    int j = 0;\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] != nums[j]) {\n            j++;\n            nums[j] = nums[i];\n        }\n    }\n    return j + 1;\n}\n\nint main() {\n    int nums[] = {1, 1, 2, 3, 3, 4, 4, 5};\n    int n = sizeof(nums) / sizeof(nums[0]);\n    int result = removeDuplicates(nums, n);\n    printf(\"Unique elements: %d\\n\", result);\n    for (int i = 0; i < result; i++) {\n        printf(\"%d \", nums[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
//         "sample code python": "def removeDuplicates(nums):\n    if not nums:\n        return 0\n    j = 0\n    for i in range(1, len(nums)):\n        if nums[i] != nums[j]:\n            j += 1\n            nums[j] = nums[i]\n    return j + 1\n\nnums = list(map(int, input().split()))\nresult = removeDuplicates(nums)\nprint(f\"Unique elements: {result}\")\nprint(*nums[:result])",
//         "sample code javascript": "'use strict';\nfunction removeDuplicates(nums) {\n    if (nums.length <= 1) {\n        return nums.length;\n    }\n    let j = 0;\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] !== nums[j]) {\n            j++;\n            nums[j] = nums[i];\n        }\n    }\n    return j + 1;\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('Enter the array: ', (input) => {\n    const nums = input.split(' ').map(Number);\n    const result = removeDuplicates(nums);\n    console.log(`Unique elements: ${result}`);\n    console.log(nums.slice(0, result).join(' '));\n    rl.close();\n});",
//         "test cases": {
//           "inputs": [
//             [1, 1, 2, 3, 3, 4, 4, 5],
//             [0, 0, 0, 0, 0],
//             [1, 2, 3, 4, 5],
//             []
//           ],
//           "outputs": [
//             5,
//             1,
//             5,
//             0
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n\nint removeDuplicates(int *nums, int numsSize) {\n    // Your logic goes here\n}\n",
//           "python": "def removeDuplicates(nums):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction removeDuplicates(nums) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint removeDuplicates(vector<int>& nums) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    int nums[] = {1, 1, 2, 3, 3, 4, 4, 5};\n    int n = sizeof(nums) / sizeof(nums[0]);\n    int result = removeDuplicates(nums, n);\n    printf(\"Unique elements: %d\\n\", result);\n    for (int i = 0; i < result; i++) {\n        printf(\"%d \", nums[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    cout << \"Enter the array elements: \";\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    int result = removeDuplicates(nums);\n    cout << \"Unique elements: \" << result << endl;\n    cout << \"The array after removing duplicates: \";\n    for (int i = 0; i < result; i++) {\n        cout << nums[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
//           "python_call": "nums = list(map(int, input().split()))\nresult = removeDuplicates(nums)\nprint(f\"Unique elements: {result}\")\nprint(*nums[:result])",
//           "javascript_call": "const readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('Enter the array: ', (input) => {\n    const nums = input.split(' ').map(Number);\n    const result = removeDuplicates(nums);\n    console.log(`Unique elements: ${result}`);\n    console.log(nums.slice(0, result).join(' '));\n    rl.close();\n});"
//         },
//         "sample code cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint removeDuplicates(vector<int>& nums) {\n    if (nums.size() <= 1) {\n        return nums.size();\n    }\n    int j = 0;\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != nums[j]) {\n            j++;\n            nums[j] = nums[i];\n        }\n    }\n    return j + 1;\n}\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    cout << \"Enter the array elements: \";\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    int result = removeDuplicates(nums);\n    cout << \"Unique elements: \" << result << endl;\n    cout << \"The array after removing duplicates: \";\n    for (int i = 0; i < result; i++) {\n        cout << nums[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
//         "title": "Remove Duplicates from Sorted Array"
//       },
//       {
//         "problem": "Remove Duplicates from Unsorted Array",
//         "function description": "Given an integer array nums, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Return the number of unique elements in the array.",
//         "sample code c": "#include <stdio.h>\n\nint removeDuplicates(int *nums, int numsSize) {\n    if (numsSize <= 1) {\n        return numsSize;\n    }\n    int j = 0;\n    for (int i = 1; i < numsSize; i++) {\n        int isDuplicate = 0;\n        for (int k = 0; k < i; k++) {\n            if (nums[i] == nums[k]) {\n                isDuplicate = 1;\n                break;\n            }\n        }\n        if (!isDuplicate) {\n            nums[++j] = nums[i];\n        }\n    }\n    return j + 1;\n}\n\nint main() {\n    int nums[] = {1, 2, 3, 4, 2, 3, 5};\n    int n = sizeof(nums) / sizeof(nums[0]);\n    int result = removeDuplicates(nums, n);\n    printf(\"Unique elements: %d\\n\", result);\n    for (int i = 0; i < result; i++) {\n        printf(\"%d \", nums[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
//         "sample code python": "def removeDuplicates(nums):\n    if not nums:\n        return 0\n    j = 0\n    for i in range(1, len(nums)):\n        if nums[i] not in nums[:i]:\n            j += 1\n            nums[j] = nums[i]\n    return j + 1\n\nnums = list(map(int, input().split()))\nresult = removeDuplicates(nums)\nprint(f\"Unique elements: {result}\")\nprint(*nums[:result])",
//         "sample code javascript": "'use strict';\nfunction removeDuplicates(nums) {\n    if (nums.length <= 1) {\n        return nums.length;\n    }\n    let j = 0;\n    for (let i = 1; i < nums.length; i++) {\n        if (!nums.slice(0, i).includes(nums[i])) {\n            nums[++j] = nums[i];\n        }\n    }\n    return j + 1;\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('Enter the array: ', (input) => {\n    const nums = input.split(' ').map(Number);\n    const result = removeDuplicates(nums);\n    console.log(`Unique elements: ${result}`);\n    console.log(nums.slice(0, result).join(' '));\n    rl.close();\n});",
//         "test cases": {
//           "inputs": [
//             [1, 2, 3, 4, 2, 3, 5],
//             [1, 1, 2, 2, 3, 3, 4, 4, 5],
//             [1, 2, 3, 4, 5],
//             []
//           ],
//           "outputs": [
//             5,
//             5,
//             5,
//             0
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n\nint removeDuplicates(int *nums, int numsSize) {\n    // Your logic goes here\n}\n",
//           "python": "def removeDuplicates(nums):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction removeDuplicates(nums) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nint removeDuplicates(vector<int>& nums) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    int nums[] = {1, 2, 3, 4, 2, 3, 5};\n    int n = sizeof(nums) / sizeof(nums[0]);\n    int result = removeDuplicates(nums, n);\n    printf(\"Unique elements: %d\\n\", result);\n    for (int i = 0; i < result; i++) {\n        printf(\"%d \", nums[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    cout << \"Enter the array elements: \";\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    int result = removeDuplicates(nums);\n    cout << \"Unique elements: \" << result << endl;\n    cout << \"The array after removing duplicates: \";\n    for (int i = 0; i < result; i++) {\n        cout << nums[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
//           "python_call": "nums = list(map(int, input().split()))\nresult = removeDuplicates(nums)\nprint(f\"Unique elements: {result}\")\nprint(*nums[:result])",
//           "javascript_call": "const readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.question('Enter the array: ', (input) => {\n    const nums = input.split(' ').map(Number);\n    const result = removeDuplicates(nums);\n    console.log(`Unique elements: ${result}`);\n    console.log(nums.slice(0, result).join(' '));\n    rl.close();\n});"
//         },
//         "sample code cpp": "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nint removeDuplicates(vector<int>& nums) {\n    if (nums.size() <= 1) {\n        return nums.size();\n    }\n    int j = 0;\n    unordered_set<int> seen;\n    for (int i = 0; i < nums.size(); i++) {\n        if (seen.find(nums[i]) == seen.end()) {\n            seen.insert(nums[i]);\n            nums[j++] = nums[i];\n        }\n    }\n    return j;\n}\n\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    cout << \"Enter the array elements: \";\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    int result = removeDuplicates(nums);\n    cout << \"Unique elements: \" << result << endl;\n    cout << \"The array after removing duplicates: \";\n    for (int i = 0; i < result; i++) {\n        cout << nums[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}",
//         "title": "Remove Duplicates from Unsorted Array"
//       },
//       {
//         "problem": "Rotate String",
//         "function description": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s. A shift on s consists of moving the leftmost character of s to the rightmost position.",
//         "sample code c": "#include <stdio.h>\n#include <string.h>\n\nbool rotateString(char *s, char *goal) {\n    int len_s = strlen(s);\n    int len_goal = strlen(goal);\n    if (len_s != len_goal) {\n        return false;\n    }\n    char temp[len_s * 2 + 3];\n    strcpy(temp, s);\n    strcat(temp, s);\n    if (strstr(temp, goal)) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    char s[100], goal[100];\n    scanf(\"%s %s\", s, goal);\n    bool result = rotateString(s, goal);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//         "sample code python": "def rotateString(s, goal):\n    if len(s) != len(goal):\n        return False\n    s_concat = s + s\n    if goal in s_concat:\n        return True\n    return False\n\ns = input()\ngoal = input()\nprint(\"true\" if rotateString(s, goal) else \"false\")",
//         "sample code javascript": "'use strict';\nconst ps = require('prompt-sync');\nconst prompt = ps();\nfunction rotateString(s, goal) {\n    if (s.length !== goal.length) {\n        return false;\n    }\n    const s_concat = s + s;\n    return s_concat.includes(goal);\n}\n\nlet s = prompt();\nlet goal = prompt();\nlet result = rotateString(s, goal);\nconsole.log(result ? \"true\" : \"false\");",
//         "test cases": {
//           "inputs": [
//             ["abcde", "cdeab"],
//             ["abcde", "abced"],
//             ["", ""],
//             ["abc", "cab"],
//             ["abc", "bca"]
//           ],
//           "outputs": [
//             "true",
//             "false",
//             "true",
//             "true",
//             "true"
//           ]
//         },
//         "skeletons": {
//           "c": "#include <stdio.h>\n#include <string.h>\n\nbool rotateString(char *s, char *goal) {\n    // Your logic goes here\n}\n",
//           "python": "def rotateString(s, goal):\n    # Remove the pass and write your function logic here\n    pass",
//           "javascript": "'use strict';\nfunction rotateString(s, goal) {\n    // Your logic goes here\n}",
//           "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool rotateString(string s, string goal) {\n    // Your code will go here\n}",
//           "c_call": "#include <stdio.h>\nint main() {\n    char s[100], goal[100];\n    scanf(\"%s %s\", s, goal);\n    bool result = rotateString(s, goal);\n    printf(\"%s\\n\", result ? \"true\" : \"false\");\n    return 0;\n}",
//           "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s, goal;\n    cin >> s >> goal;\n    bool result = rotateString(s, goal);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//           "python_call": "s = input()\ngoal = input()\nprint(\"true\" if rotateString(s, goal) else \"false\")",
//           "javascript_call": "const ps = require('prompt-sync');\nconst prompt = ps();\nlet s = prompt();\nlet goal = prompt();\nlet result = rotateString(s, goal);\nconsole.log(result ? \"true\" : \"false\");"
//         },
//         "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool rotateString(string s, string goal) {\n    if (s.length() != goal.length()) {\n        return false;\n    }\n    string s_concat = s + s;\n    return s_concat.find(goal) != string::npos;\n}\n\nint main() {\n    string s, goal;\n    cin >> s >> goal;\n    bool result = rotateString(s, goal);\n    cout << (result ? \"true\" : \"false\") << endl;\n    return 0;\n}",
//         "title": "Rotate String"
//       }
    

// ]
[
  {
    "problem": "Add Binary",
    "function description": "Given two binary strings a and b, return their sum as a binary string.",
    "sample code c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* addBinary(char* a, char* b) {\n    int len_a = strlen(a);\n    int len_b = strlen(b);\n    int max_len = (len_a > len_b) ? len_a : len_b;\n    int carry = 0;\n    char* result = (char*)malloc((max_len + 2) * sizeof(char));\n    int idx = max_len + 1;\n    result[idx--] = '\\0';\n\n    len_a--;\n    len_b--;\n\n    while (len_a >= 0 || len_b >= 0) {\n        int sum = carry;\n        if (len_a >= 0) {\n            sum += a[len_a--] - '0';\n        }\n        if (len_b >= 0) {\n            sum += b[len_b--] - '0';\n        }\n        result[idx--] = sum % 2 + '0';\n        carry = sum / 2;\n    }\n\n    if (carry == 1) {\n        result[idx] = '1';\n    } else {\n        idx++;\n    }\n\n    return result + idx;\n}\n\nint main() {\n    char a[] = $args_1;\n    char b[] = $args_2;\n    char* result = addBinary(a, b);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
    "sample code python": "def addBinary(a, b):\n    a = list(a)\n    b = list(b)\n    carry = 0\n    result = []\n\n    while a or b or carry:\n        if a:\n            carry += int(a.pop())\n        if b:\n            carry += int(b.pop())\n\n        result.append(str(carry % 2))\n        carry //= 2\n\n    return ''.join(reversed(result))\n\na = $args_1\nb = $args_2\nprint(addBinary(a, b))\n",
    "sample code javascript": "function addBinary(a, b) {\n    let result = '';\n    let carry = 0;\n    let i = a.length - 1;\n    let j = b.length - 1;\n\n    while (i >= 0 || j >= 0 || carry) {\n        const sum = (i >= 0 ? parseInt(a[i--], 2) : 0) + (j >= 0 ? parseInt(b[j--], 2) : 0) + carry;\n        result = (sum % 2) + result;\n        carry = Math.floor(sum / 2);\n    }\n\n    return result;\n}\n\nconst a = $args_1;\nconst b = $args_2;\nconst result = addBinary(a, b);\nconsole.log(result);\n",
    "sample code cpp": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nstring addBinary(string a, string b) {\n    string result;\n    int carry = 0;\n    int i = a.length() - 1;\n    int j = b.length() - 1;\n\n    while (i >= 0 || j >= 0 || carry) {\n        int sum = carry;\n        if (i >= 0) {\n            sum += a[i--] - '0';\n        }\n        if (j >= 0) {\n            sum += b[j--] - '0';\n        }\n        result = to_string(sum % 2) + result;\n        carry = sum / 2;\n    }\n\n    return result;\n}\n\nint main() {\n    string a = $args_1;\n    string b = $args_2;\n    string result = addBinary(a, b);\n    cout << result << endl;\n    return 0;\n}\n",
    "test cases": {
      "inputs": [
        ["11", "1"],
        ["1010", "1011"],
        ["0", "0"],
        ["1111", "1111"]
      ],
      "outputs": [
        "100",
        "10101",
        "0",
        "11110"
      ]
    },
    "skeletons": {
      "c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* addBinary(char* a, char* b) {\n    // Your logic goes here\n}\n",
      "python": "def addBinary(a, b):\n    # Remove the pass and write your function logic here\n    pass",
      "javascript": "'use strict';\nfunction addBinary(a, b) {\n    // Your logic goes here\n}",
      "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring addBinary(string a, string b) {\n    // Your code will go here\n}",
      "c_call": "#include <stdio.h>\nint main() {\n    char a[] = $args_1;\n    char b[] = $args_2;\n    char* result = addBinary(a, b);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
      "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string a = $args_1;\n    string b = $args_2;\n    string result = addBinary(a, b);\n    cout << result << endl;\n    return 0;\n}\n",
      "python_call": "a = $args_1\nb = $args_2\nprint(addBinary(a, b))\n",
      "javascript_call": "const a = $args_1;\nconst b = $args_2;\nconst result = addBinary(a, b);\nconsole.log(result);\n"
    },
    "title": "Add Binary"
   },
   {
    "problem": "Longest Common Prefix",
    "function description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
    "sample code c": "#include <stdio.h>\n#include <string.h>\n\nchar* longestCommonPrefix(char** strs, int strsSize) {\n    if (strsSize == 0) return \"\";\n    if (strsSize == 1) return strs[0];\n\n    int minLen = strlen(strs[0]);\n    for (int i = 1; i < strsSize; i++) {\n        int j = 0;\n        while (strs[i][j] && strs[0][j] && strs[i][j] == strs[0][j]) j++;\n        minLen = (j < minLen) ? j : minLen;\n    }\n\n    char* prefix = (char*)malloc((minLen + 1) * sizeof(char));\n    strncpy(prefix, strs[0], minLen);\n    prefix[minLen] = '\\0';\n    return prefix;\n}\n\nint main() {\n    char* strs[] = $args;\n    int strsSize = sizeof(strs) / sizeof(strs[0]);\n    char* result = longestCommonPrefix(strs, strsSize);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
    "sample code python": "def longestCommonPrefix(strs):\n    if not strs:\n        return \"\"\n\n    prefix = strs[0]\n    for i in range(1, len(strs)):\n        while not strs[i].startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n\n    return prefix\n\nstrs = $args\nprint(longestCommonPrefix(strs))\n",
    "sample code javascript": "function longestCommonPrefix(strs) {\n    if (strs.length === 0) return \"\";\n    if (strs.length === 1) return strs[0];\n\n    let prefix = strs[0];\n\n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === \"\") return \"\";\n        }\n    }\n\n    return prefix;\n}\n\nconst strs = $args;\nconst result = longestCommonPrefix(strs);\nconsole.log(result);\n",
    "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring longestCommonPrefix(vector<string>& strs) {\n    if (strs.empty()) return \"\";\n    if (strs.size() == 1) return strs[0];\n\n    string prefix = strs[0];\n\n    for (int i = 1; i < strs.size(); i++) {\n        while (strs[i].find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty()) return \"\";\n        }\n    }\n\n    return prefix;\n}\n\nint main() {\n    vector<string> strs = $args;\n    string result = longestCommonPrefix(strs);\n    cout << result << endl;\n    return 0;\n}\n",
    "test cases": {
      "inputs": [
        ["flower","flow","flight"],
        ["dog","racecar","car"],
        [""],
        ["a"]
      ],
      "outputs": [
        "fl",
        "",
        "",
        "a"
      ]
    },
    "skeletons": {
      "c": "#include <stdio.h>\n#include <string.h>\n\nchar* longestCommonPrefix(char** strs, int strsSize) {\n    // Your logic goes here\n}\n",
      "python": "def longestCommonPrefix(strs):\n    # Remove the pass and write your function logic here\n    pass",
      "javascript": "'use strict';\nfunction longestCommonPrefix(strs) {\n    // Your logic goes here\n}",
      "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring longestCommonPrefix(vector<string>& strs) {\n    // Your code will go here\n}",
      "c_call": "#include <stdio.h>\nint main() {\n    char* strs[] = $args;\n    int strsSize = sizeof(strs) / sizeof(strs[0]);\n    char* result = longestCommonPrefix(strs, strsSize);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
      "cpp_call": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main() {\n    vector<string> strs = $args;\n    string result = longestCommonPrefix(strs);\n    cout << result << endl;\n    return 0;\n}\n",
      "python_call": "strs = $args\nprint(longestCommonPrefix(strs))\n",
      "javascript_call": "const strs = $args;\nconst result = longestCommonPrefix(strs);\nconsole.log(result);\n"
    },
    "title": "Longest Common Prefix"
   }
]