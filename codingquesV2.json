[
    {
        "problem": "Reverse Integer",
        "function description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
        "sample code c": "#include <stdio.h>\n#include <limits.h>\n\nint reverse(int x) {\n    int rev = 0;\n    while (x != 0) {\n        int digit = x % 10;\n        x /= 10;\n        if (rev > INT_MAX / 10 || (rev == INT_MAX / 10 && digit > 7)) return 0;\n        if (rev < INT_MIN / 10 || (rev == INT_MIN / 10 && digit < -8)) return 0;\n        rev = rev * 10 + digit;\n    }\n    return rev;\n}\n\nint main() {\n    int x=$args;\n    int result = reverse(x);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def reverse(x):\n    rev = 0\n    sign = -1 if x < 0 else 1\n    x = abs(x)\n    while x > 0:\n        digit = x % 10\n        x //= 10\n        rev = rev * 10 + digit\n        if rev > (2 ** 31 - 1):\n            return 0\n    return rev * sign\n\nx = int($args)\nprint(reverse(x))\n",
        "sample code javascript": "'function reverse(x) {\n    let rev = 0;\n    let sign = x < 0 ? -1 : 1;\n    x = Math.abs(x);\n    while (x > 0) {\n        const digit = x % 10;\n        x = Math.floor(x / 10);\n        rev = rev * 10 + digit;\n        if (rev > (2 ** 31 - 1)) {\n            return 0;\n        }\n    }\n    return rev * sign;\n}\n\nconst reversedNumber = reverse($args);\nconsole.log(reversedNumber);\n'",
        "test cases": {
          "inputs": [
            123,
            -123,
            120,
            1534236469
          ],
          "outputs": [
            321,
            -321,
            21,
            0
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <limits.h>\n\nint reverse(int x) {\n    // Your logic goes here\n}\n",
          "python": "def reverse(x):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "'use strict';\nfunction reverse(x) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <climits>\nusing namespace std;\n\nint reverse(int x) {\n    // Your code will go here\n}",
          "c_call": "#include <stdio.h>\nint main() {\n    int x;\n    scanf(\"%d\", &x);\n    int result = reverse(x);\n    printf(\"%d\n\", result);\n    return 0;\n}",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x=$args;\n    int result = reverse(x);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "x = int($args)\nprint(reverse(x))",
          "javascript_call": "const result = reverse($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\n#include <climits>\nusing namespace std;\n\nint reverse(int x) {\n    int rev = 0;\n    while (x != 0) {\n        int digit = x % 10;\n        x /= 10;\n        if (rev > INT_MAX / 10 || (rev == INT_MAX / 10 && digit > 7)) return 0;\n        if (rev < INT_MIN / 10 || (rev == INT_MIN / 10 && digit < -8)) return 0;\n        rev = rev * 10 + digit;\n    }\n    return rev;\n}\n\nint main() {\n    int x=$args;\n    int result = reverse(x);\n    cout << result << endl;\n    return 0;\n}\n",
        "title": "Reverse Integer"
      },
      {
        "problem": "Roman to Integer",
        "function description": "Given a roman numeral, convert it to an integer.",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n\nint romanToInt(char *s) {\n    int len = strlen(s);\n    int result = 0;\n    for (int i = 0; i < len; i++) {\n        switch (s[i]) {\n            case \"I\":\n                result += (i + 1 < len && (s[i + 1] == \"V\" || s[i + 1] == \"X\")) ? -1 : 1;\n                break;\n            case \"V\":\n                result += 5;\n                break;\n            case \"X\":\n                result += (i + 1 < len && (s[i + 1] == \"L\" || s[i + 1] == \"C\")) ? -10 : 10;\n                break;\n            case \"L\":\n                result += 50;\n                break;\n            case \"C\":\n                result += (i + 1 < len && (s[i + 1] == \"D\" || s[i + 1] == \"M\")) ? -100 : 100;\n                break;\n            case \"D\":\n                result += 500;\n                break;\n            case \"M\":\n                result += 1000;\n                break;\n        }\n    }\n    return result;\n}\n\nint main() {\n    char s[]=$args;\n    int result = romanToInt(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def romanToInt(s):\n    roman_values = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    result = 0\n    for i in range(len(s)):\n        if i + 1 < len(s) and roman_values[s[i]] < roman_values[s[i + 1]]:\n            result -= roman_values[s[i]]\n        else:\n            result += roman_values[s[i]]\n    return result\n\ns = $args\nprint(romanToInt(s))\n",
        "sample code javascript": "function romanToInt(s) {\n    const romanValues = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    };\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        const currentValue = romanValues[s[i]];\n        const nextValue = romanValues[s[i + 1]] || 0;\n        if (currentValue < nextValue) {\n            result -= currentValue;\n        } else {\n            result += currentValue;\n        }\n    }\n    return result;\n}\n\nconst result = romanToInt($args);\nconsole.log(result);\n",
        "sample code cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint romanToInt(string s) {\n    unordered_map<char, int> romanValues {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n    };\n    int result = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int currentValue = romanValues[s[i]];\n        int nextValue = (i + 1 < s.length()) ? romanValues[s[i + 1]] : 0;\n        if (currentValue < nextValue) {\n            result -= currentValue;\n        } else {\n            result += currentValue;\n        }\n    }\n    return result;\n}\n\nint main() {\n    string s=$args;\n    int result = romanToInt(s);\n    cout << result << endl;\n    return 0;\n}\n",
        "test cases": {
          "inputs": [
            "III",
            "IV",
            "IX",
            "LVIII",
            "MCMXCIV"
          ],
          "outputs": [
            3,
            4,
            9,
            58,
            1994
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n\nint romanToInt(char *s) {\n    // Your logic goes here\n}\n",
          "python": "def romanToInt(s):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "'use strict';\nfunction romanToInt(s) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint romanToInt(string s) {\n    // Your code will go here\n}",
          "c_call": "'#include <stdio.h>\nint main() {\n    char s[]=$args;\n    int result = romanToInt(s);\n    printf(\"%d\", result);\n    return 0;\n}\n'",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s=$args;\n    int result = romanToInt(s);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "s = $args\nprint(romanToInt(s))\n",
          "javascript_call": "const result = romanToInt($args);\nconsole.log(result);\n"
        },
        "title": "Roman to Integer"
      },
      {
        "problem": "String to Integer (atoi)",
        "function description": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\n\nThe algorithm for myAtoi(string s) is as follows:\n\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\nReturn the integer as the final result.\nNote:\n\nOnly the space character \" \" is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n",
        "sample code c": "#include <stdio.h>\n#include <limits.h>\n#include <stdbool.h>\n#include <ctype.h>\n#include <string.h>\n\nint myAtoi(char * str) {\n    int sign = 1;\n    int result = 0;\n    int index = 0;\n    int n = strlen(str);\n\n    // Discard whitespace characters\n    while (index < n && str[index] == ' ')\n        index++;\n\n    // Handle sign character\n    if (index < n && str[index] == '+') {\n        sign = 1;\n        index++;\n    } else if (index < n && str[index] == '-') {\n        sign = -1;\n        index++;\n    }\n\n    // Parse the numerical string\n    while (index < n && isdigit(str[index])) {\n        int digit = str[index] - '0';\n\n        // Check for overflow\n        if ((result > INT_MAX / 10) || (result == INT_MAX / 10 && digit > INT_MAX % 10)) {\n            return (sign == 1) ? INT_MAX : INT_MIN;\n        }\n\n        result = result * 10 + digit;\n        index++;\n    }\n\n    return sign * result;\n}\n\nint main() {\n    char s[] = $args;\n    int result = myAtoi(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def myAtoi(s):\n    sign = 1\n    result = 0\n    index = 0\n    n = len(s)\n\n    # Discard whitespace characters\n    while index < n and s[index] == ' ':\n        index += 1\n\n    # Handle sign character\n    if index < n and s[index] == '+':\n        sign = 1\n        index += 1\n    elif index < n and s[index] == '-':\n        sign = -1\n        index += 1\n\n    # Parse the numerical string\n    while index < n and s[index].isdigit():\n        digit = int(s[index])\n\n        # Check for overflow\n        if result > (2 ** 31 - 1) // 10 or (result == (2 ** 31 - 1) // 10 and digit > 7):\n            return 2 ** 31 - 1 if sign == 1 else -2 ** 31\n\n        result = result * 10 + digit\n        index += 1\n\n    return sign * result\n\ns = $args\nprint(myAtoi(s))\n",
        "sample code javascript": "function myAtoi(s) {\n    let sign = 1;\n    let result = 0;\n    let index = 0;\n    const n = s.length;\n\n    // Discard whitespace characters\n    while (index < n && s[index] === ' ') {\n        index++;\n    }\n\n    // Handle sign character\n    if (index < n && s[index] === '+') {\n        sign = 1;\n        index++;\n    } else if (index < n && s[index] === '-') {\n        sign = -1;\n        index++;\n    }\n\n    // Parse the numerical string\n    while (index < n && /\\d/.test(s[index])) {\n        const digit = parseInt(s[index], 10);\n\n        // Check for overflow\n        if (result > (2 ** 31 - 1) / 10 || (result === (2 ** 31 - 1) / 10 && digit > 7)) {\n            return sign === 1 ? 2 ** 31 - 1 : -(2 ** 31);\n        }\n\n        result = result * 10 + digit;\n        index++;\n    }\n\n    return sign * result;\n}\n\nconst result = myAtoi($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            "42",
            "   -42",
            "4193 with words",
            "words and 987",
            "-91283472332"
          ],
          "outputs": [
            42,
            -42,
            4193,
            0,
            -2147483648
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <limits.h>\n#include <stdbool.h>\n\nint myAtoi(char *str) {\n    // Your logic goes here\n}\n",
          "python": "def myAtoi(s):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "'use strict';\nfunction myAtoi(s) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <climits>\n#include <cctype>\nusing namespace std;\n\nint myAtoi(string s) {\n    // Your code will go here\n}",
          "c_call": "#include <stdio.h>\nint main() {\n    char s[]=$args;\n    int result = myAtoi(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s=$args;\n    int result = myAtoi(s);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "s = $args\nprint(myAtoi(s))\n", 
          "javascript_call": "const result = myAtoi($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\n#include <climits>\n#include <cctype>\nusing namespace std;\n\nint myAtoi(string s) {\n    int sign = 1;\n    int result = 0;\n    int index = 0;\n    int n = s.length();\n\n    // Discard whitespace characters\n    while (index < n && s[index] == ' ') {\n        index++;\n    }\n\n    // Handle sign character\n    if (index < n && s[index] == '+') {\n        sign = 1;\n        index++;\n    } else if (index < n && s[index] == '-') {\n        sign = -1;\n        index++;\n    }\n\n    // Parse the numerical string\n    while (index < n && isdigit(s[index])) {\n        int digit = s[index] - '0';\n\n        // Check for overflow\n        if (result > INT_MAX / 10 || (result == INT_MAX / 10 && digit > INT_MAX % 10)) {\n            return sign == 1 ? INT_MAX : INT_MIN;\n        }\n\n        result = result * 10 + digit;\n        index++;\n    }\n\n    return sign * result;\n}\n\nint main() {\n    string s = $args;\n    int result = myAtoi(s);\n    cout << result << endl;\n    return 0;\n}\n",
        "title": "String to Integer (atoi)"
       },
       {
        "problem": "Integer to Roman",
        "function description": "Given an integer, convert it to a roman numeral.",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar *intToRoman(int num) {\n    char *result = (char *)malloc(sizeof(char) * 16);\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char *symbols[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int i = 0;\n    result[0] = '\\0';\n    while (num > 0) {\n        int count = num / values[i];\n        num %= values[i];\n        for (int j = 0; j < count; j++) {\n            strcat(result, symbols[i]);\n        }\n        i++;\n    }\n    return result;\n}\n\nint main() {\n    int num = $args;\n    char *result = intToRoman(num);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}",
        "sample code python": "def intToRoman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = \"\"\n    for i in range(len(values)):\n        count = num // values[i]\n        result += symbols[i] * count\n        num -= values[i] * count\n    return result\n\nnum = int($args)\nprint(intToRoman(num));\n",
        "sample code javascript": "function intToRoman(num) {\\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\\n    const symbols = [\\\"M\\\", \\\"CM\\\", \\\"D\\\", \\\"CD\\\", \\\"C\\\", \\\"XC\\\", \\\"L\\\", \\\"XL\\\", \\\"X\\\", \\\"IX\\\", \\\"V\\\", \\\"IV\\\", \\\"I\\\"];\\n    let result = '';\\n    for (let i = 0; i < values.length; i++) {\\n        const count = Math.floor(num / values[i]);\\n        num -= values[i] * count;\\n        result += symbols[i].repeat(count);\\n    }\\n    return result;\\n}\\n\\n\\nconst num=$args\\nconst result = intToRoman(num);\\nconsole.log(result);\\n",
        "test cases": {
          "inputs": [
            3,
            4,
            9,
            58,
            1994
          ],
          "outputs": [
            "III",
            "IV",
            "IX",
            "LVIII",
            "MCMXCIV"
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n\nchar *intToRoman(int num) {\n    // Your logic goes here\n}\n",
          "python": "def intToRoman(num):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "'function intToRoman(num) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring intToRoman(int num) {\n    // Your code will go here\n}",
          "c_call": "'#include <stdio.h>\nint main() {\n    int num = $args;\n    char *result = intToRoman(num);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n'",
          "cpp_call": "'#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    int num=$args;\n    string result = intToRoman(num);\n    cout << result << endl;\n    return 0;\n}\n'",
          "python_call": "num = int($args)\nprint(intToRoman(num))\n",
          "javascript_call": "const num=$args\nconst result = intToRoman(num);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring intToRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    string result;\n    for (int i = 0; i < values.size(); i++) {\n        int count = num / values[i];\n        num %= values[i];\n        for (int j = 0; j < count; j++) { \n            result += symbols[i];\n        }\n    }\n    return result;\n}\n\nint main() {\n    int num=$args;\n    string result = intToRoman(num);\n    cout << result << endl;\n    return 0;\n}\n",
        "title": "Integer to Roman"
      },
      {
        "problem": "Valid Parentheses",
        "function description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
        "sample code c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdlib.h>\n\nbool isValid(char * s) {\n    int len = strlen(s);\n    if (len % 2 != 0) return false;\n\n    char *stack = (char *)malloc(sizeof(char) * (len / 2 + 1));\n    int top = -1;\n\n    for (int i = 0; i < len; i++) {\n        if (s[i] == '(' || s[i] == '[' || s[i] == '{') {\n            stack[++top] = s[i];\n        } else {\n            if (top == -1) return false;\n            char c = stack[top--];\n            if ((s[i] == ')' && c != '(') || (s[i] == ']' && c != '[') || (s[i] == '}' && c != '{')) {\n                return false;\n            }\n        }\n    }\n\n    return top == -1;\n}\n\nint main() {\n    char s[] = $args;\n    bool result = isValid(s);\n    printf(\"%s\", result ? \"True\" : \"False\";\n    return 0;\n}\n",
        "sample code python": "def isValid(s):\n    stack = []\n    for char in s:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char != ')':\n                    return False\n            if current_char == '[':\n                if char != ']':\n                    return False\n            if current_char == '{':\n                if char != '}':\n                    return False\n    return len(stack) == 0\n\ns = $args\nprint(str(isValid(s)))\n",
        "sample code javascript": "function isValid(s) {\n    const stack = [];\n    const openingBrackets = ['(', '[', '{'];\n    const closingBrackets = [')', ']', '}'];\n    const bracketMap = { ')': '(', ']': '[', '}': '{' };\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (openingBrackets.includes(char)) {\n            stack.push(char);\n        } else if (closingBrackets.includes(char)) {\n            if (!stack.length || stack.pop() !== bracketMap[char]) {\n                return false;\n            }\n        }\n    }\n\n    return !stack.length;\n}\n\nconst result = isValid($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            "()",
            "()[]{}",
            "(]",
            "([)]",
            "{[]}"
          ],
          "outputs": [
            "true",
            "true",
            "false",
            "false",
            "true"
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdlib.h>\n\nbool isValid(char *s) {\n    // Your logic goes here\n}\n",
          "python": "def isValid(s):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function isValid(s) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool isValid(string s) {\n    // Your code will go here\n}",
          "c_call": "int main() {\n    char s[] = $args;\n    bool result = isValid(s);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s=$args;\n    bool result = isValid(s);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
          "python_call": "s = $args\nprint(str(isValid(s)))\n",
          "javascript_call": "const result = isValid($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\n#include <string>\n#include <stack>\nusing namespace std;\n\nbool isValid(string s) {\n    stack<char> st;\n    for (char c : s) {\n        if (c == '(' || c == '[' || c == '{') {\n            st.push(c);\n        } else {\n            if (st.empty()) return false;\n            char top = st.top();\n            st.pop();\n            if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                return false;\n            }\n        }\n    }\n    return st.empty();\n}\n\nint main() {\n    string s = $args;\n    bool result = isValid(s);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
        "title": "Valid Parentheses"
       },
       {
        "problem": "Count and Say",
        "function description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\ncount_and_say(1) = \"1\"\ncount_and_say(n) = the way you would 'read' the digits of count_and_say(n-1), which is then converted into a different string.\n\nGiven a positive integer n, return the nth term of the count-and-say sequence.",
        "sample code c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* countAndSay(int n) {\n    if (n == 1) {\n        char* result = (char*)malloc(2 * sizeof(char));\n        strcpy(result, \"1\");\n        return result;\n    }\n\n    char* prev = countAndSay(n - 1);\n    int len = strlen(prev);\n    int count = 1;\n    int result_len = 0;\n\n    for (int i = 1; i < len; i++) {\n        if (prev[i] == prev[i - 1]) {\n            count++;\n        } else {\n            result_len += 1 + (count >= 10);\n            count = 1;\n        }\n    }\n    result_len += 1 + (count >= 10);\n\n    char* result = (char*)malloc((result_len + 1) * sizeof(char));\n    int idx = 0;\n    count = 1;\n\n    for (int i = 1; i <= len; i++) {\n        if (i == len || prev[i] != prev[i - 1]) {\n            result[idx++] = '0' + count;\n            if (count > 9) {\n                result[idx++] = '0' + count / 10;\n            }\n            result[idx++] = prev[i - 1];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    result[idx] = '\\0';\n\n    free(prev);\n    return result;\n}\n\nint main() {\n    int n = $args;\n    char* result = countAndSay(n);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
        "sample code python": "def countAndSay(n):\n    if n == 1:\n        return \"1\"\n\n    prev = countAndSay(n - 1)\n    result = \"\"\n    count = 1\n\n    for i in range(len(prev)):\n        if i == len(prev) - 1 or prev[i] != prev[i + 1]:\n            result += str(count) + prev[i]\n            count = 1\n        else:\n            count += 1\n\n    return result\n\nn = int($args)\nprint(countAndSay(n))\n",
        "sample code javascript": "function countAndSay(n) {\n    if (n === 1) {\n        return \"1\";\n    }\n\n    const prev = countAndSay(n - 1);\n    let result = \"\";\n    let count = 1;\n\n    for (let i = 0; i < prev.length; i++) {\n        if (i === prev.length - 1 || prev[i] !== prev[i + 1]) {\n            result += count + prev[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n\n    return result;\n}\n\nconst n = $args;\nconst result = countAndSay(n);\nconsole.log(result);\n",
        "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring countAndSay(int n) {\n    if (n == 1) {\n        return \"1\";\n    }\n\n    string prev = countAndSay(n - 1);\n    string result = \"\";\n    int count = 1;\n\n    for (int i = 0; i < prev.length(); i++) {\n        if (i == prev.length() - 1 || prev[i] != prev[i + 1]) {\n            result += to_string(count) + prev[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    int n = $args;\n    string result = countAndSay(n);\n    cout << result << endl;\n    return 0;\n}\n",
        "test cases": {
          "inputs": [1, 4, 5],
          "outputs": ["1", "1211", "111221"]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* countAndSay(int n) {\n    // Your logic goes here\n}\n",
          "python": "def countAndSay(n):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "'use strict';\nfunction countAndSay(n) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring countAndSay(int n) {\n    // Your code will go here\n}",
          "c_call": "#include <stdio.h>\nint main() {\n    int n = $args;\n    char* result = countAndSay(n);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    string result = countAndSay(n);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "n = int($args)\nprint(countAndSay(n))\n",
          "javascript_call": "const n = $args;\nconst result = countAndSay(n);\nconsole.log(result);\n"
        },
        "title": "Count and Say"
       },
       {
        "problem": "Reverse Words in a String",
        "function description": "Given an input string s, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space. Return a string of the words in reverse order concatenated by a single space. Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid reverseString(char* s, int start, int end) {\n    while (start < end) {\n        char temp = s[start];\n        s[start++] = s[end];\n        s[end--] = temp;\n    }\n}\n\nchar* reverseWords(char* s) {\n    int len = strlen(s);\n    reverseString(s, 0, len - 1);\n\n    int start = 0, end = 0;\n    while (end <= len) {\n        if (end == len || s[end] == ' ') {\n            reverseString(s, start, end - 1);\n            start = end + 1;\n        }\n        end++;\n    }\n\n    return s;\n}\n\n\nint main() {\n    char s[] = $args;\n    printf(\"%s\", reverseWords(s));\n    return 0;\n}\n",
        "sample code python": "def reverseWords(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)\n    return ' '.join(reversed_words)\n\ns = $args\nprint(reverseWords(s))\n",
        "sample code javascript": "function reverseWords(s) {\n    const words = s.trim().split(/\\s+/);\n    return words.reverse().join(' ');\n}\n\nconst result = reverseWords($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            "the sky is blue",
            "  hello world  ",
            "a good   example"
          ],
          "outputs": [
            "blue is sky the",
            "world hello",
            "example good a"
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n\nchar* reverseWords(char* s) {\n    // Your logic goes here\n}\n",
          "python": "def reverseWords(s):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function reverseWords(s) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring reverseWords(string s) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char s[] = $args;\n    printf(\"%s\", reverseWords(s));\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string s = $args;\n    cout << reverseWords(s) << endl;\n    return 0;\n}\n",
          "python_call": "s = $args\nprint(reverseWords(s))\n",
          "javascript_call": "const result = reverseWords($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nvoid reverseString(string& s, int start, int end) {\n    while (start < end) {\n        char temp = s[start];\n        s[start++] = s[end];\n        s[end--] = temp;\n    }\n}\n\nstring reverseWords(string s) {\n    int len = s.length();\n    reverseString(s, 0, len - 1);\n\n    int start = 0, end = 0;\n    while (end <= len) {\n        if (end == len || s[end] == ' ') {\n            reverseString(s, start, end - 1);\n            start = end + 1;\n        }\n        end++;\n    }\n\n    return s;\n}\n\nint main() {\n    string s = $args;\n    cout << reverseWords(s) << endl;\n    return 0;\n}\n",
        "title": "Reverse Words in a String"
       },

       {
        "problem": "Valid Perfect Square",
        "function description": "Given a positive integer num, write a function which returns True if num is a perfect square else False. Do not use any built-in library functions such as sqrt.",
        "sample code c": "#include <stdbool.h>\n\nbool isPerfectSquare(int num) {\n    long long left = 1, right = num;\n    while (left <= right) {\n        long long mid = left + (right - left) / 2;\n        long long square = mid * mid;\n        if (square == num) {\n            return true;\n        } else if (square < num) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int num = $args;\n    bool result = isPerfectSquare(num);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
        "sample code python": "def isPerfectSquare(num):\n    left = 1\n    right = num\n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\nnum = $args\nprint(str(isPerfectSquare(num)))\n",
        "sample code javascript": "function isPerfectSquare(num) {\n    let left = 1, right = num;\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        const square = mid * mid;\n        if (square === num) {\n            return true;\n        } else if (square < num) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return false;\n}\n\nconst result = isPerfectSquare($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            16,
            14,
            1,
            0
          ],
          "outputs": [
            "true",
            "false",
            "true",
            "true"
          ]
        },
        "skeletons": {
          "c": "#include <stdbool.h>\n\nbool isPerfectSquare(int num) {\n    // Your logic goes here\n}\n",
          "python": "def isPerfectSquare(num):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function isPerfectSquare(num) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n\nbool isPerfectSquare(int num) {\n    // Your logic goes here\n}",
          "c_call": "#include <stdbool.h>\n\nint main() {\n    int num = $args;\n    bool result = isPerfectSquare(num);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n\nint main() {\n    int num = $args;\n    bool result = isPerfectSquare(num);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}\n",
          "python_call": "num = $args\nprint(str(isPerfectSquare(num)))\n",
          "javascript_call": "const result = isPerfectSquare($args);\nconsole.log(result);\n"
        },
        "sample code cpp":"#include <stdbool.h>\n#include <stdio.h>\n\nbool isPerfectSquare(int num) {\n    long long left = 1, right = num;\n    while (left <= right) {\n        long long mid = left + (right - left) / 2;\n        long long square = mid * mid;\n        if (square == num) {\n            return true;\n        } else if (square < num) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return false;\n}\n\nint main() {\n    int num=$args;\n    bool result = isPerfectSquare(num);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n\n",
        "title": "Valid Perfect Square"
       },
       {
        "problem": "Factorial Trailing Zeroes",
        "function description": "Given an integer n, return the number of trailing zeroes in n!. \nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\n",
        "sample code c": "#include <stdio.h>\n\nint trailingZeroes(int n) {\n    int count = 0;\n    for (int i = 5; n / i >= 1; i *= 5) {\n        count += n / i;\n    }\n    return count;\n}\n\nint main() {\n    int n = $args;\n    int result = trailingZeroes(n);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def trailingZeroes(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count\n\nn = $args\nprint(trailingZeroes(n))\n",
        "sample code javascript": "function trailingZeroes(n) {\n    let count = 0;\n    while (n >= 5) {\n        n = Math.floor(n / 5);\n        count += n;\n    }\n    return count;\n}\n\nconst result = trailingZeroes($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            3,
            5,
            25
          ],
          "outputs": [
            0,
            1,
            6
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n\nint trailingZeroes(int n) {\n    // Your logic goes here\n}\n",
          "python": "def trailingZeroes(n):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function trailingZeroes(n) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\nusing namespace std;\n\nint trailingZeroes(int n) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n\nint main() {\n    int n = $args;\n    int result = trailingZeroes(n);\n    printf(\"%d\", result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = trailingZeroes(n);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "n = $args\nprint(trailingZeroes(n))\n",
          "javascript_call": "const result = trailingZeroes($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\nusing namespace std;\n\nint trailingZeroes(int n) {\n    int count = 0;\n    for (int i = 5; n / i >= 1; i *= 5) {\n        count += n / i;\n    }\n    return count;\n}\n\nint main() {\n    int n = $args;\n    int result = trailingZeroes(n);\n    cout << result << endl;\n    return 0;\n}\n",
        "title": "Factorial Trailing Zeroes"
       },
       {
        "problem": "Power of Four",
        "function description": "Given an integer n, return true if it is a power of four. Otherwise, return false. Do not use any built-in library function such as pow.",
        "sample code c": "\n#include <stdbool.h>\n# include <stdio.h>\n\nbool isPowerOfFour(int n) {\n    if (n < 1) return false;\n    while (n % 4 == 0) n /= 4;\n    return n == 1;\n}\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfFour(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
        "sample code python": "def isPowerOfFour(n):\n    if n <= 0:\n        return False\n    while n % 4 == 0:\n        n //= 4\n    return n == 1\n\nn = $args\nprint(str(isPowerOfFour(n)))\n",
        "sample code javascript": "function isPowerOfFour(n) {\n    if (n <= 0) return false;\n    while (n % 4 === 0) n /= 4;\n    return n === 1;\n}\n\nconst result = isPowerOfFour($args);\nconsole.log(result);\n",
        "test cases": {
          "inputs": [
            16,
            5,
            1
          ],
          "outputs": [
            "true",
            "false",
            "true"
          ]
        },
        "skeletons": {
          "c": "#include <stdbool.h>\n#include <stdio.h>\n\nbool isPowerOfFour(int n) {\n    // Your logic goes here\n}\n",
          "python": "def isPowerOfFour(n):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function isPowerOfFour(n) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\nusing namespace std;\n\nbool isPowerOfFour(int n) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdbool.h>\n#include <stdio.h>\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfFour(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfFour(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
          "python_call": "n = $args\nprint(str(isPowerOfFour(n)))\n",
          "javascript_call": "const result = isPowerOfFour($args);\nconsole.log(result);\n"
        },
        "sample code cpp": "#include <iostream>\nusing namespace std;\n\nbool isPowerOfFour(int n) {\n    if (n < 1) return false;\n    while (n % 4 == 0) n /= 4;\n    return n == 1;\n}\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfFour(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
        "title": "Power of Four"
       },
       {
        "problem": "Power of Three",
        "function description": "Given an integer n, return true if it is a power of three. Otherwise, return false. Do not use any built-in library function such as pow.",
        "sample code c": "#include <stdbool.h>\n#include <stdio.h>\nbool isPowerOfThree(int n) {\n    if (n <= 0) return false;\n    while (n % 3 == 0) n /= 3;\n    return n == 1;\n}\n\nint main() {\n    int n = 9;\n    bool result = isPowerOfThree(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n\n",
        "sample code python": "def isPowerOfThree(n):\n    if n <= 0:\n        return False\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\n\nn = $args\nprint(str(isPowerOfThree(n)))\n",
        "sample code javascript": "function isPowerOfThree(n) {\n    if (n <= 0) return false;\n    while (n % 3 === 0) n /= 3;\n    return n === 1;\n}\n\nconst result = isPowerOfThree($args);\nconsole.log(result);\n",
        "sample code cpp": "#include <iostream>\nusing namespace std;\n\nbool isPowerOfThree(int n) {\n    if (n <= 0) return false;\n    while (n % 3 == 0) n /= 3;\n    return n == 1;\n}\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfThree(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
        "test cases": {
          "inputs": [
            27,
            9,
            45
          ],
          "outputs": [
            "true",
            "true",
            "false"
          ]
        },
        "skeletons": {
          "c": "#include <stdbool.h>\n#include <stdio.h>\n\nbool isPowerOfThree(int n) {\n    // Your logic goes here\n}\n",
          "python": "def isPowerOfThree(n):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function isPowerOfThree(n) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\nusing namespace std;\n\nbool isPowerOfThree(int n) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdbool.h>\n#include <stdio.h>\nint main() {\n    int n = $args;\n    bool result = isPowerOfThree(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isPowerOfThree(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
          "python_call": "n = $args\nprint(str(isPowerOfThree(n)))\n",
          "javascript_call": "const result = isPowerOfThree($args);\nconsole.log(result);\n"
        },
        "title": "Power of Three"
       },
       {
        "problem": "Number of 1 Bits",
        "function description": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).",
        "sample code c": "#include <stdio.h>\n#include <stdint.h>\n\nint hammingWeight(uint32_t n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\nint main() {\n    uint32_t n = 128;\n    int result = hammingWeight(n);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def hammingWeight(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nn = $args\nprint(hammingWeight(n))\n",
        "sample code javascript": "function hammingWeight(n) {\n    let count = 0;\n    while (n !== 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\nconst result = hammingWeight($args);\nconsole.log(result);\n",
        "sample code cpp": "#include <iostream>\nusing namespace std;\n\nint hammingWeight(uint32_t n) {\n    int count = 0;\n    while (n != 0) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\nint main() {\n    uint32_t n = $args;\n    int result = hammingWeight(n);\n    cout << result << endl;\n    return 0;\n}\n",
        "test cases": {
          "inputs": [
            11,
            128,
            4294967293
          ],
          "outputs": [
            3,
            1,
            31
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <stdint.h>\n\nint hammingWeight(uint32_t n) {\n    // Your logic goes here\n}\n",
          "python": "def hammingWeight(n):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function hammingWeight(n) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\nusing namespace std;\n\nint hammingWeight(uint32_t n) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n#include <stdint.h>\n\nint main() {\n    uint32_t n = $args;\n    int result = hammingWeight(n);\n    printf(\"%d\", result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    uint32_t n = $args;\n    int result = hammingWeight(n);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "n = $args\nprint(hammingWeight(n))\n",
          "javascript_call": "const result = hammingWeight($args);\nconsole.log(result);\n"
        },
        "title": "Number of 1 Bits"
       },
       {
        "problem": "Excel Sheet Column Number",
        "function description": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint titleToNumber(char* columnTitle) {\n    int len = strlen(columnTitle);\n    int result = 0;\n    for (int i = 0; i < len; i++) {\n        result = result * 26 + (columnTitle[i] - 'A' + 1);\n    }\n    return result;\n}\n\nint main() {\n    char columnTitle[] = $args;\n    int result = titleToNumber(columnTitle);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "sample code python": "def titleToNumber(columnTitle):\n    result = 0\n    for char in columnTitle:\n        result = result * 26 + (ord(char) - ord('A') + 1)\n    return result\n\ncolumnTitle = $args\nprint(titleToNumber(columnTitle))\n",
        "sample code javascript": "function titleToNumber(columnTitle) {\n    let result = 0;\n    for (let i = 0; i < columnTitle.length; i++) {\n        result = result * 26 + (columnTitle.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\n    }\n    return result;\n}\n\nconst result = titleToNumber($args);\nconsole.log(result);\n",
        "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint titleToNumber(string columnTitle) {\n    int result = 0;\n    for (char c : columnTitle) {\n        result = result * 26 + (c - 'A' + 1);\n    }\n    return result;\n}\n\nint main() {\n    string columnTitle = $args;\n    int result = titleToNumber(columnTitle);\n    cout << result << endl;\n    return 0;\n}\n",
        "test cases": {
          "inputs": [
            "A",
            "AB",
            "ZY",
            "FXSHRXW"
          ],
          "outputs": [
            1,
            28,
            701,
            2147483647
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint titleToNumber(char* columnTitle) {\n    // Your logic goes here\n}\n",
          "python": "def titleToNumber(columnTitle):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function titleToNumber(columnTitle) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint titleToNumber(string columnTitle) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint main() {\n    char columnTitle[] = $args;\n    int result = titleToNumber(columnTitle);\n    printf(\"%d\", result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string columnTitle = $args;\n    int result = titleToNumber(columnTitle);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "columnTitle = $args\nprint(titleToNumber(columnTitle))\n",
          "javascript_call": "const result = titleToNumber($args);\nconsole.log(result);\n"
        },
        "title": "Excel Sheet Column Number"
       },
       {
        "problem": "Excel Sheet Column Title",
        "function description": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet. For example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* convertToTitle(int columnNumber) {\n    char* result = (char*)malloc(sizeof(char) * 8);\n    int index = 0;\n    while (columnNumber > 0) {\n        columnNumber--;\n        result[index++] = 'A' + columnNumber % 26;\n        columnNumber /= 26;\n    }\n    result[index] = '\\0';\n    int i = 0, j = index - 1;\n    while (i < j) {\n        char temp = result[i];\n        result[i] = result[j];\n        result[j] = temp;\n        i++;\n        j--;\n    }\n    return result;\n}\n\nint main() {\n    int columnNumber = $args;\n    char* result = convertToTitle(columnNumber);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
        "sample code python": "def convertToTitle(columnNumber):\n    result = []\n    while columnNumber > 0:\n        columnNumber -= 1\n        result.append(chr(columnNumber % 26 + ord('A')))\n        columnNumber //= 26\n    return ''.join(reversed(result))\n\ncolumnNumber = $args\nprint(convertToTitle(columnNumber))\n",
        "sample code javascript": "function convertToTitle(columnNumber) {\n    let result = '';\n    while (columnNumber > 0) {\n        columnNumber--;\n        result = String.fromCharCode(columnNumber % 26 + 'A'.charCodeAt(0)) + result;\n        columnNumber = Math.floor(columnNumber / 26);\n    }\n    return result;\n}\n\nconst result = convertToTitle($args);\nconsole.log(result);\n",
        "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring convertToTitle(int columnNumber) {\n    string result;\n    while (columnNumber > 0) {\n        columnNumber--;\n        result = (char)('A' + columnNumber % 26) + result;\n        columnNumber /= 26;\n    }\n    return result;\n}\n\nint main() {\n    int columnNumber = $args;\n    string result = convertToTitle(columnNumber);\n    cout << result << endl;\n    return 0;\n}\n",
        "test cases": {
          "inputs": [
            1,
            26,
            27,
            701,
            2147483647
          ],
          "outputs": [
            "A",
            "Z",
            "AA",
            "ZY",
            "FXSHRXW"
          ]
        },
        "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* convertToTitle(int columnNumber) {\n    // Your logic goes here\n}\n",
          "python": "def convertToTitle(columnNumber):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "function convertToTitle(columnNumber) {\n    // Your logic goes here\n}",
          "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nstring convertToTitle(int columnNumber) {\n    // Your logic goes here\n}\n",
          "c_call": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main() {\n    int columnNumber = $args;\n    char* result = convertToTitle(columnNumber);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    int columnNumber = $args;\n    string result = convertToTitle(columnNumber);\n    cout << result << endl;\n    return 0;\n}\n",
          "python_call": "columnNumber = $args\nprint(convertToTitle(columnNumber))\n",
          "javascript_call": "const result = convertToTitle($args);\nconsole.log(result);\n"
        },
        "title": "Excel Sheet Column Title"
    },
    {
      "problem": "Happy Number",
      "function description": "Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.",
      "sample code c": "#include <stdbool.h>\n#include <stdio.h>\nbool isHappy(int n) {\n    int slow = n, fast = n;\n    do {\n        slow = squareSum(slow);\n        fast = squareSum(squareSum(fast));\n    } while (slow != fast);\n    return slow == 1;\n}\n\nint squareSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        sum += digit * digit;\n        n /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int n = $args;\n    bool result = isHappy(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
      "sample code python": "def isHappy(n):\n    def squareSum(num):\n        total = 0\n        while num:\n            digit = num % 10\n            total += digit ** 2\n            num //= 10\n        return total\n    \n    slow = fast = n\n    while True:\n        slow = squareSum(slow)\n        fast = squareSum(squareSum(fast))\n        if slow == fast:\n            break\n    return slow == 1\n\nn = $args\nprint(str(isHappy(n)))\n",
      "sample code javascript": "function isHappy(n) {\n    const squareSum = (num) => {\n        let sum = 0;\n        while (num > 0) {\n            const digit = num % 10;\n            sum += digit ** 2;\n            num = Math.floor(num / 10);\n        }\n        return sum;\n    };\n\n    let slow = n, fast = n;\n    do {\n        slow = squareSum(slow);\n        fast = squareSum(squareSum(fast));\n    } while (slow !== fast);\n    return slow === 1;\n}\n\nconst result = isHappy($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          19,
          2,
          3
        ],
        "outputs": [
          "true",
          "false",
          "true"
        ]
      },
      "skeletons": {
        "c": "#include <stdbool.h>\n#include <stdio.h>\nbool isHappy(int n) {\n    // Your logic goes here\n}\n\nint squareSum(int n) {\n    // Your logic goes here\n}\n",
        "python": "def isHappy(n):\n    # Remove the pass and write your function logic here\n    pass\n\ndef squareSum(num):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function isHappy(n) {\n    // Your logic goes here\n}\n\nconst squareSum = (num) => {\n    // Your logic goes here\n};",
        "cpp": "#include <iostream>\nusing namespace std;\n\nint squareSum(int n);\n\nbool isHappy(int n) {\n    // Your logic goes here\n}\n\nint squareSum(int n) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdbool.h>\n#include <stdio.h>\nint main() {\n    int n = $args;\n    bool result = isHappy(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isHappy(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
        "python_call": "n = $args\nprint(str(isHappy(n)))\n",
        "javascript_call": "const result = isHappy($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\nusing namespace std;\n\nint squareSum(int n);\n\nbool isHappy(int n) {\n    int slow = n, fast = n;\n    do {\n        slow = squareSum(slow);\n        fast = squareSum(squareSum(fast));\n    } while (slow != fast);\n    return slow == 1;\n}\n\nint squareSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        sum += digit * digit;\n        n /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int n = 2;\n    bool result = isHappy(n);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
      "title": "Happy Number"
     },
     {
      "problem": "Reverse Bits",
      "function description": "Reverse bits of a given 32 bits unsigned integer. Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. In Java, the compiler represents the signed integers using 2's complement notation.",
      "sample code c": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nuint32_t reverseBits(uint32_t n) {\n    uint32_t result = 0;\n    for (int i = 0; i < 32; i++) {\n        result <<= 1;\n        result |= (n & 1);\n        n >>= 1;\n    }\n    return result;\n}\n\nchar* parseBinaryString(const char* binaryString) {\n    uint32_t n = 0;\n    for (int i = 0; i < 32; i++) {\n        n <<= 1;\n        n |= (binaryString[i] - '0');\n    }\n    uint32_t reversed = reverseBits(n);\n    static char outputBinaryString[33];\n    for (int i = 0; i < 32; i++) {\n        outputBinaryString[i] = ((reversed >> (31 - i)) & 1) + '0';\n    }\n    outputBinaryString[32] = ' ';\n    return outputBinaryString;\n}\n\nint main() {\n    const char* inputBinaryString = $args;\n    char* outputBinaryString = parseBinaryString(inputBinaryString);\n    uint32_t outputDecimal = strtoul(outputBinaryString, NULL, 2);\n    printf(\"%u\", outputDecimal);\n\n    return 0;\n}\n",
      "sample code python": "def reverse_bits(n):\n    result = 0\n    for i in range(32):\n        result <<= 1\n        result |= n & 1\n        n >>= 1\n    return result\n\ndef parse_binary_string(binary_string):\n    n = int(binary_string, 2)\n    reversed_n = reverse_bits(n)\n    return format(reversed_n, '032b')\n\ndef main():\n    input_binary_string = $args\n    output_binary_string = parse_binary_string(input_binary_string)\n    output_decimal = int(output_binary_string, 2)\n    print(output_decimal)\n\nif __name__ == \"__main__\":\n    main()\n\n",
      "sample code javascript": "function reverseBits(n) {\n    let result = 0;\n    for (let i = 0; i < 32; i++) {\n        result <<= 1;\n        result |= n & 1;\n        n >>= 1;\n    }\n    return result;\n}\n\nfunction parseBinaryString(binaryString) {\n    const n = parseInt(binaryString, 2);\n    const reversed = reverseBits(n);\n    return reversed.toString(2).padStart(32, '0');\n}\n\nfunction main() {\n    const inputBinaryString = $args;\n    const outputBinaryString = parseBinaryString(inputBinaryString);\n    const outputDecimal = parseInt(outputBinaryString, 2);\n    console.log(outputDecimal);\n}\n\nmain();\n\n",
      "test cases": {
        "inputs": [
          "11111111111111111111111111111101",
          "00000010100101000001111010011100",
          "00000000000000000000000000000000",
          "01010101010101010101010101010101",
          "11111111111111111111111111111111"
        ],
        "outputs": [
          3221225471,
          964176192,
          0,
          2863311530,
          4294967295
        ]
      },
      "skeletons": {
        "c": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nuint32_t reverseBits(uint32_t n){\n        // Your logic goes here\n        }\n\nchar* parseBinaryString(const char* binaryString) {\n    // Your logic goes here\n}\n\n",
        "python": "def reverse_bits(n):\n    # Remove the pass and write your function logic here\n    pass\n\ndef parse_binary_string(binary_string):\n    # Remove the pass and write your function logic here\n    pass\n",
        "javascript": "function reverseBits(n) {\n    // Your logic goes here\n}\n\nfunction parseBinaryString(binaryString) {\n    // Your logic goes here\n}\n",
        "cpp": "#include <iostream>\n#include <bitset>\n\nusing namespace std;\n\nuint32_t reverseBits(uint32_t n) {\n    // Your logic goes here\n}\n\nstring parseBinaryString(const string& binaryString) {\n    // Your logic goes here\n\n}\n",
        "c_call": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\nint main() {\n    const char* inputBinaryString = $args;\n    char* outputBinaryString = parseBinaryString(inputBinaryString);\n    uint32_t outputDecimal = strtoul(outputBinaryString, NULL, 2);\n    printf(\"%u\", outputDecimal);\n\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\n#include <bitset>\n\nusing namespace std;\n\nint main() {\n    string inputBinaryString = $args;\n    string outputBinaryString = parseBinaryString(inputBinaryString);\n    uint32_t outputDecimal = bitset<32>(outputBinaryString).to_ulong();\n    cout << outputDecimal << endl;\n\n    return 0;\n}\n",
        "python_call": "def main():\n    input_binary_string = $args\n    output_binary_string = parse_binary_string(input_binary_string)\n    output_decimal = int(output_binary_string, 2)\n    print(output_decimal)\n\nif __name__ == \"__main__\":\n    main()\n",
        "javascript_call": "function main() {\n    const inputBinaryString = $args;\n    const outputBinaryString = parseBinaryString(inputBinaryString);\n    const outputDecimal = parseInt(outputBinaryString, 2);\n    console.log(outputDecimal);\n}\n\nmain();\n"
      },
      "sample code cpp": "#include <iostream>\n#include <bitset>\n\nusing namespace std;\n\nuint32_t reverseBits(uint32_t n) {\n    uint32_t result = 0;\n    for (int i = 0; i < 32; i++) {\n        result <<= 1;\n        result |= (n & 1);\n        n >>= 1;\n    }\n    return result;\n}\n\nstring parseBinaryString(const string& binaryString) {\n    uint32_t n = bitset<32>(binaryString).to_ulong();\n    uint32_t reversed = reverseBits(n);\n    return bitset<32>(reversed).to_string();\n}\n\nint main() {\n    string inputBinaryString = $args;\n    string outputBinaryString = parseBinaryString(inputBinaryString);\n    uint32_t outputDecimal = bitset<32>(outputBinaryString).to_ulong();\n    cout << outputDecimal << endl;\n\n    return 0;\n}\n",
      "title": "Reverse Bits"
     },
     {
      "problem": "Longest Substring Without Repeating Characters",
      "function description": "Given a string s, find the length of the longest substring without repeating characters.",
      "sample code c": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint lengthOfLongestSubstring(char* s) {\n    int n = strlen(s);\n    int maxLen = 0;\n    int start = 0;\n    int char_map[128] = {0};\n\n    for (int i = 0; i < n; i++) {\n        char c = s[i];\n        if (char_map[c] > start) {\n            start = char_map[c];\n        }\n        char_map[c] = i + 1;\n        maxLen = fmax(maxLen, i - start + 1);\n    }\n\n    return maxLen;\n}\n\nint main() {\n    char s[] = $args;\n    int result = lengthOfLongestSubstring(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
      "sample code python": "def lengthOfLongestSubstring(s):\n    start = 0\n    max_len = 0\n    char_map = {}\n\n    for i, char in enumerate(s):\n        if char in char_map and char_map[char] >= start:\n            start = char_map[char] + 1\n        char_map[char] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ns = $args\nprint(lengthOfLongestSubstring(s))\n",
      "sample code javascript": "function lengthOfLongestSubstring(s) {\n    let start = 0;\n    let maxLen = 0;\n    const charMap = new Map();\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (charMap.has(char) && charMap.get(char) >= start) {\n            start = charMap.get(char) + 1;\n        }\n        charMap.set(char, i);\n        maxLen = Math.max(maxLen, i - start + 1);\n    }\n\n    return maxLen;\n}\n\nconst result = lengthOfLongestSubstring($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          "abcabcbb",
          "bbbbb",
          "pwwkew"
        ],
        "outputs": [
          3,
          1,
          3
        ]
      },
      "skeletons": {
        "c": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint lengthOfLongestSubstring(char* s) {\n    // Your logic goes here\n}\n",
        "python": "def lengthOfLongestSubstring(s):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function lengthOfLongestSubstring(s) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint main() {\n    char s[] = $args;\n    int result = lengthOfLongestSubstring(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = lengthOfLongestSubstring(s);\n    cout << result << endl;\n    return 0;\n}\n",
        "python_call": "s = $args\nprint(lengthOfLongestSubstring(s))\n",
        "javascript_call": "const result = lengthOfLongestSubstring($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint lengthOfLongestSubstring(string s) {\n    int n = s.length();\n    int maxLen = 0;\n    int start = 0;\n    unordered_map<char, int> char_map;\n\n    for (int i = 0; i < n; i++) {\n        char c = s[i];\n        if (char_map.count(c) && char_map[c] >= start) {\n            start = char_map[c] + 1;\n        }\n        char_map[c] = i;\n        maxLen = max(maxLen, i - start + 1);\n    }\n\n    return maxLen;\n}\n\nint main() {\n    string s = $args;\n    int result = lengthOfLongestSubstring(s);\n    cout << result << endl;\n    return 0;\n}\n",
      "title": "Longest Substring Without Repeating Characters"
     },
     {
      "problem": "Detect Capital",
      "function description": "We define the usage of capitals in a word to be right when one of the following cases holds: All letters in this word are capitals, like 'USA'. All letters in this word are not capitals, like 'leetcode'. Only the first letter in this word is capital, like 'Google'. Given a string word, return true if the usage of capitals in it is right.",
      "sample code c": "#include <stdbool.h>\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nbool detectCapitalUse(char* word) {\n    int len = strlen(word);\n    bool allCaps = true, allLower = true;\n\n    for (int i = 0; i < len; i++) {\n        if (isupper(word[i])) {\n            allLower = false;\n        } else {\n            allCaps = false;\n        }\n    }\n\n    return allCaps || allLower || (isupper(word[0]) && !isupper(word[1]));\n}\n\nint main() {\n    char word[] = $args;\n    bool result = detectCapitalUse(word);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
      "sample code python": "def detectCapitalUse(word):\n    return word.isupper() or word.islower() or word.istitle()\n\nword = $args\nprint(str(detectCapitalUse(word)))\n",
      "sample code javascript": "function detectCapitalUse(word) {\n    const allCaps = /^[A-Z]+$/;\n    const allLower = /^[a-z]+$/;\n    const firstCap = /^[A-Z][a-z]+$/;\n\n    return allCaps.test(word) || allLower.test(word) || firstCap.test(word);\n}\n\nconst result = detectCapitalUse($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          "USA",
          "FlaG",
          "leetcode",
          "Google"
        ],
        "outputs": [
          "true",
          "false",
          "true",
          "true"
        ]
      },
      "skeletons": {
        "c": "#include <stdbool.h>\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nbool detectCapitalUse(char* word) {\n    // Your logic goes here\n}\n",
        "python": "def detectCapitalUse(word):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function detectCapitalUse(word) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool detectCapitalUse(string word) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdbool.h>\n#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint main() {\n    char word[] = $args;\n    bool result = detectCapitalUse(word);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string word = $args;\n    bool result = detectCapitalUse(word);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
        "python_call": "word = $args\nprint(str(detectCapitalUse(word)))\n",
        "javascript_call": "const result = detectCapitalUse($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool detectCapitalUse(string word) {\n    bool allCaps = true, allLower = true;\n    for (char c : word) {\n        if (isupper(c)) {\n            allLower = false;\n        } else {\n            allCaps = false;\n        }\n    }\n    return allCaps || allLower || (isupper(word[0]) && !isupper(word[1]));\n}\n\nint main() {\n    string word = $args;\n    bool result = detectCapitalUse(word);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
      "title": "Detect Capital"
     },
     {
      "problem": "First Unique Character in a String",
      "function description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
      "sample code c": "#include <stdio.h>\n#include <string.h>\n\nint firstUniqChar(char* s) {\n    int charCount[26] = {0};\n    int len = strlen(s);\n\n    for (int i = 0; i < len; i++) {\n        charCount[s[i] - 'a']++;\n    }\n\n    for (int i = 0; i < len; i++) {\n        if (charCount[s[i] - 'a'] == 1) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nint main() {\n    char s[] = $args;\n    int result = firstUniqChar(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
      "sample code python": "def firstUniqChar(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for i, char in enumerate(s):\n        if char_count[char] == 1:\n            return i\n\n    return -1\n\ns = $args\nprint(firstUniqChar(s))\n",
      "sample code javascript": "function firstUniqChar(s) {\n    const charCount = new Map();\n    for (let char of s) {\n        charCount.set(char, (charCount.get(char) || 0) + 1);\n    }\n\n    for (let i = 0; i < s.length; i++) {\n        if (charCount.get(s[i]) === 1) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nconst result = firstUniqChar($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          "leetcode",
          "loveleetcode",
          "aabb"
        ],
        "outputs": [
          0,
          2,
          -1
        ]
      },
      "skeletons": {
        "c": "#include <stdio.h>\n#include <string.h>\n\nint firstUniqChar(char* s) {\n    // Your logic goes here\n}\n",
        "python": "def firstUniqChar(s):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function firstUniqChar(s) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint firstUniqChar(string s) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char s[] = $args;\n    int result = firstUniqChar(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = firstUniqChar(s);\n    cout << result << endl;\n    return 0;\n}\n",
        "python_call": "s = $args\nprint(firstUniqChar(s))\n",
        "javascript_call": "const result = firstUniqChar($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nint firstUniqChar(string s) {\n    unordered_map<char, int> charCount;\n    for (char c : s) {\n        charCount[c]++;\n    }\n\n    for (int i = 0; i < s.length(); i++) {\n        if (charCount[s[i]] == 1) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nint main() {\n    string s = $args;\n    int result = firstUniqChar(s);\n    cout << result << endl;\n    return 0;\n}\n",
      "title": "First Unique Character in a String"
     },
     {
      "problem": "Palindrome Number",
      "function description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
      "sample code c": "#include <stdbool.h>\n#include <stdio.h>\n\nbool isPalindrome(int x) {\n    if (x < 0) return false;\n    int original = x;\n    long long reversed = 0;\n    while (x > 0) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    return original == reversed;\n}\n\nint main() {\n    int x = $args;\n    bool result = isPalindrome(x);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
      "sample code python": "def isPalindrome(x):\n    if x < 0:\n        return False\n    original = x\n    reversed = 0\n    while x > 0:\n        reversed = reversed * 10 + x % 10\n        x //= 10\n    return original == reversed\n\nx = $args\nprint(str(isPalindrome(x)))\n",
      "sample code javascript": "function isPalindrome(x) {\n    if (x < 0) return false;\n    let original = x;\n    let reversed = 0;\n    while (x > 0) {\n        reversed = reversed * 10 + x % 10;\n        x = Math.floor(x / 10);\n    }\n    return original === reversed;\n}\n\nconst result = isPalindrome($args);\nconsole.log(result);\n",
      "sample code cpp": "#include <iostream>\nusing namespace std;\n\nbool isPalindrome(int x) {\n    if (x < 0) return false;\n    int original = x;\n    long long reversed = 0;\n    while (x > 0) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    return original == reversed;\n}\n\nint main() {\n    int x = $args;\n    bool result = isPalindrome(x);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
      "test cases": {
        "inputs": [
          121,
          -121,
          10
        ],
        "outputs": [
          "true",
          "false",
          "false"
        ]
      },
      "skeletons": {
        "c": "#include <stdbool.h>\n#include <stdio.h>\n\nbool isPalindrome(int x) {\n    // Your logic goes here\n}\n",
        "python": "def isPalindrome(x):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function isPalindrome(x) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\nusing namespace std;\n\nbool isPalindrome(int x) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdbool.h>\n#include <stdio.h>\n\nint main() {\n    int x = $args;\n    bool result = isPalindrome(x);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = $args;\n    bool result = isPalindrome(x);\n    cout << boolalpha << result << endl;\n    return 0;\n}\n",
        "python_call": "x = $args\nprint(str(isPalindrome(x)))\n",
        "javascript_call": "const result = isPalindrome($args);\nconsole.log(result);\n"
      },
      "title": "Palindrome Number"
     },
     {
      "problem": "Climbing Stairs",
      "function description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
      "sample code c": "#include <stdio.h>\n\nint climbStairs(int n) {\n    if (n <= 2) return n;\n    int a = 1, b = 2, c;\n    for (int i = 3; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nint main() {\n    int n = $args;\n    int result = climbStairs(n);\n    printf(\"%d\", result);\n    return 0;\n}\n",
      "sample code python": "def climbStairs(n):\n    if n <= 2:\n        return n\n    a, b = 1, 2\n    for i in range(3, n + 1):\n        a, b = b, a + b\n    return b\n\nn = $args\nprint(climbStairs(n))\n",
      "sample code javascript": "function climbStairs(n) {\n    if (n <= 2) return n;\n    let a = 1, b = 2, c;\n    for (let i = 3; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nconst result = climbStairs($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          2,
          3,
          4
        ],
        "outputs": [
          2,
          3,
          5
        ]
      },
      "skeletons": {
        "c": "#include <stdio.h>\n\nint climbStairs(int n) {\n    // Your logic goes here\n}\n",
        "python": "def climbStairs(n):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function climbStairs(n) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\nusing namespace std;\n\nint climbStairs(int n) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdio.h>\n\nint main() {\n    int n = $args;\n    int result = climbStairs(n);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    int result = climbStairs(n);\n    cout << result << endl;\n    return 0;\n}\n",
        "python_call": "n = $args\nprint(climbStairs(n))\n",
        "javascript_call": "const result = climbStairs($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\nusing namespace std;\n\nint climbStairs(int n) {\n    if (n <= 2) return n;\n    int a = 1, b = 2, c;\n    for (int i = 3; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nint main() {\n    int n = $args;\n    int result = climbStairs(n);\n    cout << result << endl;\n    return 0;\n}\n",
      "title": "Climbing Stairs"
     },
     {
      "problem": "Number of Steps to Reduce a Number to Zero",
      "function description": "Given an integer num, return the number of steps to reduce it to zero. In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",
      "sample code c": "#include <stdio.h>\n\nint numberOfSteps(int num) {\n    int steps = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            num /= 2;\n        } else {\n            num--;\n        }\n        steps++;\n    }\n    return steps;\n}\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    printf(\"%d\", result);\n    return 0;\n}\n",
      "sample code python": "def numberOfSteps(num):\n    steps = 0\n    while num > 0:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num -= 1\n        steps += 1\n    return steps\n\nnum = $args\nprint(numberOfSteps(num))\n",
      "sample code javascript": "function numberOfSteps(num) {\n    let steps = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            num /= 2;\n        } else {\n            num--;\n        }\n        steps++;\n    }\n    return steps;\n}\n\nconst result = numberOfSteps($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          14,
          8,
          123
        ],
        "outputs": [
          6,
          4,
          12
        ]
      },
      "skeletons": {
        "c": "#include <stdio.h>\n\nint numberOfSteps(int num) {\n    // Your logic goes here\n}\n",
        "python": "def numberOfSteps(num):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function numberOfSteps(num) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\nusing namespace std;\n\nint numberOfSteps(int num) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdio.h>\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    cout << result << endl;\n    return 0;\n}\n",
        "python_call": "num = $args\nprint(numberOfSteps(num))\n",
        "javascript_call": "const result = numberOfSteps($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\nusing namespace std;\n\nint numberOfSteps(int num) {\n    int steps = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n            num /= 2;\n        } else {\n            num--;\n        }\n        steps++;\n    }\n    return steps;\n}\n\nint main() {\n    int num = $args;\n    int result = numberOfSteps(num);\n    cout << result << endl;\n    return 0;\n}\n",
      "title": "Number of Steps to Reduce a Number to Zero"
     },
     {
      "problem": "Decode Ways",
      "function description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'. To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, '11106' can be mapped into 'AABF', '111', '06', or 'ABF'. Given a string s containing only digits, return the number of ways to decode it.",
      "sample code c": "#include <stdio.h>\n#include <string.h>\n\nint numDecodings(char* s) {\n    int n = strlen(s);\n    if (n == 0 || s[0] == '0') return 0;\n    int dp[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        int one = s[i - 1] - '0';\n        int two = (s[i - 2] - '0') * 10 + one;\n        dp[i] = 0;\n        if (one >= 1 && one <= 9) dp[i] += dp[i - 1];\n        if (two >= 10 && two <= 26) dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}\n\nint main() {\n    char s[] = $args;\n    int result = numDecodings(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
      "sample code python": "def numDecodings(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        one = int(s[i - 1])\n        two = int(s[i - 2:i])\n        if 1 <= one <= 9:\n            dp[i] += dp[i - 1]\n        if 10 <= two <= 26:\n            dp[i] += dp[i - 2]\n    return dp[n]\n\ns = $args\nprint(numDecodings(s))\n",
      "sample code javascript": "function numDecodings(s) {\n    if (!s || s[0] === '0') return 0;\n    const n = s.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    dp[1] = 1;\n    for (let i = 2; i <= n; i++) {\n        const one = parseInt(s[i - 1]);\n        const two = parseInt(s.slice(i - 2, i));\n        if (one >= 1 && one <= 9) dp[i] += dp[i - 1];\n        if (two >= 10 && two <= 26) dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}\n\nconst result = numDecodings($args);\nconsole.log(result);\n",
      "test cases": {
        "inputs": [
          "12",
          "226",
          "0",
          "1123"
        ],
        "outputs": [
          2,
          3,
          0,
          5
        ]
      },
      "skeletons": {
        "c": "#include <stdio.h>\n#include <string.h>\n\nint numDecodings(char* s) {\n    // Your logic goes here\n}\n",
        "python": "def numDecodings(s):\n    # Remove the pass and write your function logic here\n    pass",
        "javascript": "function numDecodings(s) {\n    // Your logic goes here\n}",
        "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint numDecodings(string s) {\n    // Your logic goes here\n}\n",
        "c_call": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char s[] = $args;\n    int result = numDecodings(s);\n    printf(\"%d\", result);\n    return 0;\n}\n",
        "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = numDecodings(s);\n    cout << result << endl;\n    return 0;\n}\n",
        "python_call": "s = $args\nprint(numDecodings(s))\n",
        "javascript_call": "const result = numDecodings($args);\nconsole.log(result);\n"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint numDecodings(string s) {\n    int n = s.length();\n    if (n == 0 || s[0] == '0') return 0;\n    vector<int> dp(n + 1);\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        int one = s[i - 1] - '0';\n        int two = (s[i - 2] - '0') * 10 + one;\n        dp[i] = 0;\n        if (one >= 1 && one <= 9) dp[i] += dp[i - 1];\n        if (two >= 10 && two <= 26) dp[i] += dp[i - 2];\n    }\n    return dp[n];\n}\n\nint main() {\n    string s = $args;\n    int result = numDecodings(s);\n    cout << result << endl;\n    return 0;\n}\n",
      "title": "Decode Ways"
     },
     {
      "problem": "Simplify Path",
      "function description": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path. In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\n\nThe canonical path should have the following format:\n\nThe path starts with a single slash '/'.\nAny two directories are separated by a single slash '/'.\nThe path does not end with a trailing '/'.\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\nReturn the simplified canonical path.\n",
      "sample code c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* simplifyPath(char* path) {\n    char* result = malloc(strlen(path) + 1);\n    char* stack[100];\n    int top = 0;\n    char* token = strtok(path, \"/\");\n    while (token != NULL) {\n        if (strcmp(token, \".\") == 0) {\n            // Do nothing\n        } else if (strcmp(token, \"..\") == 0) {\n            if (top > 0) {\n                top--;\n            }\n        } else {\n            stack[top++] = token;\n        }\n        token = strtok(NULL, \"/\");\n    }\n    if (top == 0) {\n        result[0] = '/';\n        result[1] = '\\0';\n    } else {\n        int len = 0;\n        for (int i = 0; i < top; i++) {\n            result[len++] = '/';\n            strcpy(result + len, stack[i]);\n            len += strlen(stack[i]);\n        }\n        result[len] = '\\0';\n    }\n    return result;\n}\n\nint main() {\n    char path[] = $args;\n    char* result = simplifyPath(path);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}\n",
      "sample code python": "def simplifyPath(path):\n    stack = []\n    parts = path.split('/')\n    for part in parts:\n        if part == '' or part == '.':\n            continue\n        elif part == '..':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(part)\n    return '/' + '/'.join(stack)\n\npath = $args\nprint(simplifyPath(path))",
      "sample code javascript": "var simplifyPath = function(path) {\n    let stack = [];\n    let parts = path.split('/');\n    for (let part of parts) {\n        if (part === '' || part === '.') {\n            continue;\n        } else if (part === '..') {\n            if (stack.length > 0) {\n                stack.pop();\n            }\n        } else {\n            stack.push(part);\n        }\n    }\n    return '/' + stack.join('/');\n};\n\nconst result = simplifyPath($args);\nconsole.log(result);",
      "test cases": {
          "inputs": [
              "/home/",
              "/../",
              "/home//foo/",
              "/a/./b/../../c/",
              "/a/../../b/../c//.//",
              "/a//b////c/d//././/.."
          ],
          "outputs": [
              "/home",
              "/",
              "/home/foo",
              "/c",
              "/c",
              "/a/b/c"
          ]
      },
      
      "skeletons": {
          "c": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* simplifyPath(char* path) {\n    // Your logic goes here\n}",
          "python": "def simplifyPath(path):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "var simplifyPath = function(path) {\n    // Your logic goes here\n};",
          "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring simplifyPath(string path) {\n    // Your logic goes here\n}",
          "c_call": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    char path[] = $args;\n    char* result = simplifyPath(path);\n    printf(\"%s\", result);\n    free(result);\n    return 0;\n}",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string path = $args;\n    string result = simplifyPath(path);\n    cout << result << endl;\n    return 0;\n}",
          "python_call": "path = $args\nprint(simplifyPath(path))",
          "javascript_call": "const result = simplifyPath($args);\nconsole.log(result);"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring simplifyPath(string path) {\n    vector<string> stack;\n    string result = \"\";\n    string temp = \"\";\n    for (int i = 0; i < path.length(); i++) {\n        if (path[i] == '/') {\n            if (temp == \".\") {\n                // Do nothing\n            } else if (temp == \"..\") {\n                if (!stack.empty()) {\n                    stack.pop_back();\n                }\n            } else if (!temp.empty()) {\n                stack.push_back(temp);\n            }\n            temp = \"\";\n        } else {\n            temp += path[i];\n        }\n    }\n    if (!temp.empty()) {\n        if (temp == \".\") {\n            // Do nothing\n        } else if (temp == \"..\") {\n            if (!stack.empty()) {\n                stack.pop_back();\n            }\n        } else {\n            stack.push_back(temp);\n        }\n    }\n    for (string s : stack) {\n        result += \"/\" + s;\n    }\n    if (result.empty()) {\n        result = \"/\";\n    }\n    return result;\n}\n\nint main() {\n    string path = $args;\n    string result = simplifyPath(path);\n    cout << result << endl;\n    return 0;\n}",
      "title": "Simplify Path"
      },
      {
        "problem": "Validate IP Address",
        "function description": "Given a string queryIP, return \"IPv4\" if the given input is a valid IPv4 address, \"IPv6\" if the given input is a valid IPv6 address, or \"Neither\" if the given input is not a valid IP address. A valid IPv4 address is an IP in the form 'x1.x2.x3.x4' where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, 192.168.1.1 and 192.168.1.0 are valid IPv4 addresses while 192.168.01.1, 192.168.1.00, and 192.168@1.1 are invalid IPv4 addresses.\n\nA valid IPv6 address is an IP in the form x1:x2:x3:x4:x5:x6:x7:x8 where:\n\n1 <= xi.length <= 4\nxi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\nLeading zeros are allowed in xi.\nFor example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334 and 2001:db8:85a3:0:0:8A2E:0370:7334 are valid IPv6 addresses, while 2001:0db8:85a3::8A2E:037j:7334 and 02001:0db8:85a3:0000:0000:8a2e:0370:7334 are invalid IPv6 addresses.\n",
        "sample code c": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n#define IPV4_SEGMENTS 4\n#define IPV6_SEGMENTS 8\n\nint isValidIPv4(char *ip) {\n    int segments = 0;\n    char *token = strtok(ip, \".\");\n    while (token != NULL) {\n        if (!isdigit(token[0]) || (strlen(token) > 1 && token[0] == '0'))\n            return 0;\n        int num = atoi(token);\n        if (num < 0 || num > 255)\n            return 0;\n        segments++;\n        token = strtok(NULL, \".\");\n    }\n    return segments == IPV4_SEGMENTS;\n}\n\nint isValidIPv6(char *ip) {\n    int segments = 0;\n    char *token = strtok(ip, \":\");\n    while (token != NULL) {\n        if (strlen(token) > 4)\n            return 0;\n        for (int i = 0; i < strlen(token); i++) {\n            if (!isxdigit(token[i]))\n                return 0;\n        }\n        segments++;\n        token = strtok(NULL, \":\");\n    }\n    return segments == IPV6_SEGMENTS;\n}\n\nchar *validIPAddress(char *queryIP) {\n    if (isValidIPv4(queryIP))\n        return \"IPv4\";\n    else if (isValidIPv6(queryIP))\n        return \"IPv6\";\n    else\n        return \"Neither\";\n}\n\nint main() {\n    char queryIP[] = $args;\n    char *result = validIPAddress(queryIP);\n    printf(\"%s\", result);\n    return 0;\n}",
        "sample code python": "def is_valid_ipv4(ip):\n    ip_segments = ip.split('.')\n    if len(ip_segments) != 4:\n        return False\n    for segment in ip_segments:\n        if (len(segment) > 1 and segment[0] == '0') or not segment.isdigit() or int(segment) < 0 or int(segment) > 255:\n            return False\n    return True\n\ndef is_valid_ipv6(ip):\n    ip_segments = ip.split(':')\n    if len(ip_segments) != 8:\n        return False\n    hex_digits = '0123456789abcdefABCDEF'\n    for segment in ip_segments:\n        if len(segment) > 4 or all(c in hex_digits for c in segment) is False:\n            return False\n    return True\n\ndef validIPAddress(queryIP):\n    if is_valid_ipv4(queryIP):\n        return \"IPv4\"\n    elif is_valid_ipv6(queryIP):\n        return \"IPv6\"\n    else:\n        return \"Neither\"\n\nqueryIP = $args\nprint(validIPAddress(queryIP))",
        "sample code javascript": "const isValidIPv4 = (ip) => {\n    const segments = ip.split('.');\n    if (segments.length !== 4) {\n        return false;\n    }\n    for (const segment of segments) {\n        if ((segment.length > 1 && segment[0] === '0') || !isFinite(parseInt(segment)) || parseInt(segment) < 0 || parseInt(segment) > 255) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isValidIPv6 = (ip) => {\n    const segments = ip.split(':');\n    if (segments.length !== 8) {\n        return false;\n    }\n    const hexDigits = '0123456789abcdefABCDEF';\n    for (const segment of segments) {\n        if (segment.length > 4 || segment.split('').some(c => !hexDigits.includes(c))) {\n            return false;\n        }\n    }\n    return true;\n};\n\nvar validIPAddress = function(queryIP) {\n    if (isValidIPv4(queryIP)) {\n        return \"IPv4\";\n    } else if (isValidIPv6(queryIP)) {\n        return \"IPv6\";\n    } else {\n        return \"Neither\";\n    }\n};\n\nconst result = validIPAddress($args);\nconsole.log(result);",
        "test cases": {
            "inputs": [
                "172.16.254.1",
                "2001:0db8:85a3:0:0:8A2E:0370:7334",
                "256.256.256.256",
                "2001:0db8:85a3:0:0:8A2E:0370:7334:"
            ],
            "outputs": [
                "IPv4",
                "IPv6",
                "Neither",
                "Neither"
            ]
        },
        "skeletons": {
            "c": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint isValidIPv4(char *ip) {\n    // Your logic goes here\n}\n\nint isValidIPv6(char *ip) {\n    // Your logic goes here\n}\n\nchar *validIPAddress(char *queryIP) {\n    // Your logic goes here\n}",
            "python": "def is_valid_ipv4(ip):\n    # Remove the pass and write your function logic here\n    pass\n\ndef is_valid_ipv6(ip):\n    # Remove the pass and write your function logic here\n    pass\n\ndef validIPAddress(queryIP):\n    # Remove the pass and write your function logic here\n    pass",
            "javascript": "const isValidIPv4 = (ip) => {\n    // Your logic goes here\n};\n\nconst isValidIPv6 = (ip) => {\n    // Your logic goes here\n};\n\nvar validIPAddress = function(queryIP) {\n    // Your logic goes here\n};",
            "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nstring validIPAddress(string queryIP) {\n    // Your logic goes here\n}",
            "c_call": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint main() {\n    char queryIP[] = $args;\n    char *result = validIPAddress(queryIP);\n    printf(\"%s\", result);\n    return 0;\n}",
            "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string queryIP = $args;\n    string result = validIPAddress(queryIP);\n    cout << result << endl;\n    return 0;\n}",
            "python_call": "queryIP = $args\nprint(validIPAddress(queryIP))",
            "javascript_call": "const result = validIPAddress($args);\nconsole.log(result);"
        },
        "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nbool isValidIPv4(string ip) {\n    vector<string> segments = {};\n    string segment = \"\";\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '.') {\n            if (segment.length() > 1 && segment[0] == '0') {\n                return false;\n            }\n            int num = stoi(segment);\n            if (num < 0 || num > 255) {\n                return false;\n            }\n            segments.push_back(segment);\n            segment = \"\";\n        } else {\n            segment += ip[i];\n        }\n    }\n    if (segment.length() > 1 && segment[0] == '0') {\n        return false;\n    }\n    int num = stoi(segment);\n    if (num < 0 || num > 255) {\n        return false;\n    }\n    segments.push_back(segment);\n    return segments.size() == 4;\n}\n\nbool isValidIPv6(string ip) {\n    vector<string> segments = {};\n    string segment = \"\";\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == ':') {\n            if (segment.length() > 4) {\n                return false;\n            }\n            for (char c : segment) {\n                if (!isxdigit(c)) {\n                    return false;\n                }\n            }\n            segments.push_back(segment);\n            segment = \"\";\n        } else {\n            segment += ip[i];\n        }\n    }\n    if (segment.length() > 4) {\n        return false;\n    }\n    for (char c : segment) {\n        if (!isxdigit(c)) {\n            return false;\n        }\n    }\n    segments.push_back(segment);\n    return segments.size() == 8;\n}\n\nstring validIPAddress(string queryIP) {\n    if (isValidIPv4(queryIP)) {\n        return \"IPv4\";\n    } else if (isValidIPv6(queryIP)) {\n        return \"IPv6\";\n    } else {\n        return \"Neither\";\n    }\n}\n\nint main() {\n    string queryIP = $args;\n    string result = validIPAddress(queryIP);\n    cout << result << endl;\n    return 0;\n}",
        "title": "Validate IP Address"
    },
    {
      "problem": "Longest Palindromic Subsequence",
      "function description": "Given a string s, find the length of the longest palindromic subsequence in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n",
      "sample code c": "#include <stdio.h>\n#include <string.h>\n\nint longestPalindromeSubseq(char * s) {\n    int n = strlen(s);\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    \n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    \n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if (s[i] == s[j]) {\n                dp[i][j] = dp[i+1][j-1] + 2;\n            } else {\n                dp[i][j] = fmax(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[0][n-1];\n}\n\nint main() {\n    char s[] = $args;\n    int result = longestPalindromeSubseq(s);\n    printf(\"%d\", result);\n    return 0;\n}",
      "sample code python": "def longestPalindromeSubseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n\ns = $args\nprint(longestPalindromeSubseq(s))",
      "sample code javascript": "var longestPalindromeSubseq = function(s) {\n    const n = s.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    \n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 0; i < n - len + 1; i++) {\n            const j = i + len - 1;\n            if (s[i] === s[j]) {\n                dp[i][j] = dp[i+1][j-1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[0][n-1];\n};\n\nconst result = longestPalindromeSubseq($args);\nconsole.log(result);",
      "test cases": {
          "inputs": [
              "bbbab",
              "cbbd"
          ],
          "outputs": [
              4,
              2
          ]
      },
      "skeletons": {
          "c": "#include <stdio.h>\n#include <string.h>\n\nint longestPalindromeSubseq(char * s) {\n    // Your logic goes here\n}",
          "python": "def longestPalindromeSubseq(s):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "var longestPalindromeSubseq = function(s) {\n    // Your logic goes here\n};",
          "cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint longestPalindromeSubseq(string s) {\n    // Your logic goes here\n}",
          "c_call": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char s[] = $args;\n    int result = longestPalindromeSubseq(s);\n    printf(\"%d\", result);\n    return 0;\n}",
          "cpp_call": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s = $args;\n    int result = longestPalindromeSubseq(s);\n    cout << result << endl;\n    return 0;\n}",
          "python_call": "s = $args\nprint(longestPalindromeSubseq(s))",
          "javascript_call": "const result = longestPalindromeSubseq($args);\nconsole.log(result);"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint longestPalindromeSubseq(string s) {\n    int n = s.length();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    \n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    \n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if (s[i] == s[j]) {\n                dp[i][j] = dp[i+1][j-1] + 2;\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[0][n-1];\n}\n\nint main() {\n    string s = $args;\n    int result = longestPalindromeSubseq(s);\n    cout << result << endl;\n    return 0;\n}",
      "title": "Longest Palindromic Subsequence"
    },
    {
      "problem": "Armstrong Number",
      "function description": "An Armstrong number is a number such that the sum of its digits raised to the power of the number of digits is equal to the number itself. Given an integer n, return true if it is an Armstrong number, and false otherwise.",
      "sample code c": "#include <stdio.h>\n#include <math.h>\n\nint isArmstrong(int n) {\n    int originalNum = n;\n    int numDigits = 0;\n    int sum = 0;\n    \n    // Count the number of digits\n    int temp = n;\n    while (temp != 0) {\n        numDigits++;\n        temp /= 10;\n    }\n    \n    // Calculate the sum of digits raised to the power of the number of digits\n    temp = n;\n    while (temp != 0) {\n        int digit = temp % 10;\n        \n        // Compute digit^numDigits using a loop\n        int power = 1;\n        for (int i = 0; i < numDigits; i++) {\n            power *= digit;\n        }\n        \n        sum += power;\n        temp /= 10;\n    }\n    \n    return originalNum == sum;\n}\n\n\nint main() {\n    int n = $args;\n    int result = isArmstrong(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n\n",
      "sample code python": "def isArmstrong(n):\n    original_num = n\n    num_digits = 0\n    sum_of_digits = 0\n    \n    # Count the number of digits\n    while n != 0:\n        num_digits += 1\n        n //= 10\n    \n    n = original_num\n    \n    # Calculate the sum of digits raised to the power of the number of digits\n    while n != 0:\n        digit = n % 10\n        sum_of_digits += digit ** num_digits\n        n //= 10\n    \n    return original_num == sum_of_digits\n\nn = $args\nprint(isArmstrong(n))",
      "sample code javascript": "var isArmstrong = function(n) {\n    const originalNum = n;\n    let numDigits = 0;\n    let sumOfDigits = 0;\n    \n    // Count the number of digits\n    while (n !== 0) {\n        numDigits++;\n        n = Math.floor(n / 10);\n    }\n    \n    n = originalNum;\n    \n    // Calculate the sum of digits raised to the power of the number of digits\n    while (n !== 0) {\n        const digit = n % 10;\n        sumOfDigits += Math.pow(digit, numDigits);\n        n = Math.floor(n / 10);\n    }\n    \n    return originalNum === sumOfDigits;\n};\n\nconst result = isArmstrong($args);\nconsole.log(result);",
      "test cases": {
          "inputs": [
              153,
              370,
              371,
              120,
              1253
          ],
          "outputs": [
              "true",
              "true",
              "true",
              "false",
              "false"
          ]
      },
      "skeletons": {
          "c": "#include <stdio.h>\n#include <math.h>\n\nint isArmstrong(int n) {\n    // Your logic goes here\n}",
          "python": "def isArmstrong(n):\n    # Remove the pass and write your function logic here\n    pass",
          "javascript": "var isArmstrong = function(n) {\n    // Your logic goes here\n};",
          "cpp": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool isArmstrong(int n) {\n    // Your logic goes here\n}",
          "c_call": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    int n = $args;\n    int result = isArmstrong(n);\n    printf(\"%s\", result ? \"True\" : \"False\");\n    return 0;\n}\n",
          "cpp_call": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint main() {\n    int n = $args;\n    bool result = isArmstrong(n);\n    cout << (result ? \"True\" : \"False\") << endl;  \n    return 0;\n}\n",
          "python_call": "n = $args\nprint(isArmstrong(n))",
          "javascript_call": "const result = isArmstrong($args);\nconsole.log(result);"
      },
      "sample code cpp": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Function to calculate the power of a number\nint power(int base, int exponent) {\n    int result = 1;\n    for (int i = 0; i < exponent; ++i) {\n        result *= base;\n    }\n    return result;\n}\n\nbool isArmstrong(int n) {\n    int originalNum = n;\n    int numDigits = 0;\n    int sumOfDigits = 0;\n    \n    // Count the number of digits\n    int temp = n;\n    while (temp != 0) {\n        numDigits++;\n        temp /= 10;\n    }\n    \n    // Calculate the sum of digits raised to the power of the number of digits\n    temp = n;\n    while (temp != 0) {\n        int digit = temp % 10;\n        sumOfDigits += power(digit, numDigits);\n        temp /= 10;\n    }\n    \n    return originalNum == sumOfDigits;\n}\n\nint main() {\n    int n = $args;\n    bool result = isArmstrong(n);\n    cout << (result ? \"True\" : \"False\") << endl;  \n    return 0;\n}\n\n",
      "title": "Armstrong Number"
    }

]
