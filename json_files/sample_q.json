{
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "example": "Given an array nums = [2,7,11,15] and target = 9, the output should be [0,1] because nums[0] + nums[1] = 2 + 7 = 9.",
    "level": "Easy",
    "tags": [
        "Array",
        "Two Pointers"
    ],
    "test_cases": {
        "inputs": [
            [
                [
                    2,
                    7,
                    11,
                    15
                ],
                9
            ],
            [
                [
                    3,
                    2,
                    4
                ],
                6
            ],
            [
                [
                    3,
                    3
                ],
                6
            ],
            [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                9
            ],
            [
                [
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                70
            ],
            [
                [
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                0
            ],
            [
                [
                    -1,
                    -2,
                    -3,
                    -4,
                    -5
                ],
                -8
            ],
            [
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                600
            ],
            [
                [
                    1,
                    3,
                    5,
                    7,
                    9
                ],
                12
            ],
            [
                [
                    2,
                    4,
                    6,
                    8,
                    10
                ],
                14
            ],
            [
                [
                    9,
                    8,
                    7,
                    6,
                    5
                ],
                14
            ],
            [
                [
                    5,
                    10,
                    15,
                    20,
                    25
                ],
                30
            ],
            [
                [
                    1,
                    1,
                    1,
                    1,
                    1
                ],
                2
            ],
            [
                [
                    2,
                    2,
                    2,
                    2,
                    2
                ],
                4
            ],
            [
                [
                    3,
                    6,
                    9,
                    12,
                    15
                ],
                18
            ],
            [
                [
                    4,
                    8,
                    12,
                    16,
                    20
                ],
                24
            ],
            [
                [
                    5,
                    5,
                    5,
                    5,
                    5
                ],
                10
            ],
            [
                [
                    6,
                    12,
                    18,
                    24,
                    30
                ],
                36
            ],
            [
                [
                    7,
                    14,
                    21,
                    28,
                    35
                ],
                42
            ],
            [
                [
                    8,
                    16,
                    24,
                    32,
                    40
                ],
                48
            ]
        ],
        "outputs": [
            [
                0,
                1
            ],
            [
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                2,
                4
            ],
            [
                1,
                3
            ],
            [
                0,
                1
            ],
            [
                1,
                4
            ],
            [
                1,
                3
            ],
            [
                1,
                3
            ],
            [
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                0,
                3
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                2,
                4
            ],
            [
                1,
                3
            ],
            [
                0,
                4
            ],
            [
                1,
                3
            ],
            [
                0,
                2
            ],
            [
                1,
                3
            ]
        ]
    },
    "sample_code": {
        "c++": "#include <vector>\n#include <unordered_map>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n    std::unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        if (map.find(complement) != map.end()) {\n            return {map[complement], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n",
        "java": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}\n",
        "python": "def twoSum(nums, target):\n    map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in map:\n            return [map[complement], i]\n        map[num] = i\n    return []\n",
        "javascript": "function twoSum(nums, target) {\n    const map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (map.has(complement)) {\n            return [map.get(complement), i];\n        }\n        map.set(nums[i], i);\n    }\n    return [];\n}\n",
        "explanation": "The algorithm leverages a hash map (unordered_map in C++, HashMap in Java, dictionary in Python, and Map in JavaScript). It iterates through the given 'nums' array and calculates the complementary value (target - current value). If the complementary value is already in the hash map, it means that we found a solution, and we return those indices. If the complement is not in the hash map, we store the current element in the hash map with its index. If the algorithm doesn't find the solution, it returns an empty array or throws an exception (in Java).\n\nThis approach has a time complexity of O(n) and a space complexity of O(n) as well."
    },
    "structure": {
        "c++": "#include <vector>\n#include <unordered_map>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n    // Your code here\n}\n",
        "java": "import java.util.HashMap;\nimport java.util.Map;\n\npublic int[] twoSum(int[] nums, int target) {\n    // Your code here\n}\n",
        "python": "def twoSum(nums, target):\n    # Your code here\n\n",
        "javascript": "function twoSum(nums, target) {\n    // Your code here\n}\n"
    },
    "call_functions": {
        "c++": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nint main() {\n    std::vector<int> nums =$args;\n    int target = $args;\n    std::vector<int> result = twoSum(nums, target);\n    for (int i = 0; i < result.size(); i++) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n    return 0;\n}",
        "python": "if __name__ == \"__main__\":\n    inputs =  $args\n    nums = inputs[0]\n    target = inputs[1]\n    result = twoSum(nums, target)\n    print(result)",
        "javascript": "function main() {\n    let inputs = $args\n    const nums = inputs[0];\n    const target = inputs[1];\n    const result = twoSum(nums, target);\n    console.log(result);\n}",
        "java": "public static void main(String[] args) {\n    int[] nums = $args;\n    int target = $args;\n    int[] result = twoSum(nums, target);\n    System.out.println(Arrays.toString(result));\n}"
    },
    "Qid": "1"
}